[
  {
    "conversation_hash": "dc60715264a5078cf4f9f4526aa7ae43",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "TextField(\n    value = stock.toString(),\n    onValueChange = { newText: String ->\n        stock = newText.toIntOrNull() ?: item.stock\n    },\n    label = { Text(\"Stock\") },\n    keyboardType = KeyboardType.Number\n)\nTextField(\n    value = price.toString(),\n    onValueChange = { newText: String ->\n        price = newText.toDoubleOrNull() ?: item.price ?: 0.0\n    },\n    label = { Text(\"Price\") },\n    keyboardType = KeyboardType.Number\n)",
    "filename": "dc60715264a5078cf4f9f4526aa7ae43_3.kt"
  },
  {
    "conversation_hash": "dc60715264a5078cf4f9f4526aa7ae43",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun EditItemDialog(\n    item: InventoryItem,\n    onConfirm: (InventoryItem) -> Unit,\n    onCancel: () -> Unit\n) {\n    // maintain state for editable fields\n    var stock by remember { mutableStateOf(item.stock) }\n    var price by remember { mutableStateOf(item.price ?: 0.0) }\n\n    AlertDialog(\n        onDismissRequest = onCancel,\n        title = { Text(text = \"Edit Item\") },\n        text = {\n            Column {\n                TextField(\n                    value = stock.toString(),\n                    onValueChange = { newText: String ->\n                        stock = newText.toIntOrNull() ?: item.stock\n                    },\n                    label = { Text(\"Stock\") }, // Corrected usage of label\n                    keyboardType = KeyboardType.Number\n                )\n                TextField(\n                    value = price.toString(),\n                    onValueChange = { newText: String ->\n                        price = newText.toDoubleOrNull() ?: item.price ?: 0.0\n                    },\n                    label = { Text(\"Price\") }, // Corrected usage of label\n                    keyboardType = KeyboardType.Number\n                )\n            }\n        },\n        confirmButton = {\n            Button(\n                onClick = {\n                    val updatedItem = item.copy(\n                        stock = stock,\n                        price = price\n                    )\n                    onConfirm(updatedItem)\n                }\n            ) {\n                Text(\"Confirm\")\n            }\n        },\n        dismissButton = {\n            Button(onClick = onCancel) {\n                Text(\"Cancel\")\n            }\n        }\n    )\n}",
    "filename": "dc60715264a5078cf4f9f4526aa7ae43_4.kt"
  },
  {
    "conversation_hash": "dc60715264a5078cf4f9f4526aa7ae43",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.Column",
      "androidx.compose.foundation.text.KeyboardActions",
      "androidx.compose.foundation.text.KeyboardOptions",
      "androidx.compose.material3.AlertDialog",
      "androidx.compose.material3.Button",
      "androidx.compose.material3.Text",
      "androidx.compose.material3.TextField",
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.getValue",
      "androidx.compose.runtime.mutableStateOf",
      "androidx.compose.runtime.remember",
      "androidx.compose.runtime.setValue",
      "androidx.compose.ui.text.input.ImeAction",
      "androidx.compose.ui.text.input.KeyboardType"
    ],
    "code": "import androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.input.KeyboardType\n\n@Composable\nfun EditItemDialog(\n    item: InventoryItem,\n    onConfirm: (InventoryItem) -> Unit,\n    onCancel: () -> Unit\n) {\n    // maintain state for editable fields\n    var stock by remember { mutableStateOf(item.stock) }\n    var price by remember { mutableStateOf(item.price ?: 0.0) }\n\n    AlertDialog(\n        onDismissRequest = onCancel,\n        title = { Text(text = \"Edit Item\") },\n        text = {\n            Column {\n                TextField(\n                    value = stock.toString(),\n                    onValueChange = { newText ->\n                        stock = newText.toIntOrNull() ?: item.stock\n                    },\n                    supportingText = { Text(\"Stock\") },\n                    keyboardOptions = KeyboardOptions(\n                        keyboardType = KeyboardType.Number,\n                        imeAction = ImeAction.Done\n                    ),\n                    keyboardActions = KeyboardActions(onDone = { /*Perform an action*/ })\n                )\n                TextField(\n                    value = price.toString(),\n                    onValueChange = { newText ->\n                        price = newText.toDoubleOrNull() ?: item.price ?: 0.0\n                    },\n                    supportingText = { Text(\"Price\") },\n                    keyboardOptions = KeyboardOptions(\n                        keyboardType = KeyboardType.Number,\n                        imeAction = ImeAction.Done\n                    ),\n                    keyboardActions = KeyboardActions(onDone = { /*Perform an action*/ })\n                )\n            }\n        },\n        confirmButton = {\n            Button(\n                onClick = {\n                    val updatedItem = item.copy(\n                        stock = stock,\n                        price = price\n                    )\n                    onConfirm(updatedItem)\n                }\n            ) {\n                Text(\"Confirm\")\n            }\n        },\n        dismissButton = {\n            Button(onClick = onCancel) {\n                Text(\"Cancel\")\n            }\n        }\n    )\n}",
    "filename": "dc60715264a5078cf4f9f4526aa7ae43_5.kt"
  },
  {
    "conversation_hash": "dc60715264a5078cf4f9f4526aa7ae43",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun EditItemDialog(\n    item: InventoryItem,\n    onConfirm: (InventoryItem) -> Unit,\n    onCancel: () -> Unit\n) {\n    // maintain state for editable fields\n    var stockValue by remember { mutableStateOf(TextFieldValue(stock.toString())) }\n    var price by remember { mutableStateOf(item.price ?: 0.0) }\n\n    AlertDialog(\n        onDismissRequest = onCancel,\n        title = { Text(text = \"Edit Item\") },\n        text = {\n            Column {\n                TextField(\n                    value = stockValue,\n                    onValueChange = { newText ->\n                        val newIntValue = newText.text.toIntOrNull()\n                        stock = newIntValue ?: 0\n                        stockValue = newText.copy(\n                            text = newIntValue?.toString() ?: \"\"\n                        )\n                    },\n                    supportingText = { Text(\"Stock\") },\n                    keyboardOptions = KeyboardOptions(\n                        keyboardType = KeyboardType.Number,\n                        imeAction = ImeAction.Done\n                    ),\n                    keyboardActions = KeyboardActions(onDone = { })\n                )\n                // ... rest of the code ...",
    "filename": "dc60715264a5078cf4f9f4526aa7ae43_6.kt"
  },
  {
    "conversation_hash": "dc60715264a5078cf4f9f4526aa7ae43",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [
      "java.text.SimpleDateFormat",
      "java.util."
    ],
    "code": "import java.text.SimpleDateFormat\nimport java.util.*\n\nobject DateUtils {\n    private val currentDate = Calendar.getInstance()\n\n    fun currentYear(): String {\n        return currentDate[Calendar.YEAR].toString()\n    }\n\n    fun currentMonth(): String {\n        val dateFormat = SimpleDateFormat(\"MMMyyyy\", Locale.getDefault())\n        return dateFormat.format(currentDate.time)\n    }\n\n    fun currentWeek(): String {\n        val weekNum = currentDate[Calendar.WEEK_OF_YEAR]\n        val dateFormat = SimpleDateFormat(\"MMMyyyy\", Locale.getDefault())\n        return \"Week$weekNum${dateFormat.format(currentDate.time)}\"\n    }\n\n    fun currentDay(): String {\n        val dateFormat = SimpleDateFormat(\"yyyyMMdd\", Locale.getDefault())\n        return dateFormat.format(currentDate.time)\n    }\n}",
    "filename": "dc60715264a5078cf4f9f4526aa7ae43_12.kt"
  },
  {
    "conversation_hash": "dc60715264a5078cf4f9f4526aa7ae43",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [
      "java.text.SimpleDateFormat",
      "java.util."
    ],
    "code": "import java.text.SimpleDateFormat\nimport java.util.*\n\nobject DateUtils {\n    private val currentDate = Calendar.getInstance()\n\n    fun currentYear(): String {\n        return currentDate[Calendar.YEAR].toString()\n    }\n\n    fun currentMonth(): String {\n        val dateFormat = SimpleDateFormat(\"MMM_yyyy\", Locale.getDefault())\n        return dateFormat.format(currentDate.time)\n    }\n\n    fun currentWeek(): String {\n        val weekNum = currentDate[Calendar.WEEK_OF_YEAR]\n        val dateFormat = SimpleDateFormat(\"Week_\" + weekNum + \"_MMM_yyyy\", Locale.getDefault())\n        return dateFormat.format(currentDate.time)\n    }\n\n    fun currentDay(): String {\n        val dateFormat = SimpleDateFormat(\"EEEE_dd_MMM_yyyy\", Locale.getDefault())\n        return dateFormat.format(currentDate.time)\n    }\n}",
    "filename": "dc60715264a5078cf4f9f4526aa7ae43_16.kt"
  },
  {
    "conversation_hash": "dc60715264a5078cf4f9f4526aa7ae43",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [
      "java.text.SimpleDateFormat",
      "java.util."
    ],
    "code": "import java.text.SimpleDateFormat\nimport java.util.*\n\nobject DateUtils {\n    private val currentDate = Calendar.getInstance()\n\n    fun currentYear(): String {\n        return currentDate[Calendar.YEAR].toString()\n    }\n\n    fun currentMonth(): String {\n        val dateFormat = SimpleDateFormat(\"MMM_yyyy\", Locale.getDefault())\n        return dateFormat.format(currentDate.time)\n    }\n\n    fun currentWeek(): String {\n        val weekNum = currentDate[Calendar.WEEK_OF_YEAR]\n        val dateFormat = SimpleDateFormat(\"MMM_yyyy\", Locale.getDefault())\n        return \"Week_${weekNum}_${dateFormat.format(currentDate.time)}\"\n    }\n\n    fun currentDay(): String {\n        val dateFormat = SimpleDateFormat(\"EEEE_dd_MMM_yyyy\", Locale.getDefault())\n        return dateFormat.format(currentDate.time)\n    }\n}",
    "filename": "dc60715264a5078cf4f9f4526aa7ae43_17.kt"
  },
  {
    "conversation_hash": "bb582bcd378265a1cbb8115849167b32",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "TextField(\n    value = stock?.toString() ?: \"\",\n    onValueChange = { newText ->\n        stock = newText.toIntOrNull()\n    },\n    supportingText = { Text(\"Stock\") },\n    keyboardOptions = KeyboardOptions(\n        keyboardType = KeyboardType.Number,\n        imeAction = ImeAction.Done\n    ),\n    keyboardActions = KeyboardActions(onDone = { })\n)",
    "filename": "bb582bcd378265a1cbb8115849167b32_2.kt"
  },
  {
    "conversation_hash": "bb582bcd378265a1cbb8115849167b32",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun currentWeek(): String {\n    val weekNum = currentDate[Calendar.WEEK_OF_YEAR]\n    val year = currentDate[Calendar.YEAR]\n    val dateFormat = SimpleDateFormat(\"w/yyyy\", Locale.getDefault())\n    return \"Week_\" + dateFormat.format(currentDate.time)\n}",
    "filename": "bb582bcd378265a1cbb8115849167b32_5.kt"
  },
  {
    "conversation_hash": "bb582bcd378265a1cbb8115849167b32",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun currentWeek(): String {\n    // Get week number and month abbreviation\n    val weekNum = currentDate[Calendar.WEEK_OF_YEAR]\n    val month = currentDate[Calendar.MONTH]\n    val monthAbbr = DateFormatSymbols(Locale.getDefault()).shortMonths[month]\n\n    // Build date format and format current date\n    val dateFormat = SimpleDateFormat(\"w_${monthAbbr}_yyyy\", Locale.getDefault())\n    val formattedDate = dateFormat.format(currentDate.time)\n\n    // Add prefix and suffix to formatted date\n    return \"Week_$formattedDate\"\n}",
    "filename": "bb582bcd378265a1cbb8115849167b32_6.kt"
  },
  {
    "conversation_hash": "e2eaa1c57100b28647c38258259d8b3a",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.text.SimpleDateFormat",
      "java.util.Calendar",
      "java.util.Date",
      "java.util.Locale"
    ],
    "code": "import java.text.SimpleDateFormat\nimport java.util.Calendar\nimport java.util.Locale\nimport java.util.Date\n\nfun main() {\n    println(currentWeek())\n}\n\nfun currentWeek(): String {\n    val currentDate = Calendar.getInstance()\n    val weekNum = currentDate[Calendar.WEEK_OF_YEAR]\n    val dateFormat = SimpleDateFormat(\"Week_\" + weekNum + \"_MMM_yyyy\", Locale.getDefault())\n    return dateFormat.format(currentDate.time)\n}",
    "filename": "e2eaa1c57100b28647c38258259d8b3a_0.kt"
  },
  {
    "conversation_hash": "e2eaa1c57100b28647c38258259d8b3a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "com.google.android.gms.tasks.Task",
      "java.lang.Exception"
    ],
    "code": "import com.google.android.gms.tasks.Task\nimport java.lang.Exception\n\nprivate fun handleTask(task: Task<Void>, successMessage: String, failureMessage: String) {\n    task.addOnSuccessListener {\n        Log.d(\"TAG\", successMessage)\n    }.addOnFailureListener { exception ->\n        Log.e(\"TAG\", failureMessage, exception)\n    }\n}",
    "filename": "e2eaa1c57100b28647c38258259d8b3a_1.kt"
  },
  {
    "conversation_hash": "e2eaa1c57100b28647c38258259d8b3a",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "com.google.firebase.firestore.FirebaseFirestore"
    ],
    "code": "import com.google.firebase.firestore.FirebaseFirestore\n\nval newItemName = \"CBA\"\nval newItemQuantity = 1\nval newExpensesValue = 100\nval userId = \"your_user_id\"\n\nval db = FirebaseFirestore.getInstance()\nval docRef = db.collection(\"expenses\").document(userId)\n\ndocRef.get()\n    .addOnSuccessListener { document ->\n        if (document.exists()) {\n            val names = document.get(\"name\") as MutableList<String>\n            val quantities = document.get(\"quantity\") as MutableList<Int>\n            val expenses = document.get(\"expenses\") as MutableList<Int>\n\n            var itemFound = false\n            var itemIndex = -1\n            names.forEachIndexed { index, itemName ->\n                if (itemName == newItemName) {\n                  itemFound = true\n                  itemIndex = index\n                }\n            }\n\n            if (itemFound) {\n                quantities[itemIndex] += newItemQuantity\n                expenses[itemIndex] += newExpensesValue\n            } else {\n                names.add(newItemName)\n                quantities.add(newItemQuantity)\n                expenses.add(newExpensesValue)\n            }\n\n            val updateData = hashMapOf(\n                \"name\" to names,\n                \"quantity\" to quantities,\n                \"expenses\" to expenses\n            )\n\n            docRef.update(updateData)\n                .addOnSuccessListener {\n                    Log.d(\"TAG\", \"Document updated successfully\")\n                }\n                .addOnFailureListener { exception ->\n                    Log.e(\"TAG\", \"Error updating document\", exception)\n                }\n        } else {\n            Log.d(\"TAG\", \"No such document\")\n        }\n    }\n    .addOnFailureListener { exception ->\n        Log.e(\"TAG\", \"Error getting the document\", exception)\n    }",
    "filename": "e2eaa1c57100b28647c38258259d8b3a_5.kt"
  },
  {
    "conversation_hash": "e2eaa1c57100b28647c38258259d8b3a",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "com.google.firebase.firestore.FirebaseFirestore"
    ],
    "code": "import com.google.firebase.firestore.FirebaseFirestore\n\nfun updateDocumentWithNewItem(\n    userId: String,\n    collectionName: String,\n    documentId: String,\n    newItemName: String,\n    newItemQuantity: Int,\n    newExpensesValue: Int\n) {\n    val db = FirebaseFirestore.getInstance()\n    val docRef = db.collection(\"expenses\").document(userId).collection(collectionName).document(documentId)\n\n    docRef.get()\n        .addOnSuccessListener { document ->\n            if (document.exists()) {\n                val names = document.get(\"name\") as MutableList<String>\n                val quantities = document.get(\"quantity\") as MutableList<Int>\n                val expenses = document.get(\"expenses\") as MutableList<Int>\n\n                var itemFound = false\n                var itemIndex = -1\n                names.forEachIndexed { index, itemName ->\n                    if (itemName == newItemName) {\n                        itemFound = true\n                        itemIndex = index\n                    }\n                }\n\n                if (itemFound) {\n                    quantities[itemIndex] += newItemQuantity\n                    expenses[itemIndex] += newExpensesValue\n                } else {\n                    names.add(newItemName)\n                    quantities.add(newItemQuantity)\n                    expenses.add(newExpensesValue)\n                }\n\n                val updateData = hashMapOf(\n                    \"name\" to names,\n                    \"quantity\" to quantities,\n                    \"expenses\" to expenses\n                )\n\n                docRef.update(updateData)\n                    .addOnSuccessListener {\n                        Toast.makeText(context, \"Berhasil - $documentId\", Toast.LENGTH_SHORT).show()\n                    }\n                    .addOnFailureListener { exception ->\n                        Toast.makeText(context, \"Gagal - $documentId\", Toast.LENGTH_SHORT).show()\n                    }\n            } else {\n                Log.d(\"TAG\", \"No such document\")\n            }\n        }\n        .addOnFailureListener { exception ->\n            Log.e(\"TAG\", \"Error getting the document\", exception)\n        }\n}\n\n// Usage\nval newItemName = \"CBA\"\nval newItemQuantity = 1\nval newExpensesValue = 100\nval userId = \"your_user_id\"\n\nupdateDocumentWithNewItem(userId, \"yearly\", currentDate[Calendar.YEAR].toString(), newItemName, newItemQuantity, newExpensesValue)\nupdateDocumentWithNewItem(userId, \"monthly\", currentMonth(), newItemName, newItemQuantity, newExpensesValue)\nupdateDocumentWithNewItem(userId, \"weekly\", currentWeek(), newItemName, newItemQuantity, newExpensesValue)\nupdateDocumentWithNewItem(userId, \"daily\", currentDay(), newItemName, newItemQuantity, newExpensesValue)",
    "filename": "e2eaa1c57100b28647c38258259d8b3a_6.kt"
  },
  {
    "conversation_hash": "e2eaa1c57100b28647c38258259d8b3a",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "if (document.exists()) {\n    val namesArray = document.get(\"name\")?.let { (it as List<*>).toTypedArray() as Array<String> }\n    val quantitiesArray =\n        document.get(\"quantity\")?.let { (it as List<*>).toTypedArray() as Array<Int> }\n    val expensesArray =\n        document.get(\"expenses\")?.let { (it as List<*>).toTypedArray() as Array<Double> }\n\n    if (namesArray != null && quantitiesArray != null && expensesArray != null) {\n        val names = namesArray.toMutableList()\n        val quantities = quantitiesArray.toMutableList()\n        val expenses = expensesArray.toMutableList()\n\n        // The rest of the code goes here ...\n    } else {\n        Log.d(\"TAG\", \"Error processing document data\")\n    }\n} else {\n    Log.d(\"TAG\", \"No such document\")\n}",
    "filename": "e2eaa1c57100b28647c38258259d8b3a_7.kt"
  },
  {
    "conversation_hash": "e2eaa1c57100b28647c38258259d8b3a",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "if (document.exists()) {\n    val names = document.toObject(object : TypeToken<Map<String, List<String>>>() {}.type)[\"name\"]?.toMutableList()\n    val quantities = document.toObject(object : TypeToken<Map<String, List<Int>>>() {}.type)[\"quantity\"]?.toMutableList()\n    val expenses = document.toObject(object : TypeToken<Map<String, List<Double>>>() {}.type)[\"expenses\"]?.toMutableList()\n\n    if (names != null && quantities != null && expenses != null) {\n        // The rest of the code goes here ...\n    } else {\n        Log.d(\"TAG\", \"Error processing document data\")\n    }\n} else {\n    Log.d(\"TAG\", \"No such document\")\n}",
    "filename": "e2eaa1c57100b28647c38258259d8b3a_8.kt"
  },
  {
    "conversation_hash": "e2eaa1c57100b28647c38258259d8b3a",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "if (document.exists()) {\n    val names = document.get(\"name\") as? List<String> ?: mutableListOf()\n    val quantities = document.get(\"quantity\") as? List<Int> ?: mutableListOf()\n    val expenses = document.get(\"expenses\") as? List<Double> ?: mutableListOf()\n    \n    // Mutable conversion\n    val mutableNames = names.toMutableList()\n    val mutableQuantities = quantities.toMutableList()\n    val mutableExpenses = expenses.toMutableList()\n\n    // The rest of the code goes here ...\n} else {\n    Log.d(\"TAG\", \"No such document\")\n}",
    "filename": "e2eaa1c57100b28647c38258259d8b3a_10.kt"
  },
  {
    "conversation_hash": "e2eaa1c57100b28647c38258259d8b3a",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [
      "com.google.firebase.firestore.DocumentSnapshot"
    ],
    "code": "import com.google.firebase.firestore.DocumentSnapshot\n\nfun <T> getListFromDocument(document: DocumentSnapshot, field: String): MutableList<T> {\n    return (document.get(field) as? List<T>)?.toMutableList() ?: mutableListOf()\n}",
    "filename": "e2eaa1c57100b28647c38258259d8b3a_11.kt"
  },
  {
    "conversation_hash": "e2eaa1c57100b28647c38258259d8b3a",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "if (document.exists()) {\n    val names = getListFromDocument<String>(document, \"name\")\n    val quantities = getListFromDocument<Int>(document, \"quantity\")\n    val expenses = getListFromDocument<Double>(document, \"expenses\")\n\n    // The rest of the code goes here ...\n} else {\n    Log.d(\"TAG\", \"No such document\")\n}",
    "filename": "e2eaa1c57100b28647c38258259d8b3a_12.kt"
  },
  {
    "conversation_hash": "e2eaa1c57100b28647c38258259d8b3a",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [],
    "code": "// ...\nval mutableNames = names.toMutableList()\nval mutableQuantities = quantities.toMutableList()\nval mutableExpenses = expenses.toMutableList()\n\n// ...\n\n// Calculate the total expenses\nval totalExpenses = mutableExpenses.sum()\n\nval updateData: Map<String, Any> = hashMapOf(\n    \"name\" to mutableNames,\n    \"quantity\" to mutableQuantities,\n    \"expenses\" to mutableExpenses,\n    \"totalExpenses\" to totalExpenses\n)\n\ndocRef.update(updateData)\n    .addOnSuccessListener {\n        Log.d(\"TAG\", \"Document updated successfully\")\n    }\n    .addOnFailureListener { exception ->\n        Log.e(\"TAG\", \"Error updating document\", exception)\n    }",
    "filename": "e2eaa1c57100b28647c38258259d8b3a_15.kt"
  },
  {
    "conversation_hash": "db629e41893685545e1030da821473c0",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun initUserExpenses(\n    name: String,\n    quantity: Int,\n    expense: Double,\n    collectionName: String,\n    documentId: String\n) {\n    val db = FirebaseFirestore.getInstance()\n    val docRef = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(collectionName)\n        .document(documentId)\n\n    val initData = mapOf(\n        \"name\" to name,\n        \"quantity\" to quantity,\n        \"expenses\" to expense\n    )\n\n    db.runTransaction { transaction ->\n        val document = transaction.get(docRef)\n\n        if (!document.exists()) {\n            // Create the document if it doesn't exist\n            transaction.set(docRef, initData)\n        } else {\n            // Update the existing document\n            val names = document.getList<String>(\"name\") ?: emptyList()\n            val quantities = document.getList<Int>(\"quantity\") ?: emptyList()\n            val expenses = document.getList<Double>(\"expenses\") ?: emptyList()\n\n            val itemIndex = names.indexOf(name)\n\n            if (itemIndex != -1) {\n                // Update existing item\n                val updatedQuantities = quantities.toMutableList()\n                updatedQuantities[itemIndex] += quantity\n\n                val updatedExpenses = expenses.toMutableList()\n                updatedExpenses[itemIndex] += expense\n\n                // Compute the total expenses\n                val totalExpenses = updatedExpenses.sum()\n\n                // Update the document\n                transaction.update(docRef, mapOf(\n                    \"quantity\" to updatedQuantities,\n                    \"expenses\" to updatedExpenses,\n                    \"total\" to totalExpenses\n                ))\n            } else {\n                // Add new item\n                val updatedNames = names.toMutableList()\n                updatedNames.add(name)\n\n                val updatedQuantities = quantities.toMutableList()\n                updatedQuantities.add(quantity)\n\n                val updatedExpenses = expenses.toMutableList()\n                updatedExpenses.add(expense)\n\n                // Compute the total expenses\n                val totalExpenses = updatedExpenses.sum()\n\n                // Update the document\n                transaction.update(docRef, mapOf(\n                    \"name\" to updatedNames,\n                    \"quantity\" to updatedQuantities,\n                    \"expenses\" to updatedExpenses,\n                    \"total\" to totalExpenses\n                ))\n            }\n        }\n\n        null\n    }\n    .addOnSuccessListener {\n        Log.d(\"TAG\", \"Document updated successfully\")\n    }\n    .addOnFailureListener { exception ->\n        Log.e(\"TAG\", \"Error updating document\", exception)\n    }\n}",
    "filename": "db629e41893685545e1030da821473c0_1.kt"
  },
  {
    "conversation_hash": "db629e41893685545e1030da821473c0",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun initUserExpenses(\n    name: String,\n    quantity: Int,\n    expense: Double,\n    collectionName: String,\n    documentId: String\n) {\n    val db = FirebaseFirestore.getInstance()\n    val docRef = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(collectionName)\n        .document(documentId)\n\n    db.runTransaction { transaction ->\n        val document = transaction.get(docRef)\n\n        if (!document.exists()) {\n            // Create the document if it doesn't exist\n            transaction.set(docRef, mapOf(\n                \"name\" to listOf(name),\n                \"quantity\" to listOf(quantity),\n                \"expenses\" to listOf(expense),\n                \"total\" to expense\n            ))\n        } else {\n            // Update the existing document\n            val names = document.getList<String>(\"name\") ?: emptyList()\n            val quantities = document.getList<Int>(\"quantity\") ?: emptyList()\n            val expenses = document.getList<Double>(\"expenses\") ?: emptyList()\n\n            val itemIndex = names.indexOf(name)\n\n            if (itemIndex != -1) {\n                // Update existing item\n                val updatedQuantities = quantities.toMutableList()\n                updatedQuantities[itemIndex] += quantity\n\n                val updatedExpenses = expenses.toMutableList()\n                updatedExpenses[itemIndex] += expense\n\n                // Compute the total expenses\n                val totalExpenses = updatedExpenses.sum()\n\n                // Update the document\n                transaction.update(docRef, mapOf(\n                    \"quantity\" to updatedQuantities,\n                    \"expenses\" to updatedExpenses,\n                    \"total\" to totalExpenses\n                ))\n            } else {\n                // Add new item\n                val updatedNames = names.toMutableList()\n                updatedNames.add(name)\n\n                val updatedQuantities = quantities.toMutableList()\n                updatedQuantities.add(quantity)\n\n                val updatedExpenses = expenses.toMutableList()\n                updatedExpenses.add(expense)\n\n                // Compute the total expenses\n                val totalExpenses = expenses.sum() + expense\n\n                // Update the document\n                transaction.update(docRef, mapOf(\n                    \"name\" to updatedNames,\n                    \"quantity\" to updatedQuantities,\n                    \"expenses\" to updatedExpenses,\n                    \"total\" to totalExpenses\n                ))\n            }\n        }\n\n        null\n    }\n    .addOnSuccessListener {\n        Log.d(\"TAG\", \"Document updated successfully\")\n    }\n    .addOnFailureListener { exception ->\n        Log.e(\"TAG\", \"Error updating document\", exception)\n    }\n}",
    "filename": "db629e41893685545e1030da821473c0_2.kt"
  },
  {
    "conversation_hash": "e020643b30612cf889f63acc91eb4c75",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "docRef.get()\n    .addOnSuccessListener { document ->\n        if (document.exists()) {\n            val names = document.get(\"name\") as? List<String> ?: mutableListOf()\n            val quantities = document.get(\"quantity\") as? List<Int> ?: mutableListOf()\n            val expenses = document.get(\"expenses\") as? List<Double> ?: mutableListOf()\n\n            val mutableNames = names.toMutableList()\n            val mutableQuantities = quantities.toMutableList()\n            val mutableExpenses = expenses.toMutableList()\n\n            var itemFound = false\n            var itemIndex = -1\n            names.forEachIndexed { index, itemName ->\n                if (itemName == name) {\n                    itemFound = true\n                    itemIndex = index\n                }\n            }\n\n            if (itemFound) {\n                mutableQuantities[itemIndex] += quantity\n                mutableExpenses[itemIndex] += expense\n            } else {\n                mutableNames.add(name)\n                mutableQuantities.add(quantity)\n                mutableExpenses.add(expense)\n            }\n\n            val updateData: Map<String, Any> = hashMapOf(\n                \"name\" to mutableNames,\n                \"quantity\" to mutableQuantities,\n                \"expenses\" to mutableExpenses\n            )\n\n            firestore.runTransaction { transaction ->\n                transaction.update(docRef, updateData)\n                transaction.update(docRef, \"total\", FieldValue.increment(expense))\n            }.addOnSuccessListener {\n                Log.d(\"TAG\", \"Document updated successfully\")\n            }.addOnFailureListener { exception ->\n                Log.e(\"TAG\", \"Error updating document\", exception)\n            }\n        } else {\n            Log.d(\"TAG\", \"No such document\")\n        }\n    }\n    .addOnFailureListener { exception ->\n        Log.e(\"TAG\", \"Error getting the document\", exception)\n    }\n}",
    "filename": "e020643b30612cf889f63acc91eb4c75_0.kt"
  },
  {
    "conversation_hash": "e020643b30612cf889f63acc91eb4c75",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun initUserExpenses(\n    name: String,\n    quantity: Int,\n    expense: Double,\n    collectionName: String,\n    documentId: String,\n    firestore: FirebaseFirestore\n) {\n    val db = FirebaseFirestore.getInstance()\n    val docRef = db\n        .collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(collectionName)\n        .document(documentId)\n\n    docRef.get()\n        .addOnSuccessListener { document ->\n            val names = document.get(\"name\") as? List<String> ?: mutableListOf()\n            val quantities = document.get(\"quantity\") as? List<Int> ?: mutableListOf()\n            val expenses = document.get(\"expenses\") as? List<Double> ?: mutableListOf()\n\n            val mutableNames = names.toMutableList()\n            val mutableQuantities = quantities.toMutableList()\n            val mutableExpenses = expenses.toMutableList()\n\n            var itemFound = false\n            var itemIndex = -1\n            names.forEachIndexed { index, itemName ->\n                if (itemName == name) {\n                    itemFound = true\n                    itemIndex = index\n                }\n            }\n\n            if (itemFound) {\n                mutableQuantities[itemIndex] += quantity\n                mutableExpenses[itemIndex] += expense\n            } else {\n                mutableNames.add(name)\n                mutableQuantities.add(quantity)\n                mutableExpenses.add(expense)\n            }\n\n            val updateData: Map<String, Any> = hashMapOf(\n                \"name\" to mutableNames,\n                \"quantity\" to mutableQuantities,\n                \"expenses\" to mutableExpenses\n            )\n\n            firestore.runTransaction { transaction ->\n                if (document.exists()) {\n                    transaction.update(docRef, updateData)\n                    transaction.update(docRef, \"total\", FieldValue.increment(expense))\n                } else {\n                    transaction.set(docRef, updateData + mapOf(\"total\" to expense))\n                }\n            }.addOnSuccessListener {\n                Log.d(\"TAG\", \"Document updated successfully\")\n            }.addOnFailureListener { exception ->\n                Log.e(\"TAG\", \"Error updating document\", exception)\n            }\n        }.addOnFailureListener { exception ->\n            Log.e(\"TAG\", \"Error getting the document\", exception)\n        }\n}",
    "filename": "e020643b30612cf889f63acc91eb4c75_1.kt"
  },
  {
    "conversation_hash": "e020643b30612cf889f63acc91eb4c75",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun initUserExpenses(\n    name: String,\n    quantity: Int,\n    expense: Double,\n    stockChange: Int,\n    collectionName: String,\n    documentId: String,\n    firestore: FirebaseFirestore\n) {\n    val db = FirebaseFirestore.getInstance()\n    val docRef = db\n        .collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(collectionName)\n        .document(documentId)\n\n    val stockRef = db\n        .collection(\"parentCollection\")\n        .document(\"stockDocument\") // Update with your stock document ID\n\n    docRef.get()\n        .addOnSuccessListener { document ->\n            val names = document.get(\"name\") as? List<String> ?: mutableListOf()\n            val quantities = document.get(\"quantity\") as? List<Int> ?: mutableListOf()\n            val expenses = document.get(\"expenses\") as? List<Double> ?: mutableListOf()\n\n            val mutableNames = names.toMutableList()\n            val mutableQuantities = quantities.toMutableList()\n            val mutableExpenses = expenses.toMutableList()\n\n            var itemFound = false\n            var itemIndex = -1\n            names.forEachIndexed { index, itemName ->\n                if (itemName == name) {\n                    itemFound = true\n                    itemIndex = index\n                }\n            }\n\n            if (itemFound) {\n                mutableQuantities[itemIndex] += quantity\n                mutableExpenses[itemIndex] += expense\n            } else {\n                mutableNames.add(name)\n                mutableQuantities.add(quantity)\n                mutableExpenses.add(expense)\n            }\n\n            val updateData: Map<String, Any> = hashMapOf(\n                \"name\" to mutableNames,\n                \"quantity\" to mutableQuantities,\n                \"expenses\" to mutableExpenses\n            )\n\n            firestore.runTransaction { transaction ->\n                if (document.exists()) {\n                    transaction.update(docRef, updateData)\n                    transaction.update(docRef, \"total\", FieldValue.increment(expense))\n                } else {\n                    transaction.set(docRef, updateData + mapOf(\"total\" to expense))\n                }\n\n                // Update the stock in the parent collection\n                transaction.update(stockRef, name, FieldValue.increment(-stockChange))\n            }.addOnSuccessListener {\n                Log.d(\"TAG\", \"Document updated successfully\")\n            }.addOnFailureListener { exception ->\n                Log.e(\"TAG\", \"Error updating document\", exception)\n            }\n        }.addOnFailureListener { exception ->\n            Log.e(\"TAG\", \"Error getting the document\", exception)\n        }\n}",
    "filename": "e020643b30612cf889f63acc91eb4c75_2.kt"
  },
  {
    "conversation_hash": "e020643b30612cf889f63acc91eb4c75",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "onConfirm = { updatedItem ->\n    val stockChange = updatedItem.stock - item.stock\n    DateUtils.initUserExpenses(\n        name = updatedItem.name,\n        quantity = stockChange,\n        expense = updatedItem.price * stockChange,\n        stockChange = stockChange,\n        collectionName = \"yearly\",\n        documentId = DateUtils.currentYear(),\n        firestore\n    )\n    // ...Repeat for \"monthly\", \"weekly\", and \"daily\" collections\n    showDialog = false\n},",
    "filename": "e020643b30612cf889f63acc91eb4c75_3.kt"
  },
  {
    "conversation_hash": "e020643b30612cf889f63acc91eb4c75",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "onConfirm = { updatedItem ->\n    val stockChange = updatedItem.stock - item.stock\n    DateUtils.initUserExpenses(\n        name = updatedItem.name,\n        quantity = stockChange,\n        expense = updatedItem.price * stockChange,\n        stockChange = stockChange,\n        collectionName = \"yearly\",\n        documentId = DateUtils.currentYear(),\n        inventoryDocumentId = updatedItem.documentId, // Add the inventory document ID here\n        firestore\n    )\n    // ...Repeat for \"monthly\", \"weekly\", and \"daily\" collections\n    showDialog = false\n},",
    "filename": "e020643b30612cf889f63acc91eb4c75_5.kt"
  },
  {
    "conversation_hash": "e020643b30612cf889f63acc91eb4c75",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "onConfirm = { updatedItem ->\n    val stockChange = (updatedItem.stock - item.stock).toLong()\n    DateUtils.initUserExpenses(\n        name = updatedItem.name,\n        quantity = stockChange.toInt(),\n        expense = updatedItem.price * stockChange,\n        stockChange = stockChange,\n        collectionName = \"yearly\",\n        documentId = DateUtils.currentYear(),\n        inventoryDocumentId = updatedItem.documentId,\n        firestore\n    )\n    // ...Repeat for \"monthly\", \"weekly\", and \"daily\" collections\n    showDialog = false\n},",
    "filename": "e020643b30612cf889f63acc91eb4c75_7.kt"
  },
  {
    "conversation_hash": "e020643b30612cf889f63acc91eb4c75",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "onConfirm = { updatedItem ->\n    val stockChange = updatedItem.stock - item.stock\n    DateUtils.initUserExpenses(\n        name = updatedItem.name,\n        quantity = stockChange.toInt(),\n        expense = updatedItem.price * stockChange,\n        stockChange = stockChange,\n        collectionName = \"yearly\",\n        documentId = DateUtils.currentYear(),\n        stockDocumentId = \"someStockDocumentId\", // Replace with the proper ID of the stock document\n        firestore\n    )\n    // ...Repeat for \"monthly\", \"weekly\", and \"daily\" collections\n    showDialog = false\n},",
    "filename": "e020643b30612cf889f63acc91eb4c75_10.kt"
  },
  {
    "conversation_hash": "e020643b30612cf889f63acc91eb4c75",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun initUserExpenses(\n    name: String,\n    quantity: Int,\n    expense: Double,\n    collectionName: String,\n    documentId: String,\n    inventoryStockChange: Int,\n    inventoryDocumentId: String,\n    firestore: FirebaseFirestore\n) {\n    val db = FirebaseFirestore.getInstance()\n    val docRef = db\n        .collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(collectionName)\n        .document(documentId)\n\n    docRef.get()\n        .addOnSuccessListener { document ->\n\n            // ...Rest of the code\n\n            val stockRef = db\n                .collection(\"inventory\")\n                .document(inventoryDocumentId)\n\n            // ...Rest of the code\n\n            firestore.runTransaction { transaction ->\n                if (document.exists()) {\n                    transaction.update(docRef, updateData)\n                    transaction.update(docRef, \"total\", FieldValue.increment(expense))\n                } else {\n                    transaction.set(docRef, updateData + mapOf(\"total\" to expense))\n                }\n\n                // Update the stock map in the inventory document\n                val stockFieldName = \"stockMap.$name\" // Compose the field name using dot notation\n                transaction.update(stockRef, stockFieldName, FieldValue.increment(inventoryStockChange.toLong()))\n            }.addOnSuccessListener {\n                Log.d(\"TAG\", \"Berhasil\")\n            }.addOnFailureListener { exception ->\n                Log.e(\"TAG\", \"Gagal\", exception)\n            }\n        }\n        .addOnFailureListener { exception ->\n            Log.e(\"TAG\", \"Gagal\", exception)\n        }\n}",
    "filename": "e020643b30612cf889f63acc91eb4c75_11.kt"
  },
  {
    "conversation_hash": "e020643b30612cf889f63acc91eb4c75",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "onConfirm = { updatedItem ->\n    val stockChange = updatedItem.stock - item.stock\n    DateUtils.initUserExpenses(\n        name = updatedItem.name,\n        quantity = stockChange.toInt(),\n        expense = updatedItem.price * stockChange,\n        collectionName = \"yearly\",\n        documentId = DateUtils.currentYear(),\n        stockDocumentId = updatedItem.documentId, // Add the inventory document ID here\n        inventoryStockChange = stockChange,\n        firestore\n    )\n    // ...Repeat for \"monthly\", \"weekly\", and \"daily\" collections\n    showDialog = false\n},",
    "filename": "e020643b30612cf889f63acc91eb4c75_13.kt"
  },
  {
    "conversation_hash": "e020643b30612cf889f63acc91eb4c75",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun EditItemDialog(\n    item: InventoryItem,\n    onConfirm: (InventoryItem) -> Unit,\n    onCancel: () -> Unit\n) {\n    // ...Rest of the code\n\n    AlertDialog(\n        // ...Rest of the code\n        confirmButton = {\n            Button(\n                onClick = {\n                    // Update the globalPrice variable with the parsed value\n                    globalPrice.value = price.toDouble()\n\n                    val updatedItem = item.copy(\n                        name = name,\n                        stock = stock.toInt(),\n                        price = globalPrice.value  // Set the updated price in the item\n                    )\n                    onConfirm(updatedItem)\n                }\n            ) {\n                Text(\"Confirm\")\n            }\n        },\n        // ...Rest of the code\n    )\n}",
    "filename": "e020643b30612cf889f63acc91eb4c75_16.kt"
  },
  {
    "conversation_hash": "e020643b30612cf889f63acc91eb4c75",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun EditItemDialog(\n    item: InventoryItem,\n    onConfirm: (InventoryItem) -> Unit,\n    onCancel: () -> Unit\n) {\n    // maintain state for editable fields\n    val name = item.name\n    var stock by remember { mutableStateOf(item.stock.toString()) }\n    var price by remember { mutableStateOf(item.price.toString()) } // Add a state variable for price\n\n    AlertDialog(\n        onDismissRequest = onCancel,\n        title = { Text(text = \"Edit Item\") },\n        text = {\n            Column {\n                TextField(\n                    value = stock,\n                    onValueChange = { newText ->\n                        stock = newText\n                    },\n                    // ...Rest of the TextField configuration\n                )\n                TextField(\n                    value = price,\n                    onValueChange = { newText ->\n                        price = newText\n                    },\n                    supportingText = { Text(\"Price\") },\n                    keyboardOptions = KeyboardOptions(\n                        keyboardType = KeyboardType.Number,\n                        imeAction = ImeAction.Done\n                    ),\n                    keyboardActions = KeyboardActions(onDone = { })\n                )\n            }\n        },\n        confirmButton = {\n            Button(\n                onClick = {\n                    val updatedItem = item.copy(\n                        name = name,\n                        stock = stock.toInt(),\n                        price = price.toDouble() // Add the updated price in the item\n                    )\n                    onConfirm(updatedItem)\n                }\n            ) {\n                Text(\"Confirm\")\n            }\n        },\n        dismissButton = {\n            Button(onClick = onCancel) {\n                Text(\"Cancel\")\n            }\n        }\n    )\n}",
    "filename": "e020643b30612cf889f63acc91eb4c75_17.kt"
  },
  {
    "conversation_hash": "a3dee9e63fd7871af30f1c9a71f297c9",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "# Используем готовый образ с Go\nFROM golang:1.17-alpine AS build\n\n# Устанавливаем зависимости и копируем файлы\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . .\n\n# Собираем бинарник\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .\n\n# Запускаем бинарник в prod-режиме\nFROM alpine:3.14\nWORKDIR /app\nCOPY --from=build /app/app .\nENTRYPOINT [\"./app\"]\nCMD [\"-port=8080\"]",
    "filename": "a3dee9e63fd7871af30f1c9a71f297c9_3.kt"
  },
  {
    "conversation_hash": "493df7191ff8a1aeac01137e51a18aeb",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val extras = intent.extras // получаем все данные переданные в Intent в виде Bundle\n\nif (extras != null) {\n    val data1 = extras.getString(\"data_key1\") // получаем строку из Bundle по ключу data_key1\n    val data2 = extras.getInt(\"data_key2\") // получаем целое число из Bundle по ключу data_key2\n    // и так далее...\n}",
    "filename": "493df7191ff8a1aeac01137e51a18aeb_1.kt"
  },
  {
    "conversation_hash": "493df7191ff8a1aeac01137e51a18aeb",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "val extras = intent.extras // получаем все данные переданные в Intent в виде Bundle\n\nif (extras != null) {\n    val data1 = extras.getString(\"data_key1\") // получаем строку из Bundle по ключу data_key1\n    val data2 = extras.getInt(\"data_key2\") // получаем целое число из Bundle по ключу data_key2\n    // и так далее...\n    \n    val extrasValue = extras.toString()\n    Toast.makeText(this, extrasValue, Toast.LENGTH_SHORT).show()\n}",
    "filename": "493df7191ff8a1aeac01137e51a18aeb_2.kt"
  },
  {
    "conversation_hash": "493df7191ff8a1aeac01137e51a18aeb",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        \n        // Здесь располагаем код, который нужно выполнить при запуске приложения\n        val extras = intent.extras // получаем все данные переданные в Intent в виде Bundle\n\n        if (extras != null) {\n            val data1 = extras.getString(\"data_key1\") // получаем строку из Bundle по ключу data_key1\n            val data2 = extras.getInt(\"data_key2\") // получаем целое число из Bundle по ключу data_key2\n            // и так далее...\n            \n            val extrasValue = extras.toString()\n            Toast.makeText(this, extrasValue, Toast.LENGTH_SHORT).show()\n        }\n    }\n}",
    "filename": "493df7191ff8a1aeac01137e51a18aeb_3.kt"
  },
  {
    "conversation_hash": "c6a04be7e78c80d7929a4307f8c5aa9b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun BarChartDemo() {\n    Column(modifier = Modifier.fillMaxSize()) {\n        ChartView(\n            chartData = barChartData,\n            chartType = ChartType.BAR,\n            modifier = Modifier.fillMaxSize()\n        )\n    }\n}",
    "filename": "c6a04be7e78c80d7929a4307f8c5aa9b_1.kt"
  },
  {
    "conversation_hash": "c6a04be7e78c80d7929a4307f8c5aa9b",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "private val barChartData = BarChartData(\n        dataSets = listOf(\n            BarDataSet(\n                entries = listOf(\n                    BarEntry(x = 1f, y = 5f),\n                    BarEntry(x = 2f, y = 3f),\n                    BarEntry(x = 3f, y = 8f),\n                    BarEntry(x = 4f, y = 2f)\n                ),\n                label = \"Bar Chart\"\n            )\n        ),\n        xAxis = XAxis(\n            values = listOf(\n                Value(1f, \"Jan\"),\n                Value(2f, \"Feb\"),\n                Value(3f, \"Mar\"),\n                Value(4f, \"Apr\")\n            ),\n            axisLabel = \"Months\"\n        ),\n        yAxis = YAxis(\n            axisLabel = \"No of Orders\"\n        )\n    )",
    "filename": "c6a04be7e78c80d7929a4307f8c5aa9b_2.kt"
  },
  {
    "conversation_hash": "c6a04be7e78c80d7929a4307f8c5aa9b",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            BarChartDemo()\n        }\n    }\n}",
    "filename": "c6a04be7e78c80d7929a4307f8c5aa9b_4.kt"
  },
  {
    "conversation_hash": "b2444f936c4dddaafb1b39657fb1c7a4",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.time.LocalDateTime",
      "java.time.format.DateTimeFormatter"
    ],
    "code": "import java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\n\nfun main() {\n    val date = LocalDateTime.now()\n    val formatter = DateTimeFormatter.ofPattern(\"M/d/yyyy HH:mm:ss\")\n    val formattedDate = date.format(formatter)\n    println(formattedDate)\n}",
    "filename": "b2444f936c4dddaafb1b39657fb1c7a4_0.kt"
  },
  {
    "conversation_hash": "b2444f936c4dddaafb1b39657fb1c7a4",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "java.time.LocalDateTime",
      "java.time.format.DateTimeFormatter"
    ],
    "code": "import java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\n\nfun main() {\n    val date = LocalDateTime.now()\n    val formatter = DateTimeFormatter.ofPattern(\"M/d/yyyy HH:mm:ss\") // corrected format\n    val formattedDate = date.format(formatter)\n    println(formattedDate)\n}",
    "filename": "b2444f936c4dddaafb1b39657fb1c7a4_1.kt"
  },
  {
    "conversation_hash": "b2444f936c4dddaafb1b39657fb1c7a4",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "java.time.LocalDateTime",
      "java.time.format.DateTimeFormatter"
    ],
    "code": "import java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\n\nfun main() {\n    val currentDateTime = LocalDateTime.now()\n    val formatter = DateTimeFormatter.ofPattern(\"M/d/yyyy HH:mm:ss\")\n    val formattedDateTime = currentDateTime.format(formatter)\n    println(formattedDateTime)\n}",
    "filename": "b2444f936c4dddaafb1b39657fb1c7a4_2.kt"
  },
  {
    "conversation_hash": "a2de368674d1377c9f82e7a3e9eda55f",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "io.github.patryk_and_patrick.vico.compose.charts.BarChart"
    ],
    "code": "import io.github.patryk_and_patrick.vico.compose.charts.BarChart\n// ...\n\n@Composable\nfun ExampleBarChart() {\n    val data = listOf(\n        Entry(value = 100f, label = \"A\"),\n        Entry(value = 80f, label = \"B\"),\n        Entry(value = 60f, label = \"C\"),\n        Entry(value = 40f, label = \"D\")\n    )\n\n    BarChart(\n        data = data,\n        modifier = Modifier.fillMaxSize()\n    )\n}",
    "filename": "a2de368674d1377c9f82e7a3e9eda55f_1.kt"
  },
  {
    "conversation_hash": "a2de368674d1377c9f82e7a3e9eda55f",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.Modifier",
      "io.github.patryk_and_patrick.vico.compose.charts.BarChart",
      "io.github.patryk_and_patrick.vico.compose.charts.data.Entry"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport io.github.patryk_and_patrick.vico.compose.charts.BarChart\nimport io.github.patryk_and_patrick.vico.compose.charts.data.Entry\n\n@Composable\nfun ExampleBarChart() {\n    val data = listOf(\n        Entry(value = 100f, label = \"A\"),\n        Entry(value = 80f, label = \"B\"),\n        Entry(value = 60f, label = \"C\"),\n        Entry(value = 40f, label = \"D\")\n    )\n\n    BarChart(\n        data = data,\n        modifier = Modifier.fillMaxSize()\n    )\n}",
    "filename": "a2de368674d1377c9f82e7a3e9eda55f_4.kt"
  },
  {
    "conversation_hash": "a2de368674d1377c9f82e7a3e9eda55f",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.Modifier",
      "io.github.patryk_and_patrick.vico.compose.charts.BarChart",
      "io.github.patryk_and_patrick.vico.compose.charts.Entry"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport io.github.patryk_and_patrick.vico.compose.charts.BarChart\nimport io.github.patryk_and_patrick.vico.compose.charts.Entry\n\n@Composable\nfun ExampleBarChart() {\n    val data = listOf(\n        Entry(value = 100f, label = \"A\"),\n        Entry(value = 80f, label = \"B\"),\n        Entry(value = 60f, label = \"C\"),\n        Entry(value = 40f, label = \"D\")\n    )\n\n    BarChart(\n        data = data,\n        modifier = Modifier.fillMaxSize()\n    )\n}",
    "filename": "a2de368674d1377c9f82e7a3e9eda55f_6.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.fillMaxWidth",
      "androidx.compose.material.MaterialTheme",
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.Modifier",
      "com.google.accompanist.chart.Chart",
      "com.google.accompanist.chart.animation.animatedChart",
      "com.google.accompanist.chart.data.AnimationState",
      "com.google.accompanist.chart.data.ChartData",
      "com.google.accompanist.chart.data.LineChartData",
      "com.google.accompanist.chart.line.LineChart"
    ],
    "code": "import androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport com.google.accompanist.chart.Chart\nimport com.google.accompanist.chart.animation.animatedChart\nimport com.google.accompanist.chart.data.AnimationState\nimport com.google.accompanist.chart.data.ChartData\nimport com.google.accompanist.chart.data.LineChartData\nimport com.google.accompanist.chart.line.LineChart\n\n@Composable\nfun MyLineChart(lineChartData: LineChartData) {\n    val chartState = ChartState(lineChartData)\n    val animatedChart = animatedChart(chartState)\n    MaterialTheme {\n        LineChart(animatedChart, Modifier.fillMaxWidth())\n    }\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_1.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.getValue",
      "androidx.compose.runtime.mutableStateOf",
      "androidx.compose.runtime.setValue",
      "androidx.lifecycle.ViewModel"
    ],
    "code": "import androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\n\nclass ChartViewModel : ViewModel() {\n    private var _lineChartData: LineChartData by mutableStateOf(generateInitialData())\n        private set\n\n    val lineChartData: LineChartData\n        get() = _lineChartData\n\n    fun changeChartData() {\n        _lineChartData = generateNewData()\n    }\n\n    private fun generateInitialData(): LineChartData {\n        // Generate some initial data\n    }\n\n    private fun generateNewData(): LineChartData {\n        // Generate new data for the chart\n    }\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_2.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.livedata.observeAsState",
      "androidx.compose.ui.tooling.preview.Preview",
      "androidx.lifecycle.viewmodel.compose.viewModel"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.compose.runtime.livedata.observeAsState\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.lifecycle.viewmodel.compose.viewModel\n\n@Composable\nfun LineChartScreen() {\n    val chartViewModel: ChartViewModel = viewModel()\n    val lineChartData by chartViewModel.lineChartData.observeAsState()\n\n    lineChartData?.let { data ->\n        MyLineChart(data)\n    }\n}\n\n@Composable\n@Preview\nfun LineChartPreview() {\n    LineChartScreen()\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_3.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.activity.ComponentActivity",
      "androidx.activity.compose.setContent",
      "androidx.compose.material.MaterialTheme"
    ],
    "code": "import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.material.MaterialTheme\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MaterialTheme {\n                LineChartScreen()\n            }\n        }\n    }\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_4.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.Modifier",
      "com.patrykmilewski.form.compose.vico.chart.LineChart",
      "com.patrykmilewski.form.compose.vico.chart.data.LineChartDataSet"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport com.patrykmilewski.form.compose.vico.chart.LineChart\nimport com.patrykmilewski.form.compose.vico.chart.data.LineChartDataSet\n\n@Composable\nfun MyLineChart(lineChartDataSet: LineChartDataSet, modifier: Modifier = Modifier) {\n    LineChart(dataSet = lineChartDataSet, modifier = modifier)\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_7.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.getValue",
      "androidx.compose.runtime.mutableStateOf",
      "androidx.compose.runtime.setValue",
      "androidx.lifecycle.ViewModel",
      "com.patrykmilewski.form.compose.vico.chart.data.LineChartDataSet"
    ],
    "code": "import androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport com.patrykmilewski.form.compose.vico.chart.data.LineChartDataSet\n\nclass ChartViewModel : ViewModel() {\n    private var _lineChartDataSet: LineChartDataSet by mutableStateOf(generateInitialData())\n        private set\n\n    val lineChartDataSet: LineChartDataSet\n        get() = _lineChartData\n\n    fun changeChartData() {\n        _lineChartData = generateNewData()\n    }\n\n    private fun generateInitialData(): LineChartDataSet {\n        // Generate some initial data\n    }\n\n    private fun generateNewData(): LineChartDataSet {\n        // Generate new data for the chart\n    }\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_8.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.livedata.observeAsState",
      "androidx.compose.ui.tooling.preview.Preview",
      "androidx.lifecycle.viewmodel.compose.viewModel"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.compose.runtime.livedata.observeAsState\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.lifecycle.viewmodel.compose.viewModel\n\n@Composable\nfun LineChartScreen() {\n    val chartViewModel: ChartViewModel = viewModel()\n    val lineChartDataSet by chartViewModel.lineChartDataSet.observeAsState()\n\n    lineChartDataSet?.let { data ->\n        MyLineChart(data)\n    }\n}\n\n@Composable\n@Preview\nfun LineChartPreview() {\n    LineChartScreen()\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_9.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.activity.ComponentActivity",
      "androidx.activity.compose.setContent",
      "androidx.compose.material.Theme"
    ],
    "code": "import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.material.Theme\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            Theme {\n                LineChartScreen()\n            }\n        }\n    }\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_10.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.activity.ComponentActivity",
      "androidx.activity.compose.setContent",
      "androidx.compose.material3.MaterialTheme"
    ],
    "code": "import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.material3.MaterialTheme\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MaterialTheme {\n                MyApp()\n            }\n        }\n    }\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_14.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.Modifier",
      "com.patrykan91.compose_charts.data.LineChartData",
      "com.patrykandpatrick.vico.LineChart"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport com.patrykan91.compose_charts.data.LineChartData\nimport com.patrykandpatrick.vico.LineChart\n\n@Composable\nfun MyLineChart(lineChartData: LineChartData, modifier: Modifier = Modifier) {\n    LineChart(data = lineChartData, modifier = modifier)\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_15.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.getValue",
      "androidx.compose.runtime.mutableStateOf",
      "androidx.compose.runtime.setValue",
      "androidx.lifecycle.ViewModel",
      "com.patrykan91.compose_charts.data.LineChartData"
    ],
    "code": "import androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport com.patrykan91.compose_charts.data.LineChartData\n\nclass ChartViewModel : ViewModel() {\n    private var _lineChartData: LineChartData by mutableStateOf(generateInitialData())\n        private set\n\n    val lineChartData: LineChartData\n        get() = _lineChartData\n\n    fun changeChartData() {\n        _lineChartData = generateNewData()\n    }\n\n    private fun generateInitialData(): LineChartData {\n        // Generate some initial data\n    }\n\n    private fun generateNewData(): LineChartData {\n        // Generate new data for the chart\n    }\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_16.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.livedata.observeAsState",
      "androidx.compose.ui.tooling.preview.Preview",
      "androidx.lifecycle.viewmodel.compose.viewModel"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.compose.runtime.livedata.observeAsState\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.lifecycle.viewmodel.compose.viewModel\n\n@Composable\nfun LineChartScreen() {\n    val chartViewModel: ChartViewModel = viewModel()\n    val lineChartData by chartViewModel.lineChartData.observeAsState()\n\n    lineChartData?.let { data ->\n        MyLineChart(data)\n    }\n}\n\n@Composable\n@Preview\nfun LineChartPreview() {\n    LineChartScreen()\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_17.kt"
  },
  {
    "conversation_hash": "9abef7eaaaf65106c30ace84365eac3b",
    "code_index": 18,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.activity.ComponentActivity",
      "androidx.activity.compose.setContent",
      "androidx.compose.material3.MaterialTheme"
    ],
    "code": "import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.material3.MaterialTheme\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MaterialTheme {\n                LineChartScreen()\n            }\n        }\n    }\n}",
    "filename": "9abef7eaaaf65106c30ace84365eac3b_18.kt"
  },
  {
    "conversation_hash": "6c577b8670fc96357373e11d9c708ec7",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "com.github.rubensousa.composechart.Entry",
      "com.github.rubensousa.composechart.LineChart",
      "com.github.rubensousa.composechart.data.LineData",
      "com.github.rubensousa.composechart.data.LineDataSet",
      "com.github.rubensousa.composechart.ui.label"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport com.github.rubensousa.composechart.Entry\nimport com.github.rubensousa.composechart.LineChart\nimport com.github.rubensousa.composechart.data.LineData\nimport com.github.rubensousa.composechart.data.LineDataSet\nimport com.github.rubensousa.composechart.ui.label\n\n@Composable\nfun ExpensesChart(selectedTimePeriod: TimePeriod) {\n    val lineDataSet = LineDataSet(\n        label = \"Expenses\",\n        data = listOf(\n            Entry(1f, 2f),\n            Entry(2f, 3f),\n            Entry(3f, 4f),\n            Entry(4f, 3f),\n            Entry(5f, 2f),\n            Entry(6f, 1f)\n        )\n    )\n    LineChart {\n        addLineDataset(lineDataSet)\n        xAxis {\n            label { value, isLast -> \"Day $value\" }\n        }\n        yAxis {\n            label { value, isLast -> \"$${value.toInt()}\" }\n        }\n    }\n}",
    "filename": "6c577b8670fc96357373e11d9c708ec7_2.kt"
  },
  {
    "conversation_hash": "5e99de6c81d415b6ef51da844adfc5b4",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ReportRepository {\n\n    private val db = FirebaseFirestore.getInstance()\n\n    fun getReports(timePeriod: TimePeriod, callback: (List<Report>) -> Unit) {\n        db.collection(timePeriod.toString().toLowerCase()).get()\n            .addOnSuccessListener { querySnapshot ->\n                val reports = querySnapshot.map {\n                    val title = it.getString(\"title\") ?: \"\"\n                    val data = it.data as? Map<String, Any> ?: emptyMap()\n                    Report(title, data)\n                }\n                callback(reports)\n            }\n            .addOnFailureListener {\n                callback(emptyList())\n            }\n    }\n}",
    "filename": "5e99de6c81d415b6ef51da844adfc5b4_3.kt"
  },
  {
    "conversation_hash": "5e99de6c81d415b6ef51da844adfc5b4",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ReportViewModel(private val reportRepository: ReportRepository) : ViewModel() {\n\n    private val _reports = MutableLiveData<List<Report>>()\n    val reports: LiveData<List<Report>>\n        get() = _reports\n\n    fun fetchReports(timePeriod: TimePeriod) {\n        reportRepository.getReports(timePeriod) { fetchedReports ->\n            _reports.value = fetchedReports\n        }\n    }\n}",
    "filename": "5e99de6c81d415b6ef51da844adfc5b4_4.kt"
  },
  {
    "conversation_hash": "5e99de6c81d415b6ef51da844adfc5b4",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private lateinit var reportViewModel: ReportViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        reportViewModel = ViewModelProvider(this).get(ReportViewModel::class.java)\n\n        reportViewModel.reports.observe(this, Observer { reports ->\n            // Update your UI with the fetched reports\n        })\n\n        // Fetch reports for a specific time period\n        reportViewModel.fetchReports(TimePeriod.MONTHLY)\n    }\n}",
    "filename": "5e99de6c81d415b6ef51da844adfc5b4_5.kt"
  },
  {
    "conversation_hash": "5e99de6c81d415b6ef51da844adfc5b4",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun convertSnapshotToReport(document: QueryDocumentSnapshot): Report {\n    val title = document.getString(\"title\") ?: \"\"\n    val dataMap = document.data as? Map<String, Any> ?: emptyMap()\n    val dataList = dataMap.map { (key, value) ->\n        Entry(key.toFloat(), value as Float)\n    }.sortedBy { it.x }\n    return Report(title, dataList)\n}\n\nfun getReports(timePeriod: TimePeriod, callback: (List<Report>) -> Unit) {\n    db.collection(timePeriod.toString().toLowerCase()).get()\n        .addOnSuccessListener { querySnapshot ->\n            val reports = querySnapshot.map { document ->\n                convertSnapshotToReport(document)\n            }\n            callback(reports)\n        }\n        .addOnFailureListener {\n            callback(emptyList())\n        }\n}",
    "filename": "5e99de6c81d415b6ef51da844adfc5b4_9.kt"
  },
  {
    "conversation_hash": "c11ce47c421f4ea20347ea6732807fb1",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun startLocationWorker() {\n    val workManager = WorkManager.getInstance(applicationContext)\n\n    val updateLocationWorkRequest = PeriodicWorkRequestBuilder<UpdateLocationWorker>(15, TimeUnit.MINUTES)\n        .setInitialDelay(0, TimeUnit.SECONDS)\n        .build()\n\n    workManager.enqueueUniquePeriodicWork(\n        \"update_location_worker\",\n        ExistingPeriodicWorkPolicy.KEEP,\n        updateLocationWorkRequest\n    )\n}",
    "filename": "c11ce47c421f4ea20347ea6732807fb1_0.kt"
  },
  {
    "conversation_hash": "c11ce47c421f4ea20347ea6732807fb1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    // ...\n\n    startLocationWorker()\n}",
    "filename": "c11ce47c421f4ea20347ea6732807fb1_1.kt"
  },
  {
    "conversation_hash": "c11ce47c421f4ea20347ea6732807fb1",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "override suspend fun doWork(): Result {\n    val sharedPreferences = applicationContext.getSharedPreferences(\n        inputData.getString(\"prefs\", \"default\"), \n        Context.MODE_PRIVATE\n    )\n    // ...\n}",
    "filename": "c11ce47c421f4ea20347ea6732807fb1_5.kt"
  },
  {
    "conversation_hash": "c11ce47c421f4ea20347ea6732807fb1",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "@HiltAndroidApp\nclass XegeraTrucking: Application() {\n    override fun onCreate() {\n        super.onCreate()\n\n        scheduleLocationUpdate(1L)\n    }\n\n    fun scheduleLocationUpdate(initialDelay: Long) {\n        val mySharedPreferences = applicationContext.getSharedPreferences(\n            \"MySharedPreferences\",\n            Context.MODE_PRIVATE\n        )\n\n        val inputData = workDataOf(\"prefs\" to mySharedPreferences)\n\n        val workRequest = OneTimeWorkRequestBuilder<UpdateLocationWorker>()\n            .setInputData(inputData)\n            .setInitialDelay(initialDelay, TimeUnit.SECONDS)\n            .build()\n\n        WorkManager.getInstance(this).enqueue(workRequest)\n    }\n}",
    "filename": "c11ce47c421f4ea20347ea6732807fb1_8.kt"
  },
  {
    "conversation_hash": "c11ce47c421f4ea20347ea6732807fb1",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun scheduleLocationUpdate(initialDelay: Long) {\n    val mySharedPreferences = applicationContext.getSharedPreferences(\n        \"MySharedPreferences\",\n        Context.MODE_PRIVATE\n    )\n\n    val inputData = workDataOf(\"prefs\" to mySharedPreferences.toString()) // toString() is added here\n\n    val workRequest = OneTimeWorkRequestBuilder<UpdateLocationWorker>()\n        .setInputData(inputData)\n        .setInitialDelay(initialDelay, TimeUnit.SECONDS)\n        .build()\n\n    WorkManager.getInstance(this).enqueue(workRequest)\n}",
    "filename": "c11ce47c421f4ea20347ea6732807fb1_9.kt"
  },
  {
    "conversation_hash": "c11ce47c421f4ea20347ea6732807fb1",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "// In the XegeraTrucking class:\nval mySharedPreferences = applicationContext.getSharedPreferences(\n    \"MySharedPreferences\", \n    Context.MODE_PRIVATE\n)\nval inputData = workDataOf(\"prefs\" to mySharedPreferences.toString())\n\n// In the scheduleLocationUpdate() method:\nval workRequest = OneTimeWorkRequestBuilder<UpdateLocationWorker>()\n    .setInputData(inputData)\n    .setInitialDelay(initialDelay, TimeUnit.SECONDS)\n    .build()\n\nWorkManager.getInstance(this).enqueue(workRequest)",
    "filename": "c11ce47c421f4ea20347ea6732807fb1_12.kt"
  },
  {
    "conversation_hash": "c11ce47c421f4ea20347ea6732807fb1",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "override suspend fun doWork(): Result {\n    val sharedPrefsString = inputData.getString(\"prefs\", null)\n    val sharedPrefs = applicationContext.getSharedPreferences(\"MySharedPreferences\", Context.MODE_PRIVATE)\n\n    return try {\n        val hasFineLocationPermission = ContextCompat.checkSelfPermission(\n            applicationContext,\n            Manifest.permission.ACCESS_FINE_LOCATION\n        ) == PackageManager.PERMISSION_GRANTED\n\n        if (!hasFineLocationPermission) {\n            return Result.failure()\n        }\n\n        val result = getLastKnownLocation()\n        // ...\n    } catch (e: Exception) {\n        Result.failure()\n    }\n}",
    "filename": "c11ce47c421f4ea20347ea6732807fb1_13.kt"
  },
  {
    "conversation_hash": "80cb52be8873c38a10814f4f1d78c390",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.getValue",
      "androidx.compose.runtime.mutableStateOf",
      "androidx.compose.runtime.setValue",
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewModelScope",
      "com.google.firebase.firestore.FirebaseFirestore",
      "com.patrykandpatrick.vico.LineEntry",
      "java.time.LocalDate",
      "java.time.ZoneId",
      "kotlinx.coroutines.launch"
    ],
    "code": "import androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.patrykandpatrick.vico.LineEntry\nimport kotlinx.coroutines.launch\nimport java.time.LocalDate\nimport java.time.ZoneId\n\nclass ExpensesViewModel : ViewModel() {\n    private val firestore = FirebaseFirestore.getInstance()\n\n    var lineData by mutableStateOf<List<LineEntry>>(emptyList())\n\n    init {\n        fetchExpenses()\n    }\n\n    private fun fetchExpenses() {\n        viewModelScope.launch {\n            firestore.collection(\"expenses\")\n                .get()\n                .addOnSuccessListener { querySnapshot ->\n                    val expensesList = querySnapshot.documents.mapNotNull { doc ->\n                        doc.toObject(Expense::class.java)\n                    }\n\n                    lineData = mapExpensesToLineEntry(expensesList)\n                }\n        }\n    }\n\n    private fun mapExpensesToLineEntry(data: List<Expense>): List<LineEntry> {\n        val lineData = mutableListOf<LineEntry>()\n        data.forEach { expense ->\n            val date = expense.date.toInstant()\n                .atZone(ZoneId.systemDefault())\n                .toLocalDate()\n\n            lineData.add(\n                LineEntry(\n                    x = date.dayOfYear.toFloat(),\n                    y = expense.amount.toFloat()\n                )\n            )\n        }\n\n        return lineData\n    }\n}\n\ndata class Expense(\n    val amount: Double,\n    val date: Date\n)",
    "filename": "80cb52be8873c38a10814f4f1d78c390_1.kt"
  },
  {
    "conversation_hash": "80cb52be8873c38a10814f4f1d78c390",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "com.patrykandpatrick.vico.compose.LineChart"
    ],
    "code": "import com.patrykandpatrick.vico.compose.LineChart\n\n@Composable\nfun ExpensesLineChart(data: List<LineEntry>) {\n    LineChart(data, modifier = Modifier.fillMaxSize()) {\n        ShowXAxis(isVisible = true)\n        ShowYAxis(isVisible = true)\n        ShowLegend(isVisible = false)\n    }\n}",
    "filename": "80cb52be8873c38a10814f4f1d78c390_3.kt"
  },
  {
    "conversation_hash": "80cb52be8873c38a10814f4f1d78c390",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyApp() {\n    MaterialTheme {\n        // Your NavHost or main content\n        ExpensesGraphScreen()\n    }\n}",
    "filename": "80cb52be8873c38a10814f4f1d78c390_5.kt"
  },
  {
    "conversation_hash": "1b49d01c287833490660e3dda0a3bbad",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.hilt.work.HiltWorkerFactory",
      "androidx.work.Configuration",
      "androidx.work.PeriodicWorkRequestBuilder",
      "androidx.work.WorkManager",
      "dagger.hilt.android.HiltAndroidApp",
      "java.util.concurrent.TimeUnit"
    ],
    "code": "import androidx.hilt.work.HiltWorkerFactory\nimport androidx.work.Configuration\nimport androidx.work.PeriodicWorkRequestBuilder\nimport androidx.work.WorkManager\nimport dagger.hilt.android.HiltAndroidApp\nimport java.util.concurrent.TimeUnit\n\n@HiltAndroidApp\nclass XegeraTrucking : Application(), Configuration.Provider {\n\n    override fun onCreate() {\n        super.onCreate()\n        scheduleLocationUpdate(5)\n    }\n\n    fun scheduleLocationUpdate(intervalMinutes: Long) {\n        val workRequest = PeriodicWorkRequestBuilder<UpdateLocationWorker>(intervalMinutes, TimeUnit.MINUTES)\n            .build()\n\n        WorkManager.getInstance(this).enqueue(workRequest)\n    }\n\n    override fun getWorkManagerConfiguration(): Configuration {\n        return Configuration.Builder()\n            .setWorkerFactory(workerFactory)\n            .build()\n    }\n\n    @Inject\n    lateinit var workerFactory: HiltWorkerFactory\n}",
    "filename": "1b49d01c287833490660e3dda0a3bbad_0.kt"
  },
  {
    "conversation_hash": "1b49d01c287833490660e3dda0a3bbad",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.content.BroadcastReceiver",
      "android.content.Context",
      "android.content.Intent"
    ],
    "code": "import android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\n\nclass LocationUpdateReceiver : BroadcastReceiver() {\n    companion object {\n        const val ACTION_UPDATE_LOCATION = \"com.yourpackage.location.ACTION_UPDATE_LOCATION\"\n    }\n\n    override fun onReceive(context: Context, intent: Intent) {\n        if (intent.action == ACTION_UPDATE_LOCATION) {\n            // Call your method to update the location\n            // Make sure to run it on a background thread\n        }\n    }\n}",
    "filename": "1b49d01c287833490660e3dda0a3bbad_1.kt"
  },
  {
    "conversation_hash": "1b49d01c287833490660e3dda0a3bbad",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "android.app.AlarmManager",
      "android.app.PendingIntent",
      "android.content.Context",
      "android.content.Intent",
      "dagger.hilt.android.HiltAndroidApp"
    ],
    "code": "import android.app.AlarmManager\nimport android.app.PendingIntent\nimport android.content.Context\nimport android.content.Intent\nimport dagger.hilt.android.HiltAndroidApp\n\n@HiltAndroidApp\nclass XegeraTrucking : Application() {\n    private lateinit var alarmManager: AlarmManager\n\n    override fun onCreate() {\n        super.onCreate()\n        alarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager\n        scheduleLocationUpdate(5 * 60 * 1000L) // 5 minutes in milliseconds\n    }\n\n    fun scheduleLocationUpdate(intervalMillis: Long) {\n        val intent = Intent(this, LocationUpdateReceiver::class.java).apply {\n            action = LocationUpdateReceiver.ACTION_UPDATE_LOCATION\n        }\n\n        val pendingIntent = PendingIntent.getBroadcast(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT)\n\n        alarmManager.setRepeating(\n            AlarmManager.RTC_WAKEUP,\n            System.currentTimeMillis() + intervalMillis,\n            intervalMillis,\n            pendingIntent\n        )\n    }\n}",
    "filename": "1b49d01c287833490660e3dda0a3bbad_3.kt"
  },
  {
    "conversation_hash": "1b49d01c287833490660e3dda0a3bbad",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.Manifest",
      "android.content.BroadcastReceiver",
      "android.content.Context",
      "android.content.Intent",
      "android.content.pm.PackageManager",
      "androidx.core.app.ActivityCompat",
      "com.google.android.gms.location.FusedLocationProviderClient",
      "com.google.android.gms.location.LocationServices",
      "kotlinx.coroutines.CoroutineScope",
      "kotlinx.coroutines.Dispatchers",
      "kotlinx.coroutines.launch"
    ],
    "code": "import android.Manifest\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport androidx.core.app.ActivityCompat\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\n\nclass LocationUpdateReceiver : BroadcastReceiver() {\n    companion object {\n        const val ACTION_UPDATE_LOCATION = \"com.yourpackage.location.ACTION_UPDATE_LOCATION\"\n    }\n\n    private lateinit var fusedLocationClient: FusedLocationProviderClient\n\n    override fun onReceive(context: Context, intent: Intent) {\n        if (intent.action == ACTION_UPDATE_LOCATION) {\n            fusedLocationClient = LocationServices.getFusedLocationProviderClient(context)\n            updateLocation(context)\n        }\n    }\n\n    // Update location using FusedLocationProviderClient\n    private fun updateLocation(context: Context) {\n        CoroutineScope(Dispatchers.IO).launch {\n            if (ActivityCompat.checkSelfPermission(\n                    context,\n                    Manifest.permission.ACCESS_FINE_LOCATION\n                ) == PackageManager.PERMISSION_GRANTED\n                || ActivityCompat.checkSelfPermission(\n                    context,\n                    Manifest.permission.ACCESS_COARSE_LOCATION\n                ) == PackageManager.PERMISSION_GRANTED\n            ) {\n                try {\n                    val lastLocation = fusedLocationClient.lastLocation.await()\n\n                    if (lastLocation != null) {\n                        // Handle the location update here\n                        // For example, you can update the location to your server or store it in your app\n                        println(\"Location Updated - Latitude: ${lastLocation.latitude}, Longitude: ${lastLocation.longitude}\")\n                    } else {\n                        println(\"Failed to get the location\")\n                    }\n                } catch (exception: Exception) {\n                    println(\"Error updating location: $exception\")\n                }\n            } else {\n                // The app does not have the required location permissions. Handle this case accordingly.\n                println(\"No location permission granted\")\n            }\n        }\n    }\n}",
    "filename": "1b49d01c287833490660e3dda0a3bbad_5.kt"
  },
  {
    "conversation_hash": "31244df03540fb70cf9d2cfe4065f72c",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class FlashcardAdapter(private val flashcards: List<Flashcard>, private val onItemClick: (Flashcard) -> Unit) :\n    RecyclerView.Adapter<FlashcardAdapter.FlashcardViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): FlashcardViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.flashcard_item, parent, false)\n        return FlashcardViewHolder(view)\n    }\n\n    override fun getItemCount(): Int {\n        return flashcards.size\n    }\n\n    override fun onBindViewHolder(holder: FlashcardViewHolder, position: Int) {\n        holder.bind(flashcards[position], onItemClick)\n    }\n\n    class FlashcardViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val frontTextView: TextView = itemView.findViewById(R.id.flashcard_front)\n\n        fun bind(flashcard: Flashcard, onItemClick: (Flashcard) -> Unit) {\n            frontTextView.text = flashcard.front\n            itemView.setOnClickListener { onItemClick(flashcard) }\n        }\n    }\n}",
    "filename": "31244df03540fb70cf9d2cfe4065f72c_1.kt"
  },
  {
    "conversation_hash": "f0880b98ebc21cfaee11124920899eb1",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Build",
      "java.util."
    ],
    "code": "import android.os.Build\nimport java.util.*\n\nfun getSupportedAbis(): List<String> {\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        Build.SUPPORTED_ABIS.toList()\n    } else {\n        val supportedAbis = ArrayList<String>()\n        supportedAbis.add(Build.CPU_ABI)\n        if (Build.CPU_ABI2 != \"unknown\") {\n            supportedAbis.add(Build.CPU_ABI2)\n        }\n        supportedAbis\n    }\n}",
    "filename": "f0880b98ebc21cfaee11124920899eb1_0.kt"
  },
  {
    "conversation_hash": "093f43a76ec16de8f953741728ac1697",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.app.Activity",
      "android.content.Context",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.widget.ArrayAdapter",
      "android.widget.TextView",
      "ru.systtech.mtinstaller.R",
      "ru.systtech.mtinstaller.databinding.SpinnerCountryCodeItemBinding"
    ],
    "code": "package ru.systtech.mtinstaller.ui.verification.layout\n\nimport android.app.Activity\nimport android.content.Context\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.ArrayAdapter\nimport android.widget.TextView\nimport ru.systtech.mtinstaller.R\nimport ru.systtech.mtinstaller.databinding.SpinnerCountryCodeItemBinding\n\nclass CountryCodeAdapter constructor(\n    context: Context,\n    resource: Int,\n    textViewResource: Int,\n    objects: Array<Pair<String, String>>\n) :\n    ArrayAdapter<Pair<String, String>>(context, resource, textViewResource, objects) {\n\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n        val item = getItem(position)\n\n        val viewBinding = convertView?.let { SpinnerCountryCodeItemBinding.bind(it) }\n            ?: SpinnerCountryCodeItemBinding.inflate(LayoutInflater.from(context), parent, false)\n\n        viewBinding.textViewResourceId.text = item?.first\n\n        return viewBinding.root\n    }\n\n    override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {\n        val item = getItem(position)\n\n        val viewBinding = convertView?.let { SpinnerCountryCodeItemBinding.bind(it) }\n            ?: SpinnerCountryCodeItemBinding.inflate(LayoutInflater.from(context), parent, false)\n\n        viewBinding.spinnerCountryCode.text = item?.first\n        viewBinding.spinnerCountryName.text = item?.second\n\n        return viewBinding.root\n    }\n}",
    "filename": "093f43a76ec16de8f953741728ac1697_1.kt"
  },
  {
    "conversation_hash": "093f43a76ec16de8f953741728ac1697",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.app.Activity",
      "android.content.Context",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.widget.ArrayAdapter",
      "android.widget.TextView",
      "ru.systtech.mtinstaller.R",
      "ru.systtech.mtinstaller.databinding.SimpleSpinnerDropdownItemBinding",
      "ru.systtech.mtinstaller.databinding.SpinnerCountryCodeItemBinding"
    ],
    "code": "package ru.systtech.mtinstaller.ui.verification.layout\n\nimport android.app.Activity\nimport android.content.Context\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.ArrayAdapter\nimport android.widget.TextView\nimport ru.systtech.mtinstaller.R\nimport ru.systtech.mtinstaller.databinding.SimpleSpinnerDropdownItemBinding\nimport ru.systtech.mtinstaller.databinding.SpinnerCountryCodeItemBinding\n\nclass CountryCodeAdapter constructor(\n    context: Context,\n    resource: Int,\n    objects: Array<Pair<String, String>>\n) :\n    ArrayAdapter<Pair<String, String>>(context, resource, objects) {\n\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n        val item = getItem(position)\n\n        val viewBinding = convertView?.let { SimpleSpinnerDropdownItemBinding.bind(it) }\n            ?: SimpleSpinnerDropdownItemBinding.inflate(LayoutInflater.from(context), parent, false)\n\n        viewBinding.text1.text = item?.first\n\n        return viewBinding.root\n    }\n\n    override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {\n        val item = getItem(position)\n\n        val viewBinding = convertView?.let { SpinnerCountryCodeItemBinding.bind(it) }\n            ?: SpinnerCountryCodeItemBinding.inflate(LayoutInflater.from(context), parent, false)\n\n        viewBinding.spinnerCountryCode.text = item?.first\n        viewBinding.spinnerCountryName.text = item?.second\n\n        return viewBinding.root\n    }\n}",
    "filename": "093f43a76ec16de8f953741728ac1697_2.kt"
  },
  {
    "conversation_hash": "f2c7f8856e21bc6c2dfcd748143e8d47",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.widget.Button",
      "android.widget.Toast",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.os.Bundle\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val buttonOk = findViewById<Button>(R.id.button_ok)\n        buttonOk.setOnClickListener {\n            Toast.makeText(this, \"OK\", Toast.LENGTH_SHORT).show()\n        }\n    }\n}",
    "filename": "f2c7f8856e21bc6c2dfcd748143e8d47_1.kt"
  },
  {
    "conversation_hash": "17101343934b7bf7c814242496a97cd9",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity(), MyInterface {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        \n        val button = findViewById<Button>(R.id.button)\n        button.setOnClickListener {\n            onOkClicked()\n        }\n    }\n\n    override fun onOkClicked() {\n        Toast.makeText(this, \"OK\", Toast.LENGTH_SHORT).show()\n    }\n}",
    "filename": "17101343934b7bf7c814242496a97cd9_1.kt"
  },
  {
    "conversation_hash": "a3d85df8e250c11a94d157fdc288672d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "javafx.application.Application",
      "javafx.geometry.Pos",
      "javafx.scene.Scene",
      "javafx.scene.control.Alert",
      "javafx.scene.control.Alert.AlertType",
      "javafx.scene.control.Button",
      "javafx.scene.layout.StackPane",
      "javafx.stage.Stage"
    ],
    "code": "import javafx.application.Application\nimport javafx.geometry.Pos\nimport javafx.scene.Scene\nimport javafx.scene.control.Alert\nimport javafx.scene.control.Button\nimport javafx.scene.layout.StackPane\nimport javafx.stage.Stage\nimport javafx.scene.control.Alert.AlertType\n\nclass MyApp : Application() {\n\n    override fun start(primaryStage: Stage) {\n        // 創建按鈕及設置按鈕文字\n        val button = Button(\"按我\")\n        \n        // 為按鈕設置單擊事件\n        button.setOnAction {\n            showAlert(AlertType.INFORMATION, \"提示\", \"OK\")\n        }\n\n        // 使用StackPane布局管理器並將按鈕添加到其中\n        val root = StackPane(button)\n        StackPane.setAlignment(button, Pos.CENTER)\n\n        // 創建並設置場景\n        val scene = Scene(root, 300.0, 200.0)\n        primaryStage.scene = scene\n        primaryStage.title = \"Kotlin JavaFX\"\n        primaryStage.show()\n    }\n\n    // 彈出提示框功能\n    private fun showAlert(alertType: AlertType, title: String, message: String) {\n        val alert = Alert(alertType)\n        alert.title = title\n        alert.headerText = null\n        alert.contentText = message\n        alert.showAndWait()\n    }\n}\n\nfun main() {\n    // 啟動應用程式\n    Application.launch(MyApp::class.java)\n}",
    "filename": "a3d85df8e250c11a94d157fdc288672d_0.kt"
  },
  {
    "conversation_hash": "f09ea8c78fb7dc132eaac50fc636c2bc",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val constructor: (CharArray) -> String = ::String\n    val str = constructor(charArrayOf('H', 'e', 'l', 'l', 'o'))\n    println(str) // 输出 \"Hello\"\n}",
    "filename": "f09ea8c78fb7dc132eaac50fc636c2bc_1.kt"
  },
  {
    "conversation_hash": "6b0a864a41ef06e7993d319d6135ebc9",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n       if (intent != null) {\n           scheduleUpdateLocationAlarm(this)\n       }\n       return Service.START_STICKY\n   }",
    "filename": "6b0a864a41ef06e7993d319d6135ebc9_1.kt"
  },
  {
    "conversation_hash": "6b0a864a41ef06e7993d319d6135ebc9",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onReceive(context: Context, intent: Intent?) {\n    val locationManager = context.getSystemService(Context.LOCATION_SERVICE) as LocationManager\n\n    val accessToken = intent?.getStringExtra(\"jwt\") ?: getJWTTokenFromPrefs(context)\n    Log.d(\"LocationJWT\", accessToken.toString())\n\n    val date = LocalDateTime.now()\n    val formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\")\n    val formattedDate = date.format(formatter)\n\n    val result = getLastKnownLocation(locationManager)\n\n    if (result != null) {\n        GlobalScope.launch {\n            try {\n                accessToken?.let {\n                    val updateLocationRequest = UpdateLocationRequest(\n                        token = it,\n                        latitude = result.latitude,\n                        longitude = result.longitude,\n                        formattedDate = formattedDate\n                    )\n                    service.updateLocation(updateLocationRequest)\n                }\n                val location = \"Latitude: {result.latitude}, Longitude:{result.longitude}\"\n                Log.i(\"Location\", location)\n            } catch (e: Exception) {\n                Log.e(\"LOCATION_JWT3\", \"updateLocation failed\", e)\n            }\n        }\n    } else {\n        Log.w(\"Location\", \"getLastKnownLocation returned null\")\n    }\n}",
    "filename": "6b0a864a41ef06e7993d319d6135ebc9_5.kt"
  },
  {
    "conversation_hash": "6b0a864a41ef06e7993d319d6135ebc9",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onReceive(context: Context, intent: Intent?) {\n    val locationManager = context.getSystemService(Context.LOCATION_SERVICE) as LocationManager\n\n    val accessToken = intent?.getStringExtra(\"jwt\") ?: getJWTTokenFromPrefs(context)\n    Log.d(\"LocationJWT\", accessToken.toString())\n\n    val date = LocalDateTime.now()\n    val formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\")\n    val formattedDate = date.format(formatter)\n\n    val result = getLastKnownLocation(locationManager)\n\n    if (result != null) {\n        GlobalScope.launch {\n            try {\n                accessToken?.let {\n                    val updateLocationRequest = UpdateLocationRequest(\n                        token = it,\n                        latitude = result.latitude,\n                        longitude = result.longitude,\n                        formattedDate = formattedDate\n                    )\n                    service.updateLocation(updateLocationRequest)\n                }\n                val location = \"Latitude: {result.latitude}, Longitude:{result.longitude}\"\n                Log.i(\"Location\", location)\n            } catch (e: Exception) {\n                Log.e(\"LOCATION_JWT3\", \"updateLocation failed\", e)\n            }\n        }\n    } else {\n        Log.w(\"Location\", \"getLastKnownLocation returned null\")\n    }\n}",
    "filename": "6b0a864a41ef06e7993d319d6135ebc9_6.kt"
  },
  {
    "conversation_hash": "6b0a864a41ef06e7993d319d6135ebc9",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onRequestPermissionsResult(\n       requestCode: Int,\n       permissions: Array<out String>,\n       grantResults: IntArray\n   ) {\n       if (requestCode == REQUEST_CODE_PERMISSIONS) {\n           if (grantResults.size == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n               // Permission granted, request background location permissions\n               ActivityCompat.requestPermissions(\n                   this,\n                   arrayOf(Manifest.permission.ACCESS_BACKGROUND_LOCATION),\n                   REQUEST_CODE_PERMISSIONS)\n           } else {\n               // Permission not granted\n           }\n       }\n   }",
    "filename": "6b0a864a41ef06e7993d319d6135ebc9_9.kt"
  },
  {
    "conversation_hash": "6b0a864a41ef06e7993d319d6135ebc9",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun BackgroundLocationPermissionRequester(\n    onPermissionGranted: () -> Unit,\n    onPermissionDenied: () -> Unit,\n    onCancelPermissionRequest: () -> Unit,\n) {\n    val context = LocalContext.current\n    val backgroundLocationPermissionState = rememberPermissionState(\n        android.Manifest.permission.ACCESS_BACKGROUND_LOCATION\n    )\n\n    val shouldShowBackgroundLocationRationale = backgroundLocationPermissionState.shouldShowRationale\n\n    PermissionRequested(\n        permissionState = backgroundLocationPermissionState,\n        permissionNotAvailableContent = {\n            Toast.makeText(\n                context,\n                \"Background location permission is not available\",\n                Toast.LENGTH_SHORT\n            ).show()\n\n            onPermissionDenied()\n        },\n        permissionNotGrantedContent = {\n            Column(modifier = Modifier.fillMaxSize()) {\n                Text(text = \"Location permission is required for this feature\")\n                Spacer(modifier = Modifier.height(8.dp))\n\n                Button(\n                    onClick = {\n                        backgroundLocationPermissionState.launchPermissionRequest()\n                    }\n                ) {\n                    Text(text = \"Request permission\")\n                }\n            }\n        },\n        permissionGrantedContent = {\n            onPermissionGranted()\n        },\n        shouldShowRationaleContent = {\n            Column(modifier = Modifier.fillMaxSize()) {\n                Text(text = \"Location permission is required to use this feature\")\n                Spacer(modifier = Modifier.height(8.dp))\n                Button(\n                    onClick = backgroundLocationPermissionState::launchPermissionRequest\n                ) {\n                    Text(text = \"Request permission\")\n                }\n                Spacer(modifier = Modifier.height(8.dp))\n                Button(onClick = onCancelPermissionRequest) {\n                    Text(text = \"Cancel\")\n                }\n            }\n        }\n    )\n}",
    "filename": "6b0a864a41ef06e7993d319d6135ebc9_11.kt"
  },
  {
    "conversation_hash": "6d3417c12f143c6d703e52f3a171fdcd",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "setContent {\n    val context = LocalContext.current\n\n    val locationPermissionsState = rememberMultiplePermissionsState(\n        permissions = listOf(\n            android.Manifest.permission.ACCESS_COARSE_LOCATION,\n            android.Manifest.permission.ACCESS_FINE_LOCATION,\n            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION\n        )\n    )\n\n    LaunchedEffect(Unit) {\n        locationPermissionsState.launchMultiplePermissionRequest()\n    }\n\n    Scaffold {\n        if (!locationPermissionsState.permissions[2].hasPermission) {\n            locationPermissionsState.shouldShowRationale\n        }\n        if (!locationPermissionsState.shouldShowRationale) {\n            Toast.makeText(context, \"Lokasi background dibutuhkan\", Toast.LENGTH_SHORT).show()\n        }\n    }\n}",
    "filename": "6d3417c12f143c6d703e52f3a171fdcd_0.kt"
  },
  {
    "conversation_hash": "369f35cefee72fb8ba5e15bace206c76",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun Screen() {\n    val locationPermissionsState = rememberMultiplePermissionsState(\n        permissions = listOf(\n            android.Manifest.permission.ACCESS_COARSE_LOCATION,\n            android.Manifest.permission.ACCESS_FINE_LOCATION,\n            android.Manifest.permission.ACCESS_BACKGROUND_LOCATION\n        )\n    )\n\n    LaunchedEffect(Unit) {\n        locationPermissionsState.launchMultiplePermissionRequest()\n    }\n\n    // TODO: Show main screen UI\n}",
    "filename": "369f35cefee72fb8ba5e15bace206c76_1.kt"
  },
  {
    "conversation_hash": "369f35cefee72fb8ba5e15bace206c76",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "val locationPermissionsState = rememberMultiplePermissionsState(\n    permissions = listOf(\n        android.Manifest.permission.ACCESS_COARSE_LOCATION,\n        android.Manifest.permission.ACCESS_FINE_LOCATION,\n        android.Manifest.permission.ACCESS_BACKGROUND_LOCATION\n    )\n)\n\nif (!locationPermissionsState.permissions[2].hasPermission) {\n\n    // Request the background location permission\n    LaunchedEffect(Unit) {\n        locationPermissionsState.requestPermission(android.Manifest.permission.ACCESS_BACKGROUND_LOCATION)\n    }\n\n    // Show dialog directing the user to the app settings\n    LaunchedEffect(locationPermissionsState) {\n        if (!locationPermissionsState.permissions[2].shouldShowRationale && !locationPermissionsState.permissions[2].hasPermission) {\n            val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n            intent.data = Uri.fromParts(\"package\", context.packageName, null)\n            context.startActivity(intent)\n        }\n    }\n}\n\nLaunchedEffect(Unit) {\n    if (locationPermissionsState.permissions[2].hasPermission) {\n        // Perform action that requires background location permission\n    }\n}",
    "filename": "369f35cefee72fb8ba5e15bace206c76_5.kt"
  },
  {
    "conversation_hash": "369f35cefee72fb8ba5e15bace206c76",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "val locationPermissionsState = rememberMultiplePermissionsState(\n    permissions = listOf(\n        android.Manifest.permission.ACCESS_COARSE_LOCATION,\n        android.Manifest.permission.ACCESS_FINE_LOCATION,\n        android.Manifest.permission.ACCESS_BACKGROUND_LOCATION\n    )\n)\n\nLaunchedEffect(Unit) {\n    locationPermissionsState.launchMultiplePermissionRequest()\n    locationPermissionsState.shouldShowRationale\n}\n\nif (!locationPermissionsState.shouldShowRationale) {\n    // Show rationale dialog to explain why the permission is needed   \n    Toast.makeText(context, \"Lokasi background dibutuhkan\", Toast.LENGTH_SHORT).show()\n}\n\nLaunchedEffect(locationPermissionsState) {\n    if (!locationPermissionsState.permissions[2].shouldShowRationale && !locationPermissionsState.permissions[2].hasPermission) {\n        // Direct the user to the app settings to enable the permission\n        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)\n        intent.data = Uri.fromParts(\"package\", context.packageName, null)\n        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\n        context.startActivity(intent)\n    }\n}\n\nif (locationPermissionsState.permissions[2].hasPermission) {\n    // Perform action that requires background location permission\n}",
    "filename": "369f35cefee72fb8ba5e15bace206c76_6.kt"
  },
  {
    "conversation_hash": "355fb742a1ad5b2191b38203eebb7100",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "enum class TimeRange {\n    WEEKLY,\n    MONTHLY,\n    YEARLY\n}\n\nfun groupExpensesByTimeRange(expenses: List<ExpenseData>, timeRange: TimeRange): List<ExpenseData> {\n    return when (timeRange) {\n        TimeRange.WEEKLY -> expenses.groupBy { it.date.with(WeekFields.ISO.dayOfWeek(), 1) }\n        TimeRange.MONTHLY -> expenses.groupBy { it.date.withDayOfMonth(1) }\n        TimeRange.YEARLY -> expenses.groupBy { it.date.withDayOfYear(1) }\n    }.map { (date, groupedExpenses) ->\n        ExpenseData(\n            date = date,\n            amount = groupedExpenses.sumOf { it.amount }\n        )\n    }\n}",
    "filename": "355fb742a1ad5b2191b38203eebb7100_2.kt"
  },
  {
    "conversation_hash": "355fb742a1ad5b2191b38203eebb7100",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "app.patrykp.vico.core.LineData",
      "app.patrykp.vico.core.compose.LineChart",
      "java.time.format.DateTimeFormatter"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport app.patrykp.vico.core.LineData\nimport app.patrykp.vico.core.compose.LineChart\nimport java.time.format.DateTimeFormatter\n\n@Composable\nfun ExpensesChart(expenses: List<ExpenseData>, timeRange: TimeRange) {\n    val groupedExpenses = groupExpensesByTimeRange(expenses, timeRange)\n    val lineData = LineData(\n        points = groupedExpenses.map { it.amount },\n        xAxisLabels = groupedExpenses.map {\n            when (timeRange) {\n                TimeRange.WEEKLY -> it.date.format(DateTimeFormatter.ofPattern(\"EEE, MMM d\"))\n                TimeRange.MONTHLY -> it.date.format(DateTimeFormatter.ofPattern(\"MMM yyyy\"))\n                TimeRange.YEARLY -> it.date.format(DateTimeFormatter.ofPattern(\"yyyy\"))\n            }\n        }\n    )\n\n    LineChart(data = lineData)\n}",
    "filename": "355fb742a1ad5b2191b38203eebb7100_3.kt"
  },
  {
    "conversation_hash": "355fb742a1ad5b2191b38203eebb7100",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyApp() {\n    MaterialTheme {\n        val expenses = listOf(\n            /* populate your expenses data here */\n        )\n        val timeRange = TimeRange.MONTHLY // Change this to TimeRange.WEEKLY or TimeRange.YEARLY as desired\n\n        Column(modifier = Modifier.padding(16.dp)) {\n            Text(\"Expenses Chart\")\n            ExpensesChart(expenses = expenses, timeRange = timeRange)\n        }\n    }\n}",
    "filename": "355fb742a1ad5b2191b38203eebb7100_4.kt"
  },
  {
    "conversation_hash": "c5ea1a2f59fee5e6313c20b13d44e2a8",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "fun fetchExpensesData(timeFrame: String) {\n    // Fetch data from the respective sub-collection based on the selected time frame\n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(timeFrame.toLowerCase())\n        .orderBy(\"timestamp\", Query.Direction.ASCENDING)\n\n    query.get().addOnSuccessListener { result ->\n        val expenses = mutableListOf<Float>()\n        for (document in result) {\n            val amount = document.getDouble(\"amount\")?.toFloat() ?: 0f\n            expenses.add(amount)\n        }\n        chartEntries.value = entriesOf(*expenses.map { it to 0 }.toTypedArray())\n    }\n}",
    "filename": "c5ea1a2f59fee5e6313c20b13d44e2a8_5.kt"
  },
  {
    "conversation_hash": "c5ea1a2f59fee5e6313c20b13d44e2a8",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "fun fetchExpensesData(timeFrame: String) {\n    // Fetch data from the respective sub-collection based on the selected time frame\n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(timeFrame.toLowerCase())\n        .orderBy(FieldPath.documentId()) // Order by document name\n\n    query.get().addOnSuccessListener { result ->\n        val expenses = mutableListOf<Float>()\n        for (document in result) {\n            val amount = document.getDouble(\"amount\")?.toFloat() ?: 0f\n            expenses.add(amount)\n        }\n        chartEntries.value = entriesOf(*expenses.map { it to 0 }.toTypedArray())\n    }\n}",
    "filename": "c5ea1a2f59fee5e6313c20b13d44e2a8_8.kt"
  },
  {
    "conversation_hash": "c5ea1a2f59fee5e6313c20b13d44e2a8",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [
      "java.text.SimpleDateFormat",
      "java.util.Date",
      "java.util.Locale"
    ],
    "code": "import java.text.SimpleDateFormat\nimport java.util.Date\nimport java.util.Locale\n\nfun fetchExpensesData(timeFrame: String) {\n    // Define the date formats for each time frame\n    val dateFormat = when (timeFrame) {\n        \"Weekly\" -> SimpleDateFormat(\"EEEE_dd_MMM_yyyy\", Locale.ENGLISH)\n        \"Monthly\" -> SimpleDateFormat(\"MMM_yyyy\", Locale.ENGLISH)\n        \"Yearly\" -> SimpleDateFormat(\"yyyy\", Locale.ENGLISH)\n        else -> throw IllegalArgumentException(\"Unsupported time frame: $timeFrame\")\n    }\n\n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(timeFrame.toLowerCase())\n\n    query.get().addOnSuccessListener { result ->\n        val expenses = mutableListOf<Pair<Float, Date>>()\n        for (document in result) {\n            val amount = document.getDouble(\"amount\")?.toFloat() ?: 0f\n            val date = dateFormat.parse(document.id) ?: Date()\n            expenses.add(amount to date)\n        }\n        // Sort the expenses by date\n        expenses.sortBy { it.second }\n\n        // Retain only the amounts for the chart entries\n        chartEntries.value = entriesOf(*expenses.map { it.first to 0 }.toTypedArray())\n    }\n}",
    "filename": "c5ea1a2f59fee5e6313c20b13d44e2a8_9.kt"
  },
  {
    "conversation_hash": "c5ea1a2f59fee5e6313c20b13d44e2a8",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "java.util.Calendar"
    ],
    "code": "import java.util.Calendar\n\nfun fetchExpensesData(timeFrame: String) {\n    // Define the date formats for each time frame\n    val dateFormat = when (timeFrame) {\n        \"Weekly\" -> SimpleDateFormat(\"EEEE_dd_MMM_yyyy\", Locale.ENGLISH)\n        \"Monthly\" -> SimpleDateFormat(\"MMM_yyyy\", Locale.ENGLISH)\n        \"Yearly\" -> SimpleDateFormat(\"yyyy\", Locale.ENGLISH)\n        else -> throw IllegalArgumentException(\"Unsupported time frame: $timeFrame\")\n    }\n\n    val collectionPath = if (timeFrame == \"Weekly\") \"daily\" else timeFrame.toLowerCase()\n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(collectionPath)\n\n    query.get().addOnSuccessListener { result ->\n        val expenses = mutableListOf<Pair<Float, Date>>()\n        for (document in result) {\n            val amount = document.getDouble(\"amount\")?.toFloat() ?: 0f\n            val date = dateFormat.parse(document.id) ?: Date()\n            expenses.add(amount to date)\n        }\n\n        if (timeFrame == \"Weekly\") {\n            // Filter the documents to include only those that belong to the current week\n            val calendar = Calendar.getInstance().apply { firstDayOfWeek = Calendar.MONDAY }\n            calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY)\n            val startDateOfWeek = calendar.time\n\n            calendar.add(Calendar.DATE, 6)\n            val endDateOfWeek = calendar.time\n\n            expenses.retainAll { it.second >= startDateOfWeek && it.second <= endDateOfWeek }\n        }\n\n        // Sort the expenses by date\n        expenses.sortBy { it.second }\n\n        // Retain only the amounts for the chart entries\n        chartEntries.value = entriesOf(*expenses.map { it.first to 0 }.toTypedArray())\n    }\n}",
    "filename": "c5ea1a2f59fee5e6313c20b13d44e2a8_10.kt"
  },
  {
    "conversation_hash": "c5ea1a2f59fee5e6313c20b13d44e2a8",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [
      "java.util.Calendar"
    ],
    "code": "import java.util.Calendar\n\nfun fetchExpensesData(timeFrame: String) {\n    val startCalendar = Calendar.getInstance()\n    val endCalendar = Calendar.getInstance()\n    \n    when (timeFrame) {\n        \"Daily\" -> {\n            // Daily: Showing 7 days in a week\n            startCalendar.set(Calendar.DAY_OF_WEEK, startCalendar.firstDayOfWeek)\n            endCalendar.set(Calendar.DAY_OF_WEEK, startCalendar.firstDayOfWeek)\n            endCalendar.add(Calendar.DATE, 6)\n        }\n        \"Weekly\" -> {\n            // Weekly: Showing 4 weeks in a month\n            startCalendar.set(Calendar.DAY_OF_MONTH, 1)\n            endCalendar.set(Calendar.DAY_OF_MONTH, startCalendar.getActualMaximum(Calendar.DAY_OF_MONTH))\n        }\n        \"Monthly\" -> {\n            // Monthly: Showing 12 months in a year\n            startCalendar.set(Calendar.MONTH, 0)\n            startCalendar.set(Calendar.DAY_OF_MONTH, 1)\n            endCalendar.set(Calendar.MONTH, 11)\n            endCalendar.set(Calendar.DAY_OF_MONTH, endCalendar.getActualMaximum(Calendar.DAY_OF_MONTH))\n        }\n        \"Yearly\" -> {\n            // Remove time frame handling as the current implementation supports it\n        }\n        else -> throw IllegalArgumentException(\"Unsupported time frame: $timeFrame\")\n    }\n\n    // Define the date formats for each time frame\n    val dateFormat = SimpleDateFormat(\"EEEE_dd_MMM_yyyy\", Locale.ENGLISH)\n\n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(\"daily\")\n\n    query.get().addOnSuccessListener { result ->\n        val expenses = mutableListOf<Pair<Float, Date>>()\n        for (document in result) {\n            val amount = document.getDouble(\"amount\")?.toFloat() ?: 0f\n            val date = dateFormat.parse(document.id) ?: Date()\n            expenses.add(amount to date)\n        }\n\n        // Filter the documents based on the calculated start and end dates\n        expenses.retainAll { it.second >= startCalendar.time && it.second <= endCalendar.time }\n\n        // Sort the expenses by date\n        expenses.sortBy { it.second }\n\n        // Retain only the amounts for the chart entries\n        chartEntries.value = entriesOf(*expenses.map { it.first to 0 }.toTypedArray())\n    }\n}",
    "filename": "c5ea1a2f59fee5e6313c20b13d44e2a8_12.kt"
  },
  {
    "conversation_hash": "c5ea1a2f59fee5e6313c20b13d44e2a8",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [
      "java.util.Calendar"
    ],
    "code": "import java.util.Calendar\n\nfun fetchExpensesData(timeFrame: String) {\n    val startCalendar = Calendar.getInstance()\n    val endCalendar = Calendar.getInstance()\n    \n    // ... (rest of the existing code unchanged)\n    \n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(\"daily\")\n\n    query.get().addOnSuccessListener { result ->\n        val expenses = mutableListOf<Pair<Float, Date>>()\n        for (document in result) {\n            val total = document.getDouble(\"total\")?.toFloat() ?: 0f  // Fetch the 'total' field value\n            val date = dateFormat.parse(document.id) ?: Date()\n            expenses.add(total to date)  // Use 'total' instead of 'amount'\n        }\n\n        // ... (rest of the existing code unchanged)\n    }\n}",
    "filename": "c5ea1a2f59fee5e6313c20b13d44e2a8_13.kt"
  },
  {
    "conversation_hash": "c5ea1a2f59fee5e6313c20b13d44e2a8",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [],
    "code": "query.get().addOnSuccessListener { result ->\n    val expenses = mutableListOf<Pair<Float, Date>>()\n    for (document in result) {\n        val total = document.getDouble(\"total\")?.toFloat() ?: 0f\n        val date = dateFormat.parse(document.id) ?: Date()\n\n        println(\"Document: ${document.id}, Total: $total, Date: $date\") // Debug: print document details\n\n        expenses.add(total to date)\n    }\n\n    expenses.retainAll { it.second >= startCalendar.time && it.second <= endCalendar.time }\n    println(\"Filtered expenses: $expenses\") // Debug: print filtered expenses\n\n    expenses.sortBy { it.second }\n\n    chartEntries.value = entriesOf(*expenses.map { it.first to 0 }.toTypedArray())\n    println(\"Chart entries: ${chartEntries.value}\") // Debug: print chart entries\n}",
    "filename": "c5ea1a2f59fee5e6313c20b13d44e2a8_14.kt"
  },
  {
    "conversation_hash": "c5ea1a2f59fee5e6313c20b13d44e2a8",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun fetchExpensesData(timeFrame: String) {\n    // ... other code ...\n\n    // Define the collection path based on the time frame\n    val collectionPath = when (timeFrame) {\n        \"Daily\" -> \"daily\"\n        \"Weekly\" -> \"weekly\"\n        \"Monthly\" -> \"monthly\"\n        \"Yearly\" -> \"yearly\"\n        else -> \"daily\"\n    }\n\n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(collectionPath)  // Use the collectionPath variable here\n\n    // ... other code ...\n}",
    "filename": "c5ea1a2f59fee5e6313c20b13d44e2a8_17.kt"
  },
  {
    "conversation_hash": "c5ea1a2f59fee5e6313c20b13d44e2a8",
    "code_index": 18,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun fetchExpensesData(timeFrame: String) {\n    // Define the date formats for each time frame\n    val dateFormat = when (timeFrame) {\n        \"Daily\" -> SimpleDateFormat(\"EEEE_dd_MMM_yyyy\", Locale.ENGLISH)\n        \"Weekly\" -> SimpleDateFormat(\"'Week_'W'_MMM_yyyy\", Locale.ENGLISH) // Updated pattern to match \"Week_1_MMM_yyyy\"\n        \"Monthly\" -> SimpleDateFormat(\"MMM_yyyy\", Locale.ENGLISH)\n        \"Yearly\" -> SimpleDateFormat(\"yyyy\", Locale.ENGLISH)\n        else -> throw IllegalArgumentException(\"Unsupported time frame: $timeFrame\")\n    }\n\n    // ... rest of the existing code ...\n}",
    "filename": "c5ea1a2f59fee5e6313c20b13d44e2a8_18.kt"
  },
  {
    "conversation_hash": "d04a147b90969a851ac5303e79deae53",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ExpensesGraph(paddingValues: PaddingValues) {\n    val db = FirebaseFirestore.getInstance()\n\n    // Define your timeframes\n    val timeFrames = listOf(\"Daily\", \"Weekly\", \"Monthly\", \"Yearly\")\n    val selectedIndex = remember { mutableStateOf(0) }\n\n    // Fetch and process the expenses data\n    val chartEntries = remember { mutableStateOf(entriesOf(*arrayOf<Float>())) }\n    val chartModelProducer = ChartEntryModelProducer(chartEntries.value)\n    val markers = remember { mutableStateOf<Map<Float, Marker>>(emptyMap()) }\n\n    fun fetchExpensesData(timeFrame: String) {\n        val startCalendar = Calendar.getInstance()\n        val endCalendar = Calendar.getInstance()\n        val xAxisLabels: List<String>\n        var dateFormat: SimpleDateFormat\n\n        when (timeFrame) {\n            \"Daily\" -> {\n                // Daily: Showing 7 days in a week\n                xAxisLabels = listOf(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\")\n\n                // ... other code ...\n            }\n\n            \"Weekly\" -> {\n                // Weekly: Showing 4 weeks in a month\n                xAxisLabels = (1..4).map { \"Week $it\" }\n\n                // ... other code ...\n            }\n\n            \"Monthly\" -> {\n                // Monthly: Showing 12 months in a year\n                xAxisLabels = DateFormatSymbols().shortMonths.toList()\n\n                // ... other code ...\n            }\n\n            \"Yearly\" -> {\n                val currentYear = Calendar.getInstance().get(Calendar.YEAR)\n                xAxisLabels = (currentYear - 4 until currentYear + 1).map { it.toString() }\n\n                // ... other code ...\n            }\n\n            else -> {\n                throw IllegalArgumentException(\"Unsupported time frame: $timeFrame\")\n            }\n        }\n\n        val query = db.collection(\"expenses\")\n            .document(\"Kantin\")\n            .collection(timeFrame.lowercase())\n\n        query.get().addOnSuccessListener { result ->\n            val expensesMap = mutableMapOf<String, Float>()\n\n            for (document in result) {\n                val total = document.getDouble(\"total\")?.toFloat() ?: 0f\n                val dateKey = dateFormat.parse(document.id)?.let {\n                    when (timeFrame) {\n                        \"Daily\" -> SimpleDateFormat(\"EEE\", Locale.getDefault()).format(it)\n                        \"Weekly\" -> \"Week ${SimpleDateFormat(\"W\", Locale.getDefault()).format(it)}\"\n                        \"Monthly\" -> SimpleDateFormat(\"MMM\", Locale.getDefault()).format(it)\n                        \"Yearly\" -> SimpleDateFormat(\"yyyy\", Locale.getDefault()).format(it)\n                        else -> throw IllegalArgumentException(\"Unsupported time frame: $timeFrame\")\n                    }\n                } ?: \"unknown\"\n\n                expensesMap[dateKey] = total\n\n                println(\"Document: ${document.id}, Total: $total, Date key: $dateKey\")\n            }\n\n            // Map fixed X-axis labels to their values or zero\n            val expensesList = xAxisLabels.map { label -> expensesMap[label] ?: 0f }\n            chartEntries.value = entriesOf(*expensesList.mapIndexed { index, value -> index.toFloat() to value }.toTypedArray())\n        }\n    }\n\n    LaunchedEffect(Unit) { fetchExpensesData(timeFrames[selectedIndex.value]) }\n\n    Column(modifier = Modifier.padding(paddingValues)) {\n        // ... other code ...\n    }\n}",
    "filename": "d04a147b90969a851ac5303e79deae53_0.kt"
  },
  {
    "conversation_hash": "e6cdfa2d38fe66ef7e66459374149156",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val daysOfWeekFormatter = object : AxisValueFormatter<AxisPosition.Horizontal.Bottom> {\n    override fun format(value: Float, label: Text) = when (value.toInt()) {\n        0 -> \"Monday\"\n        1 -> \"Tuesday\"\n        2 -> \"Wednesday\"\n        3 -> \"Thursday\"\n        4 -> \"Friday\"\n        5 -> \"Saturday\"\n        6 -> \"Sunday\"\n        else -> \"\"\n    }\n}",
    "filename": "e6cdfa2d38fe66ef7e66459374149156_1.kt"
  },
  {
    "conversation_hash": "e6cdfa2d38fe66ef7e66459374149156",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ExpensesGraph(paddingValues: PaddingValues) {\n    val db = FirebaseFirestore.getInstance()\n\n    // Define your timeframes\n    val timeFrames = listOf(\"Daily\", \"Weekly\", \"Monthly\", \"Yearly\")\n    val selectedIndex = remember { mutableStateOf(0) }\n\n    // Fetch and process the expenses data\n    val chartEntries = remember { mutableStateOf(entriesOf(*arrayOf<Float>())) }\n    val chartModelProducer = ChartEntryModelProducer(chartEntries.value)\n\n    fun fetchExpensesData(timeFrame: String) {\n        val startCalendar = Calendar.getInstance()\n        val endCalendar = Calendar.getInstance()\n        var dateFormat: SimpleDateFormat\n\n        when (timeFrame) {\n            \"Daily\" -> {\n                // Daily: Showing 7 days in a week\n                // ... (Your previous daily code)\n                dateFormat = SimpleDateFormat(\"EEEE_dd_MMM_yyyy\", Locale.getDefault())\n            }\n\n            \"Weekly\" -> {\n                // Weekly: Showing 4 weeks in a month\n                // ... (Your previous weekly code)\n                dateFormat = SimpleDateFormat(\"W_MMM_yyyy\", Locale.getDefault())\n            }\n\n            \"Monthly\" -> {\n                // Monthly: Showing 12 months in a year\n                // ... (Your previous monthly code)\n                dateFormat = SimpleDateFormat(\"MMM_yyyy\", Locale.getDefault())\n            }\n\n            \"Yearly\" -> {\n                // Yearly\n                // ... (Your previous yearly code)\n                dateFormat = SimpleDateFormat(\"yyyy\", Locale.getDefault())\n            }\n\n            else -> {\n                throw IllegalArgumentException(\"Unsupported time frame: $timeFrame\")\n            }\n        }\n\n        // Call query.get().addOnSuccessListener the same as you currently do\n        // ...\n\n        // After fetching the data, process it based on the selected timeframe:\n\n        // Each timeframe needs its own X-axis value processor\n        lateinit var xValueProcessor: (List<Pair<Float, Date>>) -> List<Pair<Float, Float>>\n\n        when (timeFrame) {\n            \"Daily\" -> {\n                xValueProcessor = { expenses ->\n                    val dailyExpenses = Array(7) { 0f }\n\n                    expenses.forEach { (value, date) ->\n                        startCalendar.time = date\n                        val dayOfWeek = startCalendar.get(Calendar.DAY_OF_WEEK)\n                        val index = (dayOfWeek - startCalendar.firstDayOfWeek + 7) % 7\n                        dailyExpenses[index] = value\n                    }\n\n                    dailyExpenses.mapIndexed { index, value -> index.toFloat() to value }\n                }\n            }\n\n            \"Weekly\" -> {\n                xValueProcessor = { expenses ->\n                    val weeklyExpenses = MutableList(4) { 0f }\n\n                    expenses.forEach { (value, date) ->\n                        startCalendar.time = date\n                        val weekOfMonth = startCalendar.get(Calendar.WEEK_OF_MONTH) - 1\n                        weeklyExpenses[weekOfMonth] = value\n                    }\n\n                    weeklyExpenses.mapIndexed { index, value -> index.toFloat() to value }\n                }\n            }\n\n            \"Monthly\" -> {\n                xValueProcessor = { expenses ->\n                    val monthlyExpenses = MutableList(12) { 0f }\n\n                    expenses.forEach { (value, date) ->\n                        startCalendar.time = date\n                        val month = startCalendar.get(Calendar.MONTH)\n                        monthlyExpenses[month] = value\n                    }\n\n                    monthlyExpenses.mapIndexed { index, value -> index.toFloat() to value }\n                }\n            }\n\n            \"Yearly\" -> {\n                xValueProcessor = { expenses ->\n                    val yearlyExpenses = MutableList(5) { 0f }\n\n                    val yearNow = Calendar.getInstance().get(Calendar.YEAR)\n\n                    expenses.forEach { (value, date) ->\n                        startCalendar.time = date\n                        val year = startCalendar.get(Calendar.YEAR)\n                        val index = year - (yearNow - 4)\n                        yearlyExpenses[index] = value\n                    }\n\n                    yearlyExpenses.mapIndexed { index, value -> index.toFloat() to value }\n                }\n            }\n        }\n\n        chartEntries.value = entriesOf(*xValueProcessor(expenses).toTypedArray())\n    }\n\n    LaunchedEffect(Unit) { fetchExpensesData(timeFrames[selectedIndex.value]) }\n\n    Column(modifier = Modifier.padding(paddingValues)) {\n        // ...\n        ProvideChartStyle(chartStyle = m3ChartStyle()) {\n            Chart(\n                chart = columnChart(),\n                chartModelProducer = chartModelProducer,\n                startAxis = startAxis(),\n                bottomAxis = bottomAxis(\n                    valueFormatter = when (selectedIndex.value) {\n                        0 -> dailyValueFormatter\n                        1 -> weeklyValueFormatter\n                        2 -> monthlyValueFormatter\n                        3 -> yearlyValueFormatter\n                        else -> DecimalFormatAxisValueFormatter()\n                    }\n                ),\n            )\n        }\n    }\n}\n\nval dailyValueFormatter = object : AxisValueFormatter<AxisPosition.Horizontal.Bottom> {\n    // ...\n}\n\nval weeklyValueFormatter = object : AxisValueFormatter<AxisPosition.Horizontal.Bottom> {\n    override fun format(value: Float, label: Text): CharSequence =\n        when (value.toInt()) {\n            0 -> \"Week 1\"\n            1 -> \"Week 2\"\n            2 -> \"Week 3\"\n            3 -> \"Week 4\"\n            else -> \"\"\n        }\n}\n\nval monthlyValueFormatter = object : AxisValueFormatter<AxisPosition.Horizontal.Bottom> {\n    private val months = arrayOf(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\",\"Dec\")\n\n    override fun format(value: Float, label: Text): CharSequence =\n        months.getOrNull(value.toInt()) ?: \"\"\n}\n\nval yearlyValueFormatter = object : AxisValueFormatter<AxisPosition.Horizontal.Bottom> {\n    override fun format(value: Float, label: Text): CharSequence {\n        val currentYear = Calendar.getInstance().get(Calendar.YEAR)\n        val year = currentYear - 4 + value.toInt()\n        return year.toString()\n    }\n}",
    "filename": "e6cdfa2d38fe66ef7e66459374149156_3.kt"
  },
  {
    "conversation_hash": "387b8dc03b7a0b372f73698c13ac32c2",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Entry(\n    val localDate: LocalDate,\n    override val x: Float,\n    override val y: Float,\n) : ChartEntry {\n    override fun withY(y: Float) = Entry(localDate, x, y)\n}",
    "filename": "387b8dc03b7a0b372f73698c13ac32c2_1.kt"
  },
  {
    "conversation_hash": "387b8dc03b7a0b372f73698c13ac32c2",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ExpensesGraph(paddingValues: PaddingValues) {\n    // ... existing code ...\n\n    // Define the custom AxisValueFormatter for the x-axis\n    val xAxisValueFormatter = AxisValueFormatter<AxisPosition.Horizontal> { value, chartValues ->\n        (chartValues.chartEntryModel.entries.first().getOrNull(value.toInt()) as? Entry)\n            ?.localDate\n            ?.run { \"${monthValue}/${dayOfMonth}\" }\n            .orEmpty()\n    }\n\n    // ... existing code ...\n    \n    // Replace the 'chartEntries.value =' line inside the 'addOnSuccessListener' with the following:\n    chartEntries.value = entriesOf(\n        *xAxisLabels.mapIndexed { index, label ->\n            Entry(\n                LocalDate.parse(label, dateFormat),\n                index.toFloat(),\n                expenses[label] ?: 0f\n            )\n        }.toTypedArray()\n    )\n\n    // ... existing code ...\n\n    // Update the bottomAxis composable in the Chart composable to use xAxisValueFormatter:\n    bottomAxis = bottomAxis(valueFormatter = xAxisValueFormatter)\n\n    // ... existing code ...\n}",
    "filename": "387b8dc03b7a0b372f73698c13ac32c2_2.kt"
  },
  {
    "conversation_hash": "387b8dc03b7a0b372f73698c13ac32c2",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "val xAxisValueFormatter = AxisValueFormatter<AxisPosition.Horizontal> { value, chartValues ->\n    (chartValues.chartEntryModel.entries.first().getOrNull(value.toInt()) as? Entry)\n        ?.localDate\n        ?.run { monthValue.toString() + \"/\" + dayOfMonth.toString() }\n        .orEmpty()\n}",
    "filename": "387b8dc03b7a0b372f73698c13ac32c2_3.kt"
  },
  {
    "conversation_hash": "76acb02798bb652d5929d43fb8391227",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "query.get().addOnSuccessListener { result ->\n    val expenses = mutableMapOf<String, Float>()\n    for (document in result) {\n        val total = document.getDouble(\"total\")?.toFloat() ?: 0f\n        expenses[document.id] = total\n    }\n    \n    chartEntries.value = entriesOf(\n        *xAxisLabels.mapIndexed { index, label ->\n            Entry(\n                LocalDate.parse(label, dateFormat),\n                index.toFloat(),\n                expenses[label] ?: 0f\n            )\n        }.toTypedArray()\n    )\n}",
    "filename": "76acb02798bb652d5929d43fb8391227_2.kt"
  },
  {
    "conversation_hash": "76acb02798bb652d5929d43fb8391227",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Custom data class for entries\ndata class CustomEntry(val date: LocalDate, val xValue: Float, val yValue: Float)\n\n// Revised the expenses processing and chartEntries.value assignment\nquery.get().addOnSuccessListener { result ->\n    val expenses = mutableMapOf<String, Float>()\n    for (document in result) {\n        val total = document.getDouble(\"total\")?.toFloat() ?: 0f\n        expenses[document.id] = total\n    }\n    \n    val customEntries = xAxisLabels.mapIndexed { index, label ->\n        CustomEntry(\n            date = LocalDate.parse(label, dateFormat),\n            xValue = index.toFloat(),\n            yValue = expenses[label] ?: 0f\n        )\n    }.toTypedArray()\n\n    chartEntries.value = entriesOf(*customEntries.map { it.yValue }.toFloatArray())\n}",
    "filename": "76acb02798bb652d5929d43fb8391227_3.kt"
  },
  {
    "conversation_hash": "e6037264caa4ed12cb449ce8fb1a9830",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_maps)\n\n    persistentMarkers = mutableMapOf()\n}",
    "filename": "e6037264caa4ed12cb449ce8fb1a9830_2.kt"
  },
  {
    "conversation_hash": "e6037264caa4ed12cb449ce8fb1a9830",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun addPersistentMarker(location: LatLng, title: String, snippet: String): Marker {\n    val markerOptions = MarkerOptions()\n        .position(location)\n        .title(title)\n        .snippet(snippet)\n\n    // Safe check to make sure the map is not null\n    val marker = map?.addMarker(markerOptions)\n    marker?.let {\n        // Save the marker to the persistentMarkers map\n        persistentMarkers?.put(title, marker)\n    }\n\n    return marker ?: throw IllegalStateException(\"Map is not initialized.\")\n}",
    "filename": "e6037264caa4ed12cb449ce8fb1a9830_3.kt"
  },
  {
    "conversation_hash": "e6037264caa4ed12cb449ce8fb1a9830",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Create a map with default values for all days of the week\nval expensesMap = mutableMapOf(*xAxisLabels.map { it to 0f }.toTypedArray())\n\nfor (expense in expenses) {\n    val dateFormatted = dateFormat.format(expense.second)\n    expensesMap[dateFormatted] = expense.first\n}\n\nchartEntries.value = entriesOf(*expensesMap.mapIndexed { index, (_, expense) -> index.toFloat() to expense }\n    .toTypedArray())",
    "filename": "e6037264caa4ed12cb449ce8fb1a9830_5.kt"
  },
  {
    "conversation_hash": "e6037264caa4ed12cb449ce8fb1a9830",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun fetchExpensesData(timeFrame: String) {\n    val startCalendar = Calendar.getInstance()\n    val endCalendar = Calendar.getInstance()\n    var dateFormat: SimpleDateFormat\n\n    // ... (part with setting calendar and formatter)\n\n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(timeFrame.lowercase())\n\n    query.get().addOnSuccessListener { result ->\n        val expenses = mutableListOf<Pair<Float, Date>>()\n        for (document in result) {\n            val total = document.getDouble(\"total\")?.toFloat() ?: 0f\n            val date = dateFormat.parse(document.id) ?: Date()\n            expenses.add(total to date)\n        }\n        expenses.retainAll { it.second >= startCalendar.time && it.second <= endCalendar.time }\n\n        // Create a map with default values for all days of the week\n        val expensesMap = mutableMapOf(*xAxisLabels.map { it to 0f }.toTypedArray())\n\n        for (expense in expenses) {\n            val dateFormatted = dateFormat.format(expense.second)\n            expensesMap[dateFormatted] = expense.first\n        }\n\n        chartEntries.value = entriesOf(*expensesMap.mapIndexed { index, (_, expense) -> index.toFloat() to expense }\n            .toTypedArray())\n    }\n}",
    "filename": "e6037264caa4ed12cb449ce8fb1a9830_6.kt"
  },
  {
    "conversation_hash": "e6037264caa4ed12cb449ce8fb1a9830",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun fetchExpensesData(timeFrame: String) {\n    val startCalendar = Calendar.getInstance()\n    val endCalendar = Calendar.getInstance()\n    var dateFormat: SimpleDateFormat\n\n    // ... (part with setting calendar and formatter)\n\n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(timeFrame.lowercase())\n\n    query.get().addOnSuccessListener { result ->\n        val expenses = mutableListOf<Pair<Float, Date>>()\n        for (document in result) {\n            val total = document.getDouble(\"total\")?.toFloat() ?: 0f\n            val date = dateFormat.parse(document.id) ?: Date()\n            expenses.add(total to date)\n        }\n        expenses.retainAll(keys = { it.second >= startCalendar.time && it.second <= endCalendar.time })\n\n        // Create a map with default values for all days of the week\n        val expensesMap = mutableMapOf(*xAxisLabels.map { it to 0f }.toTypedArray())\n\n        for (expense in expenses) {\n            val dateFormatted = dateFormat.format(expense.second)\n            expensesMap[dateFormatted] = expense.first\n        }\n\n        chartEntries.value = entriesOf(*expensesMap.mapIndexed { index, (_, expense) -> index.toFloat() to expense }\n            .toTypedArray())\n    }\n}",
    "filename": "e6037264caa4ed12cb449ce8fb1a9830_9.kt"
  },
  {
    "conversation_hash": "e6037264caa4ed12cb449ce8fb1a9830",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun fetchExpensesData(timeFrame: String) {\n    val startCalendar = Calendar.getInstance()\n    val endCalendar = Calendar.getInstance()\n    var dateFormat: SimpleDateFormat\n\n    // ... (part with setting calendar and formatter)\n\n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(timeFrame.lowercase())\n\n    query.get().addOnSuccessListener { result ->\n        val expenses = mutableListOf<Pair<Float, Date>>()\n        for (document in result) {\n            val total = document.getDouble(\"total\")?.toFloat() ?: 0f\n            val date = dateFormat.parse(document.id) ?: Date()\n            expenses.add(total to date)\n        }\n        expenses.retainAll { it.second >= startCalendar.time && it.second <= endCalendar.time }\n\n        // Create a map with default values for all days of the week\n        val expensesMap = mutableMapOf(*xAxisLabels.map { it to 0f }.toTypedArray())\n\n        for (expense in expenses) {\n            val dateFormatted = dateFormat.format(expense.second)\n            expensesMap[dateFormatted] = expense.first\n        }\n\n        chartEntries.value = entriesOf(*expensesMap.entries.mapIndexed { index, (_, expense) -> index.toFloat() to expense }\n            .toTypedArray())\n    }\n}",
    "filename": "e6037264caa4ed12cb449ce8fb1a9830_11.kt"
  },
  {
    "conversation_hash": "e6037264caa4ed12cb449ce8fb1a9830",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Initialize expensesMap with xAxisLabels and zero values\nval expensesMap = mutableMapOf<String, Float>().apply {\n    xAxisLabels.forEach { put(it, 0f) }\n}\n\nexpenses.groupBy({ dateFormat.format(it.second) }, { it.first }).forEach { date, values ->\n    values.sum().let { expenseSum ->\n        expensesMap[date] = expensesMap.getOrDefault(date, 0f) + expenseSum\n    }\n}",
    "filename": "e6037264caa4ed12cb449ce8fb1a9830_16.kt"
  },
  {
    "conversation_hash": "c258cd267629925f01913775a1418a84",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun readTxtFile(file: File): List<Book> {\n    val books = mutableListOf<Book>()\n    file.bufferedReader().forEachLine { line ->\n        val parts = line.split(\",\")\n        val title = parts[0]\n        val author = parts[1]\n        books.add(Book(title = title, author = author))\n    }\n    return books\n}",
    "filename": "c258cd267629925f01913775a1418a84_1.kt"
  },
  {
    "conversation_hash": "c258cd267629925f01913775a1418a84",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Dao\ninterface BookDao {\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertBooks(books: List<Book>)\n}\n\nclass BookRepository(private val bookDao: BookDao) {\n    suspend fun insertBooksFromFile(file: File) {\n        val books = readTxtFile(file)\n        bookDao.insertBooks(books)\n    }\n}",
    "filename": "c258cd267629925f01913775a1418a84_2.kt"
  },
  {
    "conversation_hash": "c258cd267629925f01913775a1418a84",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class BookViewModel(private val bookRepository: BookRepository) : ViewModel() {\n    fun insertBooksFromFile(file: File) {\n        viewModelScope.launch {\n            bookRepository.insertBooksFromFile(file)\n        }\n    }\n}\n\nclass BookFragment : Fragment() {\n    private lateinit var bookViewModel: BookViewModel\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        // Initialize bookViewModel with BookRepository and BookDao\n        bookViewModel = BookViewModel(BookRepository(Room.databaseBuilder(requireContext(), AppDatabase::class.java, \"AppDatabase\").build().bookDao()))\n        \n        // Call insertBooksFromFile with the file you want to process\n        bookViewModel.insertBooksFromFile(File(requireContext().filesDir, \"books.txt\"))\n    }\n}",
    "filename": "c258cd267629925f01913775a1418a84_3.kt"
  },
  {
    "conversation_hash": "c258cd267629925f01913775a1418a84",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class BookRepository(private val bookDao: BookDao) {\n    suspend fun isDatabaseEmpty(): Boolean {\n        return bookDao.countBooks() == 0\n    }\n}",
    "filename": "c258cd267629925f01913775a1418a84_5.kt"
  },
  {
    "conversation_hash": "c258cd267629925f01913775a1418a84",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class BookFragment : Fragment() {\n    private lateinit var bookViewModel: BookViewModel\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        bookViewModel = ViewModelProvider(this).get(BookViewModel::class.java)\n        \n        // Call isDatabaseEmpty to check if the database is empty\n        bookViewModel.isDatabaseEmpty.observe(viewLifecycleOwner, Observer { isEmpty ->\n            if (isEmpty) {\n                // The database is empty\n            } else {\n                // The database is not empty\n            }\n        })\n    }\n}\n\nclass BookViewModel(private val bookRepository: BookRepository) : ViewModel() {\n    val isDatabaseEmpty: LiveData<Boolean> = liveData {\n        emit(bookRepository.isDatabaseEmpty())\n    }\n}",
    "filename": "c258cd267629925f01913775a1418a84_6.kt"
  },
  {
    "conversation_hash": "c3ab67066d068eaeb8f359622f0ed2b0",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "kotlin\n// Define a ViewModel that retrieves data from the Room database\nclass MyViewModel(application: Application) : AndroidViewModel(application) {\n  private val dao = AppDatabase.getDatabase(application).myDao()\n\n  val items: LiveData<List<MyData>> = dao.getAll()\n}\n\n// Create a Composable that displays a single row of data\n@Composable\nfun MyRow(data: MyData) {\n    // put here the individual row layout\n}\n\n// Create a Composable that displays a LazyColumn with items from the Room database\n@Composable\nfun MyScreen(viewModel: MyViewModel) {\n    val items by viewModel.items.observeAsState(emptyList())\n\n    LazyColumn {\n        items(items) { item ->\n            MyRow(data = item)\n        }\n    }\n}",
    "filename": "c3ab67066d068eaeb8f359622f0ed2b0_0.kt"
  },
  {
    "conversation_hash": "c3ab67066d068eaeb8f359622f0ed2b0",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewModel(private val repository: MyRepository) : ViewModel() {\n    val myDataList: LiveData<List<MyData>> = repository.getMyDataList()\n}\n\nclass MyRepository(private val myDao: MyDao) {\n    fun getMyDataList(): LiveData<List<MyData>> = myDao.getMyDataList()\n}",
    "filename": "c3ab67066d068eaeb8f359622f0ed2b0_1.kt"
  },
  {
    "conversation_hash": "c3ab67066d068eaeb8f359622f0ed2b0",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyDataListItem(myData: MyData, onItemClick: (MyData) -> Unit) {\n    // Display a row of data\n    Text(\n        text = myData.name,\n        modifier = Modifier\n            .clickable(onClick = { onItemClick(myData) })\n            .padding(16.dp)\n    )\n}",
    "filename": "c3ab67066d068eaeb8f359622f0ed2b0_2.kt"
  },
  {
    "conversation_hash": "c3ab67066d068eaeb8f359622f0ed2b0",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyDataListScreen(viewModel: MyViewModel, onItemClick: (MyData) -> Unit) {\n    val myDataList = viewModel.myDataList.observeAsState()\n\n    LazyColumn {\n        items(myDataList.value ?: emptyList()) { myDataItem ->\n            MyDataListItem(myDataItem, onItemClick)\n        }\n    }\n}",
    "filename": "c3ab67066d068eaeb8f359622f0ed2b0_3.kt"
  },
  {
    "conversation_hash": "c3ab67066d068eaeb8f359622f0ed2b0",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyScreen(viewModel: MyViewModel) {\n    val navController = rememberNavController()\n\n    MyDataListScreen(viewModel = viewModel) { myData ->\n        navController.navigate(NavRoutes.MyDataDetail(myData.id))\n    }\n}",
    "filename": "c3ab67066d068eaeb8f359622f0ed2b0_4.kt"
  },
  {
    "conversation_hash": "5c69003a6cb48b1097e7c618ae331cea",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Database(entities = [Book::class], version = 1)\nabstract class MyDatabase : RoomDatabase() {\n\n    abstract fun bookDao(): BookDao\n\n    companion object {\n        @Volatile\n        private var INSTANCE: MyDatabase? = null\n\n        fun getInstance(context: Context): MyDatabase {\n            return INSTANCE ?: synchronized(this) {\n                val instance = Room.databaseBuilder(\n                    context.applicationContext,\n                    MyDatabase::class.java,\n                    \"my_database\"\n                )\n                .addCallback(object : RoomDatabase.Callback() {\n                    override fun onCreate(db: SupportSQLiteDatabase) {\n                        super.onCreate(db)\n                        // Prepopulate data\n                        CoroutineScope(Dispatchers.IO).launch {\n                            getInstance(context).bookDao().insertBooks(\n                                Book(title = \"Android Development\", author = \"John Doe\", year = 2020, isbn = \"9876543201\"),\n                                Book(title = \"iOS Development\", author = \"Jane Doe\", year = 2021, isbn = \"8765432109\")\n                            )\n                        }\n                    }\n                })\n                .build()\n\n                INSTANCE = instance\n                instance\n            }\n        }\n    }\n}",
    "filename": "5c69003a6cb48b1097e7c618ae331cea_3.kt"
  },
  {
    "conversation_hash": "5c69003a6cb48b1097e7c618ae331cea",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "companion object {\n    @Volatile\n    private var INSTANCE: MyDatabase? = null\n\n    fun getInstance(context: Context): MyDatabase {\n        ...\n    }\n}",
    "filename": "5c69003a6cb48b1097e7c618ae331cea_5.kt"
  },
  {
    "conversation_hash": "5c69003a6cb48b1097e7c618ae331cea",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "companion object {\n    @Volatile\n    private var INSTANCE: MyDatabase? = null\n\n    fun getInstance(context: Context): MyDatabase {\n        return INSTANCE ?: synchronized(this) {\n            val instance = Room.databaseBuilder(\n                context.applicationContext, // Use applicationContext instead of getContext()\n                MyDatabase::class.java,\n                \"my_database\"\n            )\n            .addCallback(object : RoomDatabase.Callback() {\n                ...\n            })\n            .build()\n\n            INSTANCE = instance\n            instance\n        }\n    }\n}",
    "filename": "5c69003a6cb48b1097e7c618ae331cea_6.kt"
  },
  {
    "conversation_hash": "aab0e5d8205ae7db99e358b8418c33a1",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "val inputStream = context.resources.openRawResource(R.raw.my_file)\nval bufferedReader = BufferedReader(InputStreamReader(inputStream))\nval stringBuilder = StringBuilder()\nvar line: String?\nwhile (bufferedReader.readLine().also { line = it } != null) {\n    stringBuilder.append(line)\n}\nval fileContent = stringBuilder.toString()",
    "filename": "aab0e5d8205ae7db99e358b8418c33a1_4.kt"
  },
  {
    "conversation_hash": "daa5329f931192081a13d7b34a704d71",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "val filename = \"example.txt\"\n\ntry {\n    val file = File(filename)\n\n    if (file.exists()) {\n        val bufferedReader = BufferedReader(FileReader(file))\n        var line: String? = bufferedReader.readLine()\n\n        while (line != null) {\n            // Do something with the line\n            println(line)\n            line = bufferedReader.readLine()\n        }\n\n        bufferedReader.close()\n    } else {\n        println(\"$filename not found.\")\n    }\n} catch (e: Exception) {\n    e.printStackTrace()\n}",
    "filename": "daa5329f931192081a13d7b34a704d71_2.kt"
  },
  {
    "conversation_hash": "fd201dff37fabe462acee349e5205684",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun mixString(input: String): String {\n    val charArray = input.toCharArray() // convert string to char array\n    charArray.shuffle() // shuffle char array\n    return String(charArray) // convert char array back to string\n}",
    "filename": "fd201dff37fabe462acee349e5205684_0.kt"
  },
  {
    "conversation_hash": "fd201dff37fabe462acee349e5205684",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyLayout() {\n    Column(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(16.dp)\n    ) {\n        Text(\n            text = \"Hello\",\n            fontSize = 24.sp,\n            fontWeight = FontWeight.Bold\n        )\n        Text(\n            text = \"World\",\n            fontSize = 24.sp,\n            fontWeight = FontWeight.Bold\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        var textFieldValue by remember { mutableStateOf(\"\") }\n        TextField(\n            value = textFieldValue,\n            onValueChange = { textFieldValue = it },\n            label = { Text(\"Enter text\") }\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = {}) {\n            Text(text = \"Submit\")\n        }\n    }\n}",
    "filename": "fd201dff37fabe462acee349e5205684_3.kt"
  },
  {
    "conversation_hash": "fd201dff37fabe462acee349e5205684",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyLayout() {\n    var progress by remember { mutableStateOf(0.0f) }\n\n    Column(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        LinearProgressIndicator(progress)\n        Spacer(modifier = Modifier.height(32.dp))\n        Text(text = \"Progress: ${progress * 100}%\", fontSize = 20.sp)\n    }\n\n    LaunchedEffect(Unit) {\n        while (true) {\n            delay(1000L)\n            progress += 0.1f // increase the progress by 10% every second\n            if (progress >= 1.0f) {\n                progress = 0.0f // reset the progress to 0 when it reaches 100%\n            }\n        }\n    }\n}",
    "filename": "fd201dff37fabe462acee349e5205684_5.kt"
  },
  {
    "conversation_hash": "fd201dff37fabe462acee349e5205684",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyLayout() {\n    var value by remember { mutableStateOf(0) }\n\n    Column(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(text = \"Value: $value\", fontSize = 24.sp)\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = { value++ }) {\n            Text(text = \"Increment\")\n        }\n    }\n\n    LaunchedEffect(value) {\n        while (true) {\n            delay(1000L)\n            value += 1 // increment the value every second\n        }\n    }\n}",
    "filename": "fd201dff37fabe462acee349e5205684_7.kt"
  },
  {
    "conversation_hash": "fd201dff37fabe462acee349e5205684",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyLayout() {\n    var value by remember { mutableStateOf(0) }\n\n    Column(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(text = \"Value: $value\", fontSize = 24.sp)\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = { value++ }) {\n            Text(text = \"Increment\")\n        }\n    }\n\n    LaunchedEffect(true) {\n        while (true) {\n            delay(1000L)\n            value = (0..100).random() // generate a random number between 0 and 100\n        }\n    }\n}",
    "filename": "fd201dff37fabe462acee349e5205684_9.kt"
  },
  {
    "conversation_hash": "fd201dff37fabe462acee349e5205684",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyLayout() {\n    var value by remember { mutableStateOf(0) }\n \n    Column(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Text(text = \"Value: $value\", fontSize = 24.sp)\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = { \n            value += 1\n            setContent { MyLayout() } // manually start recomposition\n        }) {\n            Text(text = \"Increment\")\n        }\n    }\n}",
    "filename": "fd201dff37fabe462acee349e5205684_11.kt"
  },
  {
    "conversation_hash": "d1db43c26cc3ce8813ae91e4e01e479b",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyPlugin : Plugin<Project> {\n    override fun apply(project: Project) {\n        project.extensions.create(\"myPlugin\", MyPluginExtension::class.java)\n        project.task(\"myTask\") {\n            group = \"myPlugin\"\n            description = \"myTask description\"\n            doLast {\n                println(\"Hello from $name!\")\n            }\n        }\n        project.afterEvaluate {\n            val extension = project.extensions.findByName(\"myPlugin\") as MyPluginExtension?\n            if (extension?.message != null) {\n                println(extension.message)\n            }\n        }\n    }\n}\n\nopen class MyPluginExtension(var message: String? = null)\n\nfun Project.myPlugin(\n    message: String? = null\n): MyPluginExtension = extensions.create(\"myPlugin\", MyPluginExtension::class.java).apply {\n    this.message = message\n}",
    "filename": "d1db43c26cc3ce8813ae91e4e01e479b_2.kt"
  },
  {
    "conversation_hash": "d1db43c26cc3ce8813ae91e4e01e479b",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun Project.myPlugin(\n    message: String? = null\n): MyPluginExtension = extensions.create(\"myPlugin\", MyPluginExtension::class.java).apply {\n    this.message = message\n}",
    "filename": "d1db43c26cc3ce8813ae91e4e01e479b_3.kt"
  },
  {
    "conversation_hash": "4c84bcc1f9fa1edf78c5d6818a582e79",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val x = 3\n    when (x) {\n        1 -> println(\"x is 1\")\n        2 -> println(\"x is 2\")\n        3 -> println(\"x is 3\")\n        4 -> println(\"x is 4\")\n        5 -> println(\"x is 5\")\n        else -> println(\"x is not between 1 and 5\")\n    }\n}",
    "filename": "4c84bcc1f9fa1edf78c5d6818a582e79_2.kt"
  },
  {
    "conversation_hash": "facc370a90c216a6f6cc8d934c0f1a30",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyScreen() {\n    AndroidView(factory = { context ->\n        MyView(context)\n    })\n}",
    "filename": "facc370a90c216a6f6cc8d934c0f1a30_1.kt"
  },
  {
    "conversation_hash": "2759a370f34e1839e9fde3846857ed63",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewModel(application: Application) : AndroidViewModel(application) {\n    private val myRepository: MyRepository = MyRepository(application)\n\n    fun getAllItems(): LiveData<List<Item>> = myRepository.getAllItems()\n\n    fun addItem(item: Item) = viewModelScope.launch {\n        myRepository.addItem(item)\n    }\n}\n\nclass MyRepository(application: Application) {\n    private val myDao: MyDao = MyDatabase.getDatabase(application).myDao()\n\n    fun getAllItems(): LiveData<List<Item>> = myDao.getAllItems()\n\n    suspend fun addItem(item: Item) = myDao.addItem(item)\n}",
    "filename": "2759a370f34e1839e9fde3846857ed63_0.kt"
  },
  {
    "conversation_hash": "2759a370f34e1839e9fde3846857ed63",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyScreen(viewModel: MyViewModel = rememberViewModel()) {\n    val items = viewModel.getAllItems().observeAsState(emptyList())\n\n    Column() {\n        Text(\"Items count: ${items.value.size}\")\n\n        Button(onClick = { \n            viewModel.addItem(Item(\"New Item\"))\n        }) {\n            Text(\"Add Item\")\n        }\n    }\n\n    LaunchedEffect(Unit) {\n        viewModel.addItem(Item(\"New Item\"))\n    }\n}",
    "filename": "2759a370f34e1839e9fde3846857ed63_1.kt"
  },
  {
    "conversation_hash": "e8328b4275efd1ae16972cd81eb8786a",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun UserList() {\n    val userDao = AppDatabase.getInstance(context).userDao()\n    val users = remember { userDao.getAllUsers() }\n\n    LazyColumn {\n        items(users) { user ->\n            Text(text = user.name)\n        }\n    }\n}",
    "filename": "e8328b4275efd1ae16972cd81eb8786a_0.kt"
  },
  {
    "conversation_hash": "e8328b4275efd1ae16972cd81eb8786a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyButton() {\n    var buttonText by remember { mutableStateOf(\"Click me\") }\n    \n    Clickable(onClick = {\n        // Launch a coroutine and update the button text\n        LaunchedEffect(Unit) {\n            delay(1000) // Simulate a long running operation\n            buttonText = \"Clicked!\"\n        }\n    }) {\n        Text(text = buttonText)\n    }\n}",
    "filename": "e8328b4275efd1ae16972cd81eb8786a_1.kt"
  },
  {
    "conversation_hash": "e8328b4275efd1ae16972cd81eb8786a",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyComposable() {\n    val viewModel: MyViewModel = viewModel()\n\n    // Update the ViewModel data\n    viewModel.updateData(\"New data\")\n\n    // Display the ViewModel data\n    Text(text = viewModel.data)\n}",
    "filename": "e8328b4275efd1ae16972cd81eb8786a_2.kt"
  },
  {
    "conversation_hash": "ad1571357b1462a83c392bd2517ecf92",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.mutableStateOf",
      "androidx.compose.runtime.remember",
      "androidx.compose.ui.unit.dp"
    ],
    "code": "import androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.unit.dp\n\n@Composable\nfun MyButton() {\n    // Create a remember variable with an initial value of 0\n    val count = remember { mutableStateOf(0) }\n\n    TextButton(\n        onClick = { \n            // Increment the count value by one\n            count.value += 1 \n        },\n        modifier = Modifier.padding(16.dp),\n    ) {\n        Text(\"Clicked ${count.value} times\")\n    }\n}",
    "filename": "ad1571357b1462a83c392bd2517ecf92_0.kt"
  },
  {
    "conversation_hash": "230287731d58fb02acf41c10dd8b3f14",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "val originalString = \"Hello, World\"\n\nval mappedString = originalString.map { it.toUpperCase() }\n\nprintln(originalString)\n// Output: Hello, World\n\nprintln(mappedString)\n// Output: HELLO, WORLD",
    "filename": "230287731d58fb02acf41c10dd8b3f14_4.kt"
  },
  {
    "conversation_hash": "02e62e5757de7084c42614d8821cb77d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyPage() {\n    Column(\n        modifier = Modifier\n            .padding(16.dp)\n            .fillMaxWidth()\n    ) {\n        Text(\n            text = \"Welcome to my page!\",\n            fontSize = 24.sp,\n            fontWeight = FontWeight.Bold,\n            modifier = Modifier.padding(bottom = 16.dp)\n        )\n        TextField(\n            value = \"\",\n            onValueChange = {},\n            modifier = Modifier\n                .padding(bottom = 16.dp)\n                .fillMaxWidth()\n        )\n        Button(\n            onClick = {},\n            modifier = Modifier\n                .padding(bottom = 16.dp)\n                .fillMaxWidth()\n        ) {\n            Text(text = \"Button A\")\n        }\n        Button(\n            onClick = {},\n            modifier = Modifier\n                .padding(bottom = 16.dp)\n                .fillMaxWidth()\n        ) {\n            Text(text = \"Button B\")\n        }\n        Button(\n            onClick = {},\n            modifier = Modifier\n                .padding(bottom = 16.dp)\n                .fillMaxWidth()\n        ) {\n            Text(text = \"Button C\")\n        }\n        Button(\n            onClick = {},\n            modifier = Modifier\n                .padding(bottom = 16.dp)\n                .fillMaxWidth()\n        ) {\n            Text(text = \"Button D\")\n        }\n        Text(\n            text = \"Text A\",\n            modifier = Modifier.padding(bottom = 16.dp)\n        )\n        Text(\n            text = \"Text B\",\n            modifier = Modifier.padding(bottom = 16.dp)\n        )\n    }\n}",
    "filename": "02e62e5757de7084c42614d8821cb77d_0.kt"
  },
  {
    "conversation_hash": "02e62e5757de7084c42614d8821cb77d",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyPage() {\n    Column(\n        modifier = Modifier\n            .padding(16.dp)\n            .fillMaxWidth()\n    ) {\n        // other UI elements...\n\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalArrangement = Arrangement.SpaceEvenly\n        ) {\n            Box(\n                modifier = Modifier\n                    .weight(1f)\n                    .padding(8.dp)\n            ) {\n                Button(\n                    onClick = {},\n                    modifier = Modifier.fillMaxSize()\n                ) {\n                    Text(text = \"Button A\")\n                }\n            }\n\n            Box(\n                modifier = Modifier\n                    .weight(1f)\n                    .padding(8.dp)\n            ) {\n                Button(\n                    onClick = {},\n                    modifier = Modifier.fillMaxSize()\n                ) {\n                    Text(text = \"Button B\")\n                }\n            }\n\n            Box(\n                modifier = Modifier\n                    .weight(1f)\n                    .padding(8.dp)\n            ) {\n                Button(\n                    onClick = {},\n                    modifier = Modifier.fillMaxSize()\n                ) {\n                    Text(text = \"Button C\")\n                }\n            }\n\n            Box(\n                modifier = Modifier\n                    .weight(1f)\n                    .padding(8.dp)\n            ) {\n                Button(\n                    onClick = {},\n                    modifier = Modifier.fillMaxSize()\n                ) {\n                    Text(text = \"Button D\")\n                }\n            }\n        }\n    }\n}",
    "filename": "02e62e5757de7084c42614d8821cb77d_1.kt"
  },
  {
    "conversation_hash": "02e62e5757de7084c42614d8821cb77d",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyPage() {\n    val myText = \"Apples are awesome and amazing!\"\n\n    Text(\n        text = myText.replaceFirst(\"a\", \"A\"),\n        fontSize = 16.sp,\n        fontWeight = FontWeight.Normal\n    )\n}",
    "filename": "02e62e5757de7084c42614d8821cb77d_2.kt"
  },
  {
    "conversation_hash": "c8305aad3919b39839d54c74ca94d0fd",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "FROM python:3.8\nWORKDIR /app\nCOPY requirements.txt /app\nCOPY MyApp.py /app\nRUN pip install --no-cache-dir -r requirements.txt\nCMD [\"python\", \"MyApp.py\"]",
    "filename": "c8305aad3919b39839d54c74ca94d0fd_5.kt"
  },
  {
    "conversation_hash": "d51f5d8ca2ad50529ea0c6a4b908350b",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun SomeComposable() {\n    val someState by remember { mutableStateOf(\"\") }\n\n    LaunchedEffect(someState) {\n        val result = withContext(Dispatchers.IO) {\n            // Perform some IO operation\n        }\n\n        someState = result\n    }\n}",
    "filename": "d51f5d8ca2ad50529ea0c6a4b908350b_0.kt"
  },
  {
    "conversation_hash": "d51f5d8ca2ad50529ea0c6a4b908350b",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "val db = Room.databaseBuilder(applicationContext, MyDatabase::class.java, \"mydatabase\")\n        .fallbackToDestructiveMigration()\n        .build()\n\nif (db != null) {\n    val userDao = db.userDao()\n\n    // Perform database operations\n    userDao.insertUser(User(1, \"Alice\"))\n}",
    "filename": "d51f5d8ca2ad50529ea0c6a4b908350b_5.kt"
  },
  {
    "conversation_hash": "d51f5d8ca2ad50529ea0c6a4b908350b",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyComposable() {\n    val context = LocalContext.current\n    val myDatabase by remember(context) {\n        mutableStateOf<MyDatabase?>(null)\n    }\n\n    // Launch a coroutine to create the database\n    LaunchedEffect(Unit) {\n        myDatabase = withContext(Dispatchers.IO) {\n            Room.databaseBuilder(context, MyDatabase::class.java, \"my-database-name\")\n                .build()\n        }\n    }\n\n    // Wait for the database to be created before composing the view\n    if (myDatabase != null) {\n        // Compose your view here\n    } else {\n        // Show a loading indicator or a placeholder\n    }\n}",
    "filename": "d51f5d8ca2ad50529ea0c6a4b908350b_9.kt"
  },
  {
    "conversation_hash": "d51f5d8ca2ad50529ea0c6a4b908350b",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewModel(application: Application) : AndroidViewModel(application) {\n    private var myDatabase: MyDatabase? = null\n    private lateinit var myDao: MyDao\n    private val myLiveData: MutableLiveData<List<MyEntity>> = MutableLiveData()\n\n    fun getMyLiveData(): LiveData<List<MyEntity>> {\n        return myLiveData\n    }\n\n    private fun fetchData() {\n        viewModelScope.launch {\n            if (myDatabase == null) {\n                myDatabase = Room.databaseBuilder(\n                    getApplication(),\n                    MyDatabase::class.java,\n                    \"my-database-name\"\n                ).build()\n                myDao = myDatabase!!.myDao()\n            }\n            myLiveData.postValue(myDao.getAll())\n        }\n    }\n\n    override fun onStart() {\n        super.onStart()\n        fetchData()\n    }\n}",
    "filename": "d51f5d8ca2ad50529ea0c6a4b908350b_10.kt"
  },
  {
    "conversation_hash": "d51f5d8ca2ad50529ea0c6a4b908350b",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewModel(application: Application): AndroidViewModel(application) {\n    private val repository: MyRepository = MyRepository()\n    val myLiveData: LiveData<List<MyModel>> = MutableLiveData()\n\n    private var myDatabase: MyDatabase? = null\n\n    override fun onCreate() {\n        super.onCreate()\n\n        // Launch a coroutine to get the database instance on the IO dispatcher\n        viewModelScope.launch {\n            withContext(Dispatchers.IO) {\n                myDatabase = Room.databaseBuilder(application.applicationContext,\n                    MyDatabase::class.java, \"my-database-name\")\n                    .build()\n            }\n            fetchData()\n        }\n    }\n\n    private fun fetchData() {\n        // Wait until the database instance is not null\n        myDatabase?.let {\n            val data = repository.fetchDataFromDatabase(it)\n            myLiveData.postValue(data)\n        } ?: run {\n            myLiveData.postValue(null)\n        }\n    }\n}",
    "filename": "d51f5d8ca2ad50529ea0c6a4b908350b_11.kt"
  },
  {
    "conversation_hash": "c3c0004bca6ea3d71a1b3206efd08ed5",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "when (timeFrame) {\n    \"Daily\" -> {\n        // Daily: Showing 7 days in a week\n        ...\n\n        // Add this at the end of the \"Daily\" case\n        val startDocId = dateFormat.format(startCalendar.time)\n        val endDocId = dateFormat.format(endCalendar.time)\n        query = query.orderBy(FieldPath.documentId()).startAt(startDocId).endAt(endDocId)\n        ...\n    }\n\n    \"Weekly\" -> {\n        // Weekly: Showing 4 weeks in a month\n        ...\n\n        // Add this at the end of the \"Weekly\" case\n        val startDocId = dateFormat.format(startCalendar.time)\n        val endDocId = dateFormat.format(endCalendar.time)\n        query = query.orderBy(FieldPath.documentId()).startAt(startDocId).endAt(endDocId)\n        ...\n    }\n    ...\n}",
    "filename": "c3c0004bca6ea3d71a1b3206efd08ed5_2.kt"
  },
  {
    "conversation_hash": "c3c0004bca6ea3d71a1b3206efd08ed5",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun fetchExpensesData(timeFrame: String) {\n    val startCalendar = Calendar.getInstance()\n    val endCalendar = Calendar.getInstance()\n    var dateFormat = SimpleDateFormat(\"EEEE_dd_MMM_yyyy\", Locale.getDefault())\n\n    when (timeFrame) {\n        \"Daily\" -> {\n            // Daily: Showing 7 days in a week\n            ...\n            // Move the query building logic related to start and end documents here\n            val startDocId = dateFormat.format(startCalendar.time)\n            val endDocId = dateFormat.format(endCalendar.time)\n            query = query.orderBy(FieldPath.documentId()).startAt(startDocId).endAt(endDocId)\n        }\n\n        \"Weekly\" -> {\n            // Weekly: Showing 4 weeks in a month\n            ...\n            // Move the query building logic related to start and end documents here\n            val startDocId = dateFormat.format(startCalendar.time)\n            val endDocId = dateFormat.format(endCalendar.time)\n            query = query.orderBy(FieldPath.documentId()).startAt(startDocId).endAt(endDocId)\n        }\n\n        \"Monthly\" -> {\n            // Monthly: Showing 12 months in a year\n            ...\n        }\n\n        \"Yearly\" -> {\n            ...\n        }\n\n        else -> {\n            throw IllegalArgumentException(\"Unsupported time frame: $timeFrame\")\n        }\n    }\n\n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(timeFrame.lowercase())\n\n    query.get().addOnSuccessListener { result ->\n        ...\n    }\n}",
    "filename": "c3c0004bca6ea3d71a1b3206efd08ed5_6.kt"
  },
  {
    "conversation_hash": "c3c0004bca6ea3d71a1b3206efd08ed5",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun fetchExpensesData(timeFrame: String) {\n    val startCalendar = Calendar.getInstance()\n    val endCalendar = Calendar.getInstance()\n    startCalendar.firstDayOfWeek = Calendar.MONDAY\n    endCalendar.firstDayOfWeek = Calendar.MONDAY\n    var dateFormat = SimpleDateFormat(\"EEEE_dd_MMM_yyyy\", Locale.getDefault())\n\n    when (timeFrame) {\n        \"Daily\" -> {\n            // Daily: Showing 7 days in a week\n            ...\n            val startDocId = dateFormat.format(startCalendar.time)\n            val endDocId = dateFormat.format(endCalendar.time)\n            query = query.orderBy(FieldPath.documentId()).startAt(startDocId).endAt(endDocId)\n        }\n        ...\n    }\n\n    val query = db.collection(\"expenses\")\n        .document(\"Kantin\")\n        .collection(timeFrame.lowercase())\n\n    query.get().addOnSuccessListener { result ->\n        ...\n    }\n}",
    "filename": "c3c0004bca6ea3d71a1b3206efd08ed5_7.kt"
  },
  {
    "conversation_hash": "c3c0004bca6ea3d71a1b3206efd08ed5",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "\"Weekly\" -> {\n    // Weekly: Showing 4 weeks in a month\n    startCalendar.set(Calendar.DAY_OF_MONTH, 1)\n    startCalendar.set(Calendar.HOUR_OF_DAY, 0)\n    startCalendar.set(Calendar.MINUTE, 0)\n    startCalendar.set(Calendar.SECOND, 0)\n    startCalendar.set(Calendar.MILLISECOND, 0)\n\n    // Move to the first day of the week\n    while (startCalendar.get(Calendar.DAY_OF_WEEK) != startCalendar.firstDayOfWeek) {\n        startCalendar.add(Calendar.DATE, -1)\n    }\n\n    endCalendar.time = startCalendar.time\n    endCalendar.add(Calendar.DATE, 3 * 7) // Move to the end of the fourth week\n    endCalendar.set(Calendar.HOUR_OF_DAY, 23)\n    endCalendar.set(Calendar.MINUTE, 59)\n    endCalendar.set(Calendar.SECOND, 59)\n    endCalendar.set(Calendar.MILLISECOND, 999)\n    \n    dateFormat = SimpleDateFormat(\"W_MMM_yyyy\", Locale.getDefault())\n\n    val startDocId = dateFormat.format(startCalendar.time)\n    val endDocId = dateFormat.format(endCalendar.time)\n    query = query.orderBy(FieldPath.documentId()).startAt(startDocId).endAt(endDocId)\n\n    ...\n}",
    "filename": "c3c0004bca6ea3d71a1b3206efd08ed5_8.kt"
  },
  {
    "conversation_hash": "ea74196c8cf8da4ff70b7d1db6e585a8",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "dateFormat = SimpleDateFormat(\"W_MMM_yyyy\", Locale.getDefault())\nval weekDateFormat = SimpleDateFormat(\"d_MMM_yyyy\", Locale.getDefault())\n\nval c = Calendar.getInstance()\nc.time = startCalendar.time\nval newLabels = mutableListOf<String>()\n\nwhile (c.timeInMillis <= endCalendar.timeInMillis) {\n    val startWeekDate = weekDateFormat.format(c.time)\n    c.add(Calendar.DATE, 6) // add 6 days to get the end date of the week\n    val endWeekDate = weekDateFormat.format(c.time)\n    newLabels.add(\"$startWeekDate - $endWeekDate\")\n    c.add(Calendar.DATE, 1) // advance to the next week\n}\nxAxisLabels.value = newLabels\n\nbottomAxisValueFormatter =\n        AxisValueFormatter { x, _ -> xAxisLabels.value[x.toInt() % xAxisLabels.value.size] }",
    "filename": "ea74196c8cf8da4ff70b7d1db6e585a8_0.kt"
  },
  {
    "conversation_hash": "ea74196c8cf8da4ff70b7d1db6e585a8",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val startEndDateFormat = SimpleDateFormat(\"d_MMM_yyyy\", Locale.getDefault())\n\nval c = Calendar.getInstance()\nc.time = startCalendar.time\nval newLabels = mutableListOf<String>()\n\nwhile (c.timeInMillis <= endCalendar.timeInMillis) {\n    val startWeekDate = startEndDateFormat.format(c.time)\n    c.add(Calendar.DATE, 6) // add 6 days to get the end date of the week\n    val endWeekDate = startEndDateFormat.format(c.time)\n    newLabels.add(\"$startWeekDate - $endWeekDate\")\n    c.add(Calendar.DATE, 1) // advance to the next week\n}\nxAxisLabels.value = newLabels\n\nbottomAxisValueFormatter =\n        AxisValueFormatter { x, _ -> xAxisLabels.value[x.toInt() % xAxisLabels.value.size] }",
    "filename": "ea74196c8cf8da4ff70b7d1db6e585a8_1.kt"
  },
  {
    "conversation_hash": "ea74196c8cf8da4ff70b7d1db6e585a8",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "dateFormat = SimpleDateFormat(\"W_MMM_yyyy\", Locale.getDefault())\nval weekDateFormat = SimpleDateFormat(\"d_MMM_yyyy\", Locale.getDefault())\n\nval c = Calendar.getInstance()\nc.time = startCalendar.time\nval newLabels = mutableListOf<String>()\n\nwhile (c.timeInMillis <= endCalendar.timeInMillis) {\n    val startWeekDate = weekDateFormat.format(c.time)\n    c.add(Calendar.DATE, 6) // add 6 days to get the end date of the week\n    val endWeekDate = weekDateFormat.format(c.time)\n    newLabels.add(\"$startWeekDate - $endWeekDate\")\n    c.add(Calendar.DATE, 1) // advance to the next week\n}\nxAxisLabels.value = newLabels\n\nbottomAxisValueFormatter =\n        AxisValueFormatter { x, _ -> xAxisLabels.value[x.toInt() % xAxisLabels.value.size] }",
    "filename": "ea74196c8cf8da4ff70b7d1db6e585a8_2.kt"
  },
  {
    "conversation_hash": "8ad6f9f9e08d08cc5102d397bb85fb1d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "\"Weekly\" -> {\n    // ... other code isn't changed ...\n\n    val c = Calendar.getInstance()\n    c.time = startCalendar.time\n    val newLabels = mutableListOf<String>()\n\n    var weekCounter = 1\n    while (c.timeInMillis <= endCalendar.timeInMillis && weekCounter <= 4) {\n        newLabels.add(\"Week $weekCounter\")\n        weekCounter += 1\n        c.add(Calendar.DATE, 7) // increment c by 7 days\n    }\n    xAxisLabels.value = newLabels\n\n    // ... other code isn't changed ...\n}",
    "filename": "8ad6f9f9e08d08cc5102d397bb85fb1d_0.kt"
  },
  {
    "conversation_hash": "8ad6f9f9e08d08cc5102d397bb85fb1d",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "\"Weekly\" -> {\n    // ... other code isn't changed ...\n\n    val c = Calendar.getInstance()\n    c.time = startCalendar.time\n    val newLabels = mutableListOf<String>()\n\n    var weekCounter = 1\n    while (c.timeInMillis <= endCalendar.timeInMillis && weekCounter <= 4) {\n        newLabels.add(\"Week $weekCounter\")\n        weekCounter += 1\n        c.add(Calendar.DATE, 7) // Change this line to increment c by 7 days\n    }\n    xAxisLabels.value = newLabels\n\n    // ... other code isn't changed ...\n}",
    "filename": "8ad6f9f9e08d08cc5102d397bb85fb1d_1.kt"
  },
  {
    "conversation_hash": "8ad6f9f9e08d08cc5102d397bb85fb1d",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "\"Weekly\" -> {\n    // ... other code isn't changed ...\n\n    val c = Calendar.getInstance()\n    c.time = startCalendar.time\n    \n    // Add log statements to display startCalendar and endCalendar\n    Log.d(\"Weekly\", \"Start Calendar: ${startCalendar.time}\")\n    Log.d(\"Weekly\", \"End Calendar: ${endCalendar.time}\")\n\n    val newLabels = mutableListOf<String>()\n\n    var weekCounter = 1\n    while (c.timeInMillis <= endCalendar.timeInMillis && weekCounter <= 4) {\n        newLabels.add(\"Week $weekCounter\")\n        // Add log statement to display c and the corresponding label\n        Log.d(\"Weekly\", \"Calendar c: ${c.time}, Label: Week $weekCounter\")\n        \n        weekCounter += 1\n        c.add(Calendar.DATE, 7) // Increment c by 7 days\n    }\n    xAxisLabels.value = newLabels\n\n    // ... other code isn't changed ...\n}",
    "filename": "8ad6f9f9e08d08cc5102d397bb85fb1d_2.kt"
  },
  {
    "conversation_hash": "8ad6f9f9e08d08cc5102d397bb85fb1d",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "query.get().addOnSuccessListener { result ->\n    val expenses = mutableListOf<Pair<Float, Date>>()\n    for (document in result) {\n        val total = document.getDouble(\"total\")?.toFloat() ?: 0f\n        val date = dateFormat.parse(document.id) ?: Date()\n        if (date.time >= startCalendar.timeInMillis && date.time <= endCalendar.timeInMillis) {\n            expenses.add(total to date)\n        }\n    }\n    \n    // Add log statement to display expenses\n    Log.d(\"Expenses\", \"Expenses: $expenses\")\n\n    val expensesMap = mutableMapOf<String, Float>().apply {\n        xAxisLabels.value.forEach { put(it, 0f) }\n    }\n\n    expenses.groupBy({ dateFormat.format(it.second) }, { it.first })\n        .forEach { date, values ->\n            values.sum().let { expenseSum ->\n                expensesMap[date] = expensesMap.getOrDefault(date, 0f) + expenseSum\n            }\n        }\n    \n    // Add log statement to display expensesMap\n    Log.d(\"ExpensesMap\", \"Expenses Map: $expensesMap\")\n\n    for (expense in expenses) {\n        val dateFormatted = dateFormat.format(expense.second)\n        expensesMap[dateFormatted] = expense.first\n    }\n\n    chartEntries.value =\n        entriesOf(*expensesMap.entries.mapIndexed { index, (_, expense) -> index.toFloat() to expense }\n            .toTypedArray())\n    \n    // Add log statement to display chartEntries\n    Log.d(\"ChartEntries\", \"Chart Entries: ${chartEntries.value}\")\n}",
    "filename": "8ad6f9f9e08d08cc5102d397bb85fb1d_3.kt"
  },
  {
    "conversation_hash": "4a76a0bb0c89b609f045b78ff4adbff7",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Get a reference to the database\nval database = FirebaseDatabase.getInstance()\n\n// Get a reference to the \"users\" node in the database\nval usersRef = database.getReference(\"users\")\n\n// Query the database for users with a certain name\nval query = usersRef.orderByChild(\"name\").equalTo(\"John\")\n\n// Listen for the query results\nquery.addValueEventListener(object : ValueEventListener {\n    override fun onDataChange(dataSnapshot: DataSnapshot) {\n        for (snapshot in dataSnapshot.children) {\n            val user = snapshot.getValue(User::class.java)\n            // Do something with the user object\n        }\n    }\n\n    override fun onCancelled(databaseError: DatabaseError) {\n        // Handle error\n    }\n})",
    "filename": "4a76a0bb0c89b609f045b78ff4adbff7_0.kt"
  },
  {
    "conversation_hash": "4a76a0bb0c89b609f045b78ff4adbff7",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val database = FirebaseDatabase.getInstance()\nval questionsRef = database.getReference(\"questions\")\n\nval randomIndex = (Math.random() * Long.MAX_VALUE).toLong()\n\nval query = questionsRef.orderByChild(\"randomIndex\").startAt(randomIndex).limitToFirst(1)\n\nquery.addListenerForSingleValueEvent(object : ValueEventListener {\n    override fun onDataChange(dataSnapshot: DataSnapshot) {\n        for (questionSnapshot in dataSnapshot.children) {\n            val question = questionSnapshot.getValue(Question::class.java)\n            // Do something with the selected question\n        }\n    }\n\n    override fun onCancelled(databaseError: DatabaseError) {\n        // Handle error\n    }\n})",
    "filename": "4a76a0bb0c89b609f045b78ff4adbff7_1.kt"
  },
  {
    "conversation_hash": "e46d393cc4a7dea1778f77acbcea2f7b",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun SignUpScreen(\n    viewModel: SignUpViewModel\n) {\n    var email by remember { mutableStateOf(\"\") }\n    var password by remember { mutableStateOf(\"\") }\n    var confirmPassword by remember { mutableStateOf(\"\") }\n\n    val isFormValid = remember(email, password, confirmPassword) {\n        email.isNotBlank() && password.isNotBlank() && confirmPassword == password\n    }\n\n    Column(\n        modifier = Modifier.fillMaxSize()\n    ) {\n        OutlinedTextField(\n            value = email,\n            onValueChange = { email = it },\n            label = { Text(\"Email\") },\n            modifier = Modifier.padding(16.dp)\n        )\n\n        OutlinedTextField(\n            value = password,\n            onValueChange = { password = it },\n            label = { Text(\"Password\") },\n            modifier = Modifier.padding(16.dp)\n        )\n\n        OutlinedTextField(\n            value = confirmPassword,\n            onValueChange = { confirmPassword = it },\n            label = { Text(\"Confirm password\") },\n            modifier = Modifier.padding(16.dp)\n        )\n\n        Button(\n            onClick = { viewModel.signUp(email, password) },\n            modifier = Modifier\n                .padding(16.dp)\n                .fillMaxWidth(),\n            enabled = isFormValid\n        ) {\n            Text(\"Sign Up\")\n        }\n\n        TextButton(\n            onClick = { /* navigate to sign-in */ },\n            modifier = Modifier.padding(16.dp)\n        ) {\n            Text(\"Already have an account? Sign In\")\n        }\n    }\n}",
    "filename": "e46d393cc4a7dea1778f77acbcea2f7b_0.kt"
  },
  {
    "conversation_hash": "539f6b3eeb76dfc349983e7669461a06",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ObboeHelper {\n\n    private val SAMPLE_RATE = 44100\n    private val CHANNELS = 2\n    private val BITS_PER_SAMPLE = 16\n\n    private var recorder: OboeRecorder\n    private var player: OboePlayer\n\n    init {\n        recorder = OboeRecorder(SAMPLE_RATE, CHANNELS, BITS_PER_SAMPLE)\n        player = OboePlayer(SAMPLE_RATE, CHANNELS, BITS_PER_SAMPLE)\n    }\n\n    fun startRecording() {\n        recorder.startRecording()\n    }\n\n    fun stopRecording() {\n        recorder.stopRecording()\n    }\n\n    fun startPlayback() {\n        player.startPlayback()\n    }\n\n    fun stopPlayback() {\n        player.stopPlayback()\n    }\n\n    fun setRecorderCallback(callback: (ByteArray) -> Unit) {\n        recorder.setCallback(callback)\n    }\n}",
    "filename": "539f6b3eeb76dfc349983e7669461a06_0.kt"
  },
  {
    "conversation_hash": "539f6b3eeb76dfc349983e7669461a06",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class OboeRecorder(sampleRate: Int, channels: Int, bitsPerSample: Int) {\n\n    private val AAudioCallback = object : OboeAudioStreamCallback {\n        \n        override fun onAudioReady(audioStream: OboeAudioStream, audioData: ByteBuffer, numFrames: Int) {\n            // 将数据传递给回调函数进行进一步处理\n            val byteArray = audioData.array()\n            callback(byteArray)\n        }\n    }\n    \n    private val audioStreamBuilder = OboeAudioStreamBuilder()\n        .setFormat(AudioFormat.FLOAT)\n        .setSharingMode(SharingMode.EXCLUSIVE)\n        .setPerformanceMode(PerformanceMode.FASTEST)\n        .setSampleRate(sampleRate)\n        .setChannelCount(channels)\n        .setBufferCapacityInFrames(512)\n        .setDirection(Direction.INPUT)\n        .setCallback(AAudioCallback)\n    \n    private var audioStream: OboeAudioStream? = audioStreamBuilder.openStream()\n\n    private var callback: (ByteArray) -> Unit = {}\n\n    init {\n        audioStream?.setBufferSizeInFrames(audioStream?.getFramesPerBurst() ?: 0)\n    }\n\n    fun startRecording() {\n        audioStream?.requestStart()\n    }\n\n    fun stopRecording() {\n        audioStream?.requestStop()\n    }\n\n    fun setCallback(callback: (ByteArray) -> Unit) {\n        this.callback = callback\n    }\n}",
    "filename": "539f6b3eeb76dfc349983e7669461a06_1.kt"
  },
  {
    "conversation_hash": "a66e0320bb54a35600acd97a9cab416f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "val database = FirebaseDatabase.getInstance().getReference(\"your_node\")\nval query = database.orderByChild(\"some_child_property\").limitToFirst(1)\n\nquery.addListenerForSingleValueEvent(object : ValueEventListener {\n    override fun onDataChange(snapshot: DataSnapshot) {\n        if (snapshot.exists()) {\n            val randomRow = snapshot.children.first().getValue(YourObject::class.java)\n            // Do something with the random row...\n        }\n    }\n\n    override fun onCancelled(error: DatabaseError) {\n        Log.e(\"Firebase\", \"Error getting random row: $error\")\n    }\n})",
    "filename": "a66e0320bb54a35600acd97a9cab416f_0.kt"
  },
  {
    "conversation_hash": "a66e0320bb54a35600acd97a9cab416f",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "val database = FirebaseDatabase.getInstance().getReference(\"my_data\")\ndatabase.addListenerForSingleValueEvent(object : ValueEventListener {\n    override fun onDataChange(snapshot: DataSnapshot) {\n        if (snapshot.exists()) {\n            val jsonString = snapshot.value.toString()\n            val myData = Gson().fromJson(jsonString, MyData::class.java)\n            // Use the 'myData' object here\n        }\n    }\n\n    override fun onCancelled(error: DatabaseError) {\n        Log.e(\"Firebase\", \"Error retrieving data: $error\")\n    }\n})",
    "filename": "a66e0320bb54a35600acd97a9cab416f_3.kt"
  },
  {
    "conversation_hash": "a66e0320bb54a35600acd97a9cab416f",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyActivity : AppCompatActivity() {\n    private lateinit var database: DatabaseReference\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_my)\n\n        database = FirebaseDatabase.getInstance().getReference(\"my_data\")\n        database.addListenerForSingleValueEvent(valueEventListener)\n    }\n\n    private val valueEventListener = object : ValueEventListener {\n        override fun onDataChange(snapshot: DataSnapshot) {\n            if (snapshot.exists()) {\n                // Do something with the data here\n            }\n        }\n\n        override fun onCancelled(error: DatabaseError) {\n            Log.e(\"Firebase\", \"Error retrieving data: $error\")\n        }\n    }\n\n}",
    "filename": "a66e0320bb54a35600acd97a9cab416f_4.kt"
  },
  {
    "conversation_hash": "a66e0320bb54a35600acd97a9cab416f",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "val database = FirebaseDatabase.getInstance().getReference(\"your_node\")\nval randomKey = database.push().key\n\ndatabase.child(randomKey).addListenerForSingleValueEvent(object : ValueEventListener {\n    override fun onDataChange(snapshot: DataSnapshot) {\n        if (snapshot.exists()) {\n            val randomRow = snapshot.getValue(YourObject::class.java)\n            snapshot.ref.removeValue() // remove the randomly retrieved data\n            // Do something with the random row...\n        }\n    }\n\n    override fun onCancelled(error: DatabaseError) {\n        Log.e(\"Firebase\", \"Error getting random row: $error\")\n    }\n})",
    "filename": "a66e0320bb54a35600acd97a9cab416f_5.kt"
  },
  {
    "conversation_hash": "a66e0320bb54a35600acd97a9cab416f",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "val database = FirebaseDatabase.getInstance().getReference(\"your_node\")\nval randomNumber = Random.nextInt(0, 100) // Generates random number between 0 and 99\nval query = database.orderByChild(\"some_property\").startAt(randomNumber).limitToFirst(1)\n\nquery.addListenerForSingleValueEvent(object : ValueEventListener {\n    override fun onDataChange(snapshot: DataSnapshot) {\n        if (snapshot.exists()) {\n            val randomRow = snapshot.children.first().getValue(YourObject::class.java)\n            // Do something with the random row...\n        }\n    }\n\n    override fun onCancelled(error: DatabaseError) {\n        Log.e(\"Firebase\", \"Error getting random row: $error\")\n    }\n})",
    "filename": "a66e0320bb54a35600acd97a9cab416f_6.kt"
  },
  {
    "conversation_hash": "a66e0320bb54a35600acd97a9cab416f",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "val database = FirebaseDatabase.getInstance().reference.child(\"questions\")\nval query = database.orderByKey().startAt(start).endAt(end)\n\nquery.addListenerForSingleValueEvent(object : ValueEventListener {\n    override fun onDataChange(snapshot: DataSnapshot) {\n        if (snapshot.exists()) {\n            val questionsList = snapshot.children.mapNotNull { it.getValue(Question::class.java) }\n            val randomQuestion = questionsList.randomOrNull()\n            if (randomQuestion != null) {\n                // Do something with the random question...\n            } else {\n                // Handle case where the query doesn't return any questions\n            }\n        } else {\n            // Handle case where the query doesn't exist\n        }\n    }\n\n    override fun onCancelled(error: DatabaseError) {\n        Log.e(\"Firebase\", \"Error retrieving data: $error\")\n    }\n})",
    "filename": "a66e0320bb54a35600acd97a9cab416f_8.kt"
  },
  {
    "conversation_hash": "aed220f3fd57f63ae85ed2c550cd73aa",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class AudioEngine {\n    private var recorder: AudioRecorder? = null\n    private var player: AudioPlayer? = null\n\n    // 选择数据格式，可选 16-bit、24-bit、32-bit 和 Float\n    enum class SampleFormat(val bytesPerSample: Int) {\n        FORMAT_PCM_16(2),\n        FORMAT_PCM_24(3),\n        FORMAT_PCM_32(4),\n        FORMAT_FLOAT(4),\n    }\n\n    // 音频数据回调\n    interface AudioCallback {\n        fun onAudioData(audioData: ByteArray, numFrames: Int)\n    }\n\n    // 开始录音\n    fun startRecording(sampleRate: Int, numChannels: Int, sampleFormat: SampleFormat, callback: AudioCallback) {\n        // 检查是否支持当前音频格式\n        if (!AudioFormat.isEncodingLinearPcm(sampleFormatToEncoding(sampleFormat))) {\n            Log.e(TAG, \"Unsupported sample format $sampleFormat\")\n            return\n        }\n\n        stopRecording()\n\n        try {\n            recorder = AudioRecorder(sampleRate, numChannels, sampleFormat, object : AudioRecorder.AudioRecordingCallback {\n                override fun onAudioData(audioData: ByteArray, numFrames: Int) {\n                    callback.onAudioData(audioData, numFrames)\n                }\n            })\n            recorder!!.start()\n        } catch (e: Exception) {\n            Log.e(TAG, \"Error starting recording\", e)\n        }\n    }\n\n    // 停止录音\n    fun stopRecording() {\n        recorder?.stop()\n        recorder = null\n    }\n\n    // 开始播放\n    fun startPlaying(sampleRate: Int, numChannels: Int, sampleFormat: SampleFormat, callback: AudioCallback) {\n        // 检查是否支持当前音频格式\n        if (!AudioFormat.isEncodingLinearPcm(sampleFormatToEncoding(sampleFormat))) {\n            Log.e(TAG, \"Unsupported sample format $sampleFormat\")\n            return\n        }\n\n        stopPlaying()\n\n        try {\n            player = AudioPlayer(sampleRate, numChannels, sampleFormat, object : AudioPlayer.AudioPlayingCallback {\n                override fun onAudioData(numFrames: Int): ByteArray? {\n                    return callback.onAudioData(numFrames)\n                }\n            })\n            player!!.start()\n        } catch (e: Exception) {\n            Log.e(TAG, \"Error starting playback\", e)\n        }\n    }\n\n    // 停止播放\n    fun stopPlaying() {\n        player?.stop()\n        player = null\n    }\n\n    // 将SampleFormat转换为Android的编码\n    fun sampleFormatToEncoding(sampleFormat: SampleFormat): Int {\n        return when (sampleFormat) {\n            SampleFormat.FORMAT_PCM_16 -> AudioFormat.ENCODING_PCM_16BIT\n            SampleFormat.FORMAT_PCM_24 -> AudioFormat.ENCODING_PCM_8_24BIT\n            SampleFormat.FORMAT_PCM_32 -> AudioFormat.ENCODING_PCM_32BIT\n            SampleFormat.FORMAT_FLOAT -> AudioFormat.ENCODING_PCM_FLOAT\n        }\n    }\n\n    companion object {\n        private const val TAG = \"AudioEngine\"\n    }\n}",
    "filename": "aed220f3fd57f63ae85ed2c550cd73aa_1.kt"
  },
  {
    "conversation_hash": "aed220f3fd57f63ae85ed2c550cd73aa",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "val audioEngine = AudioEngine()\n\n// 开始录音\naudioEngine.startRecording(\n    sampleRate = 48000, \n    numChannels = 1,\n    sampleFormat = AudioEngine.SampleFormat.FORMAT_PCM_16,\n    callback = object : AudioEngine.AudioCallback {\n        override fun onAudioData(audioData: ByteArray, numFrames: Int) {\n            // 处理音频数据\n        }\n    }\n)\n\n// 停止录音\naudioEngine.stopRecording()\n\n// 开始播放\naudioEngine.startPlaying(\n    sampleRate = 48000, \n    numChannels = 1,\n    sampleFormat = AudioEngine.SampleFormat.FORMAT_PCM_16,\n    callback = object : AudioEngine.AudioCallback {\n        override fun onAudioData(numFrames: Int): ByteArray? {\n            // 返回音频数据\n            return null\n        }\n    }\n)\n\n// 停止播放\naudioEngine.stopPlaying()",
    "filename": "aed220f3fd57f63ae85ed2c550cd73aa_2.kt"
  },
  {
    "conversation_hash": "aed220f3fd57f63ae85ed2c550cd73aa",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun isSampleFormatSupported(sampleFormat: AudioEngine.SampleFormat): Boolean {\n    return when (sampleFormat) {\n        AudioEngine.SampleFormat.FORMAT_PCM_16 -> AudioSystem.getOutputSampleBitDepth(AudioManager.STREAM_MUSIC) >= 16\n        AudioEngine.SampleFormat.FORMAT_PCM_24 -> AudioSystem.getOutputSampleBitDepth(AudioManager.STREAM_MUSIC) >= 24\n        AudioEngine.SampleFormat.FORMAT_PCM_32 -> AudioSystem.getOutputSampleBitDepth(AudioManager.STREAM_MUSIC) >= 32\n        AudioEngine.SampleFormat.FORMAT_FLOAT -> isFloatOutputSupported()\n    }\n}\n\nfun isFloatOutputSupported(): Boolean {\n    val mAudioManager = getSystemService(AUDIO_SERVICE) as AudioManager\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n        val availableDeviceIds = mAudioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS)\n        for (device in availableDeviceIds) {\n            val caps = mAudioManager.getHwAvSyncAndLatency(device.id)\n            if (caps != null && caps.isSink && caps.sampleRates.isNotEmpty() && caps.sampleRates[0] == AudioFormat.SAMPLE_RATE_UNSPECIFIED) {\n                if (caps.channelMasks != null && caps.channelMasks.size > 0) {\n                    for (channelMask in caps.channelMasks) {\n                        if (AudioFormatENCODING_PCM_FLOAT.ELEMENT.getSizeInBytes() * channelMask!!.getChannelCount() == caps.bytesPerFrame) {\n                            return true\n                        }\n                    }\n                } else if (caps.channelIndexMasks != null && caps.channelIndexMasks.size > 0) {\n                    for (channelIndexMask in caps.channelIndexMasks) {\n                        if (AudioFormatENCODING_PCM_FLOAT.ELEMENT.getSizeInBytes() * channelIndexMask!!.getChannelCount() == caps.bytesPerFrame) {\n                            return true\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false\n}",
    "filename": "aed220f3fd57f63ae85ed2c550cd73aa_4.kt"
  },
  {
    "conversation_hash": "aed220f3fd57f63ae85ed2c550cd73aa",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun setRecordingParams(sampleRate: Int, numChannels: Int, sampleFormat: AudioEngine.SampleFormat) {\n    recorder?.setParams(sampleRate, numChannels, sampleFormat)\n}\n\nfun setPlayingParams(sampleRate: Int, numChannels: Int, sampleFormat: AudioEngine.SampleFormat) {\n    player?.setParams(sampleRate, numChannels, sampleFormat)\n}",
    "filename": "aed220f3fd57f63ae85ed2c550cd73aa_5.kt"
  },
  {
    "conversation_hash": "aed220f3fd57f63ae85ed2c550cd73aa",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "// 检查录音和存储权限是否已授权\nfun hasPermissions(): Boolean {\n    val storagePermission = ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)\n    val recordPermission = ContextCompat.checkSelfPermission(this, Manifest.permission.MODIFY_AUDIO_SETTINGS)\n\n    return storagePermission == PackageManager.PERMISSION_GRANTED && recordPermission == PackageManager.PERMISSION_GRANTED\n}\n\n// 申请录音和存储权限\nfun requestPermissions() {\n    ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.RECORD_AUDIO, Manifest.permission.MODIFY_AUDIO_SETTINGS), PERMISSION_REQUEST_CODE)\n}\n\n// 处理权限请求结果\noverride fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\n    when (requestCode) {\n        PERMISSION_REQUEST_CODE -> {\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                // 权限授权成功，可以进行录音或播放操作\n            } else {\n                // 权限授权失败，无法进行录音或播放操作，可以提示用户打开权限\n            }\n        }\n    }\n}",
    "filename": "aed220f3fd57f63ae85ed2c550cd73aa_8.kt"
  },
  {
    "conversation_hash": "aed220f3fd57f63ae85ed2c550cd73aa",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface RecordingStateCallback {\n    fun onRecordingStateChanged(state: Int)\n}\n\ninterface PlayingStateCallback {\n    fun onPlayingStateChanged(state: Int)\n}\n\nclass AudioEngine {\n    ...\n\n    private var recordingStateCallback: RecordingStateCallback? = null\n    private var playingStateCallback: PlayingStateCallback? = null\n\n    enum class State {\n        IDLE,\n        STARTED,\n        STOPPED\n    }\n\n    fun setRecordingStateCallback(callback: RecordingStateCallback) {\n        recordingStateCallback = callback\n    }\n\n    fun setPlayingStateCallback(callback: PlayingStateCallback) {\n        playingStateCallback = callback\n    }\n\n    ...\n\n    companion object {\n        private const val TAG = \"AudioEngine\"\n        private const val RECORDING_STATE_IDLE = 0\n        private const val RECORDING_STATE_STARTED = 1\n        private const val RECORDING_STATE_STOPPED = 2\n        private const val PLAYING_STATE_IDLE = 0\n        private const val PLAYING_STATE_STARTED = 1\n        private const val PLAYING_STATE_STOPPED = 2\n    }\n}",
    "filename": "aed220f3fd57f63ae85ed2c550cd73aa_11.kt"
  },
  {
    "conversation_hash": "aed220f3fd57f63ae85ed2c550cd73aa",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "class AudioEngine {\n    ...\n\n    fun startRecording(sampleRate: Int, numChannels: Int, sampleFormat: SampleFormat, callback: AudioCallback) {\n        ...\n        recordingStateCallback?.onRecordingStateChanged(RECORDING_STATE_STARTED)\n    }\n\n    fun stopRecording() {\n        ...\n        recordingStateCallback?.onRecordingStateChanged(RECORDING_STATE_STOPPED)\n    }\n\n    ...\n}",
    "filename": "aed220f3fd57f63ae85ed2c550cd73aa_12.kt"
  },
  {
    "conversation_hash": "c93dce4f498242d312a73bacc32394b1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "abstract class AudioPlayer {\n       interface PlaybackCallback {\n           fun onPlaybackStarted()\n           fun onPlaybackStopped()\n       }\n\n       protected lateinit var audioStream: AudioStream\n\n       abstract fun initializePlayback(sampleRate: Int, channelCount: Int, bitDepth: Int)\n       abstract fun startPlayback()\n       abstract fun stopPlayback()\n\n       fun setPlaybackCallback(callback: PlaybackCallback) {\n           audioStream.setCallback(object : AudioStreamCallback {\n               override fun onAudioReady(audioStream: AudioStream, audioData: ByteBuffer, numFrames: Int) {\n                   // Not used for playback\n               }\n\n               override fun onError(audioStream: AudioStream, error: Int) {\n                   Log.d(TAG, \"Playback error: $error\")\n               }\n\n               override fun onTearDown(audioStream: AudioStream) {\n                   callback.onPlaybackStopped()\n               }\n           })\n       }\n\n       companion object {\n           private const val TAG = \"AudioPlayer\"\n       }\n   }",
    "filename": "c93dce4f498242d312a73bacc32394b1_1.kt"
  },
  {
    "conversation_hash": "c93dce4f498242d312a73bacc32394b1",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "abstract class AudioRecorder {\n       interface RecordingCallback {\n           fun onRecordingStarted()\n           fun onRecordingStopped()\n           fun onRecordingData(audioData: ByteBuffer, numFrames: Int)\n       }\n\n       protected lateinit var audioStream: AudioStream\n\n       abstract fun initializeRecording(sampleRate: Int, channelCount: Int, bitDepth: Int)\n       abstract fun startRecording()\n       abstract fun stopRecording()\n\n       fun setRecordingCallback(callback: RecordingCallback) {\n           audioStream.setCallback(object : AudioStreamCallback {\n               override fun onAudioReady(audioStream: AudioStream, audioData: ByteBuffer, numFrames: Int) {\n                   callback.onRecordingData(audioData, numFrames)\n               }\n\n               override fun onError(audioStream: AudioStream, error: Int) {\n                   Log.d(TAG, \"Recording error: $error\")\n               }\n\n               override fun onTearDown(audioStream: AudioStream) {\n                   callback.onRecordingStopped()\n               }\n           })\n       }\n\n       companion object {\n           private const val TAG = \"AudioRecorder\"\n       }\n   }",
    "filename": "c93dce4f498242d312a73bacc32394b1_2.kt"
  },
  {
    "conversation_hash": "c93dce4f498242d312a73bacc32394b1",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PCMPlayer : AudioPlayer() {\n       override fun initializePlayback(sampleRate: Int, channelCount: Int, bitDepth: Int) {\n           val format = when (bitDepth) {\n               16 -> AudioFormat.ENCODING_PCM_16BIT\n               24 -> AudioFormat.ENCODING_PCM_24BIT_PACKED\n               32 -> AudioFormat.ENCODING_PCM_FLOAT\n               else -> throw IllegalArgumentException(\"Unsupported bit depth\")\n           }\n           val builder = AudioStreamBuilder()\n                   .setChannelCount(channelCount)\n                   .setSampleRate(sampleRate)\n                   .setFormat(format)\n                   .setPerformanceMode(PerformanceMode.MODE_LOW_LATENCY)\n                   .setSharingMode(SharingMode.SHARED)\n           audioStream = builder.build()\n       }\n\n       override fun startPlayback() {\n           audioStream.start()\n           callback?.onPlaybackStarted()\n       }\n\n       override fun stopPlayback() {\n           audioStream.stop()\n       }\n\n       companion object {\n           private const val TAG = \"PCMPlayer\"\n       }\n   }",
    "filename": "c93dce4f498242d312a73bacc32394b1_3.kt"
  },
  {
    "conversation_hash": "c93dce4f498242d312a73bacc32394b1",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PCMAudioRecorder : AudioRecorder() {\n       override fun initializeRecording(sampleRate: Int, channelCount: Int, bitDepth: Int) {\n           val format = when (bitDepth) {\n               16 -> AudioFormat.ENCODING_PCM_16BIT\n               24 -> AudioFormat.ENCODING_PCM_24BIT_PACKED\n               32 -> AudioFormat.ENCODING_PCM_FLOAT\n               else -> throw IllegalArgumentException(\"Unsupported bit depth\")\n           }\n           val builder = AudioStreamBuilder()\n                   .setChannelCount(channelCount)\n                   .setSampleRate(sampleRate)\n                   .setFormat(format)\n                   .setPerformanceMode(PerformanceMode.MODE_LOW_LATENCY)\n                   .setSharingMode(SharingMode.SHARED)\n                   .setDirection(Direction.INPUT)\n           audioStream = builder.build()\n       }\n\n       override fun startRecording() {\n           audioStream.start()\n           callback?.onRecordingStarted()\n       }\n\n       override fun stopRecording() {\n           audioStream.stop()\n       }\n\n       companion object {\n           private const val TAG = \"PCMAudioRecorder\"\n       }\n   }",
    "filename": "c93dce4f498242d312a73bacc32394b1_4.kt"
  },
  {
    "conversation_hash": "c93dce4f498242d312a73bacc32394b1",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n       private lateinit var player: AudioPlayer\n       private lateinit var recorder: AudioRecorder\n\n       override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           setContentView(R.layout.activity_main)\n\n           // Initialize player and recorder\n           player = PCMPlayer()\n           recorder = PCMAudioRecorder()\n           player.initializePlayback(44100, 1, 16)\n           recorder.initializeRecording(44100, 1, 16)\n\n           // Set up callbacks for the player and recorder\n           player.setPlaybackCallback(object : AudioPlayer.PlaybackCallback {\n               override fun onPlaybackStarted() {\n                   Log.d(TAG, \"Playback started\")\n               }\n\n               override fun onPlaybackStopped() {\n                   Log.d(TAG, \"Playback stopped\")\n               }\n           })\n           recorder.setRecordingCallback(object : AudioRecorder.RecordingCallback {\n               override fun onRecordingStarted() {\n                   Log.d(TAG, \"Recording started\")\n               }\n\n               override fun onRecordingStopped() {\n                   Log.d(TAG, \"Recording stopped\")\n               }\n\n               override fun onRecordingData(audioData: ByteBuffer, numFrames: Int) {\n                   // Process recorded audio data\n               }\n           })\n\n           // Set up UI controls\n           startRecordingButton.setOnClickListener { recorder.startRecording() }\n           stopRecordingButton.setOnClickListener { recorder.stopRecording() }\n           startPlaybackButton.setOnClickListener { player.startPlayback() }\n           stopPlaybackButton.setOnClickListener { player.stopPlayback() }\n       }\n\n       companion object {\n           private const val TAG = \"MainActivity\"\n       }\n   }",
    "filename": "c93dce4f498242d312a73bacc32394b1_5.kt"
  },
  {
    "conversation_hash": "c93dce4f498242d312a73bacc32394b1",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun getRMS(): Float {\n       val audioData = ByteBuffer.allocateDirect(audioStream.framesPerBurst * audioStream.channelCount * 2)\n       audioStream.read(audioData, audioData.capacity())\n       val shortBuffer = audioData.order(ByteOrder.nativeOrder()).asShortBuffer()\n       var sum = 0.0\n       for (i in 0 until shortBuffer.capacity()) {\n           val sample = shortBuffer.get(i).toDouble() / Short.MAX_VALUE\n           sum += sample * sample\n       }\n       val rms = Math.sqrt(sum / shortBuffer.capacity())\n       return rms.toFloat()\n   }",
    "filename": "c93dce4f498242d312a73bacc32394b1_7.kt"
  },
  {
    "conversation_hash": "5a0f427ac523650dfbbdb070859947a7",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "abstract class AudioBase {\n\n    protected val TAG = javaClass.simpleName\n\n    protected var sampleRate: Int = SAMPLE_RATE\n    protected var channelCount: Int = CHANNEL_COUNT\n    protected var bitDepth: Int = BIT_DEPTH\n\n    abstract fun start()\n    abstract fun stop()\n    abstract fun release()\n\n    fun setSampleRate(sampleRate: Int) {\n        this.sampleRate = sampleRate\n    }\n\n    fun setChannelCount(channelCount: Int) {\n        this.channelCount = channelCount\n    }\n\n    fun setBitDepth(bitDepth: Int) {\n        this.bitDepth = bitDepth\n    }\n\n    interface ExceptionHandler {\n        fun onException(e: Exception)\n    }\n\n    interface VolumeHandler {\n        fun onVolume(volume: Float)\n    }\n\n    companion object {\n        const val SAMPLE_RATE = 44100\n        const val CHANNEL_COUNT = 1\n        const val BIT_DEPTH = 16\n    }\n}",
    "filename": "5a0f427ac523650dfbbdb070859947a7_1.kt"
  },
  {
    "conversation_hash": "5a0f427ac523650dfbbdb070859947a7",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class AudioRecorder(private val audioFile: File) : AudioBase() {\n\n    private val oboeRecorder: OboeRecorder by lazy {\n        OboeRecorder(sampleRate, channelCount, bitDepth, audioFile)\n    }\n\n    private var exceptionHandler: ExceptionHandler? = null\n    private var volumeHandler: VolumeHandler? = null\n\n    override fun start() {\n        try {\n            oboeRecorder.start()\n        } catch (e: Exception) {\n            exceptionHandler?.onException(e)\n        }\n    }\n\n    override fun stop() {\n        oboeRecorder.stop()\n    }\n\n    override fun release() {\n        oboeRecorder.release()\n    }\n\n    fun setExceptionHandler(listener: ExceptionHandler) {\n        exceptionHandler = listener\n    }\n\n    fun setVolumeHandler(listener: VolumeHandler) {\n        volumeHandler = listener\n        oboeRecorder.setVolumeHandler(object : OboeRecorder.VolumeHandler {\n            override fun onVolume(volume: Float) {\n                volumeHandler?.onVolume(volume)\n            }\n        })\n    }\n}",
    "filename": "5a0f427ac523650dfbbdb070859947a7_2.kt"
  },
  {
    "conversation_hash": "5a0f427ac523650dfbbdb070859947a7",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class AudioPlayer(private val audioFile: File) : AudioBase() {\n\n    private val oboePlayer: OboePlayer by lazy {\n        OboePlayer(sampleRate, channelCount, bitDepth, audioFile)\n    }\n\n    private var exceptionHandler: ExceptionHandler? = null\n    private var volumeHandler: VolumeHandler? = null\n\n    override fun start() {\n        try {\n            oboePlayer.start()\n        } catch (e: Exception) {\n            exceptionHandler?.onException(e)\n        }\n    }\n\n    override fun stop() {\n        oboePlayer.stop()\n    }\n\n    override fun release() {\n        oboePlayer.release()\n    }\n\n    fun setExceptionHandler(listener: ExceptionHandler) {\n        exceptionHandler = listener\n    }\n\n    fun setVolumeHandler(listener: VolumeHandler) {\n        volumeHandler = listener\n        oboePlayer.setVolumeHandler(object : OboePlayer.VolumeHandler {\n            override fun onVolume(volume: Float) {\n                volumeHandler?.onVolume(volume)\n            }\n        })\n    }\n}",
    "filename": "5a0f427ac523650dfbbdb070859947a7_3.kt"
  },
  {
    "conversation_hash": "5a0f427ac523650dfbbdb070859947a7",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "val recorder = AudioRecorder(File(\"/storage/emulated/0/Download/test.pcm\"))\nrecorder.start()\nhandlers[0] = object : AudioBase.ExceptionHandler {\n    override fun onException(e: Exception) {\n        Timber.tag(\"audioRecorder\").e(\"record exception: ${e.message}\")\n    }\n}\nhandlers[1] = object : AudioBase.VolumeHandler {\n    override fun onVolume(volume: Float) {\n        // do something...\n    }\n}\nrecorder.setExceptionHandler(handlers[0]!!)\nrecorder.setVolumeHandler(handlers[1]!!)\nrecorder.stop()\nrecorder.release()\n\nval player = AudioPlayer(File(\"/storage/emulated/0/Download/test.pcm\"))\nplayer.start()\nhandlers[0] = object : AudioBase.ExceptionHandler {\n    override fun onException(e: Exception) {\n        Timber.tag(\"audioPlayer\").e(\"play exception: ${e.message}\")\n    }\n}\nhandlers[1] = object : AudioBase.VolumeHandler {\n    override fun onVolume(volume: Float) {\n        // do something...\n    }\n}\nplayer.setExceptionHandler(handlers[0]!!)\nplayer.setVolumeHandler(handlers[1]!!)\nplayer.stop()\nplayer.release()",
    "filename": "5a0f427ac523650dfbbdb070859947a7_7.kt"
  },
  {
    "conversation_hash": "05538b8c4a2641cee131412805633cfc",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun setupPermissionsRequest(activity: Activity) {\n    if (ActivityCompat.shouldShowRequestPermissionRationale(\n            activity,\n            Manifest.permission.WRITE_EXTERNAL_STORAGE\n        )) {\n        AlertDialog.Builder(activity)\n            .setTitle(R.string.title_permission_request)\n            .setMessage(R.string.notify_storage_permission)\n            .setPositiveButton(R.string.button_continue) { _, _ ->\n                requestStoragePermissions(activity)\n            }\n            .setNegativeButton(R.string.button_quit) { _, _ ->\n                activity.finishAffinity()\n            }\n            .show()\n    } else {\n        requestStoragePermissions(activity)\n    }\n}\n\nfun requestStoragePermissions(activity: Activity) {\n    ActivityCompat.requestPermissions(\n        activity,\n        arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),\n        STORAGE_PERMISSION_REQUEST_CODE\n    )\n}\n\nconst val STORAGE_PERMISSION_REQUEST_CODE = 1 // declare it globally",
    "filename": "05538b8c4a2641cee131412805633cfc_5.kt"
  },
  {
    "conversation_hash": "ae790da0b8ab726524a3d3f9f29bb611",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.Manifest",
      "android.app.Activity",
      "android.content.pm.PackageManager",
      "android.os.Build",
      "androidx.appcompat.app.AlertDialog",
      "androidx.core.app.ActivityCompat",
      "androidx.core.content.ContextCompat"
    ],
    "code": "import android.Manifest\nimport android.app.Activity\nimport android.content.pm.PackageManager\nimport android.os.Build\nimport androidx.appcompat.app.AlertDialog\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\n\nfun setupPermissionsRequest(activity: Activity) {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { // minSDK>=24\n        if (ContextCompat.checkSelfPermission(activity, Manifest.permission.READ_EXTERNAL_STORAGE)\n            != PackageManager.PERMISSION_GRANTED) {\n            if (ActivityCompat.shouldShowRequestPermissionRationale(activity, Manifest.permission.READ_EXTERNAL_STORAGE)) {\n                AlertDialog.Builder(activity)\n                    .setTitle(R.string.title_permission_request)\n                    .setMessage(R.string.notify_storage_permission)\n                    .setPositiveButton(R.string.button_continue) { _, _ ->\n                        requestStoragePermissions(activity)\n                    }\n                    .setNegativeButton(R.string.button_quit) { _, _ ->\n                        activity.finishAffinity()\n                    }\n                    .show()\n            } else {\n                requestStoragePermissions(activity)\n            }\n        }\n    }\n}\n\nfun requestStoragePermissions(activity: Activity) {\n    ActivityCompat.requestPermissions(\n        activity,\n        arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE),\n        REQUEST_CODE_READ_EXTERNAL_STORAGE\n    )\n}",
    "filename": "ae790da0b8ab726524a3d3f9f29bb611_0.kt"
  },
  {
    "conversation_hash": "adbcbfb8fe6ef3632a6f32263af3379f",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.net.Uri",
      "android.os.Bundle",
      "android.provider.MediaStore",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.recyclerview.widget.LinearLayoutManager",
      "androidx.recyclerview.widget.RecyclerView",
      "java.io.File"
    ],
    "code": "import android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.provider.MediaStore\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport java.io.File\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var adapter: PhotoAdapter\n    private lateinit var photoList: MutableList<File>\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Initialize recyclerview and adapter\n        recyclerView = findViewById(R.id.photo_list)\n        photoList = mutableListOf()\n        adapter = PhotoAdapter(this, photoList)\n\n        // Set adapter and layout manager\n        recyclerView.adapter = adapter\n        recyclerView.layoutManager = LinearLayoutManager(this)\n\n        // Handle click on Select Photos button\n        findViewById<Button>(R.id.select_photos_button).setOnClickListener {\n            val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)\n            intent.type = \"image/*\"\n            startActivityForResult(intent, REQUEST_CODE_GALLERY)\n        }\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n\n        if (resultCode == RESULT_OK && requestCode == REQUEST_CODE_GALLERY) {\n            data?.data?.let { uri ->\n                val photoFile = File(getRealPathFromURI(uri))\n                photoList.add(photoFile)\n                adapter.notifyItemInserted(photoList.lastIndex)\n            }\n        }\n    }\n\n    private fun getRealPathFromURI(uri: Uri): String {\n        val projection = arrayOf(MediaStore.Images.Media.DATA)\n        val cursor = contentResolver.query(uri, projection, null, null, null)\n        cursor?.moveToFirst()\n        val columnIndex = cursor?.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)\n        val filePath = cursor?.getString(columnIndex ?: 0)\n        cursor?.close()\n        return filePath ?: \"\"\n    }\n\n    companion object {\n        private const val REQUEST_CODE_GALLERY = 1\n    }\n}",
    "filename": "adbcbfb8fe6ef3632a6f32263af3379f_5.kt"
  },
  {
    "conversation_hash": "adbcbfb8fe6ef3632a6f32263af3379f",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Handle click on Select Photos button\nfindViewById<Button>(R.id.select_photos_button).setOnClickListener {\n    val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)\n    intent.type = \"image/*\"\n    startActivityForResult(intent, REQUEST_CODE_GALLERY)\n}",
    "filename": "adbcbfb8fe6ef3632a6f32263af3379f_6.kt"
  },
  {
    "conversation_hash": "30e353cd141a06e53cbd5e12c8e2dfb9",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "Firestore",
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewModelScope",
      "com.google.firebase.firestore.FirebaseFirestore",
      "kotlinx.coroutines.launch"
    ],
    "code": "import androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.google.firebase.firestore.FirebaseFirestore\nimport kotlinx.coroutines.launch\n\nclass MyViewModel : ViewModel() {\n\n    private val db = FirebaseFirestore.getInstance()\n\n    // Initialize an empty list to hold entities retrieved from Firestore\n    val entities = mutableListOf<Entity>()\n\n    // Function to retrieve entities from Firestore\n    fun getEntitiesFromFirestore() {\n        db.collection(\"entities\").get()\n            .addOnSuccessListener { result ->\n                // Clear the list before adding new entities\n                entities.clear()\n                for (document in result) {\n                    // Convert Firestore document to Entity object\n                    val entity = document.toObject(Entity::class.java)\n                    // Add entity to the list\n                    entities.add(entity)\n                }\n            }\n    }\n\n    // Function to save entity to Firestore\n    fun saveEntityToFirestore(entity: Entity) {\n        db.collection(\"entities\").document(entity.id).set(entity)\n    }\n}",
    "filename": "30e353cd141a06e53cbd5e12c8e2dfb9_0.kt"
  },
  {
    "conversation_hash": "30e353cd141a06e53cbd5e12c8e2dfb9",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.LiveData",
      "androidx.lifecycle.MutableLiveData",
      "androidx.lifecycle.ViewModel",
      "com.google.firebase.database.",
      "database",
      "kotlinx.coroutines.Dispatchers",
      "kotlinx.coroutines.GlobalScope",
      "kotlinx.coroutines.launch",
      "kotlinx.coroutines.withContext",
      "the"
    ],
    "code": "import androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.google.firebase.database.*\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\n\nclass MyViewModel : ViewModel() {\n\n    private val database = FirebaseDatabase.getInstance().reference\n\n    // Initialize a MutableLiveData object to hold the entity retrieved from the database\n    private val _entity = MutableLiveData<Entity>()\n    val entity: LiveData<Entity> = _entity\n\n    // Function to retrieve entity from database using ValueEventListener\n    fun getEntityFromDatabase() {\n        database.child(\"entities\").child(\"entity_id\").addListenerForSingleValueEvent(object : ValueEventListener {\n            override fun onDataChange(dataSnapshot: DataSnapshot) {\n                // Convert dataSnapshot to Entity object\n                val entity = dataSnapshot.getValue(Entity::class.java)\n                // Set the value of _entity to the retrieved Entity object\n                _entity.postValue(entity)\n            }\n\n            override fun onCancelled(databaseError: DatabaseError) {\n                // Handle database error\n            }\n        })\n    }\n}",
    "filename": "30e353cd141a06e53cbd5e12c8e2dfb9_5.kt"
  },
  {
    "conversation_hash": "30e353cd141a06e53cbd5e12c8e2dfb9",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.Column",
      "androidx.compose.material.Button",
      "androidx.compose.material.Text",
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.mutableStateOf",
      "androidx.compose.runtime.remember",
      "com.google.firebase.database.",
      "database",
      "kotlinx.coroutines.Dispatchers",
      "kotlinx.coroutines.GlobalScope",
      "kotlinx.coroutines.launch",
      "kotlinx.coroutines.withContext"
    ],
    "code": "import androidx.compose.foundation.layout.Column\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport com.google.firebase.database.*\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\n\n@Composable\nfun GetEntityFromDatabase() {\n    // Initialize state for entity and button text\n    val entityState = remember { mutableStateOf<Entity?>(null) }\n    val buttonText = remember { mutableStateOf(\"Get Entity\") }\n\n    // Initialize a Firebase Realtime Database reference\n    val database = FirebaseDatabase.getInstance().reference\n\n    // Function to retrieve entity from database using ValueEventListener\n    fun getEntityFromDatabase() {\n        database.child(\"entities\").child(\"entity_id\").addListenerForSingleValueEvent(object : ValueEventListener {\n            override fun onDataChange(dataSnapshot: DataSnapshot) {\n                // Convert dataSnapshot to Entity object\n                val entity = dataSnapshot.getValue(Entity::class.java)\n                // Set the value of entityState to the retrieved Entity object\n                entityState.value = entity\n            }\n\n            override fun onCancelled(databaseError: DatabaseError) {\n                // Handle database error\n            }\n        })\n    }\n\n    Column {\n        Button(onClick = {\n            // Change button text and get entity from database\n            buttonText.value = \"Loading...\"\n            getEntityFromDatabase()\n        }) {\n            Text(text = buttonText.value)\n        }\n        entityState.value?.let {\n            Text(text = \"Entity Name: ${it.name}\")\n        }\n    }\n}",
    "filename": "30e353cd141a06e53cbd5e12c8e2dfb9_10.kt"
  },
  {
    "conversation_hash": "30e353cd141a06e53cbd5e12c8e2dfb9",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.Column",
      "androidx.compose.material.Button",
      "androidx.compose.material.Scaffold",
      "androidx.compose.material.SnackbarDuration",
      "androidx.compose.material.Text",
      "androidx.compose.material.rememberScaffoldState",
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.LaunchedEffect",
      "androidx.compose.runtime.mutableStateOf",
      "androidx.compose.runtime.remember",
      "kotlinx.coroutines.delay"
    ],
    "code": "import androidx.compose.foundation.layout.Column\nimport androidx.compose.material.Button\nimport androidx.compose.material.Scaffold\nimport androidx.compose.material.SnackbarDuration\nimport androidx.compose.material.Text\nimport androidx.compose.material.rememberScaffoldState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport kotlinx.coroutines.delay\n\n@Composable\nfun ShowToastInIfCondition() {\n    // Initialize state for button text\n    val buttonText = remember { mutableStateOf(\"Show Toast\") }\n    // Initialize scaffold state for showing a Toast\n    val scaffoldState = rememberScaffoldState()\n\n    Column {\n        Button(onClick = {\n            // Change button text\n            buttonText.value = \"Loading...\"\n\n            // Simulate a network call using coroutines\n            // In this example, the \"network call\" always returns true\n            val networkCallResult = true\n            if (networkCallResult) {\n                // Show a Toast using the Scaffold API\n                LaunchedEffect(true) {\n                    scaffoldState.snackbarHostState.showSnackbar(\n                        message = \"Network call succeeded\",\n                        duration = SnackbarDuration.Short\n                    )\n                }\n            } else {\n                // Show a Toast using the usual Toast API\n                // ...\n            }\n\n            // Reset button text after a delay\n            LaunchedEffect(Unit) {\n                delay(2000L)\n                buttonText.value = \"Show Toast\"\n            }\n        }) {\n            Text(text = buttonText.value)\n        }\n    }\n\n    // Wrap the Column in a Scaffold and pass in scaffoldState as a parameter\n    Scaffold(\n        scaffoldState = scaffoldState\n    ) {\n        Column {\n            // ...\n        }\n    }\n}",
    "filename": "30e353cd141a06e53cbd5e12c8e2dfb9_12.kt"
  },
  {
    "conversation_hash": "9b90df58ddc228f83295546c1ce63175",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// В функции setupPermissionsRequest обновите разрешение на доступ к файлам\nfun setupPermissionsRequest(activity: Activity) {\n    if (ActivityCompat.shouldShowRequestPermissionRationale(\n            activity,\n            Manifest.permission.WRITE_EXTERNAL_STORAGE\n        )) {\n        AlertDialog.Builder(activity)\n            .setTitle(R.string.title_permission_request)\n            .setMessage(R.string.notify_storage_permission)\n            .setPositiveButton(R.string.button_continue) { _, _ ->\n                requestStoragePermissions(activity)\n            }\n            .setNegativeButton(R.string.button_quit) { _, _ ->\n                activity.finishAffinity()\n            }\n            .show()\n    } else {\n        requestStoragePermissions(activity)\n    }\n}\n\n// В функции createConfigFile изменим способ получения каталога и передадим Context\nfun createConfigFile(\n    context: Context,\n    verifiedEmployee: VerifiedEmployee,\n    proxySettings: ProxySettings?\n) {\n    var config = employeeToConfig(verifiedEmployee)\n    if (proxySettings != null) {\n        config += proxySettingsToConfig(proxySettings)\n    }\n\n    mLogger.info { \"Config contents created \\n$config\" }\n\n    val dir = File(context.getExternalFilesDir(null), \"/STMobile/\")\n\n    if (dir.exists()) {\n        mLogger.info { \"Directory $dir already exists. Deleting...\" }\n\n        if (!dir.deleteRecursively()) {\n            throw IOException(\"Could not delete directory $dir\")\n        }\n    }\n\n    mLogger.info { \"Creating directory $dir...\" }\n\n    if (!dir.mkdir()) {\n        throw IOException(\"Could not create directory $dir\")\n    }\n\n    val configFile = File(dir, \"stmobile.conf\")\n\n    mLogger.info { \"Writing config file $configFile...\" }\n\n    configFile.writeText(config)\n\n    mLogger.info { \"Config file $configFile written\" }\n}",
    "filename": "9b90df58ddc228f83295546c1ce63175_0.kt"
  },
  {
    "conversation_hash": "b6566ec2119581fd5ccc152d40ca1860",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "kotlin\nclass MainActivity : AppCompatActivity() {\n\n    private var isRecording: Boolean = false\n    private var filePath: String? = null\n    private var recorder: MediaRecorder? = null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        start.setOnClickListener {\n            if (!isRecording) {\n                startRecording();\n            } else {\n                stopRecording();\n            }\n        }\n\n        play.setOnClickListener {\n            val intent = Intent(this, PlaybackActivity::class.java)\n            intent.putExtra(\"filePath\", filePath)\n            startActivity(intent)\n        }\n    }\n\n    private fun startRecording() {\n        filePath = \"${Environment.getExternalStorageDirectory().absolutePath}/record-${Date().time}.mp3\"\n        recorder = MediaRecorder()\n        recorder!!.setAudioSource(MediaRecorder.AudioSource.MIC)\n        recorder!!.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4)\n        recorder!!.setAudioEncoder(MediaRecorder.AudioEncoder.AAC)\n        recorder!!.setOutputFile(filePath)\n        recorder!!.prepare()\n        recorder!!.start()\n        isRecording = true\n        start.text = \"Стоп\"\n        Toast.makeText(this, \"Запись началась\", Toast.LENGTH_SHORT).show()\n    }\n\n    private fun stopRecording() {\n        if (isRecording) {\n            recorder!!.stop()\n            recorder!!.release()\n            isRecording = false\n            start.text = \"Старт\"\n            Toast.makeText(this, \"Запись окончена\", Toast.LENGTH_SHORT).show()\n        } else {\n            Toast.makeText(this, \"Запись уже остановлена\", Toast.LENGTH_SHORT).show()\n        }\n    }\n}",
    "filename": "b6566ec2119581fd5ccc152d40ca1860_1.kt"
  },
  {
    "conversation_hash": "3591cb2d38166bad58a30cd71a273045",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Initialize Firebase\n        Firebase.initializeApp(this)\n    }\n}",
    "filename": "3591cb2d38166bad58a30cd71a273045_0.kt"
  },
  {
    "conversation_hash": "3591cb2d38166bad58a30cd71a273045",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@ExperimentalFoundationApi\n@Composable\nfun EventsList(events: List<Event>) {\n    LazyVerticalGrid(\n        cells = GridCells.Fixed(2),\n        contentPadding = PaddingValues(8.dp)\n    ) {\n        items(events) { event ->\n            EventCard(event)\n        }\n    }\n}\n\n@Composable\nfun EventCard(event: Event) {\n    // Create a card view for an event item\n    Card(\n        shape = RoundedCornerShape(8.dp),\n        modifier = Modifier.padding(8.dp).fillMaxWidth().aspectRatio(1f),\n        elevation = 4.dp\n    ) {\n        Column {\n            Text(event.name, modifier = Modifier.padding(8.dp))\n            Text(event.date, modifier = Modifier.padding(8.dp))\n            Text(event.location, modifier = Modifier.padding(8.dp))\n        }\n    }\n}\n\ndata class Event(\n    val name: String,\n    val date: String,\n    val location: String\n)",
    "filename": "3591cb2d38166bad58a30cd71a273045_1.kt"
  },
  {
    "conversation_hash": "3591cb2d38166bad58a30cd71a273045",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "com.google.firebase.firestore.ktx.firestore",
      "com.google.firebase.ktx.Firebase"
    ],
    "code": "import com.google.firebase.firestore.ktx.firestore\nimport com.google.firebase.ktx.Firebase\n\nval db = Firebase.firestore\n\nfun fetchEvents(onEventsLoaded: (List<Event>) -> Unit) {\n    db.collection(\"events\")\n        .get()\n        .addOnSuccessListener { documents ->\n            val events = documents.map { doc ->\n                val name = doc.getString(\"name\") ?: \"\"\n                val date = doc.getString(\"date\") ?: \"\"\n                val location = doc.getString(\"location\") ?: \"\"\n                Event(name, date, location)\n            }\n            onEventsLoaded(events)\n        }\n        .addOnFailureListener { exception ->\n            // Handle exceptions or errors\n            Log.w(TAG, \"Error getting documents: \", exception)\n        }\n}",
    "filename": "3591cb2d38166bad58a30cd71a273045_2.kt"
  },
  {
    "conversation_hash": "3591cb2d38166bad58a30cd71a273045",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewModelScope",
      "com.google.firebase.auth.FirebaseAuth",
      "com.google.firebase.auth.ktx.auth",
      "com.google.firebase.ktx.Firebase",
      "kotlinx.coroutines.ExperimentalCoroutinesApi",
      "kotlinx.coroutines.channels.Channel",
      "kotlinx.coroutines.flow.MutableStateFlow",
      "kotlinx.coroutines.flow.receiveAsFlow",
      "kotlinx.coroutines.launch"
    ],
    "code": "import androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.ktx.Firebase\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\nimport kotlinx.coroutines.channels.Channel\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.receiveAsFlow\nimport kotlinx.coroutines.launch\n\n@ExperimentalCoroutinesApi\nclass AuthViewModel : ViewModel() {\n    private val auth: FirebaseAuth = Firebase.auth\n\n    val email = MutableStateFlow(\"\")\n    val password = MutableStateFlow(\"\")\n\n    private val _authEvent = Channel<AuthEvent>()\n    val authEvent = _authEvent.receiveAsFlow()\n\n    fun onSignInClicked() {\n        viewModelScope.launch {\n            try {\n                auth.signInWithEmailAndPassword(email.value, password.value).await()\n                _authEvent.send(AuthEvent.Authenticated)\n            } catch (e: Exception) {\n                _authEvent.send(AuthEvent.AuthError(e))\n            }\n        }\n    }\n\n    sealed class AuthEvent {\n        object Authenticated : AuthEvent()\n        data class AuthError(val exception: Exception) : AuthEvent()\n    }\n}",
    "filename": "3591cb2d38166bad58a30cd71a273045_4.kt"
  },
  {
    "conversation_hash": "3591cb2d38166bad58a30cd71a273045",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@ExperimentalCoroutinesApi\n@Composable\nfun EmailPasswordSignInScreen(authViewModel: AuthViewModel) {\n    val email = authViewModel.email.collectAsState()\n    val password = authViewModel.password.collectAsState()\n\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        TextField(\n            value = email.value,\n            onValueChange = { authViewModel.email.value = it },\n            label = { Text(\"Email\") },\n            keyboardType = KeyboardType.Email\n        )\n        Spacer(modifier = Modifier.height(8.dp))\n        TextField(\n            value = password.value,\n            onValueChange = { authViewModel.password.value = it },\n            label = { Text(\"Password\") },\n            keyboardType = KeyboardType.Password,\n            visualTransformation = PasswordVisualTransformation()\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = authViewModel::onSignInClicked) {\n            Text(\"Sign In\")\n        }\n    }\n}",
    "filename": "3591cb2d38166bad58a30cd71a273045_5.kt"
  },
  {
    "conversation_hash": "3591cb2d38166bad58a30cd71a273045",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@ExperimentalCoroutinesApi\n@ExperimentalMaterialApi\n@Composable\nfun MainScreen(authViewModel: AuthViewModel) {\n    val scaffoldState = rememberScaffoldState()\n\n    LaunchedEffect(authViewModel.authEvent) {\n        authViewModel.authEvent.collect { event ->\n            when (event) {\n                is AuthViewModel.AuthEvent.Authenticated -> {\n                    // Navigate to other screens if the user is authenticated\n                }\n                is AuthViewModel.AuthEvent.AuthError -> {\n                    scaffoldState.snackbarHostState.showSnackbar(event.exception.message.orEmpty())\n                }\n            }\n        }\n    }\n\n    Scaffold(scaffoldState = scaffoldState) {\n        EmailPasswordSignInScreen(authViewModel)\n    }\n}",
    "filename": "3591cb2d38166bad58a30cd71a273045_6.kt"
  },
  {
    "conversation_hash": "3591cb2d38166bad58a30cd71a273045",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun shareEvent(context: Context, event: Event) {\n    val shareText = \"Check out this event: ${event.name}, ${event.date}, ${event.location}\"\n    val shareIntent = Intent().apply {\n        action = Intent.ACTION_SEND\n        putExtra(Intent.EXTRA_TEXT, shareText)\n        type = \"text/plain\"\n    }\n    val chooser = Intent.createChooser(shareIntent, \"Share Event\")\n    context.startActivity(chooser)\n}",
    "filename": "3591cb2d38166bad58a30cd71a273045_7.kt"
  },
  {
    "conversation_hash": "3591cb2d38166bad58a30cd71a273045",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ShareButton(event: Event) {\n    val context = LocalContext.current\n\n    Button(\n        onClick = { shareEvent(context, event) },\n        modifier = Modifier.padding(16.dp)\n    ) {\n        Text(\"Share Event\")\n    }\n}",
    "filename": "3591cb2d38166bad58a30cd71a273045_8.kt"
  },
  {
    "conversation_hash": "0ca72705930eb24ba1913f91f5334a1e",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "FirebaseAuth.getInstance().addAuthStateListener { auth ->\n    val user = auth.currentUser\n\n    user?.getIdToken(true)\n        ?.addOnSuccessListener { tokenResult ->\n            if (tokenResult.claims[\"verified\"] == true) {\n                // User is verified\n            } else {\n                // User is not verified\n                FirebaseAuth.getInstance().signOut() // Sign out the user\n            }\n        }\n}",
    "filename": "0ca72705930eb24ba1913f91f5334a1e_3.kt"
  },
  {
    "conversation_hash": "d3c567d24b51796f2d93bd8b06585892",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.core.content.ContextCompat"
    ],
    "code": "import androidx.core.content.ContextCompat\n\nfun setupPermissionsRequest(activity: Activity) {\n    val requiredPermission = Manifest.permission.WRITE_EXTERNAL_STORAGE\n    val shouldShowRequest = ActivityCompat.shouldShowRequestPermissionRationale(\n        activity,\n        requiredPermission\n    )\n\n    when {\n        ContextCompat.checkSelfPermission(activity, requiredPermission) == PackageManager.PERMISSION_GRANTED ->\n            // Если уже имеется разрешение, то вызовите нужный метод или выполните следующие операции\n            createConfigFile(activity, verifiedEmployee, proxySettings)\n        shouldShowRequest -> {\n            AlertDialog.Builder(activity)\n                .setTitle(R.string.title_permission_request)\n                .setMessage(R.string.notify_storage_permission)\n                .setPositiveButton(R.string.button_continue) { _, _ ->\n                    requestStoragePermissions(activity)\n                }\n                .setNegativeButton(R.string.button_quit) { _, _ ->\n                    activity.finishAffinity()\n                }\n                .show()\n        }\n        else -> requestStoragePermissions(activity)\n    }\n}\n\nfun requestStoragePermissions(activity: Activity) {\n    ActivityCompat.requestPermissions(\n        activity,\n        arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),\n        PERMISSION_REQUEST_CODE\n    )\n}\n\n\nfun createConfigFile(\n    context: Context,\n    verifiedEmployee: VerifiedEmployee,\n    proxySettings: ProxySettings?\n) {\n    var config = employeeToConfig(verifiedEmployee)\n\n    if (proxySettings != null) {\n        config += proxySettingsToConfig(proxySettings)\n    }\n\n    mLogger.info { \"Config contents created \\n$config\" }\n\n    val dir = ContextCompat.getExternalFilesDirs(context, \"/STMobile/\").firstOrNull()\n        ?: throw IOException(\"No available storage found\")\n\n    if (dir.exists()) {\n        mLogger.info { \"Directory $dir already exists. Deleting...\" }\n\n        if (!dir.deleteRecursively()) {\n            throw IOException(\"Could not delete directory $dir\")\n        }\n    }\n\n    mLogger.info { \"Creating directory $dir...\" }\n\n    if (!dir.mkdir()) {\n        throw IOException(\"Could not create directory $dir\")\n    }\n\n    val configFile = File(dir, \"stmobile.conf\")\n\n    mLogger.info { \"Writing config file $configFile...\" }\n\n    configFile.writeText(config)\n\n    mLogger.info { \"Config file $configFile written\" }\n}",
    "filename": "d3c567d24b51796f2d93bd8b06585892_0.kt"
  },
  {
    "conversation_hash": "e59cfe092e2500e1c61526ef3ea529b3",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val context = this\n        //... дальнейшие действия с context\n    }\n}",
    "filename": "e59cfe092e2500e1c61526ef3ea529b3_0.kt"
  },
  {
    "conversation_hash": "e59cfe092e2500e1c61526ef3ea529b3",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val context = applicationContext\n        //... дальнейшие действия с context\n    }\n}",
    "filename": "e59cfe092e2500e1c61526ef3ea529b3_1.kt"
  },
  {
    "conversation_hash": "e59cfe092e2500e1c61526ef3ea529b3",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyApp : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        val context = applicationContext\n        //... дальнейшие действия с context\n    }\n}",
    "filename": "e59cfe092e2500e1c61526ef3ea529b3_2.kt"
  },
  {
    "conversation_hash": "e59cfe092e2500e1c61526ef3ea529b3",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyFragment : Fragment() {\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        val context = requireContext()\n        //... дальнейшие действия с context\n    }\n}",
    "filename": "e59cfe092e2500e1c61526ef3ea529b3_3.kt"
  },
  {
    "conversation_hash": "ef1b51dd6b04bb02bac0096f01ce6a8e",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.Row",
      "androidx.compose.foundation.layout.padding",
      "androidx.compose.material.Icon",
      "androidx.compose.material.IconButton",
      "androidx.compose.material.TextField",
      "androidx.compose.runtime.",
      "androidx.compose.ui.Modifier",
      "androidx.compose.ui.graphics.vector.ImageVector",
      "androidx.compose.ui.unit.dp"
    ],
    "code": "import androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.Icon\nimport androidx.compose.material.IconButton\nimport androidx.compose.material.TextField\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.unit.dp\n\n@Composable\nfun PasswordTextField(\n    passwordIcon: ImageVector,\n    visibilityIcon: ImageVector,\n    isPasswordVisible: Boolean,\n) {\n    var password by remember { mutableStateOf(\"\") }\n    TextField(\n        value = password,\n        onValueChange = { password = it },\n        placeholder = { Text(\"Password\") },\n        trailingIcon = {\n            IconButton(\n                onClick = { isPasswordVisible = !isPasswordVisible },\n                content = {\n                    Icon(imageVector = visibilityIcon, contentDescription = \"Visibility Icon\")\n                }\n            )\n        },\n        visualTransformation = if (isPasswordVisible) VisualTransformation.None\n        else PasswordVisualTransformation(),\n        modifier = Modifier.padding(vertical = 8.dp)\n    )\n}\n\nprivate class PasswordVisualTransformation : VisualTransformation {\n    override fun filter(text: AnnotatedString): TransformedText {\n        return TransformedText(text = \"*\".repeat(text.text.length))\n    }\n}",
    "filename": "ef1b51dd6b04bb02bac0096f01ce6a8e_2.kt"
  },
  {
    "conversation_hash": "4e361e9138bdd9e8728aa406da948f6d",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val uri = Uri.parse(\"content://com.example.configprovider/config\")\nval cursor = applicationContext.contentResolver.query(uri, null, null, null, null)\nif (cursor != null) {\n    while (cursor.moveToNext()) {\n        val name = cursor.getString(cursor.getColumnIndex(\"name\"))\n    }\n    cursor.close()\n}",
    "filename": "4e361e9138bdd9e8728aa406da948f6d_1.kt"
  },
  {
    "conversation_hash": "aed630101b000cca7e51398901b8d8a2",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "object AudioUtil {\n    @JvmStatic\n    fun isSupport24bit(): Boolean {\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {\n            Log.d(\"AudioUtil\", \"是否支持24位\")\n            AudioTrack.ERROR_BAD_VALUE != AudioTrack.getMinBufferSize(\n                48000,\n                AudioFormat.CHANNEL_OUT_MONO,\n                AudioFormat.ENCODING_PCM_24BIT_PACKED\n            )\n        } else false\n    }\n}",
    "filename": "aed630101b000cca7e51398901b8d8a2_2.kt"
  },
  {
    "conversation_hash": "910e637dcf277c745985ccb134c7b783",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    // ...\n    external fun onAudioReady(data: ByteArray, length: Int)\n    companion object {\n        init {\n            System.loadLibrary(\"native-lib\")\n        }\n    }\n    // ...\n}",
    "filename": "910e637dcf277c745985ccb134c7b783_2.kt"
  },
  {
    "conversation_hash": "910e637dcf277c745985ccb134c7b783",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    // ...\n    val myOboeCallback = MyOboeCallback()\n    // ...\n\n    inner class MyOboeCallback {\n\n        external fun onAudioReady(data: ByteArray, length: Int)\n\n        companion object {\n            init {\n                System.loadLibrary(\"native-lib\")\n            }\n        }\n    }\n    // ...\n}",
    "filename": "910e637dcf277c745985ccb134c7b783_4.kt"
  },
  {
    "conversation_hash": "543a9bf8de58259a835839361832c656",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Получаем список установленных приложений\nval packages = packageManager.getInstalledPackages(0)\n\n// Проходимся по каждому приложению в списках и выводим его название\nfor (pkg in packages) {\n   val appName = packageManager.getApplicationLabel(pkg.applicationInfo).toString()\n   Log.d(\"MyApp\", \"Installed package : $pkg.packageName\")\n   Log.d(\"MyApp\", \"Name : $appName\")\n}",
    "filename": "543a9bf8de58259a835839361832c656_2.kt"
  },
  {
    "conversation_hash": "f7d6357a1cf70dab0aa6890b4f7b493c",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Database(entities = [FavoriteUser::class], version = 1)\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun favoriteUserDao(): FavoriteUserDao\n\n    companion object {\n        private var INSTANCE: AppDatabase? = null\n\n        fun getDatabase(context: Context): AppDatabase {\n            if (INSTANCE == null) {\n                INSTANCE = Room.databaseBuilder(\n                    context.applicationContext,\n                    AppDatabase::class.java,\n                    \"favorite_github_users_database\"\n                ).build()\n            }\n            return INSTANCE as AppDatabase\n        }\n\n        fun destroyInstance() {\n            INSTANCE = null\n        }\n    }\n}",
    "filename": "f7d6357a1cf70dab0aa6890b4f7b493c_2.kt"
  },
  {
    "conversation_hash": "f7d6357a1cf70dab0aa6890b4f7b493c",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class FavoriteUserViewModel(application: Application) : AndroidViewModel(application) {\n    private val userDao: FavoriteUserDao = AppDatabase.getDatabase(application).favoriteUserDao()\n    private val favoriteUsers = userDao.getFavoriteUsers()\n\n    fun addFavoriteUser(user: FavoriteUser) {\n        userDao.addFavoriteUser(user)\n    }\n\n    fun removeFavoriteUser(user: FavoriteUser) {\n        userDao.removeFavoriteUser(user)\n    }\n\n    fun getFavoriteUsers(): List<FavoriteUser> {\n        return favoriteUsers\n    }\n}",
    "filename": "f7d6357a1cf70dab0aa6890b4f7b493c_4.kt"
  },
  {
    "conversation_hash": "f7d6357a1cf70dab0aa6890b4f7b493c",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyActivity : AppCompatActivity() {\n    private lateinit var favoriteUserViewModel: FavoriteUserViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        favoriteUserViewModel = ViewModelProvider(this).get(FavoriteUserViewModel::class.java)\n    }\n\n    private fun addFavoriteUser(user: FavoriteUser) {\n        favoriteUserViewModel.addFavoriteUser(user)\n    }\n\n    private fun removeFavoriteUser(user: FavoriteUser) {\n        favoriteUserViewModel.removeFavoriteUser(user)\n    }\n\n    private fun getFavoriteUsers(): List<FavoriteUser> {\n        return favoriteUserViewModel.getFavoriteUsers()\n    }\n}",
    "filename": "f7d6357a1cf70dab0aa6890b4f7b493c_5.kt"
  },
  {
    "conversation_hash": "7a26900c7907917d5ad96a347a8f21ff",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class AudioReceiver : BroadcastReceiver() {\n    override fun onReceive(context: Context?, intent: Intent?) {\n        if (intent?.action == Intent.ACTION_HEADSET_PLUG) {\n            val state = intent.getIntExtra(\"state\", -1)\n            if (state == 0) {\n                // 耳机拔出\n                // 在这里写下拔出耳机时需要执行的逻辑\n            } else if (state == 1) {\n                // 耳机插入\n                // 在这里写下插入耳机时需要执行的逻辑\n            }\n        }\n    }\n}",
    "filename": "7a26900c7907917d5ad96a347a8f21ff_4.kt"
  },
  {
    "conversation_hash": "7a26900c7907917d5ad96a347a8f21ff",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun amplifyPcm(pcmData: ShortArray, amplificationFactor: Double) {\n    for (i in pcmData.indices) {\n        pcmData[i] = (pcmData[i] * amplificationFactor).toShort()\n    }\n}",
    "filename": "7a26900c7907917d5ad96a347a8f21ff_6.kt"
  },
  {
    "conversation_hash": "f9faf8994bf158ab88844ef5d08f5987",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.net.Uri",
      "android.os.Bundle",
      "android.provider.MediaStore",
      "android.widget.Button",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.recyclerview.widget.LinearLayoutManager",
      "androidx.recyclerview.widget.RecyclerView",
      "com.bumptech.glide.Glide",
      "com.example.mb7.R",
      "java.io.File"
    ],
    "code": "package com.example.mb7.presentation.main\n\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.provider.MediaStore\nimport android.widget.Button\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.mb7.R\nimport java.io.File\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var adapter: PhotoAdapter\n    private lateinit var photoList: ArrayList<File>\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Initialize recyclerview and adapter\n        recyclerView = findViewById(R.id.photo_list)\n        photoList = ArrayList()\n        adapter = PhotoAdapter(photoList)\n\n        // Set adapter and layout manager\n        recyclerView.adapter = adapter\n        recyclerView.layoutManager = LinearLayoutManager(this)\n\n        // Handle click on Select Photos button\n        findViewById<Button>(R.id.select_photos_button).setOnClickListener {\n            val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)\n            intent.type = \"image/\"\n            startActivityForResult(intent, REQUEST_CODE_GALLERY)\n        }\n\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n\n        if (resultCode == RESULT_OK && requestCode == REQUEST_CODE_GALLERY) {\n            data?.data?.let { uri ->\n                val photoFile = File(getRealPathFromURI(uri))\n                photoList.add(photoFile)\n                adapter.notifyDataSetChanged()\n                recyclerView.scrollToPosition(photoList.lastIndex)\n            }\n        }\n    }\n\n    private fun getRealPathFromURI(uri: Uri): String {\n        val projection = arrayOf(MediaStore.Images.Media.DATA)\n        val cursor = contentResolver.query(uri, projection, null, null, null)\n        cursor?.moveToFirst()\n        val columnIndex = cursor?.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)\n        val filePath = cursor?.getString(columnIndex ?: 0)\n        cursor?.close()\n        return filePath ?: \"\"\n    }\n\n    companion object {\n        private const val REQUEST_CODE_GALLERY = 1\n    }\n}",
    "filename": "f9faf8994bf158ab88844ef5d08f5987_5.kt"
  },
  {
    "conversation_hash": "f9faf8994bf158ab88844ef5d08f5987",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "android.net.Uri",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.widget.CheckBox",
      "android.widget.ImageView",
      "android.widget.TextView",
      "androidx.recyclerview.widget.RecyclerView",
      "com.bumptech.glide.Glide",
      "com.example.mb7.R",
      "java.io.File"
    ],
    "code": "package com.example.mb7.presentation.main\n\nimport android.net.Uri\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.CheckBox\nimport android.widget.ImageView\nimport android.widget.TextView\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.example.mb7.R\nimport java.io.File\n\nclass PhotoAdapter(private val photoList: ArrayList<File>) : RecyclerView.Adapter<PhotoAdapter.PhotoViewHolder>() {\n\n    class PhotoViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val photoImageView: ImageView = itemView.findViewById(R.id.photo_image_view)\n        val photoFilenameTextView: TextView = itemView.findViewById(R.id.photo_filename_text_view)\n        val photoCheckbox: CheckBox = itemView.findViewById(R.id.photo_checkbox)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PhotoViewHolder {\n        val itemView = LayoutInflater.from(parent.context).inflate(R.layout.item_photo, parent, false)\n        return PhotoViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: PhotoViewHolder, position: Int) {\n        val photoFile = photoList[position]\n        Glide.with(holder.itemView.context)\n                .load(photoFile)\n                .centerCrop()\n                .placeholder(R.drawable.ic_image)\n                .into(holder.photoImageView)\n        holder.photoFilenameTextView.text = photoFile.name\n        holder.photoCheckbox.isChecked = false\n    }\n\n    override fun getItemCount(): Int {\n        return photoList.size\n    }\n}",
    "filename": "f9faf8994bf158ab88844ef5d08f5987_6.kt"
  },
  {
    "conversation_hash": "f9faf8994bf158ab88844ef5d08f5987",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PhotoAdapter(private val photoList: ArrayList<File>) : RecyclerView.Adapter<PhotoAdapter.PhotoViewHolder>() {\n\n    class PhotoViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val photoImageView: ImageView = itemView.findViewById(R.id.photo_image_view)\n        val photoFilenameTextView: TextView = itemView.findViewById(R.id.photo_filename_text_view)\n        val photoCheckbox: CheckBox = itemView.findViewById(R.id.photo_checkbox)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PhotoViewHolder {\n        val itemView = LayoutInflater.from(parent.context).inflate(R.layout.item_photo, parent, false)\n        return PhotoViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: PhotoViewHolder, position: Int) {\n        val photoFile = photoList[position]\n        Glide.with(holder.itemView.context)\n            .load(Uri.fromFile(photoFile))\n            .centerCrop()\n            .placeholder(R.drawable.ic_image)\n            .into(holder.photoImageView)\n        holder.photoFilenameTextView.text = photoFile.name\n        holder.photoCheckbox.isChecked = false\n    }\n\n    override fun getItemCount(): Int {\n        return photoList.size\n    }\n}",
    "filename": "f9faf8994bf158ab88844ef5d08f5987_9.kt"
  },
  {
    "conversation_hash": "6fb0cbfa8f837dfb9653658d321d5044",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MillionaireLayout() {\n    Column(\n        modifier = Modifier.padding(16.dp),\n        verticalArrangement = Arrangement.spacedBy(16.dp)\n    ) {\n        Text(\n            text = \"Question Goes Here\",\n            fontWeight = FontWeight.Bold,\n            fontSize = 24.sp\n        )\n        Text(\n            text = \"Possible Answers\",\n            fontWeight = FontWeight.Bold,\n            fontSize = 18.sp\n        )\n        Button(\n            onClick = { /* Do something */ },\n            modifier = Modifier.fillMaxWidth()\n        ) {\n            Text(text = \"Answer Option 1\")\n        }\n        Button(\n            onClick = { /* Do something */ },\n            modifier = Modifier.fillMaxWidth()\n        ) {\n            Text(text = \"Answer Option 2\")\n        }\n        Button(\n            onClick = { /* Do something */ },\n            modifier = Modifier.fillMaxWidth()\n        ) {\n            Text(text = \"Answer Option 3\")\n        }\n        Button(\n            onClick = { /* Do something */ },\n            modifier = Modifier.fillMaxWidth()\n        ) {\n            Text(text = \"Answer Option 4\")\n        }\n    }\n}",
    "filename": "6fb0cbfa8f837dfb9653658d321d5044_0.kt"
  },
  {
    "conversation_hash": "6fb0cbfa8f837dfb9653658d321d5044",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MillionaireLayout()\n        }\n    }\n}",
    "filename": "6fb0cbfa8f837dfb9653658d321d5044_1.kt"
  },
  {
    "conversation_hash": "6fb0cbfa8f837dfb9653658d321d5044",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ButtonLayout() {\n    Column {\n        Row(\n            horizontalArrangement = Arrangement.spacedBy(16.dp),\n            verticalAlignment = Alignment.CenterVertically,\n            modifier = Modifier.fillMaxWidth()\n        ) {\n            Button(\n                onClick = { /* Do something */ },\n                modifier = Modifier.weight(1f)\n            ) {\n                Text(text = \"Button 1\")\n            }\n            Button(\n                onClick = { /* Do something */ },\n                modifier = Modifier.weight(1f)\n            ) {\n                Text(text = \"Button 2\")\n            }\n        }\n        Row(\n            horizontalArrangement = Arrangement.spacedBy(16.dp),\n            verticalAlignment = Alignment.CenterVertically,\n            modifier = Modifier.fillMaxWidth()\n        ) {\n            Button(\n                onClick = { /* Do something */ },\n                modifier = Modifier.weight(1f)\n            ) {\n                Text(text = \"Button 3\")\n            }\n            Button(\n                onClick = { /* Do something */ },\n                modifier = Modifier.weight(1f)\n            ) {\n                Text(text = \"Button 4\")\n            }\n        }\n    }\n}",
    "filename": "6fb0cbfa8f837dfb9653658d321d5044_2.kt"
  },
  {
    "conversation_hash": "6fb0cbfa8f837dfb9653658d321d5044",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            ButtonLayout()\n        }\n    }\n}",
    "filename": "6fb0cbfa8f837dfb9653658d321d5044_3.kt"
  },
  {
    "conversation_hash": "6fb0cbfa8f837dfb9653658d321d5044",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun Timer() {\n    var elapsedTime = remember { mutableStateOf(0L) }\n\n    LaunchedEffect(0L) {\n        while (true) {\n            delay(1000)\n            elapsedTime.value += 1\n        }\n    }\n\n    Text(\n        text = getTimeString(elapsedTime.value),\n        fontSize = 36.sp,\n        fontWeight = FontWeight.Bold,\n        modifier = Modifier.padding(16.dp)\n    )\n}\n\nfun getTimeString(timeInSeconds: Long): String {\n    val minutes = timeInSeconds / 60\n    val seconds = timeInSeconds % 60\n    return \"%02d:%02d\".format(minutes, seconds)\n}",
    "filename": "6fb0cbfa8f837dfb9653658d321d5044_4.kt"
  },
  {
    "conversation_hash": "6fb0cbfa8f837dfb9653658d321d5044",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            Timer()\n        }\n    }\n}",
    "filename": "6fb0cbfa8f837dfb9653658d321d5044_5.kt"
  },
  {
    "conversation_hash": "6fb0cbfa8f837dfb9653658d321d5044",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            ClickableButtons()\n        }\n    }\n}",
    "filename": "6fb0cbfa8f837dfb9653658d321d5044_7.kt"
  },
  {
    "conversation_hash": "6fb0cbfa8f837dfb9653658d321d5044",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun getRandomItem(data: Array<String>, input: String): Array<String> {\n    val randomIndex = (0 until data.size).random()\n    if (data[randomIndex] != input) {\n        data[randomIndex] = \" \"\n    }\n    return data\n}",
    "filename": "6fb0cbfa8f837dfb9653658d321d5044_8.kt"
  },
  {
    "conversation_hash": "372cc467975b076fbd6444644fcc7b7b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.graphics.Bitmap",
      "android.media.Image",
      "android.os.Bundle",
      "android.widget.ImageView",
      "android.widget.TextView",
      "androidx.appcompat.app.AppCompatActivity",
      "com.google.mlkit.common.model.LocalModel",
      "com.google.mlkit.vision.common.InputImage",
      "com.google.mlkit.vision.text.TextRecognition",
      "com.google.mlkit.vision.text.TextRecognizerOptions"
    ],
    "code": "import android.graphics.Bitmap\nimport android.media.Image\nimport android.os.Bundle\nimport android.widget.ImageView\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport com.google.mlkit.common.model.LocalModel\nimport com.google.mlkit.vision.common.InputImage\nimport com.google.mlkit.vision.text.TextRecognition\nimport com.google.mlkit.vision.text.TextRecognizerOptions\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val imageView = findViewById<ImageView>(R.id.imageView)\n        val textView = findViewById<TextView>(R.id.textView)\n\n        // Laden Sie ein Testbild\n        val testImage: Bitmap = ...\n        imageView.setImageBitmap(testImage)\n\n        // Erstellen Sie eine InputImage-Instanz aus dem geladenen Testbild\n        val image = InputImage.fromBitmap(testImage, 0)\n\n        // Erstellen Sie einen TextRecognizer mit MLKit\n        val textRecognizer = TextRecognition.getClient(TextRecognizerOptions.DEFAULT_OPTIONS)\n\n        // Erkennen Sie den Text in dem Bild\n        textRecognizer.process(image)\n            .addOnSuccessListener { visionText ->\n                textView.text = visionText.text\n            }\n            .addOnFailureListener { e ->\n                textView.text = \"Fehler beim Erkennen des Textes: $e\"\n            }\n    }\n}",
    "filename": "372cc467975b076fbd6444644fcc7b7b_1.kt"
  },
  {
    "conversation_hash": "affa4f0efde1634099e00bc20682eabb",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Erstelle ObjectDetector-Instanz\nval options = ObjectDetectorOptions.Builder()\n    .setDetectorMode(ObjectDetectorOptions.STREAM_MODE)\n    .enableClassification()\n    .build()\nval objectDetector = ObjectDetection.getClient(options)\n\n// Ein Bild aus der Kamera erhalten und erkennen\nobjectDetector.process(InputImage.fromMediaImage(imageProxy.image!!, imageProxy.imageInfo.rotationDegrees))\n    .addOnSuccessListener { objects ->\n        for (detectedObject in objects) {\n            // Verarbeite erkannte Objekte hier\n        }\n        imageProxy.close()\n    }",
    "filename": "affa4f0efde1634099e00bc20682eabb_3.kt"
  },
  {
    "conversation_hash": "affa4f0efde1634099e00bc20682eabb",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Starte die Spracherkennungs-Aktivität\nprivate fun startVoiceRecognition() {\n    val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n    intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)\n    intent.putExtra(RecognizerIntent.EXTRA_PROMPT, \"Sprich etwas\")\n\n    try {\n        startActivityForResult(intent, VOICE_RECOGNITION_REQUEST_CODE)\n    } catch (e: ActivityNotFoundException) {\n        Toast.makeText(this, \"Voice recognition not supported.\", Toast.LENGTH_SHORT).show()\n    }\n}\n\n// Verarbeite die Spracherkennungs-Ergebnisse\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (requestCode == VOICE_RECOGNITION_REQUEST_CODE && resultCode == Activity.RESULT_OK) {\n        val matches = data?.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)\n\n        if (matches != null && matches.isNotEmpty()) {\n            // Verarbeite die erkannten Text hier\n            val detectedText = matches[0]\n        }\n    }\n}",
    "filename": "affa4f0efde1634099e00bc20682eabb_4.kt"
  },
  {
    "conversation_hash": "affa4f0efde1634099e00bc20682eabb",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun getGPT3Response(prompt: String) {\n    val httpClient = OkHttpClient.Builder().build()\n    val request = Request.Builder()\n        .url(\"https://api.openai.com/v1/engines/davinci-codex/completions\")\n        .addHeader(\"Authorization\", \"Bearer YOUR_API_KEY\")\n        .post(\n            RequestBody.create(\n                \"application/json\",\n                \"\"\"\n                    {\n                        \"prompt\": \"$prompt\",\n                        \"n\": 1,\n                        \"max_tokens\": 50,\n                        \"temperature\": 0.7\n                    }\n                \"\"\".trimIndent()\n            )\n        )\n        .build()\n\n    httpClient.newCall(request).enqueue(object: Callback {\n        override fun onFailure(call: Call, e: IOException) {\n            runOnUiThread {\n                Log.e(\"GPT-3\", \"Failed to get response: $e\")\n            }\n        }\n\n        override fun onResponse(call: Call, response: Response) {\n            response.use {\n                if (!response.isSuccessful) {\n                    Log.e(\"GPT-3\", \"Unexpected response: $response\")\n                    return\n                }\n\n                val jsonResponse = response.body!!.string()\n                val parsedResponse = JSONObject(jsonResponse)\n                val generatedMessage = parsedResponse.getJSONArray(\"choices\").getJSONObject(0).getString(\"text\")\n\n                runOnUiThread {\n                    // Aktualisiere die Benutzeroberfläche (UI) mit der Antwort des Chatbots\n                }\n            }\n        }\n    })\n}",
    "filename": "affa4f0efde1634099e00bc20682eabb_7.kt"
  },
  {
    "conversation_hash": "affa4f0efde1634099e00bc20682eabb",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun detectObjects(photo: Bitmap) {\n    val objectDetector = ObjectDetection.getClient(\n        ObjectDetectorOptions.Builder()\n            .setDetectorMode(ObjectDetectorOptions.SINGLE_IMAGE_MODE)\n            .enableClassification()\n            .build()\n    )\n\n    objectDetector.process(InputImage.fromBitmap(photo, 0))\n        .addOnSuccessListener { objects ->\n            for (detectedObject in objects) {\n                // Verarbeite erkannte Objekte hier\n            }\n        }\n        .addOnFailureListener { exception ->\n            Log.e(\"ObjectDetection\", \"Failed to process image: $exception\")\n        }\n}",
    "filename": "affa4f0efde1634099e00bc20682eabb_8.kt"
  },
  {
    "conversation_hash": "affa4f0efde1634099e00bc20682eabb",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "private val VOICE_RECOGNITION_REQUEST_CODE = 1\n\nprivate fun startVoiceRecognition() {\n    val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)\n    intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)\n    intent.putExtra(RecognizerIntent.EXTRA_PROMPT, \"Sprich etwas\")\n    startActivityForResult(intent, VOICE_RECOGNITION_REQUEST_CODE)\n}\n\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n\n    if (requestCode == VOICE_RECOGNITION_REQUEST_CODE && resultCode == RESULT_OK) {\n        val matches = data?.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)\n        if (matches != null && matches.isNotEmpty()) {\n            // Verarbeite die erkannte Sprache hier\n            val detectedText = matches[0]\n        }\n    }\n}",
    "filename": "affa4f0efde1634099e00bc20682eabb_9.kt"
  },
  {
    "conversation_hash": "52d4f39a673192831ef149251e5ea24c",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.Retrofit",
      "retrofit2.converter.gson.GsonConverterFactory",
      "retrofit2.http."
    ],
    "code": "import retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.*\n\ninterface ChatGPTApiService {\n   @POST(\"your_chat_gpt_endpoint\")\n   suspend fun sendMessage(\n       @Header(\"Authorization\") token: String,\n       @Body message: ChatGptRequest\n   ): ChatGptResponse\n}\n\n// ChatGptRequest and ChatGptResponse are data classes representing the structure of JSON input and output",
    "filename": "52d4f39a673192831ef149251e5ea24c_2.kt"
  },
  {
    "conversation_hash": "52d4f39a673192831ef149251e5ea24c",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "android.speech.RecognizerIntent",
      "android.speech.SpeechRecognizer"
    ],
    "code": "import android.speech.SpeechRecognizer\nimport android.speech.RecognizerIntent\n\nprivate fun setupSpeechRecognizer() {\n    val speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this)\n    val speechIntent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {\n        putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)\n        putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())\n    }\n    speechRecognizer.startListening(speechIntent)\n}",
    "filename": "52d4f39a673192831ef149251e5ea24c_3.kt"
  },
  {
    "conversation_hash": "28bfe82904c2183117729e898117d342",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.Response",
      "retrofit2.http."
    ],
    "code": "import retrofit2.Response\nimport retrofit2.http.*\n\ninterface ChatGPTService {\n    @FormUrlEncoded\n    @POST(\"https://openai.com/api/v1/engines/davinci-codex/completions\")\n    suspend fun sendMessageToChatGPT(\n        @Header(\"Authorization\") apiKey: String,\n        @Field(\"prompt\") prompt: String,\n    ): Response<ChatGPTResponse>\n}\n\ndata class ChatGPTResponse(val choices: List<Choice>)\ndata class Choice(val text: String)",
    "filename": "28bfe82904c2183117729e898117d342_1.kt"
  },
  {
    "conversation_hash": "28bfe82904c2183117729e898117d342",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.Retrofit",
      "retrofit2.converter.gson.GsonConverterFactory"
    ],
    "code": "import retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nclass ChatGPTRepository {\n    private val chatGPTService: ChatGPTService\n\n    init {\n        val retrofit = Retrofit.Builder()\n            .baseUrl(\"https://openai.com/api/\")\n            .addConverterFactory(GsonConverterFactory.create())\n            .build()\n\n        chatGPTService = retrofit.create(ChatGPTService::class.java)\n    }\n\n    suspend fun sendMessage(prompt: String): String? {\n        val response = chatGPTService.sendMessageToChatGPT(\n            apiKey = \"Bearer INSERT_YOUR_API_KEY_HERE\",\n            prompt = prompt,\n        )\n\n        if (response.isSuccessful) {\n            return response.body()?.choices?.firstOrNull()?.text\n        }\n\n        return null\n    }\n}",
    "filename": "28bfe82904c2183117729e898117d342_2.kt"
  },
  {
    "conversation_hash": "28bfe82904c2183117729e898117d342",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "android.Manifest",
      "android.content.pm.PackageManager",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.camera.core.ImageAnalysis"
    ],
    "code": "import android.Manifest\nimport android.content.pm.PackageManager\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.camera.core.ImageAnalysis\n// ... (weitere benötigte Importe)\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var chatGPTRepository: ChatGPTRepository\n    // ... (andere Variablendeklarationen)\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // ...\n\n        // Berechtigungen prüfen und beantragen\n        val permissionStatus = checkSelfPermission(Manifest.permission.CAMERA)\n        if (permissionStatus != PackageManager.PERMISSION_GRANTED) {\n            requestPermissions(arrayOf(Manifest.permission.CAMERA), 100)\n        }\n\n        chatGPTRepository = ChatGPTRepository()\n\n        sendButton.setOnClickListener {\n            launch {\n                val prompt = inputText.text.toString()\n                // Sende Nachricht an ChatGPT und erhalte Antwort\n                val reply = chatGPTRepository.sendMessage(prompt)\n                if (reply != null) {\n                    // Zeige Antwort in der Benutzeroberfläche an\n                }\n            }\n        }\n\n        // Verwende ImageAnalysis und ML Kit, um Bilder auf Objekte zu prüfen\n        // und deren Informationen anzuzeigen; folge den Anweisungen in der ML Kit-Dokumentation\n\n        // Erstelle und konfiguriere die GoogleApiClient-Klasse, um Google Home Assistant zu verwenden\n        // und folge den Anweisungen in der Assistant SDK-Dokumentation\n    }\n}",
    "filename": "28bfe82904c2183117729e898117d342_3.kt"
  },
  {
    "conversation_hash": "5049d738135956f4b7336f7f504ba3c1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.Manifest",
      "android.content.pm.PackageManager",
      "android.os.Build",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.core.app.ActivityCompat",
      "androidx.core.content.ContextCompat"
    ],
    "code": "import android.Manifest\nimport android.content.pm.PackageManager\nimport android.os.Build\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\n\nclass MainActivity : AppCompatActivity() {\n\n    private val PERMISSION_REQUEST_CODE = 100\n\n    private fun checkAndRequestPermissions() {\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_CALL_LOG) != PackageManager.PERMISSION_GRANTED) {\n            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.READ_CALL_LOG), PERMISSION_REQUEST_CODE)\n        } else {\n            getCallDetails()\n        }\n    }\n}",
    "filename": "5049d738135956f4b7336f7f504ba3c1_1.kt"
  },
  {
    "conversation_hash": "5049d738135956f4b7336f7f504ba3c1",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\n    when (requestCode) {\n        PERMISSION_REQUEST_CODE -> {\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                getCallDetails()\n            } else {\n                // Handle the case when the permission is not granted\n            }\n            return\n        }\n    }\n}",
    "filename": "5049d738135956f4b7336f7f504ba3c1_2.kt"
  },
  {
    "conversation_hash": "5049d738135956f4b7336f7f504ba3c1",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "android.database.Cursor",
      "android.provider.CallLog",
      "android.util.Log"
    ],
    "code": "import android.database.Cursor\nimport android.provider.CallLog\nimport android.util.Log\n\nprivate fun getCallDetails() {\n    val projection = arrayOf(\n        CallLog.Calls._ID,\n        CallLog.Calls.NUMBER,\n        CallLog.Calls.DATE,\n        CallLog.Calls.DURATION,\n        CallLog.Calls.TYPE\n    )\n\n    val cursor: Cursor? = contentResolver.query(CallLog.Calls.CONTENT_URI, projection, null, null, \"${CallLog.Calls.DEFAULT_SORT_ORDER} LIMIT 50\")\n\n    if (cursor != null && cursor.moveToFirst()) {\n        do {\n            val number = cursor.getString(cursor.getColumnIndex(CallLog.Calls.NUMBER))\n            val date = cursor.getLong(cursor.getColumnIndex(CallLog.Calls.DATE))\n            val duration = cursor.getLong(cursor.getColumnIndex(CallLog.Calls.DURATION))\n            val type = cursor.getInt(cursor.getColumnIndex(CallLog.Calls.TYPE))\n\n            val callType = when (type) {\n                CallLog.Calls.OUTGOING_TYPE -> \"Outgoing\"\n                CallLog.Calls.INCOMING_TYPE -> \"Incoming\"\n                CallLog.Calls.MISSED_TYPE -> \"Missed\"\n                else -> \"Unknown\"\n            }\n\n            Log.i(\"CallLog\", \"Number: $number, Date: $date, Duration: $duration, Type: $callType\")\n\n        } while (cursor.moveToNext())\n\n        cursor.close()\n    }\n}",
    "filename": "5049d738135956f4b7336f7f504ba3c1_3.kt"
  },
  {
    "conversation_hash": "5049d738135956f4b7336f7f504ba3c1",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    checkAndRequestPermissions()\n}",
    "filename": "5049d738135956f4b7336f7f504ba3c1_4.kt"
  },
  {
    "conversation_hash": "96479fee9280df7f8249be2ce976c803",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private lateinit var player: SimpleExoPlayer\n    private lateinit var playButton: Button\n    private lateinit var lyricsTextView: TextView\n    private lateinit var startRecordingButton: Button\n    private lateinit var stopRecordingButton: Button\n    private var mediaRecorder: MediaRecorder? = null\n    private lateinit var outputFilePath: String\n    private val lyricsHandler = Handler(Looper.getMainLooper())\n    private lateinit var lyricsRunnable: Runnable\n    private var mediaPlayer: MediaPlayer? = null\n    private lateinit var playRecordingButton: Button\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        playButton = findViewById(R.id.playButton)\n        lyricsTextView = findViewById(R.id.lyricsTextView)\n        startRecordingButton = findViewById(R.id.startRecordingButton)\n        stopRecordingButton = findViewById(R.id.stopRecordingButton)\n\n        playButton.setOnClickListener {\n            initializePlayer()\n            displayLyrics()\n        }\n\n        startRecordingButton.setOnClickListener {\n            requestAudioPermissionAndStartRecording()\n        }\n\n        stopRecordingButton.setOnClickListener {\n            stopRecording()\n        }\n\n        playRecordingButton = findViewById(R.id.playRecordingButton)\n\n        playRecordingButton.setOnClickListener {\n            playRecording()\n        }\n\n        val soundEffectsButton1 = findViewById<Button>(R.id.soundEffectButton1)\n        val soundEffectsButton2 = findViewById<Button>(R.id.soundEffectButton2)\n\n        soundEffectsButton1.setOnClickListener {\n            applySoundEffect1()\n        }\n\n        soundEffectsButton2.setOnClickListener {\n            applySoundEffect2()\n        }\n    }\n\n\n    private fun initializePlayer() {\n        player = SimpleExoPlayer.Builder(this).build()\n\n        val dataSourceFactory = DefaultDataSourceFactory(\n            this,\n            Util.getUserAgent(this, \"KaraokeApp\")\n        )\n\n        val mediaSource = ProgressiveMediaSource.Factory(dataSourceFactory)\n            .createMediaSource(Uri.parse(\"https://directsendwhats.xyz/background_music.mp3\"))\n\n        player.setMediaSource(mediaSource)\n        player.prepare()\n        player.playWhenReady = true\n    }\n\n    private fun displayLyrics() {\n        scheduleLyricsUpdate()\n    }\n\n    private fun scheduleLyricsUpdate() {\n        lyricsRunnable = Runnable {\n            updateLyrics()\n            lyricsHandler.postDelayed(lyricsRunnable, 1000) // جدولة التحديث كل ثانية\n        }\n        lyricsHandler.post(lyricsRunnable)\n    }\n\n    private fun updateLyrics() {\n        val currentPosition = player.currentPosition\n        // استخدم currentPosition لتحديد الجزء المناسب من كلمات الأغنية\n        // وقم بتحديث lyricsTextView بناءً على ذلك\n    }\n\n\n    private fun requestAudioPermissionAndStartRecording() {\n        if (ContextCompat.checkSelfPermission(\n                this,\n                android.Manifest.permission.RECORD_AUDIO\n            ) != PackageManager.PERMISSION_GRANTED\n        ) {\n            ActivityCompat.requestPermissions(\n                this,\n                arrayOf(android.Manifest.permission.RECORD_AUDIO),\n                RECORD_AUDIO_REQUEST_CODE\n            )\n        } else {\n            startRecording()\n        }\n    }\n\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        if (requestCode == RECORD_AUDIO_REQUEST_CODE) {\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                startRecording()\n            } else {\n                // الإذن مرفوض، يمكنك إظهار رسالة توضيحية هنا\n            }\n        }\n    }\n\n    private fun startRecording() {\n        outputFilePath =\n            \"${getExternalFilesDir(Environment.DIRECTORY_MUSIC)?.absolutePath}/recording.3gp\"\n\n        mediaRecorder = MediaRecorder().apply {\n            setAudioSource(MediaRecorder.AudioSource.MIC)\n            setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP)\n            setOutputFile(outputFilePath)\n            setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)\n\n            try {\n                prepare()\n            } catch (e: IOException) {\n                e.printStackTrace()\n            }\n            start()\n        }\n    }\n\n    private fun stopRecording() {\n        mediaRecorder?.apply {\n            stop()\n            release()\n        }\n        mediaRecorder = null\n    }\n\n    override fun onStop() {\n        super.onStop()\n        lyricsHandler.removeCallbacks(lyricsRunnable)\n        releasePlayer()\n        mediaRecorder?.apply {\n            stop()\n            release()\n        }\n        mediaRecorder = null\n\n        mediaPlayer?.apply {\n            stop()\n            release()\n        }\n        mediaPlayer = null\n    }\n\n\n    private fun releasePlayer() {\n        if (::player.isInitialized) {\n            player.release()\n        }\n    }\n\n    companion object {\n        private const val RECORD_AUDIO_REQUEST_CODE = 200\n    }\n\n    // تطبيق التأثيرات الصوتية\n\n    private fun applySoundEffect1() {\n        if (outputFilePath.isNotEmpty()) {\n            mediaPlayer = MediaPlayer().apply {\n                try {\n                    setDataSource(outputFilePath)\n\n                    val effect = PresetReverb(1, 0).apply {\n                        preset = PresetReverb.PRESET_LARGEROOM\n                    }\n\n                    attachEffect(effect)\n                    prepare()\n                    start()\n                } catch (e: IOException) {\n                    e.printStackTrace()\n                }\n            }\n        }\n    }\n\n    private fun applySoundEffect2() {\n        if (outputFilePath.isNotEmpty()) {\n            mediaPlayer = MediaPlayer().apply {\n                try {\n                    setDataSource(outputFilePath)\n\n                    val effect = BassBoost(1, 0).apply {\n                        setStrength(500)\n                    }\n\n                    attachEffect(effect)\n                    prepare()\n                    start()\n                } catch (e: IOException) {\n                    e.printStackTrace()\n                }\n            }\n        }\n    }\n\n    // تشغيل التسجيل\n\n    private fun playRecording() {\n        if (outputFilePath.isNotEmpty()) {\n            mediaPlayer = MediaPlayer().apply {\n                try {\n                    setDataSource(outputFilePath)\n                    prepare()\n                    start()\n                } catch (e: IOException) {\n                    e.printStackTrace()\n                }\n            }\n        }\n    }\n}",
    "filename": "96479fee9280df7f8249be2ce976c803_0.kt"
  },
  {
    "conversation_hash": "931fd958761528fdc746e04da14583d0",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "android.media.audiofx.EnvironmentalReverb",
      "android.os.Build",
      "androidx.annotation.RequiresApi",
      "com.google.android.exoplayer2.audio.AudioProcessor",
      "com.google.android.exoplayer2.audio.DefaultAudioSink"
    ],
    "code": "import android.content.Context\nimport android.media.audiofx.EnvironmentalReverb\nimport android.os.Build\nimport androidx.annotation.RequiresApi\nimport com.google.android.exoplayer2.audio.AudioProcessor\nimport com.google.android.exoplayer2.audio.DefaultAudioSink\n\n// ...\n\n// إضافة الكود إلى التعريفات الموجودة وقت الكتابة\nclass MainActivity : AppCompatActivity() {\n\n    // ...\n    private lateinit var applyEffectButton: Button\n    private var audioProcessor: AudioProcessor? = null\n\n    // ...\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // ...\n\n        applyEffectButton = findViewById(R.id.applyEffectButton)\n        applyEffectButton.setOnClickListener {\n            applyEchoEffect()\n        }\n    }\n\n    // ...\n\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\n    private fun applyEchoEffect() {\n        if (outputFilePath.isNotEmpty()) {\n            mediaPlayer?.release()\n            mediaPlayer = MediaPlayer().apply {\n                try {\n                    val audioAttributes = AudioAttributes.Builder()\n                        .setUsage(AudioAttributes.USAGE_MEDIA)\n                        .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\n                        .build()\n\n                    setAudioAttributes(audioAttributes)\n\n                    setDataSource(this@MainActivity, Uri.parse(outputFilePath))\n\n                    val audioSessionId = audioSessionId\n                    setEnvironmentalReverb(this@MainActivity, audioSessionId)\n\n                    prepare()\n                    start()\n                } catch (e: IOException) {\n                    e.printStackTrace()\n                }\n            }\n        }\n    }\n\n    // ...\n\n    private fun getExoPlayer(Context: Context): SimpleExoPlayer {\n        val audioProcessorChain = arrayListOf<AudioProcessor>()\n        audioProcessor?.let { audioProcessorChain.add(it) }\n        \n\tval audioSink = DefaultAudioSink(AudioCapabilities.getCapabilities(Context), audioProcessorChain)\n        return SimpleExoPlayer.Builder(Context)\n            .setAudioSink(audioSink)\n            .build()\n    }\n\n    // ...\n\n    private fun setEnvironmentalReverb(context: Context, audioSessionId: Int) {\n        val reverbSettings = EnvironmentalReverb.Settings()\n        reverbSettings.decayHFRatio = 1000\n        reverbSettings.decayTime = 2000\n        reverbSettings.reflectionsLevel = -1000\n        reverbSettings.reflectionsDelay = 20\n        reverbSettings.reverbLevel = -260\n        reverbSettings.reverbDelay = 30\n        reverbSettings.diffusion = 1000\n        reverbSettings.density = 1000\n\n        val reverb = EnvironmentalReverb(0, audioSessionId)\n        reverb.settings = reverbSettings\n        reverb.enabled = true\n    }\n\n}",
    "filename": "931fd958761528fdc746e04da14583d0_1.kt"
  },
  {
    "conversation_hash": "2f45cabe0fa658c854971402e851c84f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private lateinit var player: SimpleExoPlayer\n    private lateinit var playButton: Button\n    private lateinit var lyricsTextView: TextView\n    private lateinit var startRecordingButton: Button\n    private lateinit var stopRecordingButton: Button\n    private var mediaRecorder: MediaRecorder? = null\n    private lateinit var outputFilePath: String\n    private val lyricsHandler = Handler(Looper.getMainLooper())\n    private lateinit var lyricsRunnable: Runnable\n    private var mediaPlayer: MediaPlayer? = null\n    private lateinit var playRecordingButton: Button\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        playButton = findViewById(R.id.playButton)\n        lyricsTextView = findViewById(R.id.lyricsTextView)\n        startRecordingButton = findViewById(R.id.startRecordingButton)\n        stopRecordingButton = findViewById(R.id.stopRecordingButton)\n\n        playButton.setOnClickListener {\n            initializePlayer()\n            displayLyrics()\n        }\n\n        startRecordingButton.setOnClickListener {\n            requestAudioPermissionAndStartRecording()\n        }\n\n        stopRecordingButton.setOnClickListener {\n            stopRecording()\n        }\n\n        playRecordingButton = findViewById(R.id.playRecordingButton)\n        playRecordingButton.setOnClickListener {\n            playRecording()\n        }\n\n        val soundEffectsButton1 = findViewById<Button>(R.id.soundEffectButton1)\n        val soundEffectsButton2 = findViewById<Button>(R.id.soundEffectButton2)\n        soundEffectsButton1.setOnClickListener {\n            applySoundEffect1()\n        }\n\n        soundEffectsButton2.setOnClickListener {\n            applySoundEffect2()\n        }\n    }\n\n    private fun initializePlayer() {\n        player = SimpleExoPlayer.Builder(this).build()\n\n        val dataSourceFactory = DefaultDataSourceFactory(\n            this,\n            Util.getUserAgent(this, \"KaraokeApp\")\n        )\n\n        val mediaSource = ProgressiveMediaSource.Factory(dataSourceFactory)\n            .createMediaSource(Uri.parse(\"https://directsendwhats.xyz/background_music.mp3\"))\n\n        player.setMediaSource(mediaSource)\n        player.prepare()\n        player.playWhenReady = true\n    }\n\n    private fun displayLyrics() {\n        scheduleLyricsUpdate()\n    }\n\n    private fun scheduleLyricsUpdate() {\n        lyricsRunnable = Runnable {\n            updateLyrics()\n            lyricsHandler.postDelayed(lyricsRunnable, 1000) // جدولة التحديث كل ثانية\n        }\n        lyricsHandler.post(lyricsRunnable)\n    }\n\n    private fun updateLyrics() {\n        val currentPosition = player.currentPosition\n        // استخدم currentPosition لتحديد الجزء المناسب من كلمات الأغنية\n        // وقم بتحديث lyricsTextView بناءً على ذلك\n    }\n\n    private fun requestAudioPermissionAndStartRecording() {\n        if (ContextCompat.checkSelfPermission(\n                this,\n                android.Manifest.permission.RECORD_AUDIO\n            ) != PackageManager.PERMISSION_GRANTED\n        ) {\n            ActivityCompat.requestPermissions(\n                this,\n                arrayOf(android.Manifest.permission.RECORD_AUDIO),\n                RECORD_AUDIO_REQUEST_CODE\n            )\n        } else {\n            startRecording()\n        }\n    }\n\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<out String>,\n        grantResults: IntArray\n    ) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        if (requestCode == RECORD_AUDIO_REQUEST_CODE) {\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                startRecording()\n            } else {\n                // الإذن مرفوض، يمكنك إظهار رسالة توضيحية هنا\n            }\n        }\n    }\n\n    private fun startRecording() {\n        outputFilePath =\n            \"${getExternalFilesDir(Environment.DIRECTORY_MUSIC)?.absolutePath}/recording.3gp\"\n\n        mediaRecorder = MediaRecorder().apply {\n            setAudioSource(MediaRecorder.AudioSource.MIC)\n            setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP)\n            setOutputFile(outputFilePath)\n            setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)\n\n            try {\n                prepare()\n            } catch (e: IOException) {\n                e.printStackTrace()\n            }\n            start()\n        }\n    }\n\n    private fun stopRecording() {\n        mediaRecorder?.apply {\n            stop()\n            release()\n        }\n        mediaRecorder = null\n    }\n\n    override fun onStop() {\n        super.onStop()\n        lyricsHandler.removeCallbacks(lyricsRunnable)\n        releasePlayer()\n        mediaRecorder?.apply {\n            stop()\n            release()\n        }\n        mediaRecorder = null\n\n        mediaPlayer?.apply {\n            stop()\n            release()\n        }\n        mediaPlayer = null\n    }\n\n    private fun releasePlayer() {\n        if (::player.isInitialized) {\n            player.release()\n        }\n    }\n\n    companion object {\n        private const val RECORD_AUDIO_REQUEST_CODE = 200\n    }\n\n    private fun applySoundEffect1() {\n        if (outputFilePath.isNotEmpty()) {\n            mediaPlayer = MediaPlayer().apply {\n                try {\n                    setDataSource(outputFilePath)\n\n                    val effect = PresetReverb(1, 0).apply {\n                        preset = PresetReverb.PRESET_LARGEROOM\n                    }\n\n                    setAuxEffectSendLevel(1f)\n                    attachAuxEffect(effect.id)\n                    prepare()\n                    start()\n\n                    setOnCompletionListener {\n                        setAuxEffectSendLevel(0f)\n                        attachAuxEffect(0)\n                        effect.release()\n                    }\n                } catch (e: IOException) {\n                    e.printStackTrace()\n                }\n            }\n        }\n    }\n\n    private fun applySoundEffect2() {\n        if (outputFilePath.isNotEmpty()) {\n            mediaPlayer = MediaPlayer().apply {\n                try {\n                    setDataSource(outputFilePath)\n\n                    val effect = BassBoost(1, 0).apply {\n                        setStrength(500)\n                    }\n\n                    setAuxEffectSendLevel(1f)\n                    attachAuxEffect(effect.id)\n                    prepare()\n                    start()\n\n                    setOnCompletionListener {\n                        setAuxEffectSendLevel(0f)\n                        attachAuxEffect(0)\n                        effect.release()\n                    }\n                } catch (e: IOException) {\n                    e.printStackTrace()\n                }\n            }\n        }\n    }\n\n    private fun playRecording() {\n        if (outputFilePath.isNotEmpty()) {\n            mediaPlayer = MediaPlayer().apply {\n                try {\n                    setDataSource(outputFilePath)\n                    prepare()\n                    start()\n                } catch (e: IOException) {\n                    e.printStackTrace()\n                }\n            }\n        }\n    }\n}",
    "filename": "2f45cabe0fa658c854971402e851c84f_0.kt"
  },
  {
    "conversation_hash": "57af556b54529c3b90a91e472137baee",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// يقوم بفحص توفر المؤثر الصوتي من خلال UUID المعطى\nprivate fun checkIfAudioEffectIsAvailable(effectUUID: UUID): Boolean {\n    val effects = AudioEffect.queryEffects()\n\n    return effects.any { it.uuid == effectUUID }\n}",
    "filename": "57af556b54529c3b90a91e472137baee_0.kt"
  },
  {
    "conversation_hash": "57af556b54529c3b90a91e472137baee",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun applySoundEffect1() {\n    if (outputFilePath.isNotEmpty()) {\n        mediaPlayer = MediaPlayer().apply {\n            try {\n                setDataSource(outputFilePath)\n\n                // تأكد من توافر PresetReverb قبل استخدامه\n                if (checkIfAudioEffectIsAvailable(PresetReverb.EFFECT_TYPE)) {\n                    val effect = PresetReverb(0, audioSessionId).apply {\n                        preset = PresetReverb.PRESET_LARGEROOM\n                    }\n\n                    setAuxEffectSendLevel(1f)\n                    attachAuxEffect(effect.id)\n                    prepare()\n                    start()\n\n                    setOnCompletionListener {\n                        setAuxEffectSendLevel(0f)\n                        attachAuxEffect(0)\n                        effect.release()\n                    }\n                } else {\n                    // المؤثر الصوتي PresetReverb غير متوفر على هذا الجهاز\n                }\n            } catch (e: IOException) {\n                e.printStackTrace()\n            }\n        }\n    }\n}\n\nprivate fun applySoundEffect2() {\n    if (outputFilePath.isNotEmpty()) {\n        mediaPlayer = MediaPlayer().apply {\n            try {\n                setDataSource(outputFilePath)\n\n                // تأكد من توافر BassBoost قبل استخدامه\n                if (checkIfAudioEffectIsAvailable(BassBoost.EFFECT_TYPE)) {\n                    val effect = BassBoost(0, audioSessionId).apply {\n                        setStrength(500)\n                    }\n\n                    setAuxEffectSendLevel(1f)\n                    attachAuxEffect(effect.id)\n                    prepare()\n                    start()\n\n                    setOnCompletionListener {\n                        setAuxEffectSendLevel(0f)\n                        attachAuxEffect(0)\n                        effect.release()\n                    }\n                } else {\n                    // المؤثر الصوتي BassBoost غير متوفر على هذا الجهاز\n                }\n            } catch (e: IOException) {\n                e.printStackTrace()\n            }\n        }\n    }\n}",
    "filename": "57af556b54529c3b90a91e472137baee_1.kt"
  },
  {
    "conversation_hash": "44bb01a34d7e37100fec5539178f4c64",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.media.audiofx.DynamicsProcessing"
    ],
    "code": "// في الأعلى\nimport android.media.audiofx.DynamicsProcessing\n\n// في onStart() أو أي زر تشغيل الأغنية المراد التأثير عليها\nval distortion = DynamicsProcessing.Engine.create(\n   1,\n   1,\n   DynamicsProcessing.ENGINE_DUCKING_DISABLED\n)\n\n// تحديد مستوى الصوت المتحول وفلترة المدخلات للمؤثر الصوتي واستخدامه على الملف الصوتي\nval level = DynamicsProcessing.Settings.Channel.Level(0, 0f)\nval filter = DynamicsProcessing.Settings.Channel.Filter(\n   0,\n   true,\n   DynamicsProcessing.Settings.Channel.Filter.Type.LOW_PASS,\n   500,\n   2f\n)\n\nfilter.enabled = true\nval settings = DynamicsProcessing.Settings(setOf(level), setOf(filter))\nval session = mediaPlayer!!.audioSessionId\nval processor = distortion.createProcessor(settings)\n\nprocessor!!.configure()\nmediaPlayer?.attachAuxEffect(processor.processorId)\nmediaPlayer?.setAuxEffectSendLevel(1.0f)\nmediaPlayer?.start()\n\n// عند الانتهاء من التشغيل يجب تحرير التأثير\nmediaPlayer!!.setOnCompletionListener {\n   mediaPlayer!!.setAuxEffectSendLevel(0f)\n   mediaPlayer!!.attachAuxEffect(0)\n   processor!!.release()\n}",
    "filename": "44bb01a34d7e37100fec5539178f4c64_2.kt"
  },
  {
    "conversation_hash": "faa8c5b0612ca7cbe767ac58a2b0dd78",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun applyTarsosDSPEffect() {\n    if (outputFilePath.isNotEmpty()) {\n        mediaPlayer = MediaPlayer().apply {\n            try {\n                setDataSource(outputFilePath)\n\n                val bufferSize = 1024\n                val stepSize = 256\n                val sampleRate = 44100\n\n                val androidAudioPlayer = AndroidAudioPlayer(sampleRate, bufferSize, stepSize)\n                val dispatcher = AudioDispatcherFactory.fromPipe(outputFilePath, sampleRate, bufferSize, stepSize)\n                dispatcher.addAudioProcessor(androidAudioPlayer)\n\n                // إضافة معالج صوتي مخصص هنا\n                dispatcher.addAudioProcessor(object : AudioProcessor {\n                    override fun process(audioEvent: AudioEvent): Boolean {\n                        // aplly your custom dsp in here\n                        return true\n                    }\n\n                    override fun processingFinished() {}\n                })\n                    \n                Thread(dispatcher).start()\n                    \n            } catch (e: IOException) {\n                e.printStackTrace()\n            }\n        }\n    }\n}",
    "filename": "faa8c5b0612ca7cbe767ac58a2b0dd78_1.kt"
  },
  {
    "conversation_hash": "270f8dce818c36cb1dfae0165dd54ddd",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "android.Manifest",
      "android.content.pm.PackageManager",
      "android.media.MediaPlayer",
      "android.media.MediaRecorder",
      "android.os.Build",
      "android.os.Bundle",
      "android.os.Environment",
      "android.view.View",
      "android.widget.Button",
      "android.widget.Toast",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.core.app.ActivityCompat",
      "java.io.IOException"
    ],
    "code": "import android.Manifest\nimport android.content.pm.PackageManager\nimport android.media.MediaPlayer\nimport android.media.MediaRecorder\nimport android.os.Build\nimport android.os.Environment\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.core.app.ActivityCompat\nimport java.io.IOException\n\nclass MainActivity : AppCompatActivity() {\n\n    private var mediaRecorder: MediaRecorder? = null\n    private var mediaPlayer: MediaPlayer? = null\n    private val recordFile = \"KaraokeRecording.3gp\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val playMusicButton = findViewById<Button>(R.id.play_music_button)\n        val startRecordingButton = findViewById<Button>(R.id.start_recording_button)\n        val stopRecordingButton = findViewById<Button>(R.id.stop_recording_button)\n\n        playMusicButton.setOnClickListener {\n            startPlaying()\n        }\n\n        startRecordingButton.setOnClickListener {\n            startRecording()\n        }\n\n        stopRecordingButton.setOnClickListener {\n            stopRecording()\n        }\n\n        requestPermissions()\n    }\n\n    private fun startPlaying() {\n        mediaPlayer = MediaPlayer().apply {\n            try {\n                setDataSource(\"<path_to_your_music_file>\")\n                prepare()\n                start()\n            } catch (e: IOException) {\n                println(\"Error: ${e.localizedMessage}\")\n            }\n        }\n    }\n\n    private fun startRecording() {\n        mediaRecorder = MediaRecorder().apply {\n            setAudioSource(MediaRecorder.AudioSource.MIC)\n            setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP)\n            setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)\n            setOutputFile(\"${Environment.getExternalStorageDirectory().absolutePath}/$recordFile\")\n            try {\n                prepare()\n                start()\n            } catch (e: IOException) {\n                println(\"Error: ${e.localizedMessage}\")\n            }\n        }\n    }\n\n    private fun stopRecording() {\n        mediaRecorder?.apply {\n            stop()\n            release()\n        }\n        mediaRecorder = null\n    }\n\n    private fun requestPermissions() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            ActivityCompat.requestPermissions(\n                this,\n                arrayOf(Manifest.permission.RECORD_AUDIO, Manifest.permission.WRITE_EXTERNAL_STORAGE),\n                123\n            )\n        }\n    }\n\n    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {\n        when (requestCode) {\n            123 -> {\n                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED) {\n                    Toast.makeText(this, \"Permissions granted\", Toast.LENGTH_SHORT).show()\n                } else {\n                    Toast.makeText(this, \"Permissions not granted\", Toast.LENGTH_SHORT).show()\n                }\n                return\n            }\n        }\n    }\n}",
    "filename": "270f8dce818c36cb1dfae0165dd54ddd_3.kt"
  },
  {
    "conversation_hash": "0ed6998e5f84bcea8c3ff7244f7ec522",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.app.Application",
      "it.polito.mas.courtreservation.AppDatabase"
    ],
    "code": "import android.app.Application\nimport it.polito.mas.courtreservation.AppDatabase\n\nclass CourtReservationApp : Application() {\n    private val database: AppDatabase by lazy {\n        AppDatabase.getDatabase(this)\n    }\n\n    val reservationDao by lazy { database.reservationDao() }\n    val userDao by lazy { database.userDao() }\n    val sportPlaygroundDao by lazy { database.sportPlaygroundDao() }\n\n    companion object {\n        private var INSTANCE: CourtReservationApp? = null\n\n        fun getAppRepository(context: Context): CourtReservationApp {\n            return INSTANCE ?: synchronized(this) {\n                val instance = context.applicationContext as CourtReservationApp\n                INSTANCE = instance\n                instance\n            }\n        }\n    }\n}",
    "filename": "0ed6998e5f84bcea8c3ff7244f7ec522_0.kt"
  },
  {
    "conversation_hash": "0ed6998e5f84bcea8c3ff7244f7ec522",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.view.View",
      "android.widget.AdapterView",
      "android.widget.ArrayAdapter",
      "android.widget.Spinner",
      "android.widget.Toast",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.lifecycle.ViewModelProvider",
      "com.stacktips.view.CalendarListener",
      "com.stacktips.view.CustomCalendarView",
      "java.text.SimpleDateFormat",
      "java.util.Calendar",
      "java.util.Date"
    ],
    "code": "import android.os.Bundle\nimport android.view.View\nimport android.widget.AdapterView\nimport android.widget.ArrayAdapter\nimport android.widget.Spinner\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.ViewModelProvider\nimport com.stacktips.view.CalendarListener\nimport com.stacktips.view.CustomCalendarView\nimport java.text.SimpleDateFormat\nimport java.util.Calendar\nimport java.util.Date\n\nclass PlaygroundReservedDates : AppCompatActivity() {\n\n    private lateinit var reservationViewModel: ReservationViewModel\n    private lateinit var calendarView: CustomCalendarView\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.playground_reserved_dates)\n\n        reservationViewModel = ViewModelProvider(this).get(ReservationViewModel::class.java)\n\n        val playgroundSpinner = findViewById<Spinner>(R.id.playground_spinner)\n        val playgrounds = listOf(\"Basketball Court\", \"Football Court\", \"Volleyball Court\")\n        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, playgrounds)\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\n        playgroundSpinner.adapter = adapter\n\n        calendarView = findViewById(R.id.calendar_view)\n\n        playgroundSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\n            override fun onItemSelected(parent: AdapterView<*>, view: View, position: Int, id: Long) {\n                // Get the selected playground\n                val selectedPlayground = parent.getItemAtPosition(position) as String\n                updateCalendarForPlayground(selectedPlayground)\n            }\n\n            override fun onNothingSelected(parent: AdapterView<*>) {}\n        }\n    }\n\n    private fun updateCalendarForPlayground(playground: String) {\n        val reservations = reservationViewModel.getAllReservationsForSportPlayground(playground)\n\n        calendarView.setCalendarListener(object : CalendarListener {\n            override fun onDateSelected(selectedDate: Calendar) {\n                val date = SimpleDateFormat(\"yyyy-MM-dd\").format(selectedDate.time)\n\n                reservations.observe(this@PlaygroundReservedDates, { reservationList ->\n                    val reservedDate = reservationList.find { it.date == date }\n\n                    if (reservedDate != null) {\n                        val message = if (reservedDate.equipmentsRequired) {\n                            \"Reserved with equipment required\"\n                        } else {\n                            \"Reserved without equipment required\"\n                        }\n                        Toast.makeText(this@PlaygroundReservedDates, message, Toast.LENGTH_SHORT).show()\n                    } else {\n                        Toast.makeText(this@PlaygroundReservedDates, \"Available\", Toast.LENGTH_SHORT).show()\n                    }\n                })\n            }\n\n            override fun onMonthChanged(month: Calendar) {}\n        })\n    }\n}",
    "filename": "0ed6998e5f84bcea8c3ff7244f7ec522_8.kt"
  },
  {
    "conversation_hash": "d750a2f31ab4a0508b600d44df9d4662",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "// Get a stable reference of the modifiable image capture use case.\nval imageCapture = imageCapture ?: return@setOnClickListener\n\n// Create a file to hold the captured image.\nval photoFile = File(externalMediaDirs.firstOrNull(), \"${System.currentTimeMillis()}.jpg\")\n\n// Create an output file options object which contains file + metadata such as image size.\nval outputOptions = ImageCapture.OutputFileOptions.Builder(photoFile).build()\n\n// Set up image capture listener, which is triggered after photo has been taken.\nimageCapture.takePicture(outputOptions, ContextCompat.getMainExecutor(this), object : ImageCapture.OnImageSavedCallback {\n    override fun onImageSaved(outputFileResults: ImageCapture.OutputFileResults) {\n        // Photo has been saved to disk.\n\n        // You can process the saved image file from the saved output object if necessary.\n        val savedUri = outputFileResults.savedUri ?: photoFile.toUri()\n\n        // To display the captured image in an ImageView, use the following line of code.\n        imageView.setImageBitmap(BitmapFactory.decodeFile(photoFile.absolutePath))\n    }\n\n    override fun onError(exception: ImageCaptureException) {\n        // Photo has not been taken because of an error, handle it appropriately.\n    }\n})",
    "filename": "d750a2f31ab4a0508b600d44df9d4662_2.kt"
  },
  {
    "conversation_hash": "32e4d7ca03505ff024a122cdb92d713a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class DeviceEntity(val id: Int, val name: String) {\n\n    override fun toString(): String {\n        return \"DeviceEntity(id=$id, name=$name)\"\n    }\n}",
    "filename": "32e4d7ca03505ff024a122cdb92d713a_1.kt"
  },
  {
    "conversation_hash": "32e4d7ca03505ff024a122cdb92d713a",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onTerminate() {\n    super.onTerminate()\n    GlobalScope.launch {\n        val db = Room.databaseBuilder(\n            applicationContext,\n            MyDatabase::class.java, \"my-database\"\n        ).build()\n        db.myDao().deleteAll()\n    }\n}",
    "filename": "32e4d7ca03505ff024a122cdb92d713a_6.kt"
  },
  {
    "conversation_hash": "95a84fc17d2bfb523f2f51949e417714",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "public open class EditorBuilder(intent: Intent) : ImgLyIntent(intent) {\n\n    // إضافة مُثبت للخصائص غير المُهيئة\n    private var sampleProperty: String = \"\"\n\n    companion object {\n        private final val activityClass: java.lang.Class<out android.app.Activity> /* compiled code */\n    }\n\n    public constructor(activity: android.app.Activity) : super(activity) {\n        // constructor in superclass that can be called without arguments\n    }\n\n    @kotlin.Deprecated public constructor(intent: android.content.Intent,activityClass: java.lang.Class<out android.app.Activity>) : super(intent, activityClass) {\n        // constructor in superclass that can be called with arguments\n    }\n\n    public constructor(activity: android.app.Activity,activityClass: java.lang.Class<out android.app.Activity>) : super(activity, activityClass) {\n        // constructor in superclass that can be called with arguments\n    }\n\n    public override fun setSettingsList(settingsList: ly.img.android.pesdk.backend.model.state.manager.SettingsList): EditorBuilder { /* compiled code */ }\n\n    public override fun startActivityForResult(context: android.app.Activity, resultId: kotlin.Int): kotlin.Unit { /* compiled code */ }\n\n    public override fun startActivityForResult(context: android.app.Fragment, resultId: kotlin.Int): kotlin.Unit { /* compiled code */ }\n\n    public open fun startActivityForResult(context: androidx.fragment.app.Fragment, resultId: kotlin.Int): kotlin.Unit { /* compiled code */ }\n}",
    "filename": "95a84fc17d2bfb523f2f51949e417714_2.kt"
  },
  {
    "conversation_hash": "b69a0e6debb3bebb960d46b16032534b",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "VM"
    ],
    "code": "viewModelScope.launch(Dispatchers.IO) {\n    Log.d(\"DBG\", \"Hello from VM\")\n    val rr = emulatorUseCases.getAllDevices()\n    rr.forEach { device ->\n        Log.d(\"DBG\", \"Device ID: ${device.id}, Type: ${device.deviceType}, IP: ${device.ip}\")\n    }\n}",
    "filename": "b69a0e6debb3bebb960d46b16032534b_0.kt"
  },
  {
    "conversation_hash": "b69a0e6debb3bebb960d46b16032534b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "VM"
    ],
    "code": "viewModelScope.launch(Dispatchers.IO) {\n    Log.d(\"DBG\", \"Hello from VM\")\n    val rr = emulatorUseCases.getAllDevices()\n    rr.forEach { device ->\n        Log.d(\"DBG\", \"Device ID: ${device.id}, Type: ${device.deviceType}, IP: ${device.ip}\")\n    }\n}",
    "filename": "b69a0e6debb3bebb960d46b16032534b_1.kt"
  },
  {
    "conversation_hash": "b69a0e6debb3bebb960d46b16032534b",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "VM"
    ],
    "code": "viewModelScope.launch(Dispatchers.IO) {\n    Log.d(\"DBG\", \"Hello from VM\")\n    val rr = emulatorUseCases.getAllDevices()\n    rr.forEach { device ->\n        Log.d(\"DBG\", \"Device ID: ${device.id}, Type: ${device.deviceType}, IP: ${device.ip}\")\n    }\n}",
    "filename": "b69a0e6debb3bebb960d46b16032534b_2.kt"
  },
  {
    "conversation_hash": "3ac37e344b96c7ece96940c9346a3004",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewModel(private val emulatorUseCases: EmulatorUseCases) : ViewModel() {\n\n    // your other ViewModel code here\n\n    fun getAllDevices() {\n        viewModelScope.launch(Dispatchers.IO) {\n            emulatorUseCases.getAllDevices().collect { list ->\n                Log.d(\"DBG\", \"List: $list\")\n            }\n        }\n    }\n}",
    "filename": "3ac37e344b96c7ece96940c9346a3004_0.kt"
  },
  {
    "conversation_hash": "3ac37e344b96c7ece96940c9346a3004",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@HiltViewModel\nclass EmulatorViewModel @Inject constructor(\n    private val emulatorUseCases: EmulatorUseCases\n) : ViewModel() {\n\n    fun getAllDevices() {\n        viewModelScope.launch(Dispatchers.IO) {\n            emulatorUseCases.getAllDevices().collect { list ->\n                Log.d(\"DBG\", \"List: $list\")\n            }\n        }\n    }\n}",
    "filename": "3ac37e344b96c7ece96940c9346a3004_2.kt"
  },
  {
    "conversation_hash": "3ac37e344b96c7ece96940c9346a3004",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@AndroidEntryPoint\nclass MainActivity : AppCompatActivity() {\n\n    private val emulatorViewModel: EmulatorViewModel by viewModels()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        // Your activity code here\n\n        lifecycleScope.launch(Dispatchers.IO) {\n            emulatorViewModel.getAllDevices()\n        }\n    }\n\n    // Your other activity code here\n}",
    "filename": "3ac37e344b96c7ece96940c9346a3004_3.kt"
  },
  {
    "conversation_hash": "3ac37e344b96c7ece96940c9346a3004",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@AndroidEntryPoint\nclass MainActivity : AppCompatActivity() {\n\n    private val emulatorViewModel: EmulatorViewModel by viewModels()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        // Your activity code here\n\n        lifecycleScope.launch(Dispatchers.IO) {\n            emulatorViewModel.getAllDevices()\n        }\n    }\n\n    // Your other activity code here\n}",
    "filename": "3ac37e344b96c7ece96940c9346a3004_5.kt"
  },
  {
    "conversation_hash": "3ac37e344b96c7ece96940c9346a3004",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun getAllDevices() {\n    viewModelScope.launch(Dispatchers.IO) {\n        Log.d(\"DBG\", \"EmulatorUseCases: $emulatorUseCases\")\n        emulatorUseCases.getAllDevices().collect { list ->\n            Log.d(\"DBG\", \"List: $list\")\n        }\n    }\n}",
    "filename": "3ac37e344b96c7ece96940c9346a3004_6.kt"
  },
  {
    "conversation_hash": "3ac37e344b96c7ece96940c9346a3004",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "@HiltViewModel\nclass EmulatorViewModel @Inject constructor(\n    private val emulatorUseCases: EmulatorUseCases\n) : ViewModel() {\n\n    fun getAllDevices() {\n        viewModelScope.launch(Dispatchers.IO) {\n            Log.d(\"DBG\", \"EmulatorUseCases: $emulatorUseCases\")\n            emulatorUseCases.getAllDevices().collect { list ->\n                Log.d(\"DBG\", \"List: $list\")\n            }\n        }\n    }\n}",
    "filename": "3ac37e344b96c7ece96940c9346a3004_7.kt"
  },
  {
    "conversation_hash": "3ac37e344b96c7ece96940c9346a3004",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "@HiltViewModel\nclass EmulatorViewModel @Inject constructor(\n    private val emulatorUseCases: EmulatorUseCases\n) : ViewModel() {\n\n    fun getAllDevices() {\n        viewModelScope.launch(Dispatchers.IO) {\n            Log.d(\"DBG\", \"EmulatorUseCases: $emulatorUseCases\")\n            emulatorUseCases.getAllDevices().collect { list ->\n                Log.d(\"DBG\", \"List size: ${list.size}\")\n                Log.d(\"DBG\", \"List: $list\")\n            }\n        }\n    }\n}",
    "filename": "3ac37e344b96c7ece96940c9346a3004_10.kt"
  },
  {
    "conversation_hash": "3ac37e344b96c7ece96940c9346a3004",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyFragment : Fragment() {\n\n    private val emulatorViewModel: EmulatorViewModel by viewModels()\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        emulatorViewModel.getDevices()\n    }\n}",
    "filename": "3ac37e344b96c7ece96940c9346a3004_11.kt"
  },
  {
    "conversation_hash": "edcc2323f1f6052b95271308f8fb0980",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun insertDevice(deviceEntity: DeviceEntity) {\n    viewModelScope.launch(Dispatchers.IO) {\n        emulatorUseCases.insertDevice(deviceEntity)\n    }\n}",
    "filename": "edcc2323f1f6052b95271308f8fb0980_0.kt"
  },
  {
    "conversation_hash": "edcc2323f1f6052b95271308f8fb0980",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "lifecycleScope.launch(Dispatchers.IO) {\n    val devices = listOf(\n        DeviceEntity(\n            id = 0,\n            position = Position(0f, 0f),\n            deviceType = DeviceType.SERVER,\n        )\n    )\n    devices.forEach { insertDevice(it) }\n}",
    "filename": "edcc2323f1f6052b95271308f8fb0980_1.kt"
  },
  {
    "conversation_hash": "edcc2323f1f6052b95271308f8fb0980",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Module\n@InstallIn(SingletonComponent::class)\nobject EmulatorModule {\n\n    @Provides\n    @Singleton\n    fun provideEmulatorUseCases(deviceDao: DeviceDao): EmulatorUseCases {\n        val repository = EmulatorRepositoryImpl(deviceDao)\n        return EmulatorUseCases(\n            insertDevice = InsertDevice(repository),\n            getAllDevices = GetAllDevices(repository),\n            getDeviceById = GetDeviceById(repository)\n        )\n    }\n\n}",
    "filename": "edcc2323f1f6052b95271308f8fb0980_2.kt"
  },
  {
    "conversation_hash": "edcc2323f1f6052b95271308f8fb0980",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@HiltViewModel\nclass EmulatorViewModel @Inject constructor(\n    private val emulatorUseCases: EmulatorUseCases\n) : ViewModel() {\n\n    init {\n        getDevices()\n    }\n\n    private fun getDevices() {\n        viewModelScope.launch(Dispatchers.IO) {\n            Log.d(\"DBG\", \"emulatorUseCases: $emulatorUseCases\")\n            emulatorUseCases.getAllDevices().collect {\n                Log.d(\"DBG\", \"size: ${it.size}\")\n                Log.d(\"DBG\", \"list: $it\")\n            }\n        }\n    }\n}",
    "filename": "edcc2323f1f6052b95271308f8fb0980_3.kt"
  },
  {
    "conversation_hash": "edcc2323f1f6052b95271308f8fb0980",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@HiltAndroidApp\nclass MyApp : Application() {\n\n    override fun onCreate() {\n        super.onCreate()\n        // Другие настройки приложения...\n    }\n\n}",
    "filename": "edcc2323f1f6052b95271308f8fb0980_5.kt"
  },
  {
    "conversation_hash": "6f62da88715b2c44cd9e33634583cb24",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Module\n@InstallIn(ActivityComponent::class)\nobject EmulatorModule {\n    @Provides\n    @ActivityScope\n    fun provideEmulatorUseCases(emulatorRepository: EmulatorRepository): EmulatorUseCases {\n        return EmulatorUseCases(\n            InsertDevice(emulatorRepository),\n            GetAllDevices(emulatorRepository),\n            GetDeviceById(emulatorRepository),\n        )\n    }\n\n    @Provides\n    @ActivityScope\n    fun provideEmulatorViewModel(emulatorUseCases: EmulatorUseCases): EmulatorViewModel {\n        return EmulatorViewModel(emulatorUseCases)\n    }\n}",
    "filename": "6f62da88715b2c44cd9e33634583cb24_3.kt"
  },
  {
    "conversation_hash": "245490794224427cf7c4be8fdba35f8c",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.graphics.Bitmap",
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity",
      "java.nio.ByteBuffer",
      "org.tensorflow.lite.Interpreter"
    ],
    "code": "import android.graphics.Bitmap\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport org.tensorflow.lite.Interpreter\nimport java.nio.ByteBuffer\n\nclass MainActivity : AppCompatActivity() {\n    lateinit var interpreter: Interpreter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        initializeModel()\n    }\n\n    private fun initializeModel() {\n        val assetManager = assets\n        val modelPath = \"deeplab_model.tflite\"\n\n        interpreter = Interpreter(loadModelFile(assetManager, modelPath))\n    }\n\n    private fun loadModelFile(assetManager: AssetManager, fileName: String): ByteBuffer {\n        val fileDescriptor = assetManager.openFd(fileName)\n        val inputStream = FileInputStream(fileDescriptor.fileDescriptor)\n        val fileChannel = inputStream.channel\n        val startOffset = fileDescriptor.startOffset\n        val declaredLength = fileDescriptor.declaredLength\n\n        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength)\n    }\n}",
    "filename": "245490794224427cf7c4be8fdba35f8c_1.kt"
  },
  {
    "conversation_hash": "245490794224427cf7c4be8fdba35f8c",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun removeBackground(image: Bitmap): Bitmap {\n        val width = image.width\n        val height = image.height\n\n        val inputSize = 513\n        val resizeRatio = inputSize / max(width, height).toFloat()\n        val resizedWidth = (width * resizeRatio).toInt()\n        val resizedHeight = (height * resizeRatio).toInt()\n\n        val resizedImage = Bitmap.createScaledBitmap(image, resizedWidth, resizedHeight, true)\n        val convertedImage = Bitmap.createBitmap(resizedWidth, resizedHeight, Bitmap.Config.ARGB_8888)\n\n        // عملية إزالة الخلفية\n        val inputArray = arrayOf(arrayOf(Array(inputSize) { FloatArray(inputSize) } ))\n        val outputMap = HashMap<Int, Any>()\n        outputMap[0] = Array(resizedHeight) { Array(resizedWidth) { IntArray(1) } }\n        interpreter.runForMultipleInputsOutputs(arrayOf(resizedImage), outputMap)\n\n        // لوضع صورة جديدة بالخلفية\n        val newBackground = Bitmap.createScaledBitmap(BitmapFactory.decodeResource(resources, R.drawable.new_background), resizedWidth, resizedHeight, true)\n\n        val tempCanvas = Canvas(convertedImage)\n        tempCanvas.drawBitmap(newBackground, 0F, 0F, null)\n        for (i in 0 until resizedHeight) {\n            for (j in 0 until resizedWidth) {\n                val pixel = (outputMap[0] as Array<Array<IntArray>>)[i][j][0]\n                if (pixel != 0) {\n                    convertedImage.setPixel(j, i, resizedImage.getPixel(j, i))\n                }\n            }\n        }\n\n        return convertedImage\n    }",
    "filename": "245490794224427cf7c4be8fdba35f8c_2.kt"
  },
  {
    "conversation_hash": "245490794224427cf7c4be8fdba35f8c",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    ...\n    private val PICK_IMAGE_REQUEST = 100\n    private lateinit var imageView: ImageView\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        ...\n        imageView = findViewById(R.id.imageView)\n        val button: Button = findViewById(R.id.button)\n        button.setOnClickListener { pickImage() }\n    }\n\n    private fun pickImage() {\n        val intent = Intent(Intent.ACTION_PICK)\n        intent.type = \"image/*\"\n        startActivityForResult(intent, PICK_IMAGE_REQUEST)\n    }\n\n    // استدعاء دالة removeBackground\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n\n        if (resultCode == RESULT_OK && requestCode == PICK_IMAGE_REQUEST && data != null && data.data != null) {\n            val uri: Uri? = data.data\n            val imageBitmap = BitmapFactory.decodeStream(contentResolver.openInputStream(uri!!))\n            val noBackgroundImage = removeBackground(imageBitmap)\n            imageView.setImageBitmap(noBackgroundImage)\n        }\n    }\n\n    ...\n}",
    "filename": "245490794224427cf7c4be8fdba35f8c_6.kt"
  },
  {
    "conversation_hash": "1a361ecfbcdf0f13817ee4971959f62e",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun initializeModel() {\n    val assetManager = assets\n    val modelPath = \"mobilenetv2_coco_voctrainval.tflite\"\n\n    interpreter = Interpreter(loadModelFile(assetManager, modelPath))\n    backgroundBitmap = BitmapFactory.decodeResource(resources, R.drawable.image1)\n    imageView.setImageBitmap(backgroundBitmap)\n}",
    "filename": "1a361ecfbcdf0f13817ee4971959f62e_0.kt"
  },
  {
    "conversation_hash": "c3af2a49caa6984225caddc13b18082a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun updateImageView() {\n    if (backgroundBitmap != null) {\n        val newBitmap = mergeImages(selectedImageBitmap, backgroundBitmap!!)\n        imageView.setImageBitmap(newBitmap)\n    } else {\n        imageView.setImageBitmap(selectedImageBitmap)\n    }\n}",
    "filename": "c3af2a49caa6984225caddc13b18082a_1.kt"
  },
  {
    "conversation_hash": "d01f01662c16cfa64c276e80a08ad410",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "Widget _buildTelephone(BuildContext context, String phoneNumber) {\n  // ...\n  _buildLauncherButton(\n    context,\n    Icons.call_outlined,\n    LauncherExpert.createLaunchTelCallback(phoneNumber),\n    SettingsRepository.phoneAppLaunchPermission,\n  ),\n  // ...\n}\n// Same for _buildMail and _buildLocation",
    "filename": "d01f01662c16cfa64c276e80a08ad410_8.kt"
  },
  {
    "conversation_hash": "44c922b09d101258ef2ec560c5f2ad3b",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun upscaleImage(bitmap: Bitmap, scale: Double): Bitmap {\n    val inputMat = Mat()\n    val outputMat = Mat()\n\n    Utils.bitmapToMat(bitmap, inputMat)\n    Imgproc.resize(inputMat, outputMat, Size(inputMat.width() * scale, inputMat.height() * scale), 0.0, 0.0, Imgproc.INTER_CUBIC)\n\n    // Create a new Bitmap with the scaled dimensions\n    val scaledBitmap = Bitmap.createScaledBitmap(bitmap, (bitmap.width * scale).toInt(), (bitmap.height * scale).toInt(), false)\n\n    // Get the scaled bitmap using the outputMat\n    val outputBitmap = Bitmap.createBitmap(scaledBitmap.width, scaledBitmap.height, Bitmap.Config.ARGB_8888)\n    Utils.matToBitmap(outputMat, outputBitmap)\n\n    // Recycle the input bitmap to free up memory\n    bitmap.recycle()\n    scaledBitmap.recycle()\n\n    return outputBitmap\n}",
    "filename": "44c922b09d101258ef2ec560c5f2ad3b_0.kt"
  },
  {
    "conversation_hash": "44c922b09d101258ef2ec560c5f2ad3b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "enhanceButton.setOnClickListener {\n    Glide.with(this)\n        .asBitmap()\n        .load(R.drawable.image1)\n        .diskCacheStrategy(DiskCacheStrategy.ALL)\n        .centerCrop()\n        .into(object : SimpleTarget<Bitmap>() {\n            override fun onResourceReady(resource: Bitmap, transition: Transition<in Bitmap>?) {\n                val enhancedBitmap = upscaleImage(resource, 2.0)\n                imageView.setImageBitmap(enhancedBitmap)\n\n                // Scale down the bitmap to prevent \"Canvas: trying to draw too large bitmap\" error\n                val scaledDownBitmap = Bitmap.createScaledBitmap(enhancedBitmap, imageView.width, imageView.height, false)\n                imageView.setImageBitmap(scaledDownBitmap)\n            }\n        })\n}",
    "filename": "44c922b09d101258ef2ec560c5f2ad3b_1.kt"
  },
  {
    "conversation_hash": "a23f34711ac09cd5fccb262d29f42b38",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun CircleFAB(\n    onClick: () -> Unit,\n    modifier: Modifier = Modifier,\n    content: @Composable () -> Unit\n) {\n    FloatingActionButton(\n        onClick = onClick,\n        modifier = modifier,\n        shape = CircleShape\n    ) {\n        content()\n    }\n}\n\n@Composable\nfun SquareFABMenu(\n    expanded: Boolean,\n    onDismiss: () -> Unit,\n    modifier: Modifier = Modifier,\n    menuItems: List<MenuItem>,\n) {\n    AnimatedVisibility(\n        visible = expanded,\n        enter = fadeIn(),\n        exit = fadeOut()\n    ) {\n        Column(modifier = modifier) {\n            // FAB menu items\n        }\n    }\n}",
    "filename": "a23f34711ac09cd5fccb262d29f42b38_2.kt"
  },
  {
    "conversation_hash": "a23f34711ac09cd5fccb262d29f42b38",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyScreen() {\n    val (expanded, setExpanded) = remember { mutableStateOf(false) }\n\n    Column {\n        // other content\n        CircleFAB(onClick = { setExpanded(!expanded) }) {\n            // FAB icon\n        }\n        SquareFABMenu(\n            expanded = expanded,\n            onDismiss = { setExpanded(false) },\n            menuItems = /* your menu items */\n        )\n    }\n}",
    "filename": "a23f34711ac09cd5fccb262d29f42b38_3.kt"
  },
  {
    "conversation_hash": "a23f34711ac09cd5fccb262d29f42b38",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun fadeIn() = fadeIn(\n    animationSpec = TweenSpec(\n        durationMillis = 200,\n        easing = FastOutSlowInEasing\n    )\n)\n\nfun fadeOut() = fadeOut(\n    animationSpec = TweenSpec(\n        durationMillis = 200,\n        easing = FastOutSlowInEasing\n    )\n)",
    "filename": "a23f34711ac09cd5fccb262d29f42b38_4.kt"
  },
  {
    "conversation_hash": "a23f34711ac09cd5fccb262d29f42b38",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun CircleToSquareFABMenu(\n    menuItems: List<MenuItem>,\n    icon: @Composable () -> Unit,\n    modifier: Modifier = Modifier,\n    onClick: () -> Unit\n) {\n    var expanded by remember { mutableStateOf(false) }\n\n    val enterTransition = remember {\n        fadeIn(animationSpec = TweenSpec(300))\n    }\n    val exitTransition = remember {\n        fadeOut(animationSpec = TweenSpec(300))\n    }\n\n    Column {\n        FloatingActionButton(\n            onClick = { expanded = !expanded; onClick() },\n            shape = if (expanded) RectangleShape else CircleShape,\n            modifier = modifier\n        ) {\n            Icon(imageVector = icon, contentDescription = \"FAB Icon\")\n        }\n        AnimatedVisibility(\n            visible = expanded,\n            enter = enterTransition,\n            exit = exitTransition,\n            modifier = modifier\n        ) {\n            Column {\n                for (item in menuItems) {\n                    Text(\n                        text = item.title,\n                        modifier = Modifier\n                            .padding(8.dp)\n                            .clickable(onClick = { expanded = false; item.onClick() })\n                    )\n                }\n            }\n        }\n    }\n}",
    "filename": "a23f34711ac09cd5fccb262d29f42b38_5.kt"
  },
  {
    "conversation_hash": "a23f34711ac09cd5fccb262d29f42b38",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyScreen() {\n    var expanded by remember { mutableStateOf(false) }\n\n    val fabSize = if (expanded) 0.dp else FloatingActionButtonDefaults.miniFabSize\n\n    Column {\n        // other content\n        Box(Modifier.fillMaxSize()) {\n            // your background content here\n            AnimatedContentSize(\n                targetState = if (expanded) 1f else 0f,\n                modifier = Modifier.align(Alignment.BottomEnd)\n            ) {\n                if (expanded) {\n                    // show full screen content\n                    FullScreenContent(modifier = Modifier.fillMaxSize())\n                } else {\n                    // hide full screen content\n                    Box(\n                        modifier = Modifier.size(fabSize),\n                        contentAlignment = Alignment.Center\n                    ) {\n                        // your circular FAB here\n                    }\n                }\n            }\n        }\n    }\n}",
    "filename": "a23f34711ac09cd5fccb262d29f42b38_7.kt"
  },
  {
    "conversation_hash": "a23f34711ac09cd5fccb262d29f42b38",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyScreen(onCloseScreen: () -> Unit) {\n    val currentOffset = remember { mutableStateOf(Offset(1f, 0f)) }\n\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .graphicsLayer {\n                translationX = currentOffset.value.x * size.width\n            }\n    ) {\n        // your screen content here\n    }\n\n    // Slide transition\n    val slideTransition = updateTransition(targetState = currentOffset.value.x)\n    val slideOffset by slideTransition.animateFloat(\n        transitionSpec = { tween(durationMillis = 500, easing = FastOutSlowInEasing) }\n    ) { targetX ->\n        if (targetX == 1f) 0f else 1f\n    }\n\n    onCommit(currentOffset.value) {\n        currentOffset.value = Offset(slideOffset, 0f)\n    }\n}",
    "filename": "a23f34711ac09cd5fccb262d29f42b38_10.kt"
  },
  {
    "conversation_hash": "a23f34711ac09cd5fccb262d29f42b38",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyScreen(onCloseScreen: () -> Unit) {\n    // ...\n    \n    // Set up the slide transition\n    val slideInTransition = slideInHorizontally(\n        initialOffsetX = { it },\n        animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\n    )\n    val slideOutTransition = slideOutHorizontally(\n        targetOffsetX = { -it },\n        animationSpec = tween(durationMillis = 500, easing = FastOutSlowInEasing)\n    )\n\n    // Back button press handler to trigger exit transition\n    val onBackPressed: () -> Unit = {\n        slideTransition.targetState = 1f\n    }\n\n    Box {\n        NavHost(\n            navController = navController,\n            startDestination = Screen.Home.route\n        ) {\n            composable(Screen.Home.route) {\n                HomeScreen(onOpenScreen = {\n                    slideTransition.targetState = 0f\n                })\n            }\n            composable(Screen.My.route) {\n                MyScreen(onCloseScreen = onBackPressed)\n            }\n        }\n\n        AnimatedVisibility(\n            visible = slideTransition.value == 1f,\n            enter = slideInTransition,\n            exit = slideOutTransition\n        ) {\n            MyScreen(onCloseScreen = onBackPressed)\n        }\n    }\n}",
    "filename": "a23f34711ac09cd5fccb262d29f42b38_11.kt"
  },
  {
    "conversation_hash": "a23f34711ac09cd5fccb262d29f42b38",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyComposable(viewModel: MyViewModel) {\n    val myBooleanState by remember { viewModel.myBooleanState }\n\n    if (myBooleanState) {\n        // show some content\n    } else {\n        // show other content\n    }\n\n    // update the state\n    Button(onClick = { viewModel.toggleMyBooleanState() }) {\n        Text(\"Toggle boolean state\")\n    }\n}",
    "filename": "a23f34711ac09cd5fccb262d29f42b38_12.kt"
  },
  {
    "conversation_hash": "481113c5ab92cae0f4a7157b9cf2e6ef",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyButton(onClick: () -> Unit) {\n    Button(\n        onClick = onClick,\n        shape = RectangleShape\n    ) {\n        Text(text = \"Click me!\")\n    }\n}",
    "filename": "481113c5ab92cae0f4a7157b9cf2e6ef_5.kt"
  },
  {
    "conversation_hash": "481113c5ab92cae0f4a7157b9cf2e6ef",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\n   fun MyButton(onClick: () -> Unit, shape: Shape) {\n       Button(onClick = onClick, shape = shape) {\n           Text(text = \"Click me!\")\n       }\n   }",
    "filename": "481113c5ab92cae0f4a7157b9cf2e6ef_8.kt"
  },
  {
    "conversation_hash": "3ad8c7fa2f8d6ada7b8261fb1a7f69a8",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val str = \"This is a \\\"quoted\\\" string with ASCII codes: &#34; and &#39;\"\n    val result = str.replace(\"&#34;\", \"\\\"\").replace(\"&#39;\", \"\\'\")\n    println(result)\n}",
    "filename": "3ad8c7fa2f8d6ada7b8261fb1a7f69a8_0.kt"
  },
  {
    "conversation_hash": "3ad8c7fa2f8d6ada7b8261fb1a7f69a8",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val originalMap = mapOf(\"key1\" to 1, \"key2\" to 2)\n    val copiedMap = originalMap.toMap()\n    \n    println(copiedMap) // {key1=1, key2=2}\n    println(copiedMap === originalMap) // false\n}",
    "filename": "3ad8c7fa2f8d6ada7b8261fb1a7f69a8_2.kt"
  },
  {
    "conversation_hash": "c259e1a886371843c52c29a9bdf02f84",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private lateinit var glSurfaceView: GLSurfaceView\n    private lateinit var renderer: OpenGLRenderer\n    private lateinit var buttonClear: Button\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        setContentView(R.layout.activity_main)\n\n        glSurfaceView = findViewById(R.id.glSurfaceView)\n        buttonClear = findViewById(R.id.button)\n\n        renderer = OpenGLRenderer()\n\n        glSurfaceView.setEGLContextClientVersion(2)\n        glSurfaceView.setRenderer(renderer)\n\n        buttonClear.setOnClickListener {\n            renderer.clear()\n        }\n    }\n\n    override fun onTouchEvent(event: MotionEvent?): Boolean {\n        if (event?.action == MotionEvent.ACTION_DOWN) {\n            renderer.onTouch(event.x, event.y)\n            return true\n        }\n        return super.onTouchEvent(event)\n    }\n\n}",
    "filename": "c259e1a886371843c52c29a9bdf02f84_7.kt"
  },
  {
    "conversation_hash": "77ead0570ec2d5742c28ede520ebb93b",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyComposable() {\n    Log.d(\"MyComposable\", \"Recomposing\")\n    // Your composable code here\n}",
    "filename": "77ead0570ec2d5742c28ede520ebb93b_0.kt"
  },
  {
    "conversation_hash": "77ead0570ec2d5742c28ede520ebb93b",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\n@AndroidEntryPoint\nfun MyComposable(myViewModel: MyViewModel = hiltViewModel()) {\n    // Composable code here\n}",
    "filename": "77ead0570ec2d5742c28ede520ebb93b_4.kt"
  },
  {
    "conversation_hash": "964ee84e342ae280147c14cea367cab5",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun EmulatorScreen(\n    navController: NavController,\n    viewModel: EmulatorViewModel = hiltViewModel(),\n    paddingValues: PaddingValues\n) {\n    val state by viewModel.state.observeAsState()\n\n    // Обновляем состояние при изменении значения в EmulatorViewModel\n    LaunchedEffect(viewModel) {\n        viewModel.state.collect { newState ->\n            state = newState\n        }\n    }\n\n    Log.d(\"DBG\",\"Screen: ${state.isDeviceEditing}\")\n    // Screen: true\n}",
    "filename": "964ee84e342ae280147c14cea367cab5_0.kt"
  },
  {
    "conversation_hash": "964ee84e342ae280147c14cea367cab5",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun EmulatorScreen(\n    navController: NavController,\n    viewModel: EmulatorViewModel = hiltViewModel(),\n    paddingValues: PaddingValues\n) {\n    val state = viewModel.state.value\n\n    // Используем актуальное значение isDeviceEditing из state\n    Log.d(\"DBG\",\"Screen: ${state.isDeviceEditing}\")\n\n    // rest of your code here\n}",
    "filename": "964ee84e342ae280147c14cea367cab5_1.kt"
  },
  {
    "conversation_hash": "964ee84e342ae280147c14cea367cab5",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun EmulatorScreen(\n    navController: NavController,\n    viewModel: EmulatorViewModel = hiltViewModel(),\n    paddingValues: PaddingValues\n) {\n    val state = viewModel.state.value\n\n    // использование состояния, полученного из модели EmulatorViewModel\n    // state.isDeviceEditing ...\n\n    // ваш код сюда ...\n}",
    "filename": "964ee84e342ae280147c14cea367cab5_2.kt"
  },
  {
    "conversation_hash": "f408f616a212750a06c764958c7dc9e0",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class FirstFragment: Fragment() {\n    // Создание переменной для хранения рейтинга товара\n    private var rating: Float = 0.0f\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        ...\n        // Получение элемента интерфейса, который будет отображать текущий рейтинг товара\n        val ratingTV = view.findViewById<TextView>(R.id.rating_tv)\n\n        // Обработчик событий для элемента интерфейса, который отображает текущий рейтинг товара\n        ratingTV.setOnClickListener {\n            // Показать диалоговое окно для оценки товара и получения нового рейтинга\n            showRatingDialog()\n        }\n        ...\n    }\n\n    // Функция для показа диалогового окна для оценки товара\n    private fun showRatingDialog() { \n        val fragmentManager = fragmentManager\n        val dialog = RatingDialogFragment.newInstance(rating)\n\n        // Установка слушателя событий для получения новой оценки товара\n        dialog.listener = object: RatingDialogFragment.OnRatingListener {\n            override fun onRating(rating: Float) {\n                // Обновление рейтинга товара и его отображение в элементе интерфейса\n                this@FirstFragment.rating = rating\n                ratingTV.text = rating.toString()\n            }\n        }\n        dialog.show(fragmentManager, \"RatingDialogFragment\")\n    }\n}",
    "filename": "f408f616a212750a06c764958c7dc9e0_0.kt"
  },
  {
    "conversation_hash": "4b0301ccaa314d79f35917c7f4ffaf9d",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun updateDevice(deviceToUpdate: Device, newDeviceState: DeviceState) {\n    _state.update { currentState ->\n        val updatedDevices = currentState.devices.map { device ->\n            if (device == deviceToUpdate) {\n                device.copy(state = newDeviceState)\n            } else {\n                device\n            }\n        }\n        currentState.copy(devices = updatedDevices)\n    }\n}",
    "filename": "4b0301ccaa314d79f35917c7f4ffaf9d_1.kt"
  },
  {
    "conversation_hash": "74408a7a44024c19887be2bdb5896040",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.material.",
      "androidx.compose.runtime.",
      "androidx.compose.ui.res.stringResource",
      "androidx.compose.ui.tooling.preview.Preview",
      "androidx.compose.ui.unit.dp",
      "androidx.navigation.NavController"
    ],
    "code": "import androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavController\n\n@Composable\nfun MyTopAppBar(navController: NavController) {\n    TopAppBar(\n        title = { Text(text = stringResource(id = R.string.app_name)) },\n        navigationIcon = {\n            IconButton(\n                onClick = { navController.popBackStack() }\n            ) {\n                Icon(Icons.Filled.ArrowBack, contentDescription = stringResource(R.string.back))\n            }\n        },\n        actions = {\n            var showDialog by remember { mutableStateOf(false) }\n            IconButton(\n                onClick = { showDialog = true }\n            ) {\n                Icon(Icons.Filled.MoreVert, contentDescription = stringResource(R.string.more))\n            }\n\n            if (showDialog) {\n                MyDialog(\n                    onDismiss = { showDialog = false }\n                )\n            }\n        },\n    )\n}\n\n@Composable\nfun MyDialog(onDismiss: () -> Unit) {\n    AlertDialog(\n        onDismissRequest = onDismiss,\n        title = { Text(text = \"Dialog Title\") },\n        text = { Text(text = \"Dialog Message\") },\n        confirmButton = {\n            TextButton(\n                onClick = onDismiss\n            ) {\n                Text(text = \"OK\")\n            }\n        }\n    )\n}\n\n@Preview\n@Composable\nfun PreviewMyTopAppBar() {\n    MyTopAppBar(NavController())\n}",
    "filename": "74408a7a44024c19887be2bdb5896040_0.kt"
  },
  {
    "conversation_hash": "dd164bd1708a3e9c8fe09b6ff3fca27a",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyScreen() {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n        verticalArrangement = Arrangement.Center\n    ) {\n        Button(\n            onClick = { closeApp() },\n            modifier = Modifier.padding(16.dp)\n        ) {\n            Text(\"Close App\")\n        }\n    }\n}\n\nfun closeApp() {\n    val context = LocalContext.current\n    (context as? Activity)?.finish()\n}",
    "filename": "dd164bd1708a3e9c8fe09b6ff3fca27a_2.kt"
  },
  {
    "conversation_hash": "dd164bd1708a3e9c8fe09b6ff3fca27a",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyNavHost()\n        }\n    }\n    \n    override fun onBackPressed() {\n        val navHost = supportFragmentManager.findFragmentById(R.id.nav_host_fragment)\n        if (navHost is NavHostFragment && navHost.navController.currentDestination?.id == R.id.my_start_dest) {\n            // If the current destination is the start destination,\n            // then close the app by calling the super method\n            super.onBackPressed()\n        } else {\n            // Otherwise, navigate to the previous destination\n            navHost?.navController?.navigateUp()\n        }\n    }\n}",
    "filename": "dd164bd1708a3e9c8fe09b6ff3fca27a_3.kt"
  },
  {
    "conversation_hash": "dd164bd1708a3e9c8fe09b6ff3fca27a",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "androidx.activity.compose.BackHandler"
    ],
    "code": "import androidx.activity.compose.BackHandler\n\n// ...\n\n@Composable\nfun MyScreen() {\n    BackHandler(onBackPressed = { /* Handle back press */ })\n    // ...\n}\n\nclass MainActivity : AppCompatActivity() {\n\n    // ...\n\n    override fun onBackPressed() {\n        finish()\n    }\n}",
    "filename": "dd164bd1708a3e9c8fe09b6ff3fca27a_4.kt"
  },
  {
    "conversation_hash": "b625a830d136f8d178e4e84020c59063",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [
      "androidx.room.Database",
      "androidx.room.RoomDatabase"
    ],
    "code": "import androidx.room.Database\nimport androidx.room.RoomDatabase\n\n@Database(entities = [User::class, Reservation::class, Court::class], version = 1)\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun userDao(): UserDao\n    abstract fun reservationDao(): ReservationDao\n    abstract fun courtDao(): CourtDao\n}",
    "filename": "b625a830d136f8d178e4e84020c59063_15.kt"
  },
  {
    "conversation_hash": "dcc89072380309612ca617c02f9fe974",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun updateConnections() {\n    _state.update { currentState ->\n        val connectionsList = mutableListOf<Connection>()\n        for(device in currentState.deviceList) {\n            val firstPosition = device.position\n            device.connections?.forEach { connectionId ->\n                val connectedDevice = getDeviceById(connectionId)\n                val secondPosition = connectedDevice.position\n                val connection = Connection(firstPosition, secondPosition)\n                connectionsList.add(connection)\n            }\n        }\n        currentState.copy(\n                devicesConnections = connectionsList.toList()\n        )\n    }\n}",
    "filename": "dcc89072380309612ca617c02f9fe974_0.kt"
  },
  {
    "conversation_hash": "dcc89072380309612ca617c02f9fe974",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun updateConnections() {\n    _state.update { currentState ->\n        val connectionsList = mutableListOf<Connection>()\n        for(device in currentState.deviceList) {\n            val firstPosition = device.position\n            device.connections?.forEach { connectionId ->\n                val connectedDevice = getDeviceById(connectionId)\n                val secondPosition = connectedDevice.position\n                val connection = Connection(firstPosition, secondPosition)\n                if(!connectionsList.contains(connection)) {\n                    connectionsList.add(connection)\n                }\n            }\n        }\n        currentState.copy(\n                devicesConnections = connectionsList.toList()\n        )\n    }\n}",
    "filename": "dcc89072380309612ca617c02f9fe974_1.kt"
  },
  {
    "conversation_hash": "dcc89072380309612ca617c02f9fe974",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "val list1 = listOf(\"apple\", \"banana\", \"orange\", \"grape\")\nval list2 = listOf(\"kiwi\", \"grape\", \"watermelon\", \"orange\")\n\nval intersectList = list1.intersect(list2)\n\nif(intersectList.isNotEmpty()) {\n    println(\"The two lists have a duplicate element: ${intersectList.first()}\")\n} else {\n    println(\"The two lists don't have any duplicates.\")\n}",
    "filename": "dcc89072380309612ca617c02f9fe974_2.kt"
  },
  {
    "conversation_hash": "dcc89072380309612ca617c02f9fe974",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "val list1 = listOf(1, 2, 3, 4, 5)\nval list2 = listOf(6, 5, 4, 3, 2)\n\nval commonList = list1.intersect(list2)\n\nif(commonList.isNotEmpty()) {\n    val distinctList = commonList.distinct()\n    if(commonList.size != distinctList.size) {\n        println(\"The two lists have duplicate elements.\")\n    } else {\n        println(\"The two lists have no duplicates.\")\n    }\n} else {\n    println(\"The two lists don't have any common elements.\")\n}",
    "filename": "dcc89072380309612ca617c02f9fe974_3.kt"
  },
  {
    "conversation_hash": "dcc89072380309612ca617c02f9fe974",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "val connections1: List<Int>? = listOf(1, 2, 3, 4, 5)\nval connections2: List<Int>? = listOf(6, 5, 4, 3, 2)\n\nif(connections1 != null && connections2 != null) {\n    val commonList = connections1.intersect(connections2)\n    if(commonList.any()) {\n        println(\"There are duplicate elements in the two lists.\")\n    } else {\n        println(\"There are no duplicate elements in the two lists.\")\n    }\n}",
    "filename": "dcc89072380309612ca617c02f9fe974_4.kt"
  },
  {
    "conversation_hash": "dcc89072380309612ca617c02f9fe974",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "val connections1: List<Int>? = listOf(1, 2, 3, 4, 5)\nval connections2: List<Int>? = listOf(6, 5, 4, 3, 2)\n\nif (connections1 != null && connections2 != null) {\n    val commonList = connections1.intersect(connections2)\n    if (commonList.any()) {\n        println(\"There are duplicate elements in the two lists.\")\n    } else {\n        println(\"There are no duplicate elements in the two lists.\")\n    }\n} else {\n    println(\"One or both of the lists are null.\")\n}",
    "filename": "dcc89072380309612ca617c02f9fe974_5.kt"
  },
  {
    "conversation_hash": "dcc89072380309612ca617c02f9fe974",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "val connections1: List<Int>? = listOf(1, 2, 3, 4, 5)\nval connections2: List<Int>? = listOf(6, 5, 4, 3, 2)\n\nif (connections1 == null || connections2 == null) {\n    println(\"One or both of the lists are null.\")\n} else {\n    val commonList = connections1.intersect(connections2)\n    if (commonList.any()) {\n        println(\"There are duplicate elements in the two lists.\")\n    } else {\n        println(\"There are no duplicate elements in the two lists.\")\n    }\n}",
    "filename": "dcc89072380309612ca617c02f9fe974_6.kt"
  },
  {
    "conversation_hash": "dcc89072380309612ca617c02f9fe974",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "private var connectingFirstDevice: Device? = null\n\nprivate fun connectDevices(event: DeviceClickedEvent) {\n    connectingFirstDevice?.let { firstDevice ->\n        val firstList = firstDevice.connections\n        val secondList = event.device.connections\n        if (!firstList.isNullOrEmpty() && !secondList.isNullOrEmpty() && !firstList.intersect(secondList).any()) {\n            insertConnection(firstDevice, event.device)\n        }\n        connectingFirstDevice = null\n    } ?: run {\n        connectingFirstDevice = event.device\n    }\n}",
    "filename": "dcc89072380309612ca617c02f9fe974_7.kt"
  },
  {
    "conversation_hash": "dcc89072380309612ca617c02f9fe974",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun insertConnection(firstDevice: Device, secondDevice: Device) {\n    insertDevice(\n        device = firstDevice.copy(\n            connections = (firstDevice.connections ?: emptyList()) + secondDevice.id\n        )\n    )\n}",
    "filename": "dcc89072380309612ca617c02f9fe974_8.kt"
  },
  {
    "conversation_hash": "67625935593e587c8c2c79ce98f2a323",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AutoShrinkText(text: String) {\n    Box(\n        modifier = Modifier.fillMaxWidth()\n            .height(100.dp)\n    ) {\n        Column(\n            modifier = Modifier.fillMaxHeight().wrapContentSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            TextWithContentDynamicSizing(\n                text = text,\n                maxLines = 3,\n                softWrap = true,\n                textStyle = MaterialTheme.typography.h6.copy(textAlign = TextAlign.Center)\n            )\n        }\n    }\n}",
    "filename": "67625935593e587c8c2c79ce98f2a323_3.kt"
  },
  {
    "conversation_hash": "67625935593e587c8c2c79ce98f2a323",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun DynamicSizingTextBlock(text: String) {\n    Box(Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {\n        TextWithContentDynamicSizing(\n            text = text,\n            textStyle = TextStyle(fontSize = 24.sp),\n            modifier = Modifier.fillMaxWidth()\n        )\n    }\n}",
    "filename": "67625935593e587c8c2c79ce98f2a323_6.kt"
  },
  {
    "conversation_hash": "1f07584d25288895e9b3f08b23a36e3d",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class FirstFragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        val view = inflater.inflate(R.layout.fragment_first, container, false)\n\n        // Находим кнопку и устанавливаем обработчик клика\n        val shareButton = view.findViewById<Button>(R.id.share_button)\n        shareButton.setOnClickListener {\n            // Создаем новый Intent\n            val shareIntent = Intent(Intent.ACTION_SEND)\n            shareIntent.type = \"text/plain\"\n            shareIntent.putExtra(Intent.EXTRA_TEXT, \"Текст информации, которую нужно передать\")\n\n            // Указываем пакет и класс для обработки запроса на прием информации\n            shareIntent.setClassName(\"com.example.secondapp\", \"com.example.secondapp.SecondActivity\")\n\n            // Запускаем созданный Intent\n            startActivity(shareIntent)\n        }\n\n        return view\n    }\n\n}",
    "filename": "1f07584d25288895e9b3f08b23a36e3d_4.kt"
  },
  {
    "conversation_hash": "e09bfe1c0eced1142cb4d9f53879654c",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Controller\n@RequestMapping(\"/api\")\nclass ApiController {\n    @GetMapping(\"/redirect/{id}\")\n    fun redirect(@PathVariable id: String, response: HttpServletResponse) {\n        if (id != \"test\") { //校验id是否为test\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST)\n            return\n        } else {\n            val location = \"http://www.example.com\"\n            response.status = HttpServletResponse.SC_MOVED_TEMPORARILY\n            response.setHeader(\"Location\", location)\n        }\n    }\n}",
    "filename": "e09bfe1c0eced1142cb4d9f53879654c_1.kt"
  },
  {
    "conversation_hash": "e09bfe1c0eced1142cb4d9f53879654c",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "io.ktor.application.",
      "io.ktor.http.",
      "io.ktor.response.",
      "io.ktor.routing.",
      "java.io.File"
    ],
    "code": "import io.ktor.application.*\nimport io.ktor.http.*\nimport io.ktor.response.*\nimport io.ktor.routing.*\nimport java.io.File\n\nfun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)\n\nfun Application.module() {\n    routing {\n        get(\"/file\") {\n            val file = File(\"file.txt\")\n            call.respondFile(file)\n        }\n    }\n}",
    "filename": "e09bfe1c0eced1142cb4d9f53879654c_3.kt"
  },
  {
    "conversation_hash": "e09bfe1c0eced1142cb4d9f53879654c",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Controller\n@RequestMapping(\"/api\")\nclass ApiController {\n    @GetMapping(\"/redirect/{id}\")\n    fun redirect(@PathVariable id: String, response: HttpServletResponse) {\n        if (id != \"test\") { //校验id是否为test\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST)\n            return\n        } else {\n            val redirectUrl = \"http://www.example.com\"\n            val headers = mapOf(\n                    \"Auth-Token\" to \"someToken\",\n                    \"Content-Type\" to \"application/json\"\n            )\n            val body = \"{\\\"key\\\": \\\"value\\\"}\"\n            \n            response.status = HttpServletResponse.SC_MOVED_TEMPORARILY\n            response.setHeader(\"Location\", redirectUrl)\n            \n            // 将要返回的信息存储到Map对象中\n            val redirectInfo = mapOf(\"headers\" to headers, \"body\" to body)\n            response.setHeader(\"redirectInfo\", redirectInfo.toString())\n        }\n    }\n}",
    "filename": "e09bfe1c0eced1142cb4d9f53879654c_6.kt"
  },
  {
    "conversation_hash": "e09bfe1c0eced1142cb4d9f53879654c",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "@PostMapping(\"/redirect/test\")\n   fun redirect(@RequestBody user: UserRequest, response: HttpServletResponse) {\n       if(user.name != \"Bob\") {\n           response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n           return;\n       } else {\n           val headers = mapOf(\n                   \"Auth-Token\" to \"someToken\",\n                   \"Content-Type\" to \"application/json\"\n           )\n           val obj = json // 上述代码序列化后的json字符串\n   \n           response.status = HttpServletResponse.SC_MOVED_TEMPORARILY\n           response.setHeader(\"Location\", \"http://www.example.com\")\n   \n           // 将要返回的信息存储到Map对象中\n           val redirectInfo = mapOf(\"headers\" to headers, \"body\" to obj)\n           val redirectInfoEncoded = URLEncoder.encode(gson.toJson(redirectInfo), \"UTF-8\")\n           response.setHeader(\"redirectInfo\", redirectInfoEncoded)\n       }\n   }",
    "filename": "e09bfe1c0eced1142cb4d9f53879654c_10.kt"
  },
  {
    "conversation_hash": "e09bfe1c0eced1142cb4d9f53879654c",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Controller\n@RequestMapping(\"/api\")\nclass ApiController {\n    data class UserRequest(val name: String)\n    data class UserInfo(val id: String, val name: String, val age: Int)\n   \n    @PostMapping(\"/redirect/test\")\n    fun redirect(@RequestBody user: UserRequest, response: HttpServletResponse) {\n        if(user.name != \"Bob\") {\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n        } else {\n            val headers = mapOf(\n                    \"Auth-Token\" to \"someToken\",\n                    \"Content-Type\" to \"application/json\"\n            )\n            val userInfo = UserInfo(\"001\", \"Bob\", 30)\n            val gson = Gson()\n            val json = gson.toJson(userInfo)\n            \n            response.status = HttpServletResponse.SC_MOVED_TEMPORARILY\n            response.setHeader(\"Location\", \"http://www.example.com\")\n   \n            // 将要返回的信息存储到Map对象中\n            val redirectInfo = mapOf(\"headers\" to headers, \"body\" to json)\n            val redirectInfoEncoded = URLEncoder.encode(gson.toJson(redirectInfo), \"UTF-8\")\n            response.setHeader(\"redirectInfo\", redirectInfoEncoded)\n        }\n    }\n}",
    "filename": "e09bfe1c0eced1142cb4d9f53879654c_12.kt"
  },
  {
    "conversation_hash": "e09bfe1c0eced1142cb4d9f53879654c",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class User(val name: String, val age: Int)\n   \n   val user = User(\"Bob\", 30)\n   val gson = Gson()\n   val json = gson.toJson(user)\n   \n   val url = \"http://www.example.com/api/redirect/test\"\n   val httpClient = HttpClientBuilder.create().build()\n   val post = HttpPost(url)\n   post.setHeader(\"Content-Type\", \"application/json\")\n   post.entity = StringEntity(json)\n   \n   val response = httpClient.execute(post)",
    "filename": "e09bfe1c0eced1142cb4d9f53879654c_13.kt"
  },
  {
    "conversation_hash": "e09bfe1c0eced1142cb4d9f53879654c",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class User(val name: String, val age: Int)\n   \n   @PostMapping(\"/redirect/test\")\n   fun redirectTest(@RequestParam(name = \"id\") id: String,\n                    @RequestBody user: User, \n                    response: HttpServletResponse) {\n       if(id != \"test\") {\n           response.sendError(HttpServletResponse.SC_BAD_REQUEST)\n           return\n       } else {\n           val headers = mapOf<String, String>(\n                   \"Auth-Token\" to \"someToken\",\n                   \"Content-Type\" to \"application/json\"\n           )\n           \n           val redirectUrl = \"http://www.example.com\"\n           val userInfo = mapOf<String, Any>(\n                   \"name\" to user.name,\n                   \"age\" to user.age\n           )\n           \n           response.status = HttpServletResponse.SC_MOVED_TEMPORARILY\n           response.setHeader(\"Location\", redirectUrl)\n           \n           val redirectInfo = mapOf<String, Any>(\n                   \"headers\" to headers,\n                   \"body\" to userInfo\n           )\n           response.setHeader(\"redirectInfo\", gson.toJson(redirectInfo))\n       }\n   }",
    "filename": "e09bfe1c0eced1142cb4d9f53879654c_14.kt"
  },
  {
    "conversation_hash": "e09bfe1c0eced1142cb4d9f53879654c",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Controller\n@RequestMapping(\"/api\")\nclass ApiController {\n    data class User(val name: String, val age: Int)\n   \n    @PostMapping(\"/redirect/test\")\n    fun redirectTest(@RequestParam(name = \"id\") id: String,\n                     @RequestBody user: User, \n                     response: HttpServletResponse) {\n        if(id != \"test\") {\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST)\n            return\n        } else {\n            val headers = mapOf<String, String>(\n                    \"Auth-Token\" to \"someToken\",\n                    \"Content-Type\" to \"application/json\"\n            )\n           \n            val redirectUrl = \"http://www.example.com\"\n            val userInfo = mapOf<String, Any>(\n                    \"name\" to user.name,\n                    \"age\" to user.age\n            )\n           \n            response.status = HttpServletResponse.SC_MOVED_TEMPORARILY\n            response.setHeader(\"Location\", redirectUrl)\n           \n            val redirectInfo = mapOf<String, Any>(\n                    \"headers\" to headers,\n                    \"body\" to userInfo\n            )\n            response.setHeader(\"redirectInfo\", gson.toJson(redirectInfo))\n        }\n    }\n}",
    "filename": "e09bfe1c0eced1142cb4d9f53879654c_15.kt"
  },
  {
    "conversation_hash": "50449947ede561402e86aeb88b80900f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Controller\nclass MyController {\n    \n    @PostMapping(\"/interface1\")\n    fun interface1(@RequestParam(name = \"param1\") param1: String,\n                   @RequestParam(name = \"param2\") param2: String):\n            ResponseEntity<HttpStatus> {\n\n        // 进行参数校验\n        if (param1.isNullOrEmpty() || param2.isNullOrEmpty()) {\n            return ResponseEntity.badRequest().build()\n        }\n\n        // 重定向到某个网页地址\n        val headers = HttpHeaders()\n        headers.add(\"Location\", \"https://www.example.com\")\n        return ResponseEntity(headers, HttpStatus.FOUND)\n    }\n}",
    "filename": "50449947ede561402e86aeb88b80900f_0.kt"
  },
  {
    "conversation_hash": "50449947ede561402e86aeb88b80900f",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@RestController\nclass TestController {\n\n    @PostMapping(\"/test\")\n    fun redirect(): ResponseEntity<String> {\n        val headers = HttpHeaders()\n        headers.location = URI.create(\"https://www.example.com/\")\n        return ResponseEntity(headers, HttpStatus.PERMANENT_REDIRECT)\n    }\n}",
    "filename": "50449947ede561402e86aeb88b80900f_1.kt"
  },
  {
    "conversation_hash": "50449947ede561402e86aeb88b80900f",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun doPost(req: HttpServletRequest, resp: HttpServletResponse) {\n    val url = URL(\"https://www.example.com/api\")\n    val connection = url.openConnection() as HttpURLConnection\n    connection.requestMethod = \"POST\"\n    connection.doOutput = true\n    connection.doInput = true\n\n    // 通过向连接写入数据，触发请求发送\n    val outputStream = connection.outputStream\n    val body = \"username=test&password=123\"\n    outputStream.write(body.toByteArray())\n    outputStream.flush()\n    outputStream.close()\n\n    // 获取响应结果\n    val status = connection.responseCode\n    val reader = BufferedReader(InputStreamReader(connection.inputStream))\n    val content = StringBuffer()\n    var line: String?\n    while (reader.readLine().also { line = it } != null) {\n        content.append(line)\n    }\n    reader.close()\n\n    // 设置响应结果\n    resp.contentType = \"text/plain;charset=UTF-8\"\n    resp.status = status\n    resp.writer.write(content.toString())\n}",
    "filename": "50449947ede561402e86aeb88b80900f_3.kt"
  },
  {
    "conversation_hash": "50449947ede561402e86aeb88b80900f",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Controller\nclass MyController {\n    \n    @GetMapping(\"/interface1\")\n    fun interface1(@RequestParam(name = \"param1\") param1: String,\n                   @RequestParam(name = \"param2\") param2: String):\n            ResponseEntity<HttpStatus> {\n\n        // 进行参数校验\n        if (param1.isNullOrEmpty() || param2.isNullOrEmpty()) {\n            return ResponseEntity.badRequest().build()\n        }\n\n        // 重定向到某个POST url地址\n        val url = \"https://www.example.com/post\"\n        val headers = HttpHeaders()\n        headers.location = URI.create(url)\n        headers.contentType = MediaType.APPLICATION_FORM_URLENCODED\n        val request = RequestEntity.post(URI.create(url))\n                .accept(MediaType.APPLICATION_JSON)\n                .contentType(MediaType.APPLICATION_FORM_URLENCODED)\n                .body(\"param1=$param1&param2=$param2\")\n        return restTemplate.exchange(request, String::class.java)\n    }\n}",
    "filename": "50449947ede561402e86aeb88b80900f_4.kt"
  },
  {
    "conversation_hash": "50449947ede561402e86aeb88b80900f",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Controller\nclass MyController {\n    \n    @GetMapping(\"/interface1\")\n    fun interface1(@RequestParam(name = \"param1\") param1: String,\n                   @RequestParam(name = \"param2\") param2: String,\n                   response: HttpServletResponse) {\n\n        // 进行参数校验\n        if (param1.isNullOrEmpty() || param2.isNullOrEmpty()) {\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"参数校验失败\")\n            return\n        }\n\n        // 重定向到某个url地址\n        response.sendRedirect(\"https://www.example.com/post\")\n    }\n}",
    "filename": "50449947ede561402e86aeb88b80900f_5.kt"
  },
  {
    "conversation_hash": "9e6306bc620875e317eee548ca6c1a8e",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.net.HttpURLConnection",
      "java.net.URL"
    ],
    "code": "import java.net.HttpURLConnection\nimport java.net.URL\n\nfun main() {\n    val url = URL(\"http://example.com/test\")\n    val connection = url.openConnection() as HttpURLConnection\n    connection.requestMethod = \"POST\"\n    connection.setRequestProperty(\"Content-Type\", \"application/json\")\n    connection.doOutput = true\n    val body = \"{\\\"foo\\\":\\\"bar\\\"}\"\n    connection.outputStream.write(body.toByteArray())\n\n    if (connection.responseCode == HttpURLConnection.HTTP_OK) {\n        val redirectUrl = connection.getHeaderField(\"Location\")\n        val redirectConn = URL(redirectUrl).openConnection() as HttpURLConnection\n        redirectConn.requestMethod = \"GET\"\n        redirectConn.setRequestProperty(\"Authorization\", \"Bearer token\")\n        redirectConn.connect()\n\n        val response = redirectConn.inputStream.bufferedReader().readText()\n        println(response)\n    } else {\n        println(\"Error: ${connection.responseCode} ${connection.responseMessage}\")\n    }\n\n    connection.disconnect()\n}",
    "filename": "9e6306bc620875e317eee548ca6c1a8e_0.kt"
  },
  {
    "conversation_hash": "9e6306bc620875e317eee548ca6c1a8e",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "java.io.OutputStreamWriter",
      "java.net.HttpURLConnection",
      "java.net.URL"
    ],
    "code": "import java.io.OutputStreamWriter\nimport java.net.HttpURLConnection\nimport java.net.URL\n\nfun main() {\n    // 要访问的接口\n    val apiEndpoint = \"http://example.com/api\"\n\n    // 创建HTTP连接\n    val apiUrl = URL(apiEndpoint)\n    val connection = apiUrl.openConnection() as HttpURLConnection\n\n    // 设置请求方法\n    connection.requestMethod = \"POST\"\n    connection.doOutput = true\n\n    // 设置请求参数\n    val requestBody = \"param1=foo&param2=bar\"\n    val requestHeaders = mapOf<String, String>(\n        \"Content-Type\" to \"application/x-www-form-urlencoded\",\n        \"X-Auth-Token\" to \"1234\"\n    )\n\n    // 写入请求参数\n    val requestBodyWriter = OutputStreamWriter(connection.outputStream)\n    requestBodyWriter.write(requestBody)\n    requestBodyWriter.flush()\n    requestBodyWriter.close()\n\n    // 发送请求并获取响应\n    val responseCode = connection.responseCode\n    if (responseCode == HttpURLConnection.HTTP_OK) {\n        // 如果响应码为200，则接口校验通过，可以进行重定向\n\n        // 提取所需参数并构建重定向URL及其参数\n        val param1 = connection.getHeaderField(\"param1\")\n        val redirectUrl = \"http://example.com/redirect?param1=$param1&param2=xyz\"\n\n        // 创建重定向连接并设置Headers\n        val redirectUrlObject = URL(redirectUrl)\n        val redirectConnection = redirectUrlObject.openConnection() as HttpURLConnection\n        requestHeaders.forEach { (key, value) -> redirectConnection.setRequestProperty(key, value) }\n\n        // 写入请求参数并发送重定向请求\n        val redirectRequestBody = \"requestParam1=abc&requestParam2=def\"\n        val redirectRequestBodyWriter = OutputStreamWriter(redirectConnection.outputStream)\n        redirectRequestBodyWriter.write(redirectRequestBody)\n        redirectRequestBodyWriter.flush()\n        redirectRequestBodyWriter.close()\n\n        // 获取重定向响应\n        val redirectResponse = redirectConnection.inputStream.bufferedReader().readText()\n        println(redirectResponse)\n    } else {\n        println(\"Failed to access the API endpoint ($responseCode)\")\n        // 如果接口校验失败，则可以在这里进行适当的错误处理并抛出异常\n    }\n    connection.disconnect()\n}",
    "filename": "9e6306bc620875e317eee548ca6c1a8e_1.kt"
  },
  {
    "conversation_hash": "9e6306bc620875e317eee548ca6c1a8e",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "java.io.OutputStreamWriter",
      "java.net.HttpURLConnection",
      "java.net.URL"
    ],
    "code": "import java.io.OutputStreamWriter\nimport java.net.HttpURLConnection\nimport java.net.URL\n\nfun main() {\n    // 要访问的test接口\n    val testEndpoint = \"http://example.com/test\"\n\n    // 创建HTTP连接\n    val testUrl = URL(testEndpoint)\n    val connection = testUrl.openConnection() as HttpURLConnection\n\n    // 设置请求方法\n    connection.requestMethod = \"POST\"\n    connection.doOutput = true\n\n    // 设置请求参数\n    val requestBody = \"param1=foo&param2=bar\"\n    val requestHeaders = mapOf<String, String>(\n        \"Content-Type\" to \"application/x-www-form-urlencoded\",\n        \"X-Auth-Token\" to \"1234\"\n    )\n\n    // 写入请求参数\n    val requestBodyWriter = OutputStreamWriter(connection.outputStream)\n    requestBodyWriter.write(requestBody)\n    requestBodyWriter.flush()\n    requestBodyWriter.close()\n\n    // 发送请求并获取响应\n    val responseCode = connection.responseCode\n    if (responseCode == HttpURLConnection.HTTP_OK) {\n        // 如果响应码为200，则接口校验通过，可以进行重定向\n\n        // 提取所需参数并构建重定向URL及其参数\n        val param1 = connection.getHeaderField(\"param1\")\n        val redirectUrl = \"http://example.com/redirect?param1=$param1&param2=xyz\"\n\n        // 创建重定向连接并设置Headers\n        val redirectUrlObject = URL(redirectUrl)\n        val redirectConnection = redirectUrlObject.openConnection() as HttpURLConnection\n        requestHeaders.forEach { (key, value) -> redirectConnection.setRequestProperty(key, value) }\n\n        // 写入请求参数并发送重定向请求\n        val redirectRequestBody = \"requestParam1=abc&requestParam2=def\"\n        val redirectRequestBodyWriter = OutputStreamWriter(redirectConnection.outputStream)\n        redirectRequestBodyWriter.write(redirectRequestBody)\n        redirectRequestBodyWriter.flush()\n        redirectRequestBodyWriter.close()\n\n        // 获取重定向响应\n        val redirectResponse = redirectConnection.inputStream.bufferedReader().readText()\n        println(redirectResponse)\n    } else {\n        println(\"Failed to access the test endpoint ($responseCode)\")\n        // 如果接口校验失败，则可以在这里进行适当的错误处理并抛出异常\n    }\n    connection.disconnect()\n}",
    "filename": "9e6306bc620875e317eee548ca6c1a8e_2.kt"
  },
  {
    "conversation_hash": "d442407b9302e7acae327a15b4faed9e",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "if (validateParameter(parameter)) {\n    val headers = mapOf(\"Authorization\" to \"token\")\n    val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonBody)\n    val request = Request.Builder()\n        .url(\"https://redirect.com/url\")\n        .headers(Headers.of(headers))\n        .post(body)\n        .build()\n    return Response.Builder()\n        .code(307)\n        .header(\"Location\", \"https://redirect.com/url\")\n        .build()\n}",
    "filename": "d442407b9302e7acae327a15b4faed9e_1.kt"
  },
  {
    "conversation_hash": "d442407b9302e7acae327a15b4faed9e",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun callApi() {\n    val client = OkHttpClient()\n    val request = Request.Builder()\n        .url(\"http://example.com/api\")\n        .build()\n    val response = client.newCall(request).execute()\n\n    if (response.isSuccessful) {\n        // 校验参数\n        val parameter = response.body()?.string() ?: \"\"\n        if (validateParameter(parameter)) {\n            // 请求重定向并携带 headers 和 body\n            val headers = mapOf(\"Authorization\" to \"token\")\n            val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonBody)\n            val request = Request.Builder()\n                .url(\"https://redirect.com/url\")\n                .headers(Headers.of(headers))\n                .post(body)\n                .build()\n            val redirectResponse = Response.Builder()\n                .code(307)\n                .header(\"Location\", \"https://redirect.com/url\")\n                .build()\n            return redirectResponse\n        }\n    }\n}\n\nfun validateParameter(parameter: String): Boolean {\n    // TODO: 校验参数逻辑\n    return true\n}",
    "filename": "d442407b9302e7acae327a15b4faed9e_2.kt"
  },
  {
    "conversation_hash": "d442407b9302e7acae327a15b4faed9e",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "if (validateParameter(param1, param2)) {\n    val headers = mapOf(\"Authorization\" to \"token\")\n    val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonBody)\n    val request = Request.Builder()\n        .url(\"https://redirect.com/url\")\n        .headers(Headers.of(headers))\n        .post(body)\n        .build()\n    return Response.Builder()\n        .code(307)\n        .header(\"Location\", \"https://redirect.com/url\")\n        .build()\n}",
    "filename": "d442407b9302e7acae327a15b4faed9e_4.kt"
  },
  {
    "conversation_hash": "d442407b9302e7acae327a15b4faed9e",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun callApi(param1: String, param2: String) {\n    val client = OkHttpClient()\n    val request = Request.Builder()\n        .url(\"http://example.com/api?param1=$param1&param2=$param2\")\n        .build()\n    val response = client.newCall(request).execute()\n\n    if (response.isSuccessful) {\n        // 校验参数\n        if (validateParameter(param1, param2)) {\n            // 请求重定向并携带 headers 和 body\n            val headers = mapOf(\"Authorization\" to \"token\")\n            val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonBody)\n            val request = Request.Builder()\n                .url(\"https://redirect.com/url\")\n                .headers(Headers.of(headers))\n                .post(body)\n                .build()\n            val redirectResponse = Response.Builder()\n                .code(307)\n                .header(\"Location\", \"https://redirect.com/url\")\n                .build()\n            return redirectResponse\n        }\n    }\n}\n\nfun validateParameter(param1: String, param2: String): Boolean {\n    // TODO: 校验参数逻辑\n    return true\n}",
    "filename": "d442407b9302e7acae327a15b4faed9e_5.kt"
  },
  {
    "conversation_hash": "d442407b9302e7acae327a15b4faed9e",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "val responseUrl = response.request().url().toString()\nval responseQueryParams = response.request().url().queryParameterNames()\nval param1 = responseQueryParams.get(\"param1\")\nval param2 = responseQueryParams.get(\"param2\")\n\nif (validateParameter(param1, param2)) {\n    val headers = mapOf(\"Authorization\" to \"token\")\n    val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonBody)\n    val request = Request.Builder()\n        .url(\"https://redirect.com/url\")\n        .headers(Headers.of(headers))\n        .post(body)\n        .build()\n    return Response.Builder()\n        .code(307)\n        .header(\"Location\", \"https://redirect.com/url\")\n        .build()\n}",
    "filename": "d442407b9302e7acae327a15b4faed9e_7.kt"
  },
  {
    "conversation_hash": "d442407b9302e7acae327a15b4faed9e",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun callApi() {\n    val client = OkHttpClient()\n    val request = Request.Builder()\n        .url(\"http://example.com/api\")\n        .build()\n    val response = client.newCall(request).execute()\n\n    if (response.isSuccessful) {\n        // 获取原始请求的URL和参数\n        val responseUrl = response.request().url().toString()\n        val responseQueryParams = response.request().url().queryParameterNames()\n        val param1 = responseQueryParams.get(\"param1\")\n        val param2 = responseQueryParams.get(\"param2\")\n        \n        // 校验参数\n        if (validateParameter(param1, param2)) {\n            // 请求重定向并携带 headers 和 body\n            val headers = mapOf(\"Authorization\" to \"token\")\n            val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonBody)\n            val request = Request.Builder()\n                .url(\"https://redirect.com/url\")\n                .headers(Headers.of(headers))\n                .post(body)\n                .build()\n            val redirectResponse = Response.Builder()\n                .code(307)\n                .header(\"Location\", \"https://redirect.com/url\")\n                .build()\n            return redirectResponse\n        }\n    }\n}\n\nfun validateParameter(param1: String?, param2: String?): Boolean {\n    // TODO: 校验参数逻辑\n    return true\n}",
    "filename": "d442407b9302e7acae327a15b4faed9e_8.kt"
  },
  {
    "conversation_hash": "d442407b9302e7acae327a15b4faed9e",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun callApi() {\n    val client = OkHttpClient()\n    val url = HttpUrl.parse(\"https://example.com/redirect?param1=value1&param2=value2\")\n    val request = Request.Builder()\n        .url(url)\n        .header(\"Authorization\", \"Bearer token\")\n        .build()\n    val response = client.newCall(request).execute()\n\n    if (response.isSuccessful) {\n        // 处理返回结果\n    }\n}",
    "filename": "d442407b9302e7acae327a15b4faed9e_10.kt"
  },
  {
    "conversation_hash": "d442407b9302e7acae327a15b4faed9e",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "val client = OkHttpClient()\nval url = HttpUrl.parse(\"http://example.com/api?param1=value1&param2=value2\")\n    ?.newBuilder()\n    ?.addQueryParameter(\"user_param1\", userParam1)\n    ?.addQueryParameter(\"user_param2\", userParam2)\n    ?.build()\nval request = Request.Builder()\n    .url(url)\n    .build()\nval response = client.newCall(request).execute()",
    "filename": "d442407b9302e7acae327a15b4faed9e_11.kt"
  },
  {
    "conversation_hash": "d442407b9302e7acae327a15b4faed9e",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "val queryParams = response.request().url().queryParameterNames()\nval param1 = queryParams.get(\"param1\")\nval param2 = queryParams.get(\"param2\")\nval userParam1 = queryParams.get(\"user_param1\")\nval userParam2 = queryParams.get(\"user_param2\")\n\nif (validateParameter(param1, param2, userParam1, userParam2)) {\n    val headers = mapOf(\"Authorization\" to \"token\")\n    val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonBody)\n    val request = Request.Builder()\n        .url(\"https://redirect.com/url\")\n        .headers(Headers.of(headers))\n        .post(body)\n        .build()\n    return Response.Builder()\n        .code(307)\n        .header(\"Location\", \"https://redirect.com/url\")\n        .build()\n}",
    "filename": "d442407b9302e7acae327a15b4faed9e_12.kt"
  },
  {
    "conversation_hash": "d442407b9302e7acae327a15b4faed9e",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun callApi(userParam1: String, userParam2: String) {\n    val client = OkHttpClient()\n    val url = HttpUrl.parse(\"http://example.com/api?param1=value1&param2=value2\")\n        ?.newBuilder()\n        ?.addQueryParameter(\"user_param1\", userParam1)\n        ?.addQueryParameter(\"user_param2\", userParam2)\n        ?.build()\n    val request = Request.Builder()\n        .url(url)\n        .build()\n    val response = client.newCall(request).execute()\n\n    if (response.isSuccessful) {\n        // 获取原始请求的URL和参数\n        val queryParams = response.request().url().queryParameterNames()\n        val param1 = queryParams.get(\"param1\")\n        val param2 = queryParams.get(\"param2\")\n        val userParam1 = queryParams.get(\"user_param1\")\n        val userParam2 = queryParams.get(\"user_param2\")\n        \n        // 校验参数\n        if (validateParameter(param1, param2, userParam1, userParam2)) {\n            // 请求重定向并携带 headers 和 body\n            val headers = mapOf(\"Authorization\" to \"token\")\n            val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonBody)\n            val request = Request.Builder()\n                .url(\"https://redirect.com/url\")\n                .headers(Headers.of(headers))\n                .post(body)\n                .build()\n            val redirectResponse = Response.Builder()\n                .code(307)\n                .header(\"Location\", \"https://redirect.com/url\")\n                .build()\n            return redirectResponse\n        }\n    }\n}\n\nfun validateParameter(param1: String?, param2: String?, userParam1: String?, userParam2: String?): Boolean {\n    // TODO: 校验参数逻辑\n    return true\n}",
    "filename": "d442407b9302e7acae327a15b4faed9e_13.kt"
  },
  {
    "conversation_hash": "c35a432bdde97b6a3ac73d961a249ee9",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.net.URLEncoder"
    ],
    "code": "import java.net.URLEncoder\n\n// 定义一个接口\ninterface MyInterface {\n    fun redirectToPage(userId: Int)\n}\n\n// 实现接口的类\nclass MyInterfaceImpl : MyInterface {\n    override fun redirectToPage(userId: Int) {\n        // 进行参数校验\n        if (userId > 0) {\n            // 构造重定向地址\n            val url = \"http://www.example.com/?userId=\" + URLEncoder.encode(userId.toString(), \"UTF-8\")\n            // 跳转到重定向地址\n            println(\"Redirecting to $url\")\n        } else {\n            println(\"Invalid userId\")\n        }\n    }\n}\n\nfun main() {\n    // 创建实例并调用\n    val myInterface = MyInterfaceImpl()\n    myInterface.redirectToPage(123)\n}",
    "filename": "c35a432bdde97b6a3ac73d961a249ee9_0.kt"
  },
  {
    "conversation_hash": "c35a432bdde97b6a3ac73d961a249ee9",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "io.ktor.client.HttpClient",
      "io.ktor.client.engine.apache.Apache",
      "io.ktor.client.request.get",
      "io.ktor.client.request.parameter",
      "io.ktor.http.HttpStatusCode",
      "io.ktor.http.Url"
    ],
    "code": "import io.ktor.client.HttpClient\nimport io.ktor.client.engine.apache.Apache\nimport io.ktor.client.request.get\nimport io.ktor.client.request.parameter\nimport io.ktor.http.HttpStatusCode\nimport io.ktor.http.Url\n\nsuspend fun redirectToPage(userId: Int) {\n    // 进行参数校验\n    if (userId > 0) {\n        val client = HttpClient(Apache)\n        val url = \"http://www.example.com/?userId=$userId\"\n        val response = client.get<HttpResponse>(Url(url)) {\n            parameter(\"userId\", userId)\n        }\n\n        if (response.status == HttpStatusCode.Found) {\n            // 重定向到指定地址\n            response.headers.getAll(\"Location\")?.firstOrNull()?.let { location ->\n                println(\"Redirecting to $location\")\n            }\n        } else {\n            println(\"Failed to redirect: ${response.status}\")\n        }\n    } else {\n        println(\"Invalid userId\")\n    }\n}",
    "filename": "c35a432bdde97b6a3ac73d961a249ee9_1.kt"
  },
  {
    "conversation_hash": "c35a432bdde97b6a3ac73d961a249ee9",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "io.ktor.client.HttpClient",
      "io.ktor.client.engine.apache.Apache",
      "io.ktor.client.request.post",
      "io.ktor.client.request.url",
      "io.ktor.http.ContentType",
      "io.ktor.http.content.TextContent"
    ],
    "code": "import io.ktor.client.HttpClient\nimport io.ktor.client.engine.apache.Apache\nimport io.ktor.client.request.post\nimport io.ktor.client.request.url\nimport io.ktor.http.ContentType\nimport io.ktor.http.content.TextContent\n\nsuspend fun redirectAndPost(url: String, requestBody: String) {\n    val client = HttpClient(Apache)\n\n    // 发送重定向请求\n    val response = client.get<HttpResponse>(url)\n\n    if (response.status.isSuccess()) {\n        val redirectUrl = response.headers[\"Location\"]\n\n        if (!redirectUrl.isNullOrBlank()) {\n            // 发送 POST 请求，并携带请求体参数\n            val postResponse = client.post<String> {\n                url(redirectUrl)\n                body = TextContent(requestBody, ContentType.Application.Json)\n            }\n\n            println(postResponse)\n        } else {\n            println(\"Redirect URL not found in response\")\n        }\n    } else {\n        println(\"Redirect failed with status ${response.status}\")\n    }\n}",
    "filename": "c35a432bdde97b6a3ac73d961a249ee9_2.kt"
  },
  {
    "conversation_hash": "1ecf603691ea376fb3bfa71ca10e38f0",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Test\nfun testPositiveNumber() {\n    val actualValue = calculateSquare(5)\n    assertEquals(25, actualValue)\n}",
    "filename": "1ecf603691ea376fb3bfa71ca10e38f0_0.kt"
  },
  {
    "conversation_hash": "1ecf603691ea376fb3bfa71ca10e38f0",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Test\nfun testNegativeNumber() {\n    val actualValue = calculateSquare(-5)\n    assertEquals(25, actualValue)\n}",
    "filename": "1ecf603691ea376fb3bfa71ca10e38f0_1.kt"
  },
  {
    "conversation_hash": "1ecf603691ea376fb3bfa71ca10e38f0",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Test\nfun testAddElementToList() {\n    val list = mutableListOf<String>()\n    list.add(\"test\")\n    assertTrue(list.contains(\"test\"))\n}",
    "filename": "1ecf603691ea376fb3bfa71ca10e38f0_2.kt"
  },
  {
    "conversation_hash": "1ecf603691ea376fb3bfa71ca10e38f0",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Test\nfun testEmptyString() {\n    val actualValue = reverseString(\"\")\n    assertEquals(\"\", actualValue)\n}",
    "filename": "1ecf603691ea376fb3bfa71ca10e38f0_3.kt"
  },
  {
    "conversation_hash": "1ecf603691ea376fb3bfa71ca10e38f0",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Test\nfun testSingleCharacterString() {\n    val actualValue = reverseString(\"a\")\n    assertEquals(\"a\", actualValue)\n}",
    "filename": "1ecf603691ea376fb3bfa71ca10e38f0_4.kt"
  },
  {
    "conversation_hash": "1ecf603691ea376fb3bfa71ca10e38f0",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Test\nfun testMultiCharacterString() {\n    val actualValue = reverseString(\"kotlin\")\n    assertEquals(\"niltok\", actualValue)\n}",
    "filename": "1ecf603691ea376fb3bfa71ca10e38f0_5.kt"
  },
  {
    "conversation_hash": "1ecf603691ea376fb3bfa71ca10e38f0",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Test\nfun testSumArrayElements() {\n    val array = intArrayOf(1, 2, 3, 4, 5)\n    val actualValue = sumArray(array)\n    assertEquals(15, actualValue)\n}",
    "filename": "1ecf603691ea376fb3bfa71ca10e38f0_6.kt"
  },
  {
    "conversation_hash": "1ecf603691ea376fb3bfa71ca10e38f0",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Test\nfun testClearList() {\n    val list = mutableListOf(\"a\", \"b\", \"c\")\n    list.clear()\n    assertTrue(list.isEmpty())\n}",
    "filename": "1ecf603691ea376fb3bfa71ca10e38f0_7.kt"
  },
  {
    "conversation_hash": "1ecf603691ea376fb3bfa71ca10e38f0",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Test\nfun testHasDuplicates() {\n    val list = listOf(\"a\", \"b\", \"a\")\n    assertTrue(hasDuplicates(list))\n}",
    "filename": "1ecf603691ea376fb3bfa71ca10e38f0_8.kt"
  },
  {
    "conversation_hash": "1ecf603691ea376fb3bfa71ca10e38f0",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Test\nfun testSortList() {\n    val list = mutableListOf(3, 2, 1)\n    val actualValue = sortList(list)\n    assertEquals(listOf(1, 2, 3), actualValue)\n}",
    "filename": "1ecf603691ea376fb3bfa71ca10e38f0_9.kt"
  },
  {
    "conversation_hash": "b16a961a58e6d73d38a0a80fcda7e375",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun DisplayToast() {\n    val scaffoldState = rememberScaffoldState()\n    val scope = rememberCoroutineScope()\n\n    LaunchedEffect(scaffoldState.snackbarHostState) {\n        scaffoldState.snackbarHostState.currentSnackbarData?.let { data ->\n            scope.launch {\n                val result = scaffoldState.snackbarHostState.showSnackbar(data)\n                if (result == SnackbarResult.Dismissed) {\n                    // Handle the dismiss event\n                }\n            }\n        }\n    }\n\n    // Display the Snackbar\n    scaffoldState.SnackbarHost(\n        hostState = scaffoldState.snackbarHostState,\n        snackbar = {\n            Snackbar(\n                action = {\n                    TextButton(onClick = {\n                        scaffoldState.snackbarHostState.currentSnackbarData?.dismiss()\n                    }) {\n                        Text(\"DISMISS\")\n                    }\n                }\n            ) {\n                Text(\"Toast Message in Compose\")\n            }\n        }\n    )\n}",
    "filename": "b16a961a58e6d73d38a0a80fcda7e375_0.kt"
  },
  {
    "conversation_hash": "faaa409dc06002130a796217e5d297fa",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "if (connectingFirstDevice == null) {\n    connectingFirstDevice = event.device\n    return\n}\n\nif (connectingFirstDevice!!.id == event.device.id) {\n    return\n}\n\nval firstList = connectingFirstDevice!!.connections ?: emptyList()\nval secondList = event.device.connections ?: emptyList()\n\nif (!firstList.intersect(secondList).any()) {\n    insertConnection(firstDevice = connectingFirstDevice!!, secondDevice = event.device)\n}",
    "filename": "faaa409dc06002130a796217e5d297fa_0.kt"
  },
  {
    "conversation_hash": "0ab2630b1a32d0c2c146001adc134dab",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Worker(private val num: Int) : Runnable {\n    private var running = AtomicBoolean(true)\n    override fun run() {\n        while (running.get()) {\n            try {\n                println(\"Worker #$num is running\")\n                Thread.sleep(1000)\n            } catch (e: InterruptedException) {\n                Thread.currentThread().interrupt()\n                e.printStackTrace()\n            }\n        }\n    }\n    fun stop() {\n        this.running.set(false)\n    }\n}",
    "filename": "0ab2630b1a32d0c2c146001adc134dab_1.kt"
  },
  {
    "conversation_hash": "0ab2630b1a32d0c2c146001adc134dab",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class SecondFragment : Fragment() {\n    private val executor = Executors.newFixedThreadPool(4)\n    private val workers = mutableListOf<Worker>()\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_second, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        btnStart.setOnClickListener {\n            for (i in 1..4) {\n                val worker = Worker(i)\n                workers.add(worker)\n                executor.execute(worker)\n            }\n        }\n\n        btnStop.setOnClickListener {\n            for (worker in workers) {\n                worker.stop()\n            }\n            executor.shutdown()\n            executor.awaitTermination(10, TimeUnit.SECONDS)\n        }\n    }\n}",
    "filename": "0ab2630b1a32d0c2c146001adc134dab_2.kt"
  },
  {
    "conversation_hash": "0ab2630b1a32d0c2c146001adc134dab",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Worker(private val num: Int) : Thread() {\n    private var running = AtomicBoolean(true)\n    override fun run() {\n        while (running.get()) {\n            try {\n                println(\"Worker #$num is running\")\n                Thread.sleep(1000)\n            } catch (e: InterruptedException) {\n                Thread.currentThread().interrupt()\n                e.printStackTrace()\n            }\n        }\n    }\n\n    fun stopWorker() {\n        running.set(false)\n    }\n}",
    "filename": "0ab2630b1a32d0c2c146001adc134dab_3.kt"
  },
  {
    "conversation_hash": "38429501ae684a00a63941a33292d64d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun NavigationHost(\n    navController: NavController,\n    modifier: Modifier = Modifier,\n) {\n    val categoriesViewModel = remember { CategoriesViewModel() }\n    val categories by categoriesViewModel.categories.collectAsState() // use collectAsState here to collect the latest state\n    NavHost(navController = navController as NavHostController, startDestination = Screen.Home.route) {\n        composable(Screen.Home.route) {\n            HomeScreen(categories = categories, navController = navController, modifier = modifier)\n        }\n        composable(Screen.Favorites.route) {\n            FavoritesScreen(categories = categories, navController = navController, modifier = modifier)\n        }\n    }\n}",
    "filename": "38429501ae684a00a63941a33292d64d_0.kt"
  },
  {
    "conversation_hash": "38429501ae684a00a63941a33292d64d",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "setContent {\n    DeezerMusicPlayerTheme {\n        // Set up navigation\n        val navController = rememberNavController()\n        val bottomNavigationItems = listOf(\n            Screen.Home,\n            Screen.Favorites\n        )\n        Scaffold(\n            bottomBar = {\n                BottomNavigation {\n                    val navBackStackEntry by navController.currentBackStackEntryAsState()\n                    val currentRoute = navBackStackEntry?.destination?.route\n                    bottomNavigationItems.forEach { screen ->\n                        BottomNavigationItem(\n                            icon = {\n                                Icon(\n                                    imageVector = screen.icon,\n                                    contentDescription = null\n                                )\n                            },\n                            selected = currentRoute == screen.route,\n                            onClick = {\n                                navController.navigate(screen.route) {\n                                    // Pop up to the start destination of the current graph to\n                                    // avoid building up a large stack of destinations\n                                    // on the back stack as users select items\n                                    popUpTo(navController.graph.startDestinationId) {\n                                        saveState = true\n                                    }\n                                    // Avoid multiple copies of the same destination when\n                                    // reselecting the same item\n                                    launchSingleTop = true\n                                    restoreState = true\n                                }\n                            },\n                            label = {\n                                Text(text = screen.title)\n                            }\n                        )\n                    }\n                }\n            },\n            content = { paddingValues ->\n                NavigationHost(\n                    navController = navController,\n                    modifier = Modifier.padding(paddingValues) // Apply the paddingValues here\n                )\n            }\n        )\n    }\n}",
    "filename": "38429501ae684a00a63941a33292d64d_1.kt"
  },
  {
    "conversation_hash": "1f7e0cdbac1625bdd3cbbe35b51619b4",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onEvent(event: EmulatorEvent.DeviceConnect) {\n    if (connectingFirstDevice == null) {\n        connectingFirstDevice = event.device\n    } else if (connectingFirstDevice.id != event.device.id) {\n        val firstList = connectingFirstDevice.connections\n        val secondList = event.device.connections\n        if (firstList != null && secondList != null && firstList.intersect(secondList).isEmpty()) {\n            insertConnection(firstDevice = connectingFirstDevice, secondDevice = event.device)\n        } else {\n            insertConnection(firstDevice = connectingFirstDevice, secondDevice = event.device)\n        }\n    }\n}",
    "filename": "1f7e0cdbac1625bdd3cbbe35b51619b4_0.kt"
  },
  {
    "conversation_hash": "1f7e0cdbac1625bdd3cbbe35b51619b4",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onEvent(event: EmulatorEvent) {\n    when (event) {\n        is EmulatorEvent.DeviceConnect -> {\n            if (connectingFirstDevice == null) {\n                connectingFirstDevice = event.device\n            } else {\n                if (connectingFirstDevice!!.id != event.device.id) {\n                    val firstList = connectingFirstDevice!!.connections\n                    val secondList = event.device.connections\n                    if (firstList != null && secondList != null) {\n                        if (!firstList.intersect(secondList).any()) {\n                            insertConnection(\n                                firstDevice = connectingFirstDevice!!,\n                                secondDevice = event.device!!\n                            )\n                        }\n                    } else {\n                        insertConnection(\n                            firstDevice = connectingFirstDevice!!,\n                            secondDevice = event.device!!\n                        )\n                    }\n                }\n            }\n        }\n    }\n}",
    "filename": "1f7e0cdbac1625bdd3cbbe35b51619b4_1.kt"
  },
  {
    "conversation_hash": "1f7e0cdbac1625bdd3cbbe35b51619b4",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onEvent(event: EmulatorEvent) {\n    when (event) {\n        is EmulatorEvent.DeviceConnect -> {\n            if (connectingFirstDevice == null) {\n                connectingFirstDevice = event.device\n            } else if (connectingFirstDevice.id != event.device.id) {\n                val firstList = connectingFirstDevice.connections\n                val secondList = event.device.connections\n                insertConnection(\n                    firstDevice = connectingFirstDevice!!,\n                    secondDevice = event.device!!\n                )\n            }\n        }\n    }\n}",
    "filename": "1f7e0cdbac1625bdd3cbbe35b51619b4_2.kt"
  },
  {
    "conversation_hash": "1f7e0cdbac1625bdd3cbbe35b51619b4",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onEvent(event: EmulatorEvent.DeviceConnect) {\n    if (connectingFirstDevice == null) {\n        connectingFirstDevice = event.device\n    } else if (connectingFirstDevice.id != event.device.id) {\n        val firstList = connectingFirstDevice.connections ?: emptyList()\n        val secondList = event.device.connections ?: emptyList()\n        val noCommonConnections = firstList.intersect(secondList).isEmpty()\n        if (noCommonConnections) {\n            insertConnection(\n                firstDevice = connectingFirstDevice!!,\n                secondDevice = event.device!!\n            )\n            connectingFirstDevice = null // Reset the first device for the next connection.\n        }\n    }\n}",
    "filename": "1f7e0cdbac1625bdd3cbbe35b51619b4_3.kt"
  },
  {
    "conversation_hash": "1f7e0cdbac1625bdd3cbbe35b51619b4",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onEvent(event: EmulatorEvent.DeviceConnect) {\n    if (connectingFirstDevice == null) {\n        connectingFirstDevice = event.device\n    } else if (connectingFirstDevice.id != event.device.id) {\n        val firstList = connectingFirstDevice.connections?.toSet() ?: emptySet()\n        val secondList = event.device.connections?.toSet() ?: emptySet()\n\n        if (firstList.intersect(secondList).isEmpty()) {\n            insertConnection(\n                firstDevice = connectingFirstDevice!!,\n                secondDevice = event.device!!\n            )\n            connectingFirstDevice = null // Reset first device for the next connection\n        }\n    }\n}",
    "filename": "1f7e0cdbac1625bdd3cbbe35b51619b4_4.kt"
  },
  {
    "conversation_hash": "0e2dde65df52879b353e26803d7e7049",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "enum class Decision(val label: String) {\n    SKIP(\"Skip this one\"),\n    CLEAR(\"Clear this one\");\n\n    override fun toString(): String {\n        return label\n    }\n}",
    "filename": "0e2dde65df52879b353e26803d7e7049_0.kt"
  },
  {
    "conversation_hash": "fd971469438220cdf19cb93e772bf7f1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun NavigationHost(\n    navController: NavController,\n    modifier: Modifier = Modifier,\n) {\n    val categoriesViewModel = remember { CategoriesViewModel() }\n    val categories by categoriesViewModel.categories.collectAsState() // use collectAsState here to collect the latest state\n\n    // Set the ViewModelStore before creating the NavHost:\n    if (navController is NavHostController) {\n        navController.setViewModelStore(ViewModelStore())\n    }\n\n    NavHost(navController = navController, startDestination = Screen.Home.route) {\n        composable(Screen.Home.route) {\n            HomeScreen(categories = categories, navController = navController, modifier = modifier)\n        }\n        composable(Screen.Favorites.route) {\n            FavoritesScreen(categories = categories, navController = navController, modifier = modifier)\n        }\n    }\n}",
    "filename": "fd971469438220cdf19cb93e772bf7f1_1.kt"
  },
  {
    "conversation_hash": "1a11629f72dd8674bae33d269ac8b7f5",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun NavigationHost(\n    navController: NavController,\n    modifier: Modifier = Modifier,\n) {\n    val categoriesViewModel = remember { CategoriesViewModel() }\n    val categories by categoriesViewModel.categories.collectAsState() // use collectAsState here to collect the latest state\n\n    // Set the ViewModelStore before creating the NavHost:\n    if (navController is NavHostController) {\n        navController.setViewModelStore(ViewModelStore())\n    }\n\n    NavHost(navController = navController as NavHostController, startDestination = Screen.Home.route) {\n        composable(Screen.Home.route) {\n            HomeScreen(categories = categories, navController = navController, modifier = modifier)\n        }\n        composable(Screen.Favorites.route) {\n            FavoritesScreen(categories = categories, navController = navController, modifier = modifier)\n        }\n    }\n}",
    "filename": "1a11629f72dd8674bae33d269ac8b7f5_0.kt"
  },
  {
    "conversation_hash": "1a11629f72dd8674bae33d269ac8b7f5",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "here"
    ],
    "code": "@Composable\nfun HomeScreen(\n    categories: List<Category>,\n    navController: NavController,\n    modifier: Modifier = Modifier\n) {\n    // Removed BottomNavigation code from here\n    Scaffold(content = { paddingValues ->\n        NavigationHost(\n            navController = navController,\n            modifier = Modifier.padding(paddingValues)\n        )\n    })\n}",
    "filename": "1a11629f72dd8674bae33d269ac8b7f5_1.kt"
  },
  {
    "conversation_hash": "5e4d1731584557c532530b68227c3ea7",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun HomeScreen(\n    categories: List<Category>,\n    navController: NavController,\n    modifier: Modifier = Modifier\n) {\n    // HomeScreen content goes here (not the Scaffold)\n}",
    "filename": "5e4d1731584557c532530b68227c3ea7_0.kt"
  },
  {
    "conversation_hash": "5e4d1731584557c532530b68227c3ea7",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "setContent {\n    DeezerMusicPlayerTheme {\n        // Set up navigation\n        val navController = rememberNavController()\n\n        Scaffold(\n            bottomBar = {\n                BottomNavigation {\n                  // BottomNavigation code\n                }\n            },\n            content = { paddingValues ->\n                NavigationHost(\n                    navController = navController,\n                    modifier = Modifier.padding(paddingValues)\n                )\n            }\n        )\n    }\n}",
    "filename": "5e4d1731584557c532530b68227c3ea7_1.kt"
  },
  {
    "conversation_hash": "a409393f0dc4216649f2d3edbb363862",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface TodoListPresenter {\n    fun addTodoItem(title: String, description: String)\n    fun deleteTodoItem(id: Int)\n    fun updateTodoItem(todoItem: TodoItem)\n    fun loadTodoItems()\n}\n\nclass TodoListPresenterImpl(private val view: TodoListView, private val model: TodoList): TodoListPresenter {\n\n    override fun addTodoItem(title: String, description: String) {\n        val newId = model.todoItems.size  // generate a new id\n        val newTodoItem = TodoItem(newId, title, description, false)\n        model.todoItems.add(newTodoItem)\n        view.onTodoItemsUpdated(model.todoItems)\n    }\n\n    override fun deleteTodoItem(id: Int) {\n        model.todoItems.removeIf { it.id == id }\n        view.onTodoItemsUpdated(model.todoItems)\n    }\n\n    override fun updateTodoItem(todoItem: TodoItem) {\n        model.todoItems.replaceAll { if (it.id == todoItem.id) todoItem else it }\n        view.onTodoItemsUpdated(model.todoItems)\n    }\n\n    override fun loadTodoItems() {\n        view.onTodoItemsUpdated(model.todoItems)\n    }\n\n}",
    "filename": "a409393f0dc4216649f2d3edbb363862_1.kt"
  },
  {
    "conversation_hash": "a409393f0dc4216649f2d3edbb363862",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface TodoListView {\n    fun onTodoItemsUpdated(todoItems: List<TodoItem>)\n}\n\nclass MainActivity : AppCompatActivity(), TodoListView {\n\n    private lateinit var presenter: TodoListPresenter\n    private val adapter = TodoListAdapter(mutableListOf())\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        presenter = TodoListPresenterImpl(this, TodoList(mutableListOf()))\n\n        setupRecyclerView()\n        setupAddButton()\n\n        presenter.loadTodoItems()\n    }\n\n    override fun onTodoItemsUpdated(todoItems: List<TodoItem>) {\n        adapter.updateItems(todoItems.toMutableList())\n    }\n\n    private fun setupRecyclerView() {\n        recyclerView.adapter = adapter\n        recyclerView.layoutManager = LinearLayoutManager(this)\n    }\n\n    private fun setupAddButton() {\n        fab.setOnClickListener {\n            val title = editTextTitle.text.toString()\n            val description = editTextDescription.text.toString()\n            presenter.addTodoItem(title, description)\n            editTextTitle.text.clear()\n            editTextDescription.text.clear()\n        }\n    }\n\n}\n\nclass TodoListAdapter(private val todoItems: MutableList<TodoItem>): \n    RecyclerView.Adapter<TodoListAdapter.ViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.todo_item, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val todoItem = todoItems[position]\n        holder.bind(todoItem)\n    }\n\n    override fun getItemCount(): Int {\n        return todoItems.size\n    }\n\n    fun updateItems(newItems: MutableList<TodoItem>) {\n        with(todoItems) {\n            clear()\n            addAll(newItems)\n        }\n        notifyDataSetChanged()\n    }\n\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n\n        private val textViewTitle: TextView = itemView.findViewById(R.id.textViewTitle)\n        private val textViewDescription: TextView = itemView.findViewById(R.id.textViewDescription)\n        private val checkBoxCompleted: CheckBox = itemView.findViewById(R.id.checkBoxCompleted)\n\n        fun bind(todoItem: TodoItem) {\n            textViewTitle.text = todoItem.title\n            textViewDescription.text = todoItem.description\n            checkBoxCompleted.isChecked = todoItem.isCompleted\n\n            checkBoxCompleted.setOnCheckedChangeListener { _, isChecked ->\n                val updatedTodoItem = todoItem.copy(isCompleted = isChecked)\n                (itemView.context as MainActivity).presenter.updateTodoItem(updatedTodoItem)\n            }\n\n            itemView.setOnLongClickListener {\n                (itemView.context as MainActivity).presenter.deleteTodoItem(todoItem.id)\n                true\n            }\n        }\n\n    }\n\n}",
    "filename": "a409393f0dc4216649f2d3edbb363862_2.kt"
  },
  {
    "conversation_hash": "57bb17b16ddd01ad9e7b94f1a0d2b368",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.activity.ComponentActivity",
      "androidx.activity.compose.setContent",
      "androidx.compose.foundation.layout.padding",
      "androidx.compose.material.",
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.getValue",
      "androidx.compose.runtime.remember",
      "androidx.compose.ui.Modifier",
      "androidx.lifecycle.ViewModelStore",
      "androidx.navigation.NavController",
      "androidx.navigation.NavHostController",
      "androidx.navigation.compose.NavHost",
      "androidx.navigation.compose.composable",
      "androidx.navigation.compose.currentBackStackEntryAsState",
      "androidx.navigation.compose.rememberNavController",
      "com.example.deezermusicplayer.ui.theme.DeezerMusicPlayerTheme"
    ],
    "code": "import androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.lifecycle.ViewModelStore\nimport androidx.navigation.NavController\nimport androidx.navigation.NavHostController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.currentBackStackEntryAsState\nimport androidx.navigation.compose.rememberNavController\nimport com.example.deezermusicplayer.ui.theme.DeezerMusicPlayerTheme\n\nclass MainActivity : ComponentActivity() {\n    private val bottomNavigationItems = listOf(\n        Screen.Home,\n        Screen.Favorites\n    )\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            DeezerMusicPlayerTheme {\n                // Set up navigation\n                val navController = rememberNavController()\n\n                Scaffold(\n                    bottomBar = {\n                        BottomNavigation {\n                            val navBackStackEntry by navController.currentBackStackEntryAsState()\n                            val currentRoute = navBackStackEntry?.destination?.route\n                            bottomNavigationItems.forEach { screen ->\n                                BottomNavigationItem(\n                                    icon = { Icon(Icons.Default.Home, contentDescription = null) }, // Set your custom icons here\n                                    label = { Text(screen.name) },\n                                    selected = currentRoute == screen.route,\n                                    onClick = {\n                                        navController.navigate(screen.route) {\n                                            popUpTo(navController.graph.startDestinationId)\n                                            launchSingleTop = true\n                                        }\n                                    }\n                                )\n                            }\n                        }\n                    },\n                    content = { paddingValues ->\n                        NavigationHost(\n                            navController = navController,\n                            modifier = Modifier.padding(paddingValues)\n                        )\n                    }\n                )\n            }\n        }\n    }\n\n    @Composable\n    fun NavigationHost(\n        navController: NavController,\n        modifier: Modifier = Modifier,\n    ) {\n        val categoriesViewModel = remember { CategoriesViewModel() }\n        val categories by categoriesViewModel.categories.collectAsState()\n\n        if (navController is NavHostController) {\n            navController.setViewModelStore(ViewModelStore())\n        }\n\n        NavHost(navController = navController as NavHostController, startDestination = Screen.Home.route) {\n            composable(Screen.Home.route) {\n                HomeScreen(categories = categories, navController = navController, modifier = modifier)\n            }\n            composable(Screen.Favorites.route) {\n                FavoritesScreen(categories = categories, navController = navController, modifier = modifier)\n            }\n        }\n    }\n\n    @Composable\n    fun HomeScreen(\n        categories: List<Category>,\n        navController: NavController,\n        modifier: Modifier = Modifier\n    ) {\n        // HomeScreen content goes here (not the Scaffold)\n        MusicCategoriesScreen(categories = categories) { category ->\n            // Handle the selected category here\n        }\n    }\n    \n    @Composable\n    fun FavoritesScreen(categories: List<Category>, navController: NavController, modifier: Modifier = Modifier) {\n\n    }\n}",
    "filename": "57bb17b16ddd01ad9e7b94f1a0d2b368_0.kt"
  },
  {
    "conversation_hash": "4905668cab1a0ce449dc569cd2c7510a",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MusicCategoriesScreen(\n    categories: List<Category>,\n    onCategorySelected: (Category) -> Unit = {},\n    modifier: Modifier = Modifier\n) {\n    // Rest of the code\n}",
    "filename": "4905668cab1a0ce449dc569cd2c7510a_0.kt"
  },
  {
    "conversation_hash": "4905668cab1a0ce449dc569cd2c7510a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun HomeScreen(\n    categories: List<Category>,\n    navController: NavController,\n    modifier: Modifier = Modifier\n) {\n    MusicCategoriesScreen(categories = categories)\n}",
    "filename": "4905668cab1a0ce449dc569cd2c7510a_1.kt"
  },
  {
    "conversation_hash": "a156b6f46144e87f9f8a9db9549de438",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun NavigationHost(\n    navController: NavController,\n    modifier: Modifier = Modifier,\n) {\n    val categoriesViewModel = remember { CategoriesViewModel() }\n    val categories by categoriesViewModel.categories.collectAsState()\n\n    if (navController is NavHostController) {\n        navController.setViewModelStore(ViewModelStore())\n    }\n\n    NavHost(navController = navController, startDestination = Screen.Home.route) {\n        composable(Screen.Home.route) {\n            HomeScreen(categories = categories, navController = navController, modifier = modifier)\n        }\n        composable(Screen.Favorites.route) {\n            FavoritesScreen(categories = categories, navController = navController, modifier = modifier)\n        }\n    }\n}",
    "filename": "a156b6f46144e87f9f8a9db9549de438_0.kt"
  },
  {
    "conversation_hash": "675fa526da34c3cd2daee4cdc1c07297",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun BottomBar(navController: NavController, bottomNavigationItems: List<Screen>) {\n    val navBackStackEntry by navController.currentBackStackEntryAsState()\n    val currentRoute = navBackStackEntry?.destination?.route\n\n    BottomNavigation() {\n        bottomNavigationItems.forEach { screen ->\n            BottomNavigationItem(\n                icon = { Icon(Icons.Default.Home, contentDescription = null) }, // Set your custom icons here\n                label = { Text(screen.title) },\n                selected = currentRoute == screen.route,\n                onClick = {\n                    navController.navigate(screen.route) {\n                        popUpTo(navController.graph.startDestinationId)\n                        launchSingleTop = true\n                    }\n                }\n            )\n        }\n    }\n}",
    "filename": "675fa526da34c3cd2daee4cdc1c07297_0.kt"
  },
  {
    "conversation_hash": "675fa526da34c3cd2daee4cdc1c07297",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : ComponentActivity() {\n    private val bottomNavigationItems = listOf(\n        Screen.Home,\n        Screen.Favorites\n    )\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            DeezerMusicPlayerTheme {\n                val navController = rememberNavController()\n\n                Scaffold(\n                    bottomBar = { BottomBar(navController, bottomNavigationItems) },\n                    content = { paddingValues ->\n                        val navHostController = navController as NavHostController\n                        NavigationHost(\n                            navController = navHostController,\n                            modifier = Modifier.padding(paddingValues)\n                        )\n                    }\n                )\n            }\n        }\n    }\n\n    @Composable\n    fun BottomBar(navController: NavController, bottomNavigationItems: List<Screen>) {\n        val navBackStackEntry by navController.currentBackStackEntryAsState()\n        val currentRoute = navBackStackEntry?.destination?.route\n\n        BottomNavigation() {\n            bottomNavigationItems.forEach { screen ->\n                BottomNavigationItem(\n                    icon = { Icon(Icons.Default.Home, contentDescription = null) }, // Set your custom icons here\n                    label = { Text(screen.title) },\n                    selected = currentRoute == screen.route,\n                    onClick = {\n                        navController.navigate(screen.route) {\n                            popUpTo(navController.graph.startDestinationId)\n                            launchSingleTop = true\n                        }\n                    }\n                )\n            }\n        }\n    }\n\n    // ... Rest of your code (NavigationHost, HomeScreen, FavoritesScreen, etc.)\n}",
    "filename": "675fa526da34c3cd2daee4cdc1c07297_2.kt"
  },
  {
    "conversation_hash": "8699917c3805f974165de225ef1d774b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val selectedScreen = remember { mutableStateOf(0) }\n    Scaffold(\n        bottomBar = { BottomBar(selectedScreen.value, onItemSelected = { index -> selectedScreen.value = index }) }\n    ) {\n        when (selectedScreen.value) {\n            0 -> FirstScreen()\n            1 -> SecondScreen()\n        }\n    }\n}",
    "filename": "8699917c3805f974165de225ef1d774b_1.kt"
  },
  {
    "conversation_hash": "8699917c3805f974165de225ef1d774b",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun BottomBar(selectedScreen: Int, onItemSelected: (Int) -> Unit) {\n    BottomAppBar {\n        BottomNavigationItem(\n            icon = { Icon(painterResource(R.drawable.ic_first_screen), contentDescription = null) },\n            selected = selectedScreen == 0,\n            onClick = { onItemSelected(0) }\n        )\n        BottomNavigationItem(\n            icon = { Icon(painterResource(R.drawable.ic_second_screen), contentDescription = null) },\n            selected = selectedScreen == 1,\n            onClick = { onItemSelected(1) }\n        )\n    }\n}",
    "filename": "8699917c3805f974165de225ef1d774b_2.kt"
  },
  {
    "conversation_hash": "8699917c3805f974165de225ef1d774b",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MainScreen()\n        }\n    }\n}",
    "filename": "8699917c3805f974165de225ef1d774b_3.kt"
  },
  {
    "conversation_hash": "39649d0f3001c1845cd2ad31f5c80120",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FirstScreen(modifier: Modifier = Modifier) {\n    val categoriesViewModel: CategoriesViewModel = viewModel()\n    ...\n}",
    "filename": "39649d0f3001c1845cd2ad31f5c80120_0.kt"
  },
  {
    "conversation_hash": "39649d0f3001c1845cd2ad31f5c80120",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FirstScreen(modifier: Modifier = Modifier) {\n    val categoriesViewModel: CategoriesViewModel = viewModel()\n    val categories by categoriesViewModel.categories.collectAsState()\n\n    Scaffold(\n        ...\n        content = { padding ->\n            Column(\n                modifier = modifier.padding(padding)\n            ) {\n                MusicCategoriesScreen(categories = categories)\n            }\n        }\n    )\n}",
    "filename": "39649d0f3001c1845cd2ad31f5c80120_1.kt"
  },
  {
    "conversation_hash": "39649d0f3001c1845cd2ad31f5c80120",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.Modifier",
      "androidx.hilt.navigation.compose.hiltViewModel"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.hilt.navigation.compose.hiltViewModel\n\n@Composable\nfun FirstScreen(modifier: Modifier = Modifier) {\n    val categoriesViewModel: CategoriesViewModel = hiltViewModel()\n    ...\n}",
    "filename": "39649d0f3001c1845cd2ad31f5c80120_7.kt"
  },
  {
    "conversation_hash": "39649d0f3001c1845cd2ad31f5c80120",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FirstScreen(modifier: Modifier = Modifier) {\n    val categoriesViewModel: CategoriesViewModel = viewModel()\n    val categories by categoriesViewModel.categories.collectAsState()\n\n    Scaffold(\n        ...\n    )\n}",
    "filename": "39649d0f3001c1845cd2ad31f5c80120_10.kt"
  },
  {
    "conversation_hash": "39649d0f3001c1845cd2ad31f5c80120",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FirstScreen(modifier: Modifier = Modifier) {\n    val categoriesViewModel: CategoriesViewModel = viewModel()\n\n    /* Note the change here: */\n    val categories by categoriesViewModel.categories.collectAsState()\n\n    Scaffold(\n        ...\n    )\n}",
    "filename": "39649d0f3001c1845cd2ad31f5c80120_13.kt"
  },
  {
    "conversation_hash": "abe92b9ce6b0ef762c32c3628d3bb887",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.Column",
      "androidx.compose.foundation.layout.PaddingValues",
      "androidx.compose.foundation.lazy.LazyColumn",
      "androidx.compose.foundation.lazy.rememberLazyListState",
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.Modifier",
      "androidx.compose.ui.unit.dp",
      "com.example.Category"
    ],
    "code": "import androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.rememberLazyListState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport com.example.Category // assuming your Category class is in this package\n\n\n@Composable\nfun MusicCategoriesScreen(\n    categories: List<Category>,\n    onCategorySelected: (Category) -> Unit = {},\n    modifier: Modifier = Modifier\n) {\n    val listState = rememberLazyListState()\n\n    LazyColumn(\n        state = listState,\n        contentPadding = PaddingValues(16.dp),\n        modifier = modifier\n    ) {\n        items(categories.chunked(2)) { row ->\n            androidx.compose.foundation.layout.Row(modifier = Modifier.fillMaxWidth()) {\n                row.forEach { category ->\n                    CategoryItem(category) {\n                        onCategorySelected(category)\n                    }\n                }\n            }\n        }\n    }\n}",
    "filename": "abe92b9ce6b0ef762c32c3628d3bb887_0.kt"
  },
  {
    "conversation_hash": "11779bd84bf11be8a40a14b93f2666ec",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewModelScope",
      "com.example.musicapp.Data.Artist",
      "com.example.musicapp.Data.Repository.ArtistRepository",
      "kotlinx.coroutines.flow.MutableStateFlow",
      "kotlinx.coroutines.flow.StateFlow",
      "kotlinx.coroutines.launch"
    ],
    "code": "package com.example.musicapp.ViewModel\n\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.musicapp.Data.Artist\nimport com.example.musicapp.Data.Repository.ArtistRepository\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.launch\n\nclass ArtistsViewModel : ViewModel() {\n    private val artistRepository = ArtistRepository()\n    private val _artists = MutableStateFlow<List<Artist>>(emptyList())\n    val artists: StateFlow<List<Artist>>\n        get() = _artists\n\n    fun fetchArtists(genreId: Int) {\n        viewModelScope.launch {\n            try {\n                val artists = artistRepository.getArtists(genreId)\n                _artists.value = artists\n            } catch (e: Exception) {\n                Log.e(\"ArtistsViewModel\", \"Failed to fetch artists: ${e.message}\")\n            }\n        }\n    }\n}",
    "filename": "11779bd84bf11be8a40a14b93f2666ec_0.kt"
  },
  {
    "conversation_hash": "11779bd84bf11be8a40a14b93f2666ec",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.",
      "androidx.compose.material.",
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.getValue",
      "androidx.compose.runtime.livedata.observeAsState",
      "androidx.lifecycle.viewmodel.compose.viewModel",
      "com.example.musicapp.Data.Artist",
      "com.example.musicapp.ViewModel.ArtistsViewModel"
    ],
    "code": "package com.example.musicapp.Interface\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.livedata.observeAsState\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport com.example.musicapp.Data.Artist\nimport com.example.musicapp.ViewModel.ArtistsViewModel\n\n@Composable\nfun ArtistsDetailScreen(genre: Category) {\n    val artistsViewModel: ArtistsViewModel = viewModel()\n    artistsViewModel.fetchArtists(genre.id)\n    val artists by artistsViewModel.artists.collectAsState()\n    Scaffold(topBar = { TopBar(\"Genre Artists: ${genre.name}\") }) {\n        LazyColumn(contentPadding = PaddingValues(16.dp)) {\n            items(artists) { artist ->\n                ArtistItem(artist)\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun ArtistItem(artist: Artist) {\n    ListItem(text = { Text(artist.name) }, secondaryText = { Text(artist.id.toString()) })\n}",
    "filename": "11779bd84bf11be8a40a14b93f2666ec_1.kt"
  },
  {
    "conversation_hash": "11779bd84bf11be8a40a14b93f2666ec",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.activity.ComponentActivity",
      "androidx.activity.compose.setContent",
      "androidx.compose.runtime.Composable",
      "androidx.navigation.compose.NavHost",
      "androidx.navigation.compose.NavType",
      "androidx.navigation.compose.composable",
      "androidx.navigation.compose.navArgument",
      "androidx.navigation.compose.rememberNavController",
      "com.example.musicapp.Data.Category",
      "com.example.musicapp.ViewModel.CategoriesViewModel"
    ],
    "code": "package com.example.musicapp.Interface\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.runtime.Composable\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport androidx.navigation.compose.NavType\nimport androidx.navigation.compose.navArgument\nimport com.example.musicapp.Data.Category\nimport com.example.musicapp.ViewModel.CategoriesViewModel\n\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            val navController = rememberNavController()\n            NavHost(navController, startDestination = \"categories\") {\n                composable(\"categories\") { CategoriesScreen(navController) }\n                composable(\"category/{id}\", arguments = listOf(navArgument(\"id\") { type = NavType.IntType })) { backStackEntry ->\n                    val categoryId = backStackEntry.arguments?.getInt(\"id\")\n                    categoryId?.let {\n                        val viewModel: CategoriesViewModel = viewModel()\n                        val category = viewModel.categories.value.find { it.id == categoryId }\n                        if (category != null) {\n                            ArtistDetailScreen(category) {\n                                navController.popBackStack()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun CategoriesScreen(navController: NavController) {\n  val categoriesViewModel: CategoriesViewModel = viewModel()\n  val categories by categoriesViewModel.categories.collectAsState()\n  Scaffold(\n      topBar = { TopBar(\"Categories\") }\n  ) {\n    // Update onClick of category item\n    MusicCategoriesScreen(categories = categories, onClick = { category ->\n      navController.navigate(\"category/${category.id}\")\n    })\n  }\n}",
    "filename": "11779bd84bf11be8a40a14b93f2666ec_3.kt"
  },
  {
    "conversation_hash": "67793701caa4558ebcf5aac5a3a76b0f",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FirstScreen() {\n    val categoriesViewModel: CategoriesViewModel = viewModel()\n    val categories by categoriesViewModel.categories.collectAsState()\n    val selectedCategory = remember { mutableStateOf<Category?>(null) }\n\n    Scaffold(\n        content = { padding ->\n            Column(\n                modifier = Modifier.padding(padding)\n            ) {\n                if (selectedCategory.value == null) {\n                    MusicCategoriesScreen(categories = categories,\n                        onCategorySelected = { category -> selectedCategory.value = category },\n                        topBar = { TopBar(title = \"Music Categories\") }\n                    )\n                }\n            }\n        }\n    )\n}",
    "filename": "67793701caa4558ebcf5aac5a3a76b0f_1.kt"
  },
  {
    "conversation_hash": "67793701caa4558ebcf5aac5a3a76b0f",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "com.example.musicapp.Data.Artist",
      "com.example.musicapp.ViewModel.ArtistsViewModel"
    ],
    "code": "// Import these at the top of your file.\nimport com.example.musicapp.Data.Artist\nimport com.example.musicapp.ViewModel.ArtistsViewModel\n\n@Composable\nfun FirstScreen() {\n    val categoriesViewModel: CategoriesViewModel = viewModel()\n    val categories by categoriesViewModel.categories.collectAsState()\n    val selectedCategory = remember { mutableStateOf<Category?>(null) }\n\n    // Add this line to get the ArtistsViewModel instance.\n    val artistsViewModel: ArtistsViewModel = viewModel()\n\n    // Add this line to get the artists list by collecting the state.\n    val artists by artistsViewModel.artists.collectAsState()\n\n    Scaffold(\n        content = { padding ->\n            Column(\n                modifier = Modifier.padding(padding)\n            ) {\n                if (selectedCategory.value == null) {\n                    MusicCategoriesScreen(categories = categories,\n                        onCategorySelected = { category -> selectedCategory.value = category },\n                        topBar = { TopBar(title = \"Music Categories\") }\n                    )\n                } else {\n                    // Display ArtistsDetailScreen when a category is selected.\n                    ArtistsDetailScreen(\n                        genre = selectedCategory.value!!,\n                        artists = artists,\n                        onArtistSelected = { /* Handle artist selection here */ }\n                    )\n                }\n            }\n        }\n    )\n}",
    "filename": "67793701caa4558ebcf5aac5a3a76b0f_2.kt"
  },
  {
    "conversation_hash": "67793701caa4558ebcf5aac5a3a76b0f",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FirstScreen() {\n    // ...\n    \n    Scaffold(\n        content = { padding ->\n            Column(\n                modifier = Modifier.padding(padding)\n            ) {\n                if (selectedCategory.value == null) {\n                    // ...\n                } else {\n                    // Fetch artists for the selected category.\n                    artistsViewModel.fetchArtists(selectedCategory.value!!.id)\n\n                    ArtistsDetailScreen(\n                        genre = selectedCategory.value!!,\n                        artists = artists,\n                        onArtistSelected = { /* Handle artist selection here */ }\n                    )\n                }\n            }\n        }\n    )\n}",
    "filename": "67793701caa4558ebcf5aac5a3a76b0f_4.kt"
  },
  {
    "conversation_hash": "67793701caa4558ebcf5aac5a3a76b0f",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    NavHost(navController, startDestination = \"musicCategories\") {\n        composable(\"musicCategories\") {\n            CategoriesScreen(navController)\n        }\n        composable(\"artistsDetail/{categoryId}\") { backStackEntry ->\n            val categoryId = backStackEntry.arguments?.getString(\"categoryId\")?.toIntOrNull()\n            if (categoryId != null) {\n                ArtistsDetailScreen(navController, categoryId)\n            }\n        }\n    }\n}",
    "filename": "67793701caa4558ebcf5aac5a3a76b0f_6.kt"
  },
  {
    "conversation_hash": "67793701caa4558ebcf5aac5a3a76b0f",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun CategoriesScreen(navController: NavController) {\n    val categoriesViewModel: CategoriesViewModel = viewModel()\n    val categories by categoriesViewModel.categories.collectAsState()\n\n    Scaffold(\n        content = { padding ->\n            Column(\n                modifier = Modifier.padding(padding)\n            ) {\n                MusicCategoriesScreen(\n                    categories = categories,\n                    onCategorySelected = { category ->\n                        navController.navigate(\"artistsDetail/${category.id}\")\n                    },\n                    topBar = { TopBar(title = \"Music Categories\") }\n                )\n            }\n        }\n    )\n}",
    "filename": "67793701caa4558ebcf5aac5a3a76b0f_7.kt"
  },
  {
    "conversation_hash": "67793701caa4558ebcf5aac5a3a76b0f",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistsDetailScreen(navController: NavController, categoryId: Int) {\n    // Get CategoryViewModel and fetch category\n    val categoriesViewModel: CategoriesViewModel = viewModel()\n    val allCategories by categoriesViewModel.categories.collectAsState()\n    val category = allCategories.firstOrNull { it.id == categoryId }\n\n    // Get ArtistsViewModel and fetch artists\n    val artistsViewModel: ArtistsViewModel = viewModel()\n    val artists by artistsViewModel.artists.collectAsState()\n    artistsViewModel.fetchArtists(categoryId)\n\n    if (category != null) {\n        Scaffold(\n            topBar = { TopBar(title = category.name) },\n            content = { padding ->\n                Column(modifier = Modifier.padding(padding)) {\n                    ArtistsDetailScreenContent(\n                        genre = category,\n                        artists = artists,\n                        onArtistSelected = { /* Handle artist selection here */ }\n                    )\n                }\n            }\n        )\n    } else {\n        Text(\"Category not found\")\n    }\n}",
    "filename": "67793701caa4558ebcf5aac5a3a76b0f_8.kt"
  },
  {
    "conversation_hash": "67793701caa4558ebcf5aac5a3a76b0f",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistsDetailScreenContent(\n    genre: Category,\n    artists: List<Artist>,\n    onArtistSelected: (Artist) -> Unit = {}\n) {\n    // ...\n}",
    "filename": "67793701caa4558ebcf5aac5a3a76b0f_9.kt"
  },
  {
    "conversation_hash": "67793701caa4558ebcf5aac5a3a76b0f",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    NavHost(navController, startDestination = \"musicCategories\") {\n        composable(\"musicCategories\") {\n            val categoriesViewModel: CategoriesViewModel = viewModel()\n            val categories by categoriesViewModel.categories.collectAsState()\n\n            MusicCategoriesScreen(\n                categories = categories,\n                onCategorySelected = { category ->\n                    navController.navigate(\"artistsDetail/${category.id}\")\n                },\n                topBar = { TopBar(title = \"Music Categories\") }\n            )\n        }\n        composable(\"artistsDetail/{categoryId}\") { backStackEntry ->\n            val categoryId = backStackEntry.arguments?.getString(\"categoryId\")?.toIntOrNull()\n            if (categoryId != null) {\n                ArtistsDetailScreen(navController, categoryId)\n            }\n        }\n    }\n}",
    "filename": "67793701caa4558ebcf5aac5a3a76b0f_12.kt"
  },
  {
    "conversation_hash": "5f9b2c8a91b5b193cf74092f97a23eef",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    Scaffold(\n        bottomBar = {\n            BottomBar(selectedScreen = navController.currentBackStackEntry?.destination?.route, onItemSelected = { route ->\n                navController.navigate(route) {\n                    navController.graph.startDestinationRoute?.let {\n                        popUpTo(it) {\n                            saveState = true\n                        }\n                    }\n                    launchSingleTop = true\n                    restoreState = true\n                }\n            })\n        },\n        content = {\n            NavHost(navController, startDestination = \"musicCategories\") {\n                composable(\"musicCategories\") {\n                    MusicCategories(navController)\n                }\n                composable(\"secondScreen\") {\n                    SecondScreen()\n                }\n            }\n        }\n    )\n}\n\n@Composable\nfun MusicCategories(navController: NavController) {\n    val categoryNavController = rememberNavController()\n\n    Column {\n        TopBar(title = \"Music Categories\")\n\n        NavHost(categoryNavController, startDestination = \"categories\") {\n            composable(\"categories\") {\n                val categoriesViewModel: CategoriesViewModel = viewModel()\n                val categories by categoriesViewModel.categories.collectAsState()\n\n                MusicCategoriesScreen(\n                    categories = categories,\n                    onCategorySelected = { category ->\n                        categoryNavController.navigate(\"artistsDetail/${category.id}\")\n                    }\n                )\n            }\n            composable(\"artistsDetail/{categoryId}\") { backStackEntry ->\n                val categoryId = backStackEntry.arguments?.getString(\"categoryId\")?.toIntOrNull()\n                if (categoryId != null) {\n                    ArtistsDetailScreen(categoryId)\n                }\n            }\n        }\n    }\n\n    // When the back button is pressed, pop the nested navController first.\n    BackHandler(onBack = {\n        if (categoryNavController.currentBackStackEntry?.destination?.route != \"categories\") {\n            categoryNavController.popBackStack()\n        } else {\n            navController.navigate(\"secondScreen\")\n        }\n    })\n}\n\n@Composable\nfun BottomBar(selectedScreen: String?, onItemSelected: (String) -> Unit) {\n    BottomAppBar {\n        BottomNavigationItem(\n            icon = { Icon(painterResource(R.drawable.music_symbol), contentDescription = null) },\n            selected = selectedScreen == \"musicCategories\",\n            onClick = { onItemSelected(\"musicCategories\") }\n        )\n        BottomNavigationItem(\n            icon = { Icon(painterResource(R.drawable.heart_empty), contentDescription = null) },\n            selected = selectedScreen == \"secondScreen\",\n            onClick = { onItemSelected(\"secondScreen\") }\n        )\n    }\n}",
    "filename": "5f9b2c8a91b5b193cf74092f97a23eef_0.kt"
  },
  {
    "conversation_hash": "7aa268ea824d9727026d28854af06b0e",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistDetailScreen(artistId: Int) {\n    val artistsViewModel: ArtistsViewModel = viewModel()\n    artistsViewModel.fetchArtistDetails(artistId)\n    val artistDetails by artistsViewModel.artistDetails.collectAsState()\n\n    val artistDetail = artistDetails.firstOrNull()\n    artistDetail?.let {\n        Column {\n            Text(\n                text = it.name,\n                style = MaterialTheme.typography.h6,\n                modifier = Modifier.padding(start = 16.dp, end = 16.dp, top = 16.dp, bottom = 8.dp)\n            )\n\n            val painter = rememberAsyncImagePainter(model = it.pictureBig)\n            Image(\n                painter = painter,\n                contentDescription = it.name,\n                contentScale = ContentScale.Crop,\n                modifier = Modifier\n                    .align(Alignment.CenterHorizontally)\n                    .size(200.dp)\n            )\n\n            LazyColumn {\n                items(it.albums) { album ->\n                    ArtistDetailItem(album)\n                }\n            }\n        }\n    }\n}",
    "filename": "7aa268ea824d9727026d28854af06b0e_0.kt"
  },
  {
    "conversation_hash": "7aa268ea824d9727026d28854af06b0e",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistDetailItem(album: Album) {\n    Row(modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)) {\n        val painter = rememberAsyncImagePainter(model = album.cover_medium)\n        Image(\n            painter = painter,\n            contentDescription = album.title,\n            contentScale = ContentScale.Crop,\n            modifier = Modifier\n                .size(100.dp)\n                .align(Alignment.CenterVertically)\n        )\n\n        Column(\n            modifier = Modifier\n                .weight(1f) // 2/3 of the width\n                .padding(start = 16.dp)\n                .align(Alignment.CenterVertically)\n        ) {\n            Text(text = album.title, style = MaterialTheme.typography.subtitle1)\n            Text(text = album.release_date, style = MaterialTheme.typography.caption)\n        }\n    }\n}",
    "filename": "7aa268ea824d9727026d28854af06b0e_1.kt"
  },
  {
    "conversation_hash": "7aa268ea824d9727026d28854af06b0e",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    NavHost(navController, startDestination = \"musicCategories\") {\n        composable(\"musicCategories\") {\n            val categoriesViewModel: CategoriesViewModel = viewModel()\n            val categories by categoriesViewModel.categories.collectAsState()\n\n            MusicCategoriesScreen(\n                categories = categories,\n                onCategorySelected = { category ->\n                    navController.navigate(\"artistsDetail/${category.id}\")\n                },\n                topBar = { TopBar(title = \"Music Categories\") }\n            )\n        }\n        composable(\"artistsDetail/{categoryId}\") { backStackEntry ->\n            val categoryId = backStackEntry.arguments?.getString(\"categoryId\")?.toIntOrNull()\n            if (categoryId != null) {\n                ArtistsScreen(navController, categoryId)\n            }\n        }\n        // Add this line\n        composable(\"artistDetail/{artistId}\") { backStackEntry ->\n            val artistId = backStackEntry.arguments?.getString(\"artistId\")?.toIntOrNull()\n            if (artistId != null) {\n                ArtistDetailScreen(artistId)\n            }\n        }\n    }\n}",
    "filename": "7aa268ea824d9727026d28854af06b0e_2.kt"
  },
  {
    "conversation_hash": "7aa268ea824d9727026d28854af06b0e",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistsScreen(navController: NavController, categoryId: Int) {\n    // ...\n\n    if (category != null) {\n        Scaffold(\n            topBar = { TopBar(title = category.name) },\n            content = { padding ->\n                Column(modifier = Modifier.padding(padding)) {\n                    ArtistsScreenContent(\n                        genre = category,\n                        artists = artists,\n                        onArtistSelected = { artist ->\n                            navController.navigate(\"artistDetail/${artist.id}\")\n                        }\n                    )\n                }\n            }\n        )\n    } else {\n        Text(\"Category not found\")\n    }\n}",
    "filename": "7aa268ea824d9727026d28854af06b0e_3.kt"
  },
  {
    "conversation_hash": "7aa268ea824d9727026d28854af06b0e",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    NavHost(navController, startDestination = \"musicCategories\") {\n        composable(\"musicCategories\") {\n            val categoriesViewModel: CategoriesViewModel = viewModel()\n            val categories by categoriesViewModel.categories.collectAsState()\n\n            MusicCategoriesScreen(\n                categories = categories,\n                onCategorySelected = { category ->\n                    navController.navigate(\"artistsDetail/${category.id}\")\n                },\n                topBar = { TopBar(title = \"Music Categories\") }\n            )\n        }\n        composable(\"artistsDetail/{categoryId}\") { backStackEntry ->\n            val categoryId = backStackEntry.arguments?.getString(\"categoryId\")?.toIntOrNull()\n            if (categoryId != null) {\n                ArtistsScreen(navController, categoryId)\n            }\n        }\n        composable(\"artistDetail/{artistId}\") { backStackEntry ->\n            val artistId = backStackEntry.arguments?.getString(\"artistId\")?.toIntOrNull()\n            if (artistId != null) {\n                ArtistDetailScreen(artistId)\n            }\n        }\n    }\n}",
    "filename": "7aa268ea824d9727026d28854af06b0e_4.kt"
  },
  {
    "conversation_hash": "930858c01b22d653ee8323b1a74e005c",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.recyclerview.widget.LinearLayoutManager",
      "kotlinx.android.synthetic.main.activity_main."
    ],
    "code": "package com.example.tradingchecklist\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport kotlinx.android.synthetic.main.activity_main.*\n\nclass MainActivity : AppCompatActivity() {\n    private val checklistAdapter = ChecklistAdapter(this)\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        initRecyclerView()\n    }\n\n    private fun initRecyclerView() {\n        recycler_view.layoutManager = LinearLayoutManager(this)\n        recycler_view.adapter = checklistAdapter\n    }\n}",
    "filename": "930858c01b22d653ee8323b1a74e005c_0.kt"
  },
  {
    "conversation_hash": "930858c01b22d653ee8323b1a74e005c",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.widget.CheckBox",
      "androidx.recyclerview.widget.RecyclerView",
      "kotlinx.android.synthetic.main.checklist_item.view."
    ],
    "code": "package com.example.tradingchecklist\n\nimport android.content.Context\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.CheckBox\nimport androidx.recyclerview.widget.RecyclerView\nimport kotlinx.android.synthetic.main.checklist_item.view.*\n\nclass ChecklistAdapter(private val context: Context) :\n    RecyclerView.Adapter<ChecklistAdapter.ViewHolder>() {\n    \n    private val dummyChecklist = listOf(\n        ChecklistItem(\"Criteria 1\", 50),\n        ChecklistItem(\"Criteria 2\", 25)\n    )\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context).inflate(R.layout.checklist_item, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun getItemCount(): Int {\n        return dummyChecklist.size\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        holder.bind(dummyChecklist[position])\n    }\n\n    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        fun bind(item: ChecklistItem) {\n            itemView.checklist_text.text = item.text\n            itemView.percentage.text = item.percentage.toString()\n            itemView.check_criteria.setOnCheckedChangeListener(null)\n            itemView.check_criteria.isChecked = item.checked\n            itemView.check_criteria.setOnCheckedChangeListener { _, isChecked ->\n                item.checked = isChecked\n            }\n        }\n    }\n}",
    "filename": "930858c01b22d653ee8323b1a74e005c_1.kt"
  },
  {
    "conversation_hash": "580014354b4c9065aa0fac5ef46e6587",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "storage"
    ],
    "code": "class TradingPlanActivity : AppCompatActivity() {\n\n    private val tradingPlans: MutableList<TradingPlan> = mutableListOf()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_trading_plan)\n\n\t\t// TODO: Load trading plans from storage\n        tradingPlansSpinner.adapter = TradingPlanAdapter(this, tradingPlans)\n        tradingPlansSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\n            override fun onItemSelected(parent: AdapterView<*>, view: View, position: Int, id: Long) {\n                loadChecklists(tradingPlans[position].checklists)\n            }\n\n            override fun onNothingSelected(parent: AdapterView<*>) {}\n        }\n    }\n\n    private fun loadChecklists(checklists: List<Checklist>) {\n        // TODO: Load checklists into checklistsContainer\n    }\n}",
    "filename": "580014354b4c9065aa0fac5ef46e6587_3.kt"
  },
  {
    "conversation_hash": "6c446686ea8c05a2062ad67a38576e58",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreateView(\n    inflater: LayoutInflater,\n    container: ViewGroup?,\n    savedInstanceState: Bundle?\n): View? {\n    val view = inflater.inflate(R.layout.fragment_cart, container, false)\n\n    ...\n\n    val recyclerView = view.findViewById<RecyclerView>(R.id.recyclerView)\n    cartAdapter = CartAdapter(this)\n    recyclerView.adapter = cartAdapter\n\n    ...\n\n    return view\n}",
    "filename": "6c446686ea8c05a2062ad67a38576e58_1.kt"
  },
  {
    "conversation_hash": "6c446686ea8c05a2062ad67a38576e58",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun openCart() {\n    val cart = Cart.getInstance()\n    cartAdapter.setItems(cart.getItems())\n    \n    // отображение фрагмента корзины (можете использовать свой собственный код отображения фрагмента)\n    val fragmentManager = activity?.supportFragmentManager\n    fragmentManager\n        ?.beginTransaction()\n        ?.replace(R.id.container_layout, this)\n        ?.addToBackStack(null)\n        ?.commit()\n}",
    "filename": "6c446686ea8c05a2062ad67a38576e58_2.kt"
  },
  {
    "conversation_hash": "6c446686ea8c05a2062ad67a38576e58",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ProductFragment : Fragment() {\n    private var onproductclickListener: OnproductclickListener? = null\n    \n    override fun onAttach(context: Context) {\n        super.onAttach(context)\n        \n        if (context is OnproductclickListener) {\n            onproductclickListener = context\n        } else {\n            throw ClassCastException(\n                \"$context must implement OnproductclickListener\"\n            )\n        }\n    }\n    \n    override fun onDetach() {\n        super.onDetach()\n        onproductclickListener = null\n    }\n    \n    ...\n    \n    private fun setupCartButton() {\n        val cartButton = findViewById<Button>(R.id.cart_button)\n        cartButton.setOnClickListener {\n            onproductclickListener?.openCart()\n        }\n    }\n    \n    ...\n}",
    "filename": "6c446686ea8c05a2062ad67a38576e58_3.kt"
  },
  {
    "conversation_hash": "6c446686ea8c05a2062ad67a38576e58",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity(), OnproductclickListener {\n    \n    ...\n    \n    override fun openCart() {\n        val cartFragment = CartFragment()\n        cartFragment.openCart()\n    }\n    \n    ...\n}",
    "filename": "6c446686ea8c05a2062ad67a38576e58_4.kt"
  },
  {
    "conversation_hash": "0df3353db0c1b4e629ab3f95c0086ab5",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        ...\n    }\n}",
    "filename": "0df3353db0c1b4e629ab3f95c0086ab5_0.kt"
  },
  {
    "conversation_hash": "0df3353db0c1b4e629ab3f95c0086ab5",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n    private lateinit var checklistAdapter: ChecklistAdapter\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        checklistAdapter = ChecklistAdapter()\n        binding.recyclerView.adapter = checklistAdapter\n        binding.recyclerView.layoutManager = LinearLayoutManager(this)\n\n        binding.fabAddChecklist.setOnClickListener {\n            // Open CreateChecklistFragment\n        }\n    }\n}",
    "filename": "0df3353db0c1b4e629ab3f95c0086ab5_6.kt"
  },
  {
    "conversation_hash": "0df3353db0c1b4e629ab3f95c0086ab5",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class CreateEditChecklistFragment : Fragment() {\n    private lateinit var binding: FragmentCreateEditChecklistBinding\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentCreateEditChecklistBinding.inflate(inflater, container, false)\n\n        // Initialize your views and listeners here\n\n        return binding.root\n    }\n}",
    "filename": "0df3353db0c1b4e629ab3f95c0086ab5_7.kt"
  },
  {
    "conversation_hash": "0df3353db0c1b4e629ab3f95c0086ab5",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ChecklistAdapter(private val checklists: List<Checklist>) : RecyclerView.Adapter<ChecklistAdapter.ViewHolder>() {\n\n    inner class ViewHolder(val binding: ItemChecklistBinding) : RecyclerView.ViewHolder(binding.root)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val binding = ItemChecklistBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return ViewHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val checklist = checklists[position]\n        holder.binding.textViewTitle.text = checklist.title\n\n        holder.itemView.setOnClickListener {\n            // Open EditChecklistFragment\n        }\n    }\n\n    override fun getItemCount(): Int {\n        return checklists.size\n    }\n}",
    "filename": "0df3353db0c1b4e629ab3f95c0086ab5_10.kt"
  },
  {
    "conversation_hash": "dc5f6cc89dec7ffff10dddc98a4dc653",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "viewModelScope.launch {\n    try {\n        val artistDetail = deezerRepository.getArtistDetail(artistId)\n        Log.d(\"ArtistsViewModel\", \"Fetched artist detail: $artistDetail\")\n        _artistDetails.value = artistDetail\n    } catch (e: Exception) {\n        Log.e(\"ArtistsViewModel\", \"Failed to fetch artist details: \" + e.message)\n    }\n}",
    "filename": "dc5f6cc89dec7ffff10dddc98a4dc653_2.kt"
  },
  {
    "conversation_hash": "06019aa82618dac587b2fb2159eeb13d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyFragment : Fragment() {\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        val view = inflater.inflate(R.layout.my_fragment, container, false)\n\n        val button = view.findViewById<Button>(R.id.my_button)\n        button.setOnClickListener {\n            // Действия при нажатии на кнопку\n        }\n\n        return view\n    }\n}",
    "filename": "06019aa82618dac587b2fb2159eeb13d_0.kt"
  },
  {
    "conversation_hash": "06019aa82618dac587b2fb2159eeb13d",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val button = findViewById<Button>(R.id.my_button)\n        button.setOnClickListener {\n            // Действия при нажатии на кнопку\n        }\n    }\n}",
    "filename": "06019aa82618dac587b2fb2159eeb13d_1.kt"
  },
  {
    "conversation_hash": "06019aa82618dac587b2fb2159eeb13d",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n    val view = inflater.inflate(R.layout.fragment_my, container, false)\n\n    val button = view.findViewById<Button>(R.id.my_button)\n    button.setOnClickListener {\n        // Действия при нажатии на кнопку\n    }\n\n    return view\n}",
    "filename": "06019aa82618dac587b2fb2159eeb13d_2.kt"
  },
  {
    "conversation_hash": "7b0b9c5d54f4a95e4960fbbc0d54838a",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// imports\n\ninterface DeezerApiService {\n\n    @GET(\"genre?output=json\")  // json endpoint instead of \"/\"\n    suspend fun getGenres(): GenreResponse\n\n    @GET(\"genre/{genre_id}/artists\")\n    suspend fun getArtists(@Path(\"genre_id\") genreId: Int): ArtistResponse\n\n    @GET(\"artist/{artist_id}\")\n    suspend fun getArtistDetail(@Path(\"artist_id\") artistId: Int): ArtistDetailResponse\n\n    // Create a new class for storing response fields.\n    data class GenreResponse(val data: List<Category>)\n    data class ArtistResponse(val data: List<Artist>)\n    data class ArtistDetailResponse(val id: Int, val name: String, val picture_big: String, val albums: List<Album>)\n\n    // ... companion object\n}",
    "filename": "7b0b9c5d54f4a95e4960fbbc0d54838a_0.kt"
  },
  {
    "conversation_hash": "7b0b9c5d54f4a95e4960fbbc0d54838a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "// imports\n\nclass DeezerRepository {\n    private val deezerApiService = DeezerApiService.create()\n\n    suspend fun getCategories(): List<Category> {\n        val response = deezerApiService.getGenres()\n        return response.data.map { category ->\n            Category(category.id, category.name, category.picture_medium)\n        }\n    }\n\n    suspend fun getArtists(genreId: Int): List<Artist> {\n        val response = deezerApiService.getArtists(genreId)\n        return response.data\n    }\n\n    suspend fun getArtistDetail(artistId: Int): ArtistDetail {\n        val response = deezerApiService.getArtistDetail(artistId)\n        return ArtistDetail(id = response.id, name = response.name, pictureBig = response.picture_big, albums = response.albums)\n    }\n}",
    "filename": "7b0b9c5d54f4a95e4960fbbc0d54838a_1.kt"
  },
  {
    "conversation_hash": "7b0b9c5d54f4a95e4960fbbc0d54838a",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "// imports\n\nclass DeezerRepository {\n    private val deezerApiService = DeezerApiService.create()\n\n    suspend fun getCategories(): List<Category> {\n        val response = deezerApiService.getGenres()\n        return response.data.map { category ->\n            Category(category.id, category.name, category.picture_medium)\n        }\n    }\n\n    suspend fun getArtists(genreId: Int): List<Artist> {\n        val response = deezerApiService.getArtists(genreId)\n        return response.data\n    }\n\n    suspend fun getArtistDetail(artistId: Int): ArtistDetail {\n        val response = deezerApiService.getArtistDetail(artistId)\n        return ArtistDetail(id = response.id, name = response.name, pictureBig = response.picture_big, albums = response.albums)\n    }\n}",
    "filename": "7b0b9c5d54f4a95e4960fbbc0d54838a_3.kt"
  },
  {
    "conversation_hash": "7b0b9c5d54f4a95e4960fbbc0d54838a",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "// imports\n\nclass ArtistsViewModel : ViewModel() {\n    private val artistRepository = ArtistRepository()\n\n    // ... other code\n\n    fun fetchArtists(genreId: Int) {\n        viewModelScope.launch {\n            try {\n                val artists = artistRepository.getArtists(genreId)\n                _artists.value = artists\n            } catch (e: Exception) {\n                Log.e(\"MusicViewModel\", \"Failed to fetch artists: \" + e.message)\n            }\n        }\n    }\n\n    fun fetchArtistDetails(artistId: Int) {\n        viewModelScope.launch {\n            try {\n                val artistDetail = artistRepository.getArtistDetail(artistId)\n                // As returned value is a list of ArtistDetail, simply set it as the value of _artistDetails\n                _artistDetails.value = artistDetail\n            } catch (e: Exception) {\n                Log.e(\"MusicViewModel\", \"Failed to fetch artist details: \" + e.message)\n            }\n        }\n    }\n}",
    "filename": "7b0b9c5d54f4a95e4960fbbc0d54838a_4.kt"
  },
  {
    "conversation_hash": "7b0b9c5d54f4a95e4960fbbc0d54838a",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "com.example.musicapp.Data.Artist",
      "com.example.musicapp.Data.ArtistDetail",
      "the"
    ],
    "code": "package com.example.musicapp.Data.Repository\n\nimport com.example.musicapp.Data.Artist\nimport com.example.musicapp.Data.ArtistDetail\n\nclass ArtistRepository {\n    private val deezerApiService = DeezerApiService.create()\n\n    suspend fun getArtists(genreId: Int): List<Artist> {\n        val response = deezerApiService.getArtists(genreId)\n        return response.data\n    }\n\n    suspend fun getArtistDetail(artistId: Int): ArtistDetail {\n        val response = deezerApiService.getArtistDetail(artistId)\n        // Create a new ArtistDetail object from the response\n        return ArtistDetail(\n            id = response.id,\n            name = response.name,\n            pictureBig = response.picture_big,\n            albums = response.albums\n        )\n    }\n}",
    "filename": "7b0b9c5d54f4a95e4960fbbc0d54838a_5.kt"
  },
  {
    "conversation_hash": "7b0b9c5d54f4a95e4960fbbc0d54838a",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "// imports\n\ninterface DeezerApiService {\n    // ... other methods\n\n    @GET(\"artist/{artist_id}\")\n    suspend fun getArtistDetail(@Path(\"artist_id\") artistId: Int): ArtistDetailResponse\n\n    // Create a new class for storing response fields.\n    data class GenreResponse(val data: List<Category>)\n    data class ArtistResponse(val data: List<Artist>)\n    data class ArtistDetailResponse(val id: Int, val name: String, val picture_big: String, val albums: List<Album>?)\n\n    // ... companion object\n}",
    "filename": "7b0b9c5d54f4a95e4960fbbc0d54838a_7.kt"
  },
  {
    "conversation_hash": "7b0b9c5d54f4a95e4960fbbc0d54838a",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "// imports\n\nclass DeezerRepository {\n    private val deezerApiService = DeezerApiService.create()\n\n    // ... other code\n\n    suspend fun getArtistDetail(artistId: Int): ArtistDetail {\n        val response = deezerApiService.getArtistDetail(artistId)\n        // Create a new ArtistDetail object from the response\n        return ArtistDetail(\n            id = response.id,\n            name = response.name,\n            pictureBig = response.picture_big,\n            albums = response.albums ?: emptyList() // if albums in response is null, use emptyList()\n        )\n    }\n}",
    "filename": "7b0b9c5d54f4a95e4960fbbc0d54838a_8.kt"
  },
  {
    "conversation_hash": "7b0b9c5d54f4a95e4960fbbc0d54838a",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistDetailScreen(artistId: Int) {\n    val artistsViewModel: ArtistsViewModel = viewModel()\n    artistsViewModel.fetchArtistDetails(artistId)\n    val artistDetails by artistsViewModel.artistDetails.collectAsState()\n\n    artistDetails?.let { details ->\n        val artistDetail = details.firstOrNull()\n        artistDetail?.let {\n            Column {\n                Text(\n                    text = it.name,\n                    style = MaterialTheme.typography.h6,\n                    modifier = Modifier.padding(start = 16.dp, end = 16.dp, top = 16.dp, bottom = 8.dp)\n                )\n\n                val painter = rememberAsyncImagePainter(model = it.pictureBig)\n                Image(\n                    painter = painter,\n                    contentDescription = it.name,\n                    contentScale = ContentScale.Crop,\n                    modifier = Modifier\n                        .align(Alignment.CenterHorizontally)\n                        .size(200.dp)\n                )\n\n                LazyColumn {\n                    items(it.albums ?: emptyList()) { album ->  // default emptyList() when albums is null\n                        ArtistDetailItem(album)\n                    }\n                }\n            }\n        }\n    }\n}",
    "filename": "7b0b9c5d54f4a95e4960fbbc0d54838a_9.kt"
  },
  {
    "conversation_hash": "c618447e59347b5b2cb0ccc26e7e4b02",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ArtistsViewModel : ViewModel() {\n    // ...\n\n    fun fetchArtistDetails(artistId: Int) {\n        viewModelScope.launch {\n\n            // TODO: Add log statement to check the artistId parameter\n            // println(\"Fetching details for artistId: $artistId\")\n\n            val artistDetailsData = deezerRepository.getArtistDetail(artistId)\n            _artistDetails.value = listOf(artistDetailsData)\n\n            // TODO: Add log statement to check the fetched artist details data\n            // println(\"Fetched details for artistId: $artistId -> $artistDetailsData\")\n        }\n    }\n\n    // ...\n}",
    "filename": "c618447e59347b5b2cb0ccc26e7e4b02_0.kt"
  },
  {
    "conversation_hash": "c618447e59347b5b2cb0ccc26e7e4b02",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class DeezerRepository {\n    // ...\n\n    suspend fun getArtistDetail(artistId: Int): ArtistDetail {\n        val response = deezerApiService.getArtistDetail(artistId)\n\n        // TODO: Add log statement to check the artist detail response\n        // println(\"Received response for artistId: $artistId -> $response\")\n\n        return ArtistDetail(id = response.id, name = response.name, pictureBig = response.picture_big, albums = response.albums)\n    }\n}",
    "filename": "c618447e59347b5b2cb0ccc26e7e4b02_1.kt"
  },
  {
    "conversation_hash": "c618447e59347b5b2cb0ccc26e7e4b02",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistDetailScreen(artistId: Int) {\n    // ...\n\n    artistDetails?.let { details ->\n        val artistDetail = details.firstOrNull()\n        artistDetail?.let {\n\n            // TODO: Add log statement to check the artist detail data\n            // println(\"Displaying artist details for artistId: $artistId -> $it\")\n\n            Column {\n                Text(\n                    // ...\n                )\n\n                // ...\n            }\n        }\n    }\n}",
    "filename": "c618447e59347b5b2cb0ccc26e7e4b02_2.kt"
  },
  {
    "conversation_hash": "c618447e59347b5b2cb0ccc26e7e4b02",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ArtistsViewModel : ViewModel() {\n    // ...\n\n    fun fetchArtistDetails(artistId: Int) {\n        viewModelScope.launch {\n            println(\"Fetching details for artistId: $artistId\")\n\n            val artistDetailsData = deezerRepository.getArtistDetail(artistId)\n            _artistDetails.value = listOf(artistDetailsData)\n\n            println(\"Fetched details for artistId: $artistId -> $artistDetailsData\")\n        }\n    }\n\n    // ...\n}",
    "filename": "c618447e59347b5b2cb0ccc26e7e4b02_3.kt"
  },
  {
    "conversation_hash": "c618447e59347b5b2cb0ccc26e7e4b02",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class DeezerRepository {\n    // ...\n\n    suspend fun getArtistDetail(artistId: Int): ArtistDetail {\n        val response = deezerApiService.getArtistDetail(artistId)\n\n        println(\"Received response for artistId: $artistId -> $response\")\n\n        return ArtistDetail(id = response.id, name = response.name, pictureBig = response.picture_big, albums = response.albums)\n    }\n}",
    "filename": "c618447e59347b5b2cb0ccc26e7e4b02_4.kt"
  },
  {
    "conversation_hash": "c618447e59347b5b2cb0ccc26e7e4b02",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistDetailScreen(artistId: Int) {\n    // ...\n\n    artistDetails?.let { details ->\n        val artistDetail = details.firstOrNull()\n        artistDetail?.let {\n            println(\"Displaying artist details for artistId: $artistId -> $it\")\n\n            Column {\n                Text(\n                    // ...\n                )\n\n                // ...\n            }\n        }\n    }\n}",
    "filename": "c618447e59347b5b2cb0ccc26e7e4b02_5.kt"
  },
  {
    "conversation_hash": "c618447e59347b5b2cb0ccc26e7e4b02",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun fetchArtistDetails(artistId: Int) {\n    viewModelScope.launch {\n        val artistDetailsData = deezerRepository.getArtistDetail(artistId)\n        \n        // Fetch artist's albums\n        val artistAlbums = deezerRepository.getArtistAlbums(artistId)\n\n        // Combine artist details and albums\n        val artistWithAlbums = artistDetailsData.copy(albums = artistAlbums)\n        \n        _artistDetails.value = listOf(artistWithAlbums)\n    }\n}",
    "filename": "c618447e59347b5b2cb0ccc26e7e4b02_8.kt"
  },
  {
    "conversation_hash": "c618447e59347b5b2cb0ccc26e7e4b02",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistDetailItem(album: Album) {\n    Row(modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)) {\n        val painter = rememberAsyncImagePainter(model = album.coverMedium)\n        Image(\n            painter = painter,\n            contentDescription = album.title,\n            contentScale = ContentScale.Crop,\n            modifier = Modifier\n                .size(100.dp)\n                .align(Alignment.CenterVertically)\n        )\n\n        Column(\n            modifier = Modifier\n                .weight(1f) // 2/3 of the width\n                .padding(start = 16.dp)\n                .align(Alignment.CenterVertically)\n        ) {\n            Text(text = album.title ?: \"Unknown title\", style = MaterialTheme.typography.subtitle1)\n            Text(text = album.releaseDate ?: \"Unknown release date\", style = MaterialTheme.typography.caption)\n        }\n    }\n}",
    "filename": "c618447e59347b5b2cb0ccc26e7e4b02_9.kt"
  },
  {
    "conversation_hash": "763641d967639515f3ccd567aef78713",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "suspend fun getArtistDetail(artistId: Int): ArtistDetail {\n    val response = deezerApiService.getArtistDetail(artistId)\n\n    // Map album data\n    val albums = response.albums?.map { albumResponse ->\n        Album(\n            id = albumResponse.id,\n            title = albumResponse.title,\n            link = albumResponse.link,\n            cover = albumResponse.cover,\n            coverSmall = albumResponse.coverSmall,\n            coverMedium = albumResponse.coverMedium,\n            coverBig = albumResponse.coverBig,\n            coverXl = albumResponse.coverXl,\n            releaseDate = albumResponse.releaseDate,\n            tracklist = albumResponse.tracklist,\n            type = albumResponse.type\n        )\n    }\n\n    return ArtistDetail(id = response.id, name = response.name, pictureBig = response.picture_big, albums = albums)\n}",
    "filename": "763641d967639515f3ccd567aef78713_3.kt"
  },
  {
    "conversation_hash": "763641d967639515f3ccd567aef78713",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "suspend fun getArtistDetail(artistId: Int): ArtistDetail {\n    val response = deezerApiService.getArtistDetail(artistId)\n\n    return ArtistDetail(\n        id = response.id,\n        name = response.name,\n        pictureBig = response.picture_big,\n        albums = response.albums\n    )\n}",
    "filename": "763641d967639515f3ccd567aef78713_5.kt"
  },
  {
    "conversation_hash": "770ee750d927234cc2b99e98d94c712a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class AlbumResponse(val data: List<Album>) {\n    data class AlbumData(\n        val id: Int,\n        val title: String,\n        val link: String,\n        val cover: String,\n        val cover_small: String,\n        val cover_medium: String,\n        val cover_big: String,\n        val cover_xl: String,\n        val release_date: String,\n        val tracklist: String,\n        val type: String\n    )\n\n    fun toAlbumList(): List<Album> {\n        return data.map { albumData ->\n            Album(\n                id = albumData.id,\n                title = albumData.title,\n                link = albumData.link,\n                cover = albumData.cover,\n                cover_small = albumData.cover_small,\n                cover_medium = albumData.cover_medium,\n                cover_big = albumData.cover_big,\n                cover_xl = albumData.cover_xl,\n                release_date = albumData.release_date,\n                tracklist = albumData.tracklist,\n                type = albumData.type\n            )\n        }\n    }\n}",
    "filename": "770ee750d927234cc2b99e98d94c712a_1.kt"
  },
  {
    "conversation_hash": "770ee750d927234cc2b99e98d94c712a",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistDetailScreen(artistId: Int) {\n    val artistsViewModel: ArtistsViewModel = viewModel()\n    artistsViewModel.fetchArtistDetails(artistId)\n    val artistDetails by artistsViewModel.artistDetails.collectAsState()\n\n    artistDetails?.let { details ->\n        val artistDetail = details.firstOrNull()\n        artistDetail?.let {\n            Scaffold(\n                topBar = {\n                    TopBar(title = it.name)\n                },\n                content = { padding ->\n\n                    // actual content\n                }\n            )\n        }\n    }\n}",
    "filename": "770ee750d927234cc2b99e98d94c712a_3.kt"
  },
  {
    "conversation_hash": "cc514673d569b1072d0b1a8e3aeb33bd",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface DeezerApiService {\n    // existing methods\n\n    @GET(\"album/{album_id}\")\n    suspend fun getAlbumDetails(@Path(\"album_id\") albumId: Int): AlbumDetailResponse\n\n    data class AlbumDetailResponse(\n        val id: Int,\n        val title: String,\n        val cover_medium: String,\n        val songs: List<Song>\n    )\n}",
    "filename": "cc514673d569b1072d0b1a8e3aeb33bd_1.kt"
  },
  {
    "conversation_hash": "cc514673d569b1072d0b1a8e3aeb33bd",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class DeezerRepository {\n    // existing methods\n\n    suspend fun getAlbumDetails(albumId: Int): AlbumDetails {\n        val response = deezerApiService.getAlbumDetails(albumId)\n        return AlbumDetails(\n            id = response.id,\n            title = response.title,\n            cover_medium = response.cover_medium,\n            songs = response.songs\n        )\n    }\n}",
    "filename": "cc514673d569b1072d0b1a8e3aeb33bd_2.kt"
  },
  {
    "conversation_hash": "cc514673d569b1072d0b1a8e3aeb33bd",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class AlbumDetailsViewModel : ViewModel() {\n    private val deezerRepository = DeezerRepository()\n\n    private val _albumDetails = MutableStateFlow<AlbumDetails?>(null)\n    val albumDetails: StateFlow<AlbumDetails?>\n        get() = _albumDetails\n\n    fun fetchAlbumDetails(albumId: Int) {\n        viewModelScope.launch {\n            try {\n                val albumDetails = deezerRepository.getAlbumDetails(albumId)\n                _albumDetails.value = albumDetails\n            } catch (e: Exception) {\n                Log.e(\"AlbumDetailsViewModel\", \"Failed to fetch album details: \" + e.message)\n            }\n        }\n    }\n}",
    "filename": "cc514673d569b1072d0b1a8e3aeb33bd_3.kt"
  },
  {
    "conversation_hash": "cc514673d569b1072d0b1a8e3aeb33bd",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailScreen(albumId: Int) {\n    val albumDetailsViewModel: AlbumDetailsViewModel = viewModel()\n    albumDetailsViewModel.fetchAlbumDetails(albumId)\n    val albumDetails by albumDetailsViewModel.albumDetails.collectAsState()\n\n    albumDetails?.let { details ->\n        Column {\n            Text(\n                text = details.title,\n                style = MaterialTheme.typography.h6,\n                modifier = Modifier.padding(start = 16.dp, end = 16.dp, top = 16.dp, bottom = 8.dp)\n            )\n\n            LazyColumn {\n                items(details.songs) { song ->\n                    SongItem(song)\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun SongItem(song: Song) {\n    // Create an item in the list with a Text, Image, and Button for preview\n}",
    "filename": "cc514673d569b1072d0b1a8e3aeb33bd_4.kt"
  },
  {
    "conversation_hash": "cc514673d569b1072d0b1a8e3aeb33bd",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    NavHost(navController, startDestination = \"musicCategories\") {\n        // existing composables\n\n        composable(\"artistDetail/{artistId}\") { backStackEntry ->\n            // ...\n        }\n\n        composable(\"albumDetail/{albumId}\") { backStackEntry ->\n            val albumId = backStackEntry.arguments?.getString(\"albumId\")?.toIntOrNull()\n            if (albumId != null) {\n                AlbumDetailScreen(albumId)\n            }\n        }\n    }\n}",
    "filename": "cc514673d569b1072d0b1a8e3aeb33bd_5.kt"
  },
  {
    "conversation_hash": "cc514673d569b1072d0b1a8e3aeb33bd",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistDetailItem(album: Album, navController: NavController) {\n    Row(\n        modifier = Modifier\n            .padding(horizontal = 16.dp, vertical = 8.dp)\n            .clickable {\n                navController.navigate(\"albumDetail/${album.id}\") \n            }\n            // ...\n    ) {\n        // ...\n    }\n}",
    "filename": "cc514673d569b1072d0b1a8e3aeb33bd_6.kt"
  },
  {
    "conversation_hash": "cc514673d569b1072d0b1a8e3aeb33bd",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [
      "com.example.musicapp.Data.AlbumDetails"
    ],
    "code": "import com.example.musicapp.Data.AlbumDetails\n// other imports\n\nclass DeezerRepository {\n    // existing methods\n\n    suspend fun getAlbumDetails(albumId: Int): AlbumDetails {\n        val response = deezerApiService.getAlbumDetails(albumId)\n        return AlbumDetails(\n            id = response.id,\n            title = response.title,\n            cover_medium = response.cover_medium,\n            songs = response.tracks.data\n        )\n    }\n}",
    "filename": "cc514673d569b1072d0b1a8e3aeb33bd_9.kt"
  },
  {
    "conversation_hash": "cc514673d569b1072d0b1a8e3aeb33bd",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.Row",
      "androidx.compose.foundation.layout.padding",
      "androidx.compose.material.Text",
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.Modifier",
      "androidx.compose.ui.unit.dp",
      "com.example.musicapp.Data.Song"
    ],
    "code": "import androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport com.example.musicapp.Data.Song\n\n@Composable\nfun SongItem(song: Song) {\n    Row(\n        modifier = Modifier.padding(8.dp)\n    ) {\n        Text(song.title, modifier = Modifier.padding(end = 8.dp))\n        Text(\"Duration: ${song.duration} seconds\")\n    }\n}",
    "filename": "cc514673d569b1072d0b1a8e3aeb33bd_10.kt"
  },
  {
    "conversation_hash": "ffcf41d3b2332976464e4421ebede92c",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistDetailItem(\n    album: Album,\n    navController: NavController, // Add the navController parameter\n    modifier: Modifier = Modifier\n) {\n    // ...\n    .clickable(onClick = { navController.navigate(\"albumDetail/${album.id}\") }) // Add this line for navigation\n    // ...\n}",
    "filename": "ffcf41d3b2332976464e4421ebede92c_0.kt"
  },
  {
    "conversation_hash": "ffcf41d3b2332976464e4421ebede92c",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ArtistDetailScreen(artistId: Int, navController: NavController) { // Add the navController parameter\n    // ...\n    LazyColumn {\n        items(it.albums ?: emptyList()) { album ->\n            ArtistDetailItem(album, navController) // Pass the navController to ArtistDetailItem\n        }\n    }\n    // ...\n}",
    "filename": "ffcf41d3b2332976464e4421ebede92c_1.kt"
  },
  {
    "conversation_hash": "ffcf41d3b2332976464e4421ebede92c",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    NavHost(navController, startDestination = \"musicCategories\") {\n        // ...\n        composable(\"artistDetail/{artistId}\") { backStackEntry ->\n            val artistId = backStackEntry.arguments?.getString(\"artistId\")?.toIntOrNull()\n            if (artistId != null) {\n                ArtistDetailScreen(artistId, navController) // Pass the navController\n            }\n        }\n        // ...\n    }\n}",
    "filename": "ffcf41d3b2332976464e4421ebede92c_2.kt"
  },
  {
    "conversation_hash": "a73ddaa19721cc684c6cf0ec3f0f2a21",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "androidx.navigation.NavType",
      "androidx.navigation.compose.navArgument"
    ],
    "code": "import androidx.navigation.NavType\nimport androidx.navigation.compose.navArgument\n\nNavHost(navController, startDestination = \"musicCategories\") {\n    composable(\"musicCategories\") {\n        MusicCategories(navController = navController)\n    }\n\n    composable(\"artistDetail/{artistId}\") {\n        // Your artist detail composable\n    }\n\n    composable(\"albumDetail/{albumId}\") {\n        // Your album detail composable\n    }\n\n    composable(\n        \"songDetail/{songId}\",\n        arguments = listOf(navArgument(\"songId\") { type = NavType.IntType })\n    ) { backStackEntry ->\n        val songId = backStackEntry.arguments?.getInt(\"songId\")\n        songId?.let { SongDetailScreen(songId = it) }\n    }\n}",
    "filename": "a73ddaa19721cc684c6cf0ec3f0f2a21_1.kt"
  },
  {
    "conversation_hash": "a346611b5470ef523d2c936e662fdaf1",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun SongDetailScreen(songId: Int) {\n    // Add your UI components here, for example:\n    Text(text = \"Song Detail screen for songId: $songId\")\n}",
    "filename": "a346611b5470ef523d2c936e662fdaf1_0.kt"
  },
  {
    "conversation_hash": "a346611b5470ef523d2c936e662fdaf1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "NavHost(navController, startDestination = \"musicCategories\") {\n    // Other composables\n    ...\n    composable(\"songDetail/{songId}\") { backStackEntry ->\n        val songId = backStackEntry.arguments?.getString(\"songId\")?.toIntOrNull()\n        if (songId != null) {\n            SongDetailScreen(songId)\n        }\n    }\n}",
    "filename": "a346611b5470ef523d2c936e662fdaf1_1.kt"
  },
  {
    "conversation_hash": "a346611b5470ef523d2c936e662fdaf1",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun playPreview(context: Context, previewUrl: String) {\n    val player = SimpleExoPlayer.Builder(context).build()\n    val mediaItem = MediaItem.fromUri(previewUrl)\n    player.setMediaItem(mediaItem)\n    player.prepare()\n    player.playWhenReady = true\n\n    // Stop playing after 30 seconds\n    player.seekTo(30000)\n    player.addListener(object : Player.Listener {\n        override fun onPositionDiscontinuity(\n            oldPosition: PlaybackStateCompat.PositionInfo,\n            newPosition: PlaybackStateCompat.PositionInfo,\n            reason: Int\n        ) {\n            if (newPosition.windowIndex != oldPosition.windowIndex) {\n                player.stop()\n                player.release()\n            }\n        }\n    })\n}",
    "filename": "a346611b5470ef523d2c936e662fdaf1_4.kt"
  },
  {
    "conversation_hash": "a346611b5470ef523d2c936e662fdaf1",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun SongDetailScreen(songId: Int) {\n    Scaffold(\n        topBar = { TopBar(title = \"Song Detail\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                Text(text = \"Song Detail screen for songId: $songId\")\n                // Add more UI components as needed\n            }\n        }\n    )\n}",
    "filename": "a346611b5470ef523d2c936e662fdaf1_6.kt"
  },
  {
    "conversation_hash": "a346611b5470ef523d2c936e662fdaf1",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onPositionDiscontinuity(\n    oldPosition: Player.PositionInfo,\n    newPosition: Player.PositionInfo,\n    reason: Int\n) {\n    // ...\n}",
    "filename": "a346611b5470ef523d2c936e662fdaf1_8.kt"
  },
  {
    "conversation_hash": "a346611b5470ef523d2c936e662fdaf1",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailItem(song: Song, navController: NavController) {\n    val context = LocalContext.current // Add this line at the beginning of the composable\n\n    // ...\n}",
    "filename": "a346611b5470ef523d2c936e662fdaf1_9.kt"
  },
  {
    "conversation_hash": "a346611b5470ef523d2c936e662fdaf1",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun SongDetailScreen(songId: Int, previewUrl: String) {\n    val requestOptions = RequestOptions()\n        .fallback(R.drawable.ic_launcher_background)\n        .error(R.drawable.ic_launcher_background)\n\n    LaunchedEffect(Unit) {\n        playPreview(LocalContext.current, previewUrl)\n    }\n\n    Scaffold(\n        // ... (rest of the code)\n    )\n}",
    "filename": "a346611b5470ef523d2c936e662fdaf1_12.kt"
  },
  {
    "conversation_hash": "a346611b5470ef523d2c936e662fdaf1",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [],
    "code": "composable(\"songDetail/{songId}?previewUrl={previewUrl}\") { backStackEntry ->\n    val songId = backStackEntry.arguments?.getString(\"songId\")?.toIntOrNull()\n    val previewUrl = backStackEntry.arguments?.getString(\"previewUrl\")\n    if (songId != null && previewUrl != null) {\n        SongDetailScreen(songId, previewUrl)\n    }\n}",
    "filename": "a346611b5470ef523d2c936e662fdaf1_14.kt"
  },
  {
    "conversation_hash": "a346611b5470ef523d2c936e662fdaf1",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailItem(song: Song, navController: NavController) {\n    val context = LocalContext.current\n\n    val (player, setPlayer) = rememberSaveable { mutableStateOf<SimpleExoPlayer?>(null) }\n\n    DisposableEffect(Unit) {\n        onDispose {\n            player?.stop()\n            player?.release()\n        }\n    }\n\n    // ...\n}",
    "filename": "a346611b5470ef523d2c936e662fdaf1_16.kt"
  },
  {
    "conversation_hash": "a346611b5470ef523d2c936e662fdaf1",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun playPreview(context: Context, previewUrl: String, onPlayerCreated: (SimpleExoPlayer) -> Unit) {\n    val player = SimpleExoPlayer.Builder(context).build()\n    val mediaItem = MediaItem.fromUri(previewUrl)\n    player.setMediaItem(mediaItem)\n    player.prepare()\n    player.playWhenReady = true\n    onPlayerCreated(player)\n\n    // Stop playing after 30 seconds\n    player.seekTo(30000)\n    player.addListener(object : Player.Listener {\n        override fun onPositionDiscontinuity(\n            oldPosition: Player.PositionInfo,\n            newPosition: Player.PositionInfo,\n            reason: Int\n        ) {\n            if (newPosition.windowIndex != oldPosition.windowIndex) {\n                player.stop()\n            }\n        }\n    })\n}",
    "filename": "a346611b5470ef523d2c936e662fdaf1_17.kt"
  },
  {
    "conversation_hash": "fcd0a9dfd8916566cfbf1964844cbdc9",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun playPreview(\n    context: Context,\n    previewUrl: String,\n    onPlayerCreated: (SimpleExoPlayer) -> Unit\n)",
    "filename": "fcd0a9dfd8916566cfbf1964844cbdc9_2.kt"
  },
  {
    "conversation_hash": "fcd0a9dfd8916566cfbf1964844cbdc9",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun playPreview(\n    context: Context,\n    previewUrl: String,\n    onPlayerCreated: (SimpleExoPlayer) -> Unit\n) {\n    val player = SimpleExoPlayer.Builder(context).build()\n    val mediaItem = MediaItem.fromUri(previewUrl)\n    player.setMediaItem(mediaItem)\n    player.prepare()\n    player.playWhenReady = true\n    onPlayerCreated(player)\n\n    // Stop playing after 30 seconds\n    player.seekTo(30000)\n    player.addListener(object : Player.Listener {\n        override fun onPositionDiscontinuity(\n            oldPosition: Player.PositionInfo,\n            newPosition: Player.PositionInfo,\n            reason: Int\n        ) {\n            if (newPosition.windowIndex != oldPosition.windowIndex) {\n                player.stop()\n            }\n        }\n    })\n}",
    "filename": "fcd0a9dfd8916566cfbf1964844cbdc9_5.kt"
  },
  {
    "conversation_hash": "fcd0a9dfd8916566cfbf1964844cbdc9",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    NavHost(navController, startDestination = \"musicCategories\") {\n        composable(\"musicCategories\") {\n            val categoriesViewModel: CategoriesViewModel = viewModel()\n            val categories by categoriesViewModel.categories.collectAsState()\n\n            MusicCategoriesScreen(\n                categories = categories,\n                onCategorySelected = { category ->\n                    navController.navigate(\"artistsDetail/${category.id}\")\n                },\n                topBar = { TopBar(title = \"Music Categories\") }\n            )\n        }\n        composable(\"artistsDetail/{categoryId}\") { backStackEntry ->\n            val categoryId = backStackEntry.arguments?.getString(\"categoryId\")?.toIntOrNull()\n            if (categoryId != null) {\n                ArtistsScreen(navController, categoryId)\n            }\n        }\n        composable(\"artistDetail/{artistId}\") { backStackEntry ->\n            val artistId = backStackEntry.arguments?.getString(\"artistId\")?.toIntOrNull()\n            if (artistId != null) {\n                ArtistDetailScreen(artistId, navController)\n            }\n        }\n\n        composable(\"albumDetail/{albumId}\") { backStackEntry ->\n            val albumId = backStackEntry.arguments?.getString(\"albumId\")?.toIntOrNull()\n            if (albumId != null) {\n                AlbumDetailScreen(albumId,navController)\n            }\n        }\n    }\n}",
    "filename": "fcd0a9dfd8916566cfbf1964844cbdc9_10.kt"
  },
  {
    "conversation_hash": "0ade694ebeee6c6126737c416fa0d28f",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.mutableStateOf",
      "androidx.lifecycle.ViewModel",
      "com.google.android.exoplayer2.ExoPlayer",
      "com.google.android.exoplayer2.MediaItem",
      "com.google.android.exoplayer2.SimpleExoPlayer"
    ],
    "code": "import androidx.compose.runtime.mutableStateOf\nimport androidx.lifecycle.ViewModel\nimport com.google.android.exoplayer2.ExoPlayer\nimport com.google.android.exoplayer2.MediaItem\nimport com.google.android.exoplayer2.SimpleExoPlayer\n\nclass PlayerViewModel : ViewModel() {\n    val currentPlayer = mutableStateOf<SimpleExoPlayer?>(null)\n    \n    fun playSong(player: SimpleExoPlayer) {\n        currentPlayer.value?.let {\n            if (it != player) {\n                it.pause()\n            }\n        }\n        if (player.playbackState == ExoPlayer.STATE_ENDED) {\n            player.seekToDefaultPosition()\n        }\n        player.play()\n        currentPlayer.value = player\n    }\n\n    fun pauseSong() {\n        currentPlayer.value?.pause()\n    }\n\n    override fun onCleared() {\n        super.onCleared()\n        currentPlayer.value?.release()\n    }\n}",
    "filename": "0ade694ebeee6c6126737c416fa0d28f_2.kt"
  },
  {
    "conversation_hash": "0ade694ebeee6c6126737c416fa0d28f",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable"
    ],
    "code": "import androidx.compose.runtime.Composable\n\n@Composable\nfun AlbumDetailScreen(albumId: Int, navController: NavController) {\n    val albumDetailsViewModel: AlbumDetailsViewModel = viewModel()\n    val playerViewModel: PlayerViewModel = viewModel()\n    albumDetailsViewModel.fetchAlbumDetails(albumId)\n    val albumDetails by albumDetailsViewModel.albumDetails.collectAsState()\n\n    albumDetails?.let { details ->\n        Scaffold(\n            topBar = {\n                TopBar(title = details.title)\n            },\n            content = { padding ->\n                Column(\n                    modifier = Modifier.padding(padding)\n                ) {\n                    LazyColumn {\n                        items(details.songs) { song ->\n                            AlbumDetailItem(song, navController, playerViewModel)\n                        }\n                    }\n                }\n            }\n        )\n    }\n}",
    "filename": "0ade694ebeee6c6126737c416fa0d28f_3.kt"
  },
  {
    "conversation_hash": "cea530eb6db75ee751b186048d5cadf0",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.mutableStateOf",
      "androidx.lifecycle.ViewModel",
      "com.example.musicapp.Data.Song",
      "com.google.android.exoplayer2.ExoPlayer",
      "com.google.android.exoplayer2.SimpleExoPlayer"
    ],
    "code": "package com.example.musicapp.ViewModel\n\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.lifecycle.ViewModel\nimport com.example.musicapp.Data.Song\nimport com.google.android.exoplayer2.ExoPlayer\nimport com.google.android.exoplayer2.SimpleExoPlayer\n\nclass PlayerViewModel : ViewModel() {\n    val currentPlayer = mutableStateOf<SimpleExoPlayer?>(null)\n    val currentSong = mutableStateOf<Song?>(null)\n    val isPlaying = mutableStateOf(false)\n\n    fun playSong(song: Song, player: SimpleExoPlayer) {\n        currentPlayer.value?.let {\n            if (it != player) {\n                it.pause()\n            }\n        }\n        currentSong.value = song\n        if (player.playbackState == ExoPlayer.STATE_ENDED) {\n            player.seekToDefaultPosition()\n        }\n        player.play()\n        isPlaying.value = true\n        currentPlayer.value = player\n    }\n\n    fun pauseSong() {\n        currentPlayer.value?.pause()\n        isPlaying.value = false\n    }\n\n    fun resumeSong() {\n        currentPlayer.value?.play()\n        isPlaying.value = true\n    }\n\n    override fun onCleared() {\n        super.onCleared()\n        currentPlayer.value?.release()\n    }\n}",
    "filename": "cea530eb6db75ee751b186048d5cadf0_0.kt"
  },
  {
    "conversation_hash": "cea530eb6db75ee751b186048d5cadf0",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "androidx.compose.runtime.mutableStateOf",
      "androidx.lifecycle.ViewModel",
      "com.example.musicapp.Data.Song",
      "com.google.android.exoplayer2.ExoPlayer",
      "com.google.android.exoplayer2.MediaItem",
      "com.google.android.exoplayer2.SimpleExoPlayer"
    ],
    "code": "package com.example.musicapp.ViewModel\n\nimport android.content.Context\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.lifecycle.ViewModel\nimport com.example.musicapp.Data.Song\nimport com.google.android.exoplayer2.ExoPlayer\nimport com.google.android.exoplayer2.SimpleExoPlayer\nimport com.google.android.exoplayer2.MediaItem\n\nclass PlayerViewModel : ViewModel() {\n    val currentPlayer = mutableStateOf<SimpleExoPlayer?>(null)\n    val currentSong = mutableStateOf<Song?>(null)\n    val isPlaying = mutableStateOf(false)\n\n    fun createExoPlayer(context: Context): SimpleExoPlayer {\n        return SimpleExoPlayer.Builder(context).build()\n    }\n\n    fun playSong(context: Context, song: Song) {\n        currentPlayer.value?.let {\n            if (currentSong.value?.id == song.id) {\n                if (isPlaying.value) {\n                    pauseSong()\n                } else {\n                    resumeSong()\n                }\n                return\n            } else {\n                it.pause()\n                it.release()\n            }\n        }\n\n        currentSong.value = song\n        val player = createExoPlayer(context)\n        player.setMediaItem(MediaItem.fromUri(song.preview))\n        player.prepare()\n        player.play()\n        isPlaying.value = true\n        currentPlayer.value = player\n    }\n\n    fun pauseSong() {\n        currentPlayer.value?.pause()\n        isPlaying.value = false\n    }\n\n    fun resumeSong() {\n        currentPlayer.value?.play()\n        isPlaying.value = true\n    }\n\n    override fun onCleared() {\n        super.onCleared()\n        currentPlayer.value?.release()\n    }\n}",
    "filename": "cea530eb6db75ee751b186048d5cadf0_5.kt"
  },
  {
    "conversation_hash": "cea530eb6db75ee751b186048d5cadf0",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailItem(song: Song, navController: NavController, playerViewModel: PlayerViewModel) {\n    val context = LocalContext.current\n    // ...\n    IconButton(\n        onClick = {\n            playerViewModel.playSong(context, song)\n        },\n        modifier = Modifier.align(Alignment.CenterVertically)\n    ) {\n        Icon(\n            painter = painterResource(id = if (playerViewModel.currentSong.value?.id == song.id && playerViewModel.isPlaying.value) R.drawable.ic_pause else R.drawable.ic_play),\n            contentDescription = if (playerViewModel.currentSong.value?.id == song.id && playerViewModel.isPlaying.value) \"Pause\" else \"Play\"\n        )\n    }\n    // ...\n}",
    "filename": "cea530eb6db75ee751b186048d5cadf0_6.kt"
  },
  {
    "conversation_hash": "fd2143c738f297321dd4fbe665b1b876",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    NavHost(navController, startDestination = \"musicCategories\") {\n        //...\n        \n        // Add the composable for the song detail screen\n        composable(\"songDetail/{songId}\") { backStackEntry ->\n            val songId = backStackEntry.arguments?.getString(\"songId\")?.toIntOrNull()\n            if (songId != null) {\n                SongDetailScreen(songId, navController) // Make sure to create a composable for the SongDetailScreen\n            }\n        }\n    }\n}",
    "filename": "fd2143c738f297321dd4fbe665b1b876_0.kt"
  },
  {
    "conversation_hash": "fd2143c738f297321dd4fbe665b1b876",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun SongDetailScreen(songId: Int, navController: NavController) {\n    Column {\n        Text(\"Song Details for Song ID: $songId\")\n        \n        // Add your UI components for this screen\n    }\n}",
    "filename": "fd2143c738f297321dd4fbe665b1b876_1.kt"
  },
  {
    "conversation_hash": "52b709c62a830240c8a97bf17cf77e45",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun addFavoriteSong(song: Song) {\n    favorites.value = favorites.value.toMutableList().apply { add(song) }\n}\n\nfun removeFavoriteSong(song: Song) {\n    favorites.value = favorites.value.toMutableList().apply { remove(song) }\n}\n\nfun isFavorite(song: Song): Boolean {\n    return favorites.value.contains(song)\n}",
    "filename": "52b709c62a830240c8a97bf17cf77e45_1.kt"
  },
  {
    "conversation_hash": "52b709c62a830240c8a97bf17cf77e45",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FavoritesScreen(navController: NavController) {\n    val playerViewModel: PlayerViewModel = viewModel()\n    val favorites by playerViewModel.favorites.collectAsState()\n  \n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                LazyColumn {\n                    items(favorites) { song ->\n                        AlbumDetailItem(song, navController, playerViewModel)\n                    }\n                }\n            }\n        }\n    )\n}",
    "filename": "52b709c62a830240c8a97bf17cf77e45_3.kt"
  },
  {
    "conversation_hash": "52b709c62a830240c8a97bf17cf77e45",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val selectedScreen = remember { mutableStateOf(0) }\n    val navController = rememberNavController()\n\n    Scaffold(\n        bottomBar = { BottomBar(selectedScreen.value, onItemSelected = { index -> selectedScreen.value = index }) },\n        content = { padding ->\n            when (selectedScreen.value) {\n                0 -> MusicCategoriesScreen(navController, Modifier.padding(padding))\n                1 -> FavoritesScreen(navController)\n            }\n        }\n    )\n}",
    "filename": "52b709c62a830240c8a97bf17cf77e45_5.kt"
  },
  {
    "conversation_hash": "52b709c62a830240c8a97bf17cf77e45",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun BottomBar(selectedScreen: Int, onItemSelected: (Int) -> Unit) {\n    BottomAppBar {\n        BottomNavigationItem(\n            icon = { Icon(Icons.Filled.Home, contentDescription = null) },\n            selected = selectedScreen == 0,\n            onClick = {\n                onItemSelected(0)\n            }\n        )\n        BottomNavigationItem(\n            icon = { Icon(Icons.Filled.Favorite, contentDescription = null) },\n            selected = selectedScreen == 1,\n            onClick = {\n                onItemSelected(1)\n            }\n        )\n    }\n}",
    "filename": "52b709c62a830240c8a97bf17cf77e45_6.kt"
  },
  {
    "conversation_hash": "e2f7c2e29ac13242056e4166c5246901",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Add a new field inherit_album_cover_medium for each song in the response\ndata class AlbumDetailResponse(\n    val id: Int,\n    val title: String,\n    val cover_medium: String,\n    val tracks: TracksResponse\n)\n\ndata class TracksResponse(\n    val data: List<Song>,\n    val inherit_album_cover_medium: String // Add the inheritance field\n)\n\n// In your DeezerApiService\n@GET(\"album/{album_id}\")\nsuspend fun getAlbumDetails(@Path(\"album_id\") albumId: Int): AlbumDetailResponse",
    "filename": "e2f7c2e29ac13242056e4166c5246901_2.kt"
  },
  {
    "conversation_hash": "e2f7c2e29ac13242056e4166c5246901",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "// In the AlbumDetailScreen\nsuspend fun getAlbumDetails(albumId: Int): AlbumDetails {\n    val response = deezerApiService.getAlbumDetails(albumId)\n    return AlbumDetails(\n        id = response.id,\n        title = response.title,\n        cover_medium = response.cover_medium,\n        songs = response.tracks.data.map { song -> \n            song.copy(cover_medium = song.cover_medium ?: response.tracks.inherit_album_cover_medium)\n        }\n    )\n}",
    "filename": "e2f7c2e29ac13242056e4166c5246901_3.kt"
  },
  {
    "conversation_hash": "393c216b1a13ccb39df4bcc60aa2fb83",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val selectedScreen = remember { mutableStateOf(0) }\n    val navController = rememberNavController()\n\n    Scaffold(\n        bottomBar = { BottomBar(selectedScreen.value) { index -> selectedScreen.value = index }},\n        content = { padding ->\n            NavHost(navController, startDestination = \"musicCategories\") {\n                composable(\"musicCategories\") {\n                    val categoriesViewModel: CategoriesViewModel = viewModel()\n                    val categories by categoriesViewModel.categories.collectAsState()\n\n                    MusicCategoriesScreen(\n                        categories = categories,\n                        onCategorySelected = { category ->\n                            navController.navigate(\"artistsDetail/${category.id}\")\n                        },\n                        topBar = { TopBar(title = \"Music Categories\") }\n                    )\n                }\n                composable(\"artistsDetail/{categoryId}\") { backStackEntry ->\n                    val categoryId = backStackEntry.arguments?.getString(\"categoryId\")?.toIntOrNull()\n                    if (categoryId != null) {\n                        ArtistsScreen(navController, categoryId)\n                    }\n                }\n                composable(\"artistDetail/{artistId}\") { backStackEntry ->\n                    val artistId = backStackEntry.arguments?.getString(\"artistId\")?.toIntOrNull()\n                    if (artistId != null) {\n                        ArtistDetailScreen(artistId, navController)\n                    }\n                }\n                composable(\"albumDetail/{albumId}\") { backStackEntry ->\n                    val albumId = backStackEntry.arguments?.getString(\"albumId\")?.toIntOrNull()\n                    if (albumId != null) {\n                        AlbumDetailScreen(albumId,navController)\n                    }\n                }\n                composable(\"favorites\") {\n                    FavoritesScreen(navController)\n                }\n            }\n        }\n    )\n}",
    "filename": "393c216b1a13ccb39df4bcc60aa2fb83_1.kt"
  },
  {
    "conversation_hash": "fda47301ff74f59f963da7f19d314c43",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "TopBar",
      "androidx.compose.foundation.layout.Column",
      "androidx.compose.foundation.layout.padding",
      "androidx.compose.foundation.lazy.LazyColumn",
      "androidx.compose.material.Scaffold",
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.collectAsState",
      "androidx.compose.runtime.getValue",
      "androidx.compose.ui.Modifier",
      "androidx.lifecycle.viewmodel.compose.viewModel",
      "androidx.navigation.NavController",
      "com.example.musicapp.ViewModel.PlayerViewModel"
    ],
    "code": "package com.example.musicapp.Interface\n\nimport TopBar\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material.Scaffold\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport com.example.musicapp.ViewModel.PlayerViewModel\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\n\n@Composable\nfun FavoritesScreen(navController: NavController) {\n    val playerViewModel: PlayerViewModel = viewModel()\n    val favorites by playerViewModel.favorites.collectAsState()\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                LazyColumn {\n                    items(favorites) { song ->\n                        AlbumDetailItem(song, navController, playerViewModel)\n                    }\n                }\n            }\n        }\n    )\n}",
    "filename": "fda47301ff74f59f963da7f19d314c43_1.kt"
  },
  {
    "conversation_hash": "51b60360b43b3b3c4e1a9156b534feb3",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "com.example.musicapp.Data.",
      "okhttp3.OkHttpClient",
      "okhttp3.logging.HttpLoggingInterceptor",
      "retrofit2.Retrofit",
      "retrofit2.converter.gson.GsonConverterFactory",
      "retrofit2.http.GET",
      "retrofit2.http.Path"
    ],
    "code": "package com.example.musicapp.Data.Repository\n\nimport com.example.musicapp.Data.*\nimport okhttp3.OkHttpClient\nimport okhttp3.logging.HttpLoggingInterceptor\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.GET\nimport retrofit2.http.Path\n\ninterface DeezerApiService {\n    @GET(\"genre?output=json\")\n    suspend fun getGenres(): GenreResponse\n\n    @GET(\"genre/{genre_id}/artists\")\n    suspend fun getArtists(@Path(\"genre_id\") genreId: Int): ArtistResponse\n\n    @GET(\"artist/{artist_id}\")\n    suspend fun getArtistDetail(@Path(\"artist_id\") artistId: Int): ArtistDetailResponse\n\n    @GET(\"artist/{artist_id}/albums\")\n    suspend fun getArtistAlbums(@Path(\"artist_id\") artistId: Int): AlbumResponse\n\n    data class AlbumResponse(val data: List<Album>) {\n        fun toAlbumList(): List<Album> {\n            return data.map { albumData ->\n                Album(\n                    id = albumData.id,\n                    title = albumData.title,\n                    link = albumData.link,\n                    cover = albumData.cover,\n                    cover_small = albumData.cover_small,\n                    cover_medium = albumData.cover_medium,\n                    cover_big = albumData.cover_big,\n                    cover_xl = albumData.cover_xl,\n                    release_date = albumData.release_date,\n                    tracklist = albumData.tracklist,\n                    type = albumData.type\n                )\n            }\n        }\n    }\n\n    @GET(\"album/{album_id}\")\n    suspend fun getAlbumDetails(@Path(\"album_id\") albumId: Int): AlbumDetailResponse\n\n    data class AlbumDetailResponse(\n        val id: Int,\n        val title: String,\n        val cover_medium: String,\n        val tracks: TracksResponse\n    )\n\n    data class TracksResponse(\n        val data: List<Song>,\n        val inherit_album_cover_medium: String\n    )\n\n    data class GenreResponse(val data: List<Category>)\n    data class ArtistResponse(val data: List<Artist>)\n    data class ArtistDetailResponse(val id: Int, val name: String, val picture_big: String, val albums: List<Album>?)\n\n    companion object {\n        private const val BASE_URL = \"https://api.deezer.com/\"\n\n        fun create(): DeezerApiService {\n            val client = OkHttpClient.Builder()\n                .addInterceptor(HttpLoggingInterceptor().apply {\n                    level = HttpLoggingInterceptor.Level.BODY\n                })\n                .build()\n\n            return Retrofit.Builder()\n                .baseUrl(BASE_URL)\n                .client(client)\n                .addConverterFactory(GsonConverterFactory.create())\n                .build()\n                .create(DeezerApiService::class.java)\n        }\n    }\n}",
    "filename": "51b60360b43b3b3c4e1a9156b534feb3_0.kt"
  },
  {
    "conversation_hash": "51b60360b43b3b3c4e1a9156b534feb3",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "com.example.musicapp.Data.Album",
      "com.example.musicapp.Data.AlbumDetails",
      "com.example.musicapp.Data.Artist",
      "com.example.musicapp.Data.ArtistDetail",
      "com.example.musicapp.Data.Category"
    ],
    "code": "package com.example.musicapp.Data.Repository\n\nimport com.example.musicapp.Data.Album\nimport com.example.musicapp.Data.Artist\nimport com.example.musicapp.Data.ArtistDetail\nimport com.example.musicapp.Data.Category\nimport com.example.musicapp.Data.AlbumDetails\n\nclass DeezerRepository {\n    private val deezerApiService = DeezerApiService.create()\n\n    suspend fun getCategories(): List<Category> {\n        val response = deezerApiService.getGenres()\n        return response.data.map { category ->\n            Category(category.id, category.name, category.picture_medium)\n        }\n    }\n\n    suspend fun getArtists(genreId: Int): List<Artist> {\n        val response = deezerApiService.getArtists(genreId)\n        return response.data\n    }\n\n    suspend fun getArtistDetail(artistId: Int): ArtistDetail {\n        val response = deezerApiService.getArtistDetail(artistId)\n\n        return ArtistDetail(\n            id = response.id,\n            name = response.name,\n            pictureBig = response.picture_big,\n            albums = response.albums\n        )\n    }\n\n    suspend fun getArtistAlbums(artistId: Int): List<Album> {\n        val response = deezerApiService.getArtistAlbums(artistId)\n        return response.toAlbumList()\n    }\n\n    suspend fun getAlbumDetails(albumId: Int): AlbumDetails {\n        val response = deezerApiService.getAlbumDetails(albumId)\n        return AlbumDetails(\n            id = response.id,\n            title = response.title,\n            cover_medium = response.cover_medium,\n            songs = response.tracks.data\n        )\n    }\n}",
    "filename": "51b60360b43b3b3c4e1a9156b534feb3_1.kt"
  },
  {
    "conversation_hash": "08768486e38ea04e08f06c63efc7e0d8",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FavoritesScreen(navController: NavController) {\n    val playerViewModel: PlayerViewModel = viewModel()\n    val favorites by playerViewModel.favorites.collectAsState(initial = listOf())\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                LazyColumn {\n                    items(favorites) { song ->\n                        AlbumDetailItem(song, navController, playerViewModel)\n                    }\n                }\n            }\n        }\n    )\n}",
    "filename": "08768486e38ea04e08f06c63efc7e0d8_0.kt"
  },
  {
    "conversation_hash": "08768486e38ea04e08f06c63efc7e0d8",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerViewModel : ViewModel() {\n\n    private val _favorites = MutableStateFlow<List<Song>>(listOf())\n    val favorites: StateFlow<List<Song>> = _favorites\n\n    // ... Your other code\n}",
    "filename": "08768486e38ea04e08f06c63efc7e0d8_1.kt"
  },
  {
    "conversation_hash": "08768486e38ea04e08f06c63efc7e0d8",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerViewModel : ViewModel() {\n    // ...\n\n    private val _favorites = MutableStateFlow<List<Song>>(emptyList())\n    val favorites: StateFlow<List<Song>> = _favorites\n\n    // ...\n}",
    "filename": "08768486e38ea04e08f06c63efc7e0d8_2.kt"
  },
  {
    "conversation_hash": "08768486e38ea04e08f06c63efc7e0d8",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailItem(song: Song, navController: NavController, playerViewModel: PlayerViewModel) {\n    // ...\n\n    val painter = rememberImagePainter(\n        data = song.album.cover_medium,\n        builder = {\n            crossfade(true)\n            transformations(CircleCropTransformation())\n\n            if (song.album.cover_medium == null) {\n                this.placeholder(R.drawable.no_image)\n\n            }\n        }\n    )\n\n    // ...\n}",
    "filename": "08768486e38ea04e08f06c63efc7e0d8_3.kt"
  },
  {
    "conversation_hash": "c10c13e2dc5a2c0ec2d243c40bb99293",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    Scaffold(\n        bottomBar = {\n            BottomNavigationBar(navController)\n        },\n        content = { padding ->\n            NavHost(navController, startDestination = \"musicCategories\") {\n                composable(\"musicCategories\") {\n                    val categoriesViewModel: CategoriesViewModel = viewModel()\n                    val categories by categoriesViewModel.categories.collectAsState()\n\n                    MusicCategoriesScreen(\n                        categories = categories,\n                        onCategorySelected = { category ->\n                            navController.navigate(\"artistsDetail/${category.id}\")\n                        },\n                        topBar = { TopBar(title = \"Music Categories\") }\n                    )\n                }\n                composable(\"artistsDetail/{categoryId}\") { backStackEntry ->\n                    val categoryId = backStackEntry.arguments?.getString(\"categoryId\")?.toIntOrNull()\n                    if (categoryId != null) {\n                        ArtistsScreen(navController, categoryId)\n                    }\n                }\n                composable(\"artistDetail/{artistId}\") { backStackEntry ->\n                    val artistId = backStackEntry.arguments?.getString(\"artistId\")?.toIntOrNull()\n                    if (artistId != null) {\n                        ArtistDetailScreen(artistId, navController)\n                    }\n                }\n                composable(\"albumDetail/{albumId}\") { backStackEntry ->\n                    val albumId = backStackEntry.arguments?.getString(\"albumId\")?.toIntOrNull()\n                    if (albumId != null) {\n                        AlbumDetailScreen(albumId, navController)\n                    }\n                }\n                composable(\"favorites\") {\n                    FavoritesScreen(navController)\n                }\n            }\n        }\n    )\n}\n\n@Composable\nfun BottomNavigationBar(navController: NavController) {\n    val navBackStackEntry = navController.currentBackStackEntryAsState()\n    val currentRoute = navBackStackEntry.value?.destination?.route\n\n    BottomNavigation {\n        BottomNavigationItem(\n            icon = { Icon(Icons.Filled.Home, contentDescription = null) },\n            selected = currentRoute == \"musicCategories\",\n            onClick = {\n                navController.navigate(\"musicCategories\") {\n                    popUpTo(navController.graph.startDestination)\n                    launchSingleTop = true\n                }\n            }\n        )\n        BottomNavigationItem(\n            icon = { Icon(Icons.Filled.Favorite, contentDescription = null) },\n            selected = currentRoute == \"favorites\",\n            onClick = {\n                navController.navigate(\"favorites\") {\n                    popUpTo(navController.graph.startDestination)\n                    launchSingleTop = true\n                }\n            }\n        )\n    }\n}",
    "filename": "c10c13e2dc5a2c0ec2d243c40bb99293_0.kt"
  },
  {
    "conversation_hash": "c10c13e2dc5a2c0ec2d243c40bb99293",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FavoritesScreen(navController: NavController) {\n    val playerViewModel: PlayerViewModel = viewModel()\n    val favorites by playerViewModel.favorites.collectAsState(initial = listOf())\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                LazyColumn {\n                    items(favorites) { song ->\n                        AlbumDetailItem(song, navController, playerViewModel)\n                    }\n                }\n            }\n        }\n    )\n}",
    "filename": "c10c13e2dc5a2c0ec2d243c40bb99293_1.kt"
  },
  {
    "conversation_hash": "c10c13e2dc5a2c0ec2d243c40bb99293",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    Scaffold(\n        bottomBar = {\n            BottomNavigationBar(navController)\n        },\n        content = { padding ->\n            NavHost(navController, startDestination = \"musicCategories\") {\n                composable(\"musicCategories\") {\n                    val categoriesViewModel: CategoriesViewModel = viewModel()\n                    val categories by categoriesViewModel.categories.collectAsState()\n\n                    MusicCategoriesScreen(\n                        categories = categories,\n                        onCategorySelected = { category ->\n                            navController.navigate(\"artistsDetail/${category.id}\")\n                        },\n                        topBar = { TopBar(title = \"Music Categories\") },\n                        modifier = Modifier.padding(padding)\n                    )\n                }\n                composable(\"artistsDetail/{categoryId}\") { backStackEntry ->\n                    val categoryId = backStackEntry.arguments?.getString(\"categoryId\")?.toIntOrNull()\n                    if (categoryId != null) {\n                        ArtistsScreen(navController, categoryId)\n                    }\n                }\n                composable(\"artistDetail/{artistId}\") { backStackEntry ->\n                    val artistId = backStackEntry.arguments?.getString(\"artistId\")?.toIntOrNull()\n                    if (artistId != null) {\n                        ArtistDetailScreen(artistId, navController)\n                    }\n                }\n                composable(\"albumDetail/{albumId}\") { backStackEntry ->\n                    val albumId = backStackEntry.arguments?.getString(\"albumId\")?.toIntOrNull()\n                    if (albumId != null) {\n                        AlbumDetailScreen(albumId, navController)\n                    }\n                }\n                composable(\"favorites\") {\n                    FavoritesScreen(navController)\n                }\n            }\n        }\n    )\n}\n\n@Composable\nfun BottomNavigationBar(navController: NavController) {\n    val navBackStackEntry = navController.currentBackStackEntryAsState()\n    val currentRoute = navBackStackEntry.value?.destination?.route\n\n    BottomNavigation {\n        BottomNavigationItem(\n            icon = { Icon(Icons.Filled.Home, contentDescription = null) },\n            selected = currentRoute == \"musicCategories\",\n            onClick = {\n                navController.navigate(\"musicCategories\") {\n                    // Corrected line:\n                    popUpTo(\"musicCategories\") {\n                        inclusive = true\n                    }\n                    launchSingleTop = true\n                }\n            }\n        )\n        BottomNavigationItem(\n            icon = { Icon(Icons.Filled.Favorite, contentDescription = null) },\n            selected = currentRoute == \"favorites\",\n            onClick = {\n                navController.navigate(\"favorites\") {\n                    // Corrected line:\n                    popUpTo(\"musicCategories\") {\n                        inclusive = true\n                    }\n                    launchSingleTop = true\n                }\n            }\n        )\n    }\n}",
    "filename": "c10c13e2dc5a2c0ec2d243c40bb99293_5.kt"
  },
  {
    "conversation_hash": "8e26ec250c685892c7e7bcda60dd2219",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FavoritesScreen(navController: NavController) {\n    val playerViewModel: PlayerViewModel = viewModel()\n    val favorites by playerViewModel.favorites.collectAsState(initial = listOf())\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                LazyColumn {\n                    items(favorites) { song ->\n                        AlbumDetailItem(song, navController, playerViewModel)\n                    }\n                }\n            }\n        }\n    )\n}",
    "filename": "8e26ec250c685892c7e7bcda60dd2219_2.kt"
  },
  {
    "conversation_hash": "8e26ec250c685892c7e7bcda60dd2219",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun addFavoriteSong(song: Song) {\n        _favorites.value = _favorites.value.toMutableList().apply { add(song) }\n    }\n\n    fun removeFavoriteSong(song: Song) {\n        _favorites.value = _favorites.value.toMutableList().apply { remove(song) }\n    }\n\n    fun isFavorite(song: Song): Boolean {\n        return _favorites.value.contains(song)\n    }",
    "filename": "8e26ec250c685892c7e7bcda60dd2219_4.kt"
  },
  {
    "conversation_hash": "8e26ec250c685892c7e7bcda60dd2219",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FavoritesScreen(navController: NavController) {\n    val playerViewModel = viewModel<PlayerViewModel>(factory = PlayerViewModelFactory(LocalContext.current))\n    val favorites by playerViewModel.favorites.collectAsState()\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                LazyColumn {\n                    items(favorites) { song ->\n                        AlbumDetailItem(song, navController, playerViewModel)\n                    }\n                }\n            }\n        }\n    )\n}",
    "filename": "8e26ec250c685892c7e7bcda60dd2219_7.kt"
  },
  {
    "conversation_hash": "8e26ec250c685892c7e7bcda60dd2219",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun loadFavorites(): List<Song> {\n    val json = sharedPreferences.getString(\"favorites\", \"[]\")\n    val type = object : TypeToken<List<Song>>() {}.type\n    return gson.fromJson(json, type)\n}",
    "filename": "8e26ec250c685892c7e7bcda60dd2219_10.kt"
  },
  {
    "conversation_hash": "8e26ec250c685892c7e7bcda60dd2219",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun addFavoriteSong(song: Song) {\n    _favorites = _favorites.value.toMutableList().apply { add(song) }\n    saveFavorites() // Don't forget to save the updated list\n}\n\nfun removeFavoriteSong(song: Song) {\n    _favorites = _favorites.value.toMutableList().apply { remove(song) }\n    saveFavorites() // Don't forget to save the updated list\n}",
    "filename": "8e26ec250c685892c7e7bcda60dd2219_12.kt"
  },
  {
    "conversation_hash": "8e26ec250c685892c7e7bcda60dd2219",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.ViewModelProvider"
    ],
    "code": "import android.content.Context\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.ViewModelProvider\n\nclass PlayerViewModelFactory(private val context: Context) : ViewModelProvider.Factory {\n    override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n        if (modelClass.isAssignableFrom(PlayerViewModel::class.java)) {\n            return PlayerViewModel(context) as T\n        }\n        throw IllegalArgumentException(\"Unknown ViewModel class\")\n    }\n}",
    "filename": "8e26ec250c685892c7e7bcda60dd2219_13.kt"
  },
  {
    "conversation_hash": "8e26ec250c685892c7e7bcda60dd2219",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FavoritesScreen(navController: NavController) {\n    val playerViewModel = viewModel<PlayerViewModel>(factory = PlayerViewModelFactory(LocalContext.current))\n    // ... (the rest of the code stays the same)\n}",
    "filename": "8e26ec250c685892c7e7bcda60dd2219_15.kt"
  },
  {
    "conversation_hash": "8e26ec250c685892c7e7bcda60dd2219",
    "code_index": 21,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.ViewModelProvider"
    ],
    "code": "import android.content.Context\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.ViewModelProvider\n\nclass PlayerViewModelFactory(private val context: Context) : ViewModelProvider.NewInstanceFactory() {\n    override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n        if (modelClass.isAssignableFrom(PlayerViewModel::class.java)) {\n            return PlayerViewModel(context) as T\n        }\n        throw IllegalArgumentException(\"Unknown ViewModel class\")\n    }\n}",
    "filename": "8e26ec250c685892c7e7bcda60dd2219_21.kt"
  },
  {
    "conversation_hash": "8e26ec250c685892c7e7bcda60dd2219",
    "code_index": 22,
    "language": "Kotlin",
    "libraries": [
      "TopBar",
      "androidx.compose.foundation.layout.Column",
      "androidx.compose.foundation.layout.padding",
      "androidx.compose.foundation.lazy.LazyColumn",
      "androidx.compose.foundation.lazy.items",
      "androidx.compose.material.Scaffold",
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.collectAsState",
      "androidx.compose.runtime.getValue",
      "androidx.compose.ui.Modifier",
      "androidx.compose.ui.platform.LocalContext",
      "androidx.lifecycle.viewmodel.compose.viewModel",
      "androidx.navigation.NavController",
      "com.example.musicapp.ViewModel.PlayerViewModel",
      "com.example.musicapp.ViewModel.PlayerViewModelFactory"
    ],
    "code": "package com.example.musicapp.Interface\n\nimport TopBar\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material.Scaffold\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport com.example.musicapp.ViewModel.PlayerViewModel\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.platform.LocalContext\nimport com.example.musicapp.ViewModel.PlayerViewModelFactory\n\n@Composable\nfun FavoritesScreen(navController: NavController) {\n    val playerViewModel = viewModel<PlayerViewModel>(factory = PlayerViewModelFactory(LocalContext.current))\n    val favorites by playerViewModel.favorites.collectAsState()\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                LazyColumn {\n                    items(favorites) { song ->\n                        AlbumDetailItem(song, navController, playerViewModel)\n                    }\n                }\n            }\n        }\n    )\n}",
    "filename": "8e26ec250c685892c7e7bcda60dd2219_22.kt"
  },
  {
    "conversation_hash": "8e26ec250c685892c7e7bcda60dd2219",
    "code_index": 23,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "androidx.compose.runtime.mutableStateOf",
      "androidx.lifecycle.ViewModel",
      "com.example.musicapp.Data.Song",
      "com.google.android.exoplayer2.ExoPlayer",
      "com.google.android.exoplayer2.MediaItem",
      "com.google.android.exoplayer2.SimpleExoPlayer",
      "com.google.gson.Gson",
      "com.google.gson.reflect.TypeToken",
      "kotlinx.coroutines.flow.MutableStateFlow",
      "kotlinx.coroutines.flow.StateFlow"
    ],
    "code": "package com.example.musicapp.ViewModel\n\nimport android.content.Context\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.lifecycle.ViewModel\nimport com.example.musicapp.Data.Song\nimport com.google.android.exoplayer2.ExoPlayer\nimport com.google.android.exoplayer2.MediaItem\nimport com.google.android.exoplayer2.SimpleExoPlayer\nimport com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\n\nclass PlayerViewModel(private val context: Context) : ViewModel() {\n    var currentPlayer = mutableStateOf<SimpleExoPlayer?>(null)\n    var currentSong = mutableStateOf<Song?>(null)\n    var isPlaying = mutableStateOf(false)\n\n    private val sharedPreferences = context.getSharedPreferences(\"music_app\", Context.MODE_PRIVATE)\n    private val gson = Gson()\n    private val _favorites = mutableStateOf(emptyList<Song>())\n    val favorites = _favorites\n\n    // ... (Rest of the code remains the same)\n}",
    "filename": "8e26ec250c685892c7e7bcda60dd2219_23.kt"
  },
  {
    "conversation_hash": "8e26ec250c685892c7e7bcda60dd2219",
    "code_index": 24,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.ViewModelProvider"
    ],
    "code": "package com.example.musicapp.ViewModel\n\nimport android.content.Context\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.ViewModelProvider\n\nclass PlayerViewModelFactory(private val context: Context) : ViewModelProvider.NewInstanceFactory() {\n    override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n        if (modelClass.isAssignableFrom(PlayerViewModel::class.java)) {\n            return PlayerViewModel(context) as T\n        }\n        throw IllegalArgumentException(\"Unknown ViewModel class\")\n    }\n}",
    "filename": "8e26ec250c685892c7e7bcda60dd2219_24.kt"
  },
  {
    "conversation_hash": "1f3fb9a4743c0222686867d97d32348d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.MutableState",
      "androidx.compose.runtime.State",
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewModel.compose.viewModel"
    ],
    "code": "import androidx.compose.runtime.MutableState\nimport androidx.compose.runtime.State\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModel.compose.viewModel\n\n/* Other imports... */\n\nclass PlayerViewModelFactory(private val context: Context) : ViewModelProvider.NewInstanceFactory() {\n    override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n        if (modelClass.isAssignableFrom(PlayerViewModel::class.java)) {\n            return PlayerViewModel(context) as T\n        }\n        throw IllegalArgumentException(\"Unknown ViewModel class\")\n    }\n}\n\nclass PlayerViewModel(private val context: Context) : ViewModel() {\n    var currentPlayer = mutableStateOf<SimpleExoPlayer?>(null)\n    var currentSong = mutableStateOf<Song?>(null)\n    var isPlaying = mutableStateOf(false)\n\n    private val sharedPreferences = context.getSharedPreferences(\"music_app\", Context.MODE_PRIVATE)\n    private val gson = Gson()\n    private val _favorites = mutableStateOf(emptyList<Song>())\n    val favorites = _favorites\n\n\n    /* Other methods... */\n\n    private fun loadFavorites(): List<Song> {\n        /* ... */\n    }\n\n    private fun saveFavorites() {\n        /* ... */\n    }\n\n    fun addFavoriteSong(song: Song) {\n        _favorites.value = _favorites.value.toMutableList().apply { add(song) } // Correction here\n        saveFavorites()\n    }\n\n    fun removeFavoriteSong(song: Song) {\n        _favorites.value = _favorites.value.toMutableList().apply { remove(song) } // Correction here\n        saveFavorites()\n    }\n\n    fun isFavorite(song: Song): Boolean {\n        return _favorites.value.contains(song)\n    }\n}",
    "filename": "1f3fb9a4743c0222686867d97d32348d_0.kt"
  },
  {
    "conversation_hash": "1f3fb9a4743c0222686867d97d32348d",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.ViewModelProvider"
    ],
    "code": "package com.example.musicapp.ViewModel\n\nimport android.content.Context\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.ViewModelProvider\n\nclass PlayerViewModelFactory(private val context: Context) : ViewModelProvider.NewInstanceFactory() {\n    override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n        if (modelClass.isAssignableFrom(PlayerViewModel::class.java)) {\n            return PlayerViewModel(context) as T\n        }\n        throw IllegalArgumentException(\"Unknown ViewModel class\")\n    }\n}",
    "filename": "1f3fb9a4743c0222686867d97d32348d_1.kt"
  },
  {
    "conversation_hash": "1f3fb9a4743c0222686867d97d32348d",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "androidx.compose.runtime.MutableState",
      "androidx.compose.runtime.mutableStateOf",
      "androidx.lifecycle.ViewModel",
      "com.example.musicapp.Data.Song",
      "com.google.android.exoplayer2.SimpleExoPlayer",
      "com.google.gson.Gson",
      "required"
    ],
    "code": "package com.example.musicapp.ViewModel\n\nimport android.content.Context\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.lifecycle.ViewModel\nimport com.example.musicapp.Data.Song\nimport com.google.android.exoplayer2.SimpleExoPlayer\nimport com.google.gson.Gson\nimport androidx.compose.runtime.MutableState\n\nclass PlayerViewModel(private val context: Context) : ViewModel() {\n    var currentPlayer = mutableStateOf<SimpleExoPlayer?>(null)\n    var currentSong = mutableStateOf<Song?>(null)\n    var isPlaying = mutableStateOf(false)\n\n    private val sharedPreferences = context.getSharedPreferences(\"music_app\", Context.MODE_PRIVATE)\n    private val gson = Gson()\n    private val _favorites = mutableStateOf(emptyList<Song>())\n    val favorites: MutableState<List<Song>> = _favorites // Change the type to MutableState (import required)\n\n    /* Other methods... */\n\n    private fun loadFavorites(): List<Song> {\n        /* ... */\n    }\n\n    private fun saveFavorites() {\n        /* ... */\n    }\n\n    fun addFavoriteSong(song: Song) {\n        _favorites.value = _favorites.value.toMutableList().apply { add(song) }\n        saveFavorites()\n    }\n\n    fun removeFavoriteSong(song: Song) {\n        _favorites.value = _favorites.value.toMutableList().apply { remove(song) }\n        saveFavorites()\n    }\n\n    fun isFavorite(song: Song): Boolean {\n        return _favorites.value.contains(song)\n    }\n}",
    "filename": "1f3fb9a4743c0222686867d97d32348d_2.kt"
  },
  {
    "conversation_hash": "1f3fb9a4743c0222686867d97d32348d",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.collectAsState"
    ],
    "code": "import androidx.compose.runtime.collectAsState // Add this import\n\n@Composable\nfun FavoritesScreen(navController: NavController) {\n    val playerViewModel = viewModel<PlayerViewModel>(factory = PlayerViewModelFactory(LocalContext.current))\n    val favorites by playerViewModel.favorites.collectAsState()\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                LazyColumn {\n                    items(favorites) { song ->\n                        AlbumDetailItem(song, navController, playerViewModel)\n                    }\n                }\n            }\n        }\n    )\n}",
    "filename": "1f3fb9a4743c0222686867d97d32348d_3.kt"
  },
  {
    "conversation_hash": "1f3fb9a4743c0222686867d97d32348d",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.collectAsState"
    ],
    "code": "import androidx.compose.runtime.collectAsState // Add this import\n\n@Composable\nfun AlbumDetailScreen(albumId: Int, navController: NavController) {\n    val albumDetailsViewModel: AlbumDetailsViewModel = viewModel()\n    val playerViewModel: PlayerViewModel = viewModel()\n    albumDetailsViewModel.fetchAlbumDetails(albumId)\n    val albumDetails by albumDetailsViewModel.albumDetails.collectAsState()\n\n    albumDetails?.let { details ->\n        Scaffold(\n            topBar = {\n                TopBar(title = details.title)\n            },\n            content = { padding ->\n                Column(\n                    modifier = Modifier.padding(padding)\n                ) {\n                    LazyColumn {\n                        items(details.songs) { song ->\n                            AlbumDetailItem(song, navController, playerViewModel)\n                        }\n                    }\n                }\n            }\n        )\n    }\n}",
    "filename": "1f3fb9a4743c0222686867d97d32348d_4.kt"
  },
  {
    "conversation_hash": "1f3fb9a4743c0222686867d97d32348d",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "/* Imports and other code */\n\n@Composable\nfun FavoritesScreen(navController: NavController) {\n    val playerViewModel = viewModel<PlayerViewModel>(factory = PlayerViewModelFactory(LocalContext.current))\n    val favorites by playerViewModel.favorites.collectAsState()\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                LazyColumn {\n                    itemsIndexed(favorites) { _, song -> // Use itemsIndexed instead of items\n                        AlbumDetailItem(song, navController, playerViewModel)\n                    }\n                }\n            }\n        }\n    )\n}\n\n/* Other code */\n\n@Composable\nfun AlbumDetailScreen(albumId: Int, navController: NavController) {\n    /* Other code */\n\n    albumDetails?.let { details ->\n        Scaffold(\n            topBar = {\n                TopBar(title = details.title)\n            },\n            content = { padding ->\n                Column(\n                    modifier = Modifier.padding(padding)\n                ) {\n                    LazyColumn {\n                        itemsIndexed(details.songs) { _, song -> // Use itemsIndexed instead of items\n                            AlbumDetailItem(song, navController, playerViewModel)\n                        }\n                    }\n                }\n            }\n        )\n    }\n}",
    "filename": "1f3fb9a4743c0222686867d97d32348d_5.kt"
  },
  {
    "conversation_hash": "1f3fb9a4743c0222686867d97d32348d",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FavoritesScreen(navController: NavController) {\n    val playerViewModel = viewModel<PlayerViewModel>(factory = PlayerViewModelFactory(LocalContext.current))\n    val favorites by playerViewModel.favorites.collectAsState()\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                LazyColumn {\n                    items(favorites) { song -> // Use items instead of itemsIndexed\n                        AlbumDetailItem(song, navController, playerViewModel)\n                    }\n                }\n            }\n        }\n    )\n}",
    "filename": "1f3fb9a4743c0222686867d97d32348d_7.kt"
  },
  {
    "conversation_hash": "65d5835864de6c074e1b5344b5aa73e8",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FavoritesScreen(navController: NavController) {\n    val context = LocalContext.current // Add this line\n    val playerViewModel = viewModel<PlayerViewModel>(factory = PlayerViewModelFactory(context))\n    val favorites by playerViewModel.favorites.collectAsState()\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                LazyColumn {\n                    items(favorites) { song ->\n                        // Modify same as AlbumDetailItem\n                        AlbumDetailItem(song, navController, playerViewModel)\n                    }\n                }\n            }\n        }\n    )\n}",
    "filename": "65d5835864de6c074e1b5344b5aa73e8_0.kt"
  },
  {
    "conversation_hash": "65d5835864de6c074e1b5344b5aa73e8",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun FavoritesScreen(navController: NavController) {\n    val context = LocalContext.current\n    val playerViewModel = viewModel<PlayerViewModel>(factory = PlayerViewModelFactory(context))\n    val favorites by playerViewModel.favorites.collectAsState()\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                FavoritesList(favorites, navController, playerViewModel)\n            }\n        }\n    )\n}\n\n@Composable\nfun FavoritesList(\n    favorites: List<Song>,\n    navController: NavController,\n    playerViewModel: PlayerViewModel\n) {\n    LazyColumn {\n        items(favorites.size) { index ->\n            val song = favorites[index]\n            AlbumDetailItem(song, navController, playerViewModel)\n        }\n    }\n}",
    "filename": "65d5835864de6c074e1b5344b5aa73e8_1.kt"
  },
  {
    "conversation_hash": "853de4d4a1bece49f1b4e2f885ea3c1c",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.livedata.observeAsState"
    ],
    "code": "import androidx.compose.runtime.livedata.observeAsState\n\n@Composable\nfun FavoritesScreen(navController: NavController) {\n    val context = LocalContext.current\n    val playerViewModel = viewModel<PlayerViewModel>(factory = PlayerViewModelFactory(context))\n    val favorites by playerViewModel.favorites.observeAsState(emptyList<Song>())\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                FavoritesList(favorites, navController, playerViewModel)\n            }\n        }\n    )\n}",
    "filename": "853de4d4a1bece49f1b4e2f885ea3c1c_0.kt"
  },
  {
    "conversation_hash": "334ed1c645aa2ab0247b1324139c3c4a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.Column",
      "androidx.compose.foundation.layout.padding",
      "androidx.compose.foundation.lazy.LazyColumn",
      "androidx.compose.material.Scaffold",
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.livedata.observeAsState",
      "androidx.compose.ui.Modifier",
      "androidx.compose.ui.platform.LocalContext",
      "androidx.lifecycle.viewmodel.compose.viewModel",
      "androidx.navigation.NavController",
      "com.example.musicapp.Data.Song",
      "com.example.musicapp.Interface.AlbumDetailItem",
      "com.example.musicapp.Interface.TopBar",
      "com.example.musicapp.ViewModel.PlayerViewModel",
      "com.example.musicapp.ViewModel.PlayerViewModelFactory"
    ],
    "code": "import androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material.Scaffold\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport com.example.musicapp.Data.Song\nimport com.example.musicapp.Interface.TopBar\nimport com.example.musicapp.ViewModel.PlayerViewModel\nimport com.example.musicapp.ViewModel.PlayerViewModelFactory\nimport androidx.compose.runtime.livedata.observeAsState\nimport androidx.compose.ui.platform.LocalContext\nimport com.example.musicapp.Interface.AlbumDetailItem\n\n@Composable\nfun FavoritesScreen(navController: NavController) {\n    val context = LocalContext.current\n    val playerViewModel = viewModel<PlayerViewModel>(factory = PlayerViewModelFactory(context))\n    val favorites by playerViewModel.favorites.observeAsState(emptyList<Song>())\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                FavoritesList(favorites, navController, playerViewModel)\n            }\n        }\n    )\n}\n\n@Composable\nfun FavoritesList(\n    favorites: List<Song>,\n    navController: NavController,\n    playerViewModel: PlayerViewModel\n) {\n    LazyColumn {\n        items(favorites.size) { index ->\n            val song = favorites[index]\n            AlbumDetailItem(song, navController, playerViewModel)\n        }\n    }\n}",
    "filename": "334ed1c645aa2ab0247b1324139c3c4a_1.kt"
  },
  {
    "conversation_hash": "334ed1c645aa2ab0247b1324139c3c4a",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.Column",
      "androidx.compose.foundation.layout.padding",
      "androidx.compose.foundation.lazy.LazyColumn",
      "androidx.compose.material.Scaffold",
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.collectAsState",
      "androidx.compose.ui.Modifier",
      "androidx.compose.ui.platform.LocalContext",
      "androidx.lifecycle.viewmodel.compose.viewModel",
      "androidx.navigation.NavController",
      "com.example.musicapp.Data.Song",
      "com.example.musicapp.Interface.AlbumDetailItem",
      "com.example.musicapp.Interface.TopBar",
      "com.example.musicapp.ViewModel.PlayerViewModel",
      "com.example.musicapp.ViewModel.PlayerViewModelFactory"
    ],
    "code": "import androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material.Scaffold\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.ui.Modifier\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport com.example.musicapp.Data.Song\nimport com.example.musicapp.Interface.TopBar\nimport com.example.musicapp.ViewModel.PlayerViewModel\nimport com.example.musicapp.ViewModel.PlayerViewModelFactory\nimport androidx.compose.ui.platform.LocalContext\nimport com.example.musicapp.Interface.AlbumDetailItem\n\n@Composable\nfun FavoritesScreen(navController: NavController) {\n    val context = LocalContext.current\n    val playerViewModel: PlayerViewModel = viewModel(factory = PlayerViewModelFactory(context))\n    val favorites by playerViewModel.favorites.collectAsState(emptyList<Song>())\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                FavoritesList(favorites, navController, playerViewModel)\n            }\n        }\n    )\n}\n\n@Composable\nfun FavoritesList(\n    favorites: List<Song>,\n    navController: NavController,\n    playerViewModel: PlayerViewModel\n) {\n    LazyColumn {\n        items(favorites.size) { index ->\n            val song = favorites[index]\n            AlbumDetailItem(song, navController, playerViewModel)\n        }\n    }\n}",
    "filename": "334ed1c645aa2ab0247b1324139c3c4a_4.kt"
  },
  {
    "conversation_hash": "334ed1c645aa2ab0247b1324139c3c4a",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailScreen(albumId: Int, navController: NavController) {\n    val playerViewModel = hiltViewModel<PlayerViewModel>()\n    // ...\n}",
    "filename": "334ed1c645aa2ab0247b1324139c3c4a_6.kt"
  },
  {
    "conversation_hash": "a95a083929e481858af51b5df4f964c9",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailScreen(albumId: Int, navController: NavController) {\n    val albumDetailsViewModel: AlbumDetailsViewModel = viewModel()\n    // Replace hiltViewModel with viewModel\n    val playerViewModel = viewModel<PlayerViewModel>()\n    albumDetailsViewModel.fetchAlbumDetails(albumId)\n    ...\n}",
    "filename": "a95a083929e481858af51b5df4f964c9_4.kt"
  },
  {
    "conversation_hash": "aa170365481315d8381a18eba65436f1",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.ViewModelProvider",
      "com.example.musicapp.Data.Repository.DeezerRepository"
    ],
    "code": "import androidx.lifecycle.ViewModel\nimport androidx.lifecycle.ViewModelProvider\nimport com.example.musicapp.Data.Repository.DeezerRepository\n\nclass PlayerViewModelFactory(private val deezerRepository: DeezerRepository) : ViewModelProvider.Factory {\n    @Suppress(\"UNCHECKED_CAST\")\n    override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n        if (modelClass.isAssignableFrom(PlayerViewModel::class.java)) {\n            return PlayerViewModel(deezerRepository) as T\n        }\n        throw IllegalArgumentException(\"Unknown ViewModel class\")\n    }\n}",
    "filename": "aa170365481315d8381a18eba65436f1_0.kt"
  },
  {
    "conversation_hash": "aa170365481315d8381a18eba65436f1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MainScreen() {\n    val navController = rememberNavController()\n\n    // Add this line:\n    val localViewModelStoreOwner = LocalViewModelStoreOwner.current\n\n    Scaffold(\n        bottomBar = {\n            BottomNavigationBar(navController)\n        },\n        content = { padding ->\n            NavHost(navController, startDestination = \"musicCategories\") {\n                // ...\n                composable(\"albumDetail/{albumId}\") { backStackEntry ->\n                    // ...\n                    if (albumId != null) {\n                        // Change this line:\n                        AlbumDetailScreen(albumId, navController, localViewModelStoreOwner)\n                    }\n                }\n                // ...\n            }\n        }\n    )\n}",
    "filename": "aa170365481315d8381a18eba65436f1_1.kt"
  },
  {
    "conversation_hash": "aa170365481315d8381a18eba65436f1",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.remember"
    ],
    "code": "// Add this import:\nimport androidx.compose.runtime.remember\n\n// Change AlbumDetailScreen signature:\n@Composable\nfun AlbumDetailScreen(\n    albumId: Int, \n    navController: NavController, \n    localViewModelStoreOwner: ViewModelStoreOwner  // Add this parameter\n) {\n    // Instantiate the DeezerRepository\n    val deezerRepository = remember { DeezerRepository() } // memoize to avoid re-initialization\n\n    // Change how you get the playerViewModel and pass the PlayerViewModelFactory along with the localViewModelStoreOwner:\n    val playerViewModel = remember { PlayerViewModelFactory(deezerRepository) }\n        .create(PlayerViewModel::class.java, localViewModelStoreOwner) \n\n    // ...\n}",
    "filename": "aa170365481315d8381a18eba65436f1_2.kt"
  },
  {
    "conversation_hash": "aa170365481315d8381a18eba65436f1",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewmodel.compose.viewModel",
      "com.example.musicapp.Data.Repository.DeezerRepository"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport com.example.musicapp.Data.Repository.DeezerRepository\n\nclass PlayerViewModelFactory(private val deezerRepository: DeezerRepository) {\n    @Composable\n    inline fun <reified T : ViewModel> provide(): T {\n        return viewModel(factory = object : ViewModelProvider.Factory {\n            override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n                if (modelClass.isAssignableFrom(PlayerViewModel::class.java)) {\n                    @Suppress(\"UNCHECKED_CAST\")\n                    return PlayerViewModel(deezerRepository) as T\n                }\n                throw IllegalArgumentException(\"Unknown ViewModel class\")\n            }\n        })\n    }\n}",
    "filename": "aa170365481315d8381a18eba65436f1_3.kt"
  },
  {
    "conversation_hash": "aa170365481315d8381a18eba65436f1",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailScreen(albumId: Int,\n                      navController: NavController,\n                      localViewModelStoreOwner: ViewModelStoreOwner\n) {\n    val deezerRepository = remember { DeezerRepository() } // memoize to avoid re-initialization\n    val albumDetailsViewModel: AlbumDetailsViewModel = viewModel()\n    val playerViewModel = remember { PlayerViewModelFactory(deezerRepository) }\n        .provide<PlayerViewModel>() // Change this line\n\n    // The rest of the code remains the same.\n}",
    "filename": "aa170365481315d8381a18eba65436f1_4.kt"
  },
  {
    "conversation_hash": "aa170365481315d8381a18eba65436f1",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailScreen(albumId: Int,\n                      navController: NavController,\n                      localViewModelStoreOwner: ViewModelStoreOwner\n) {\n    val deezerRepository = remember { DeezerRepository() } // memoize to avoid re-initialization\n    val albumDetailsViewModel: AlbumDetailsViewModel = viewModel()\n\n    // Replace the previous playerViewModel assignment with this code:\n    val playerViewModel = remember { PlayerViewModel(deezerRepository) }\n\n    // The rest of the code remains the same.\n}",
    "filename": "aa170365481315d8381a18eba65436f1_6.kt"
  },
  {
    "conversation_hash": "4da63c7e3c38a63cb1075f08aa035e4a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailScreen(/* ... */) {\n    val context = LocalContext.current\n    // ...\n    val playerViewModel = remember { PlayerViewModel(context) }\n    // ...\n}",
    "filename": "4da63c7e3c38a63cb1075f08aa035e4a_1.kt"
  },
  {
    "conversation_hash": "4da63c7e3c38a63cb1075f08aa035e4a",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun loadFavorites(): List<Song> {\n    val json = sharedPreferences.getString(\"favorites\", \"[]\") ?: \"[]\"\n    val type = object : TypeToken<List<Song>>() {}.type\n    return gson.fromJson(json, type)\n}",
    "filename": "4da63c7e3c38a63cb1075f08aa035e4a_3.kt"
  },
  {
    "conversation_hash": "25eb5c64f44d604c058a4cf92216dee3",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailScreen(albumId: Int, navController: NavController, localViewModelStoreOwner: ViewModelStoreOwner) {\n    Log.d(\"AlbumDetailScreen\", \"Called: albumId = $albumId\")\n\n    val context = LocalContext.current\n    val deezerRepository = remember { DeezerRepository() } // memoize to avoid re-initialization\n    val albumDetailsViewModel: AlbumDetailsViewModel = viewModel()\n\n    // Replace the previous playerViewModel assignment with this code:\n    val playerViewModel = remember { PlayerViewModel(context) }\n\n    val albumDetails = albumDetailsViewModel.albumDetails.collectAsState().value\n\n    albumDetails?.let { details ->\n        Log.d(\"AlbumDetailScreen\", \"Details available title = ${details.title}\")\n        Scaffold(\n            topBar = {\n                TopBar(title = details.title)\n            },\n            content = { padding ->\n                Column(modifier = Modifier.padding(padding)) {\n                    LazyColumn {\n                        itemsIndexed(details.songs) { _, song -> // Use itemsIndexed instead of items\n                            AlbumDetailItem(song, navController, playerViewModel)\n                        }\n                    }\n                }\n            }\n        )\n    } ?: run {\n        Log.d(\"AlbumDetailScreen\", \"Details not available\")\n    }\n}",
    "filename": "25eb5c64f44d604c058a4cf92216dee3_0.kt"
  },
  {
    "conversation_hash": "25eb5c64f44d604c058a4cf92216dee3",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun fetchAlbumDetails(albumId: Int) {\n    viewModelScope.launch {\n        try {\n            Log.d(\"AlbumDetailsViewModel\", \"Fetching album details\")\n            val albumDetails = deezerRepository.getAlbumDetails(albumId)\n            _albumDetails.value = albumDetails\n            Log.d(\"AlbumDetailsViewModel\", \"Fetched album details\")\n        } catch (e: Exception) {\n            Log.e(\"AlbumDetailsViewModel\", \"Failed to fetch album details: \" + e.message)\n        }\n    }\n}",
    "filename": "25eb5c64f44d604c058a4cf92216dee3_1.kt"
  },
  {
    "conversation_hash": "60b123117fd60b188be12a6a763c8b62",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailScreen(albumId: Int,\n                      navController: NavController,\n                      localViewModelStoreOwner: ViewModelStoreOwner\n) {\n    // ...\n    val albumDetailsViewModel: AlbumDetailsViewModel = viewModel()\n\n    // Add this line to fetch album details\n    albumDetailsViewModel.fetchAlbumDetails(albumId)\n    \n    // ...\n}",
    "filename": "60b123117fd60b188be12a6a763c8b62_0.kt"
  },
  {
    "conversation_hash": "87653176a19127a0de2d50c11750467f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailItem(song: Song, navController: NavController, playerViewModel: PlayerViewModel) {\n    // Remove the following line\n    // val context = LocalContext.current\n    // val playerViewModel = remember { PlayerViewModel(context) }\n\n    Row(\n        // ...\n    )\n}",
    "filename": "87653176a19127a0de2d50c11750467f_0.kt"
  },
  {
    "conversation_hash": "d9072f3d8e6f55eee1cde88ba9bb5194",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun AlbumDetailItem(song: Song, navController: NavController, playerViewModel: PlayerViewModel) {\n    val context = LocalContext.current\n\n    // Observe the favorite status of the song\n    val isFavoriteState = remember { mutableStateOf(playerViewModel.isFavorite(song)) }\n\n    // Watch for changes in the favorites and update the isFavoriteState appropriately\n    LaunchedEffect(playerViewModel.favorites) {\n        isFavoriteState.value = playerViewModel.isFavorite(song)\n    }\n\n    // Your previous code for Row, Column, etc.\n\n    IconButton(\n        onClick = {\n            if (playerViewModel.isFavorite(song)) {\n                playerViewModel.removeFavoriteSong(song)\n            } else {\n                playerViewModel.addFavoriteSong(song)\n            }\n            // Update isFavoriteState when heart icon is clicked\n            isFavoriteState.value = !isFavoriteState.value\n        },\n        modifier = Modifier\n            .align(Alignment.CenterVertically)\n            .padding(8.dp)\n    ) {\n        Icon(\n            painter = painterResource(id = if (isFavoriteState.value) R.drawable.heart_full else R.drawable.heart_empty),\n            contentDescription = if (isFavoriteState.value) \"Favorite\" else \"Not Favorite\",\n            modifier = Modifier.size(24.dp)\n        )\n    }\n}",
    "filename": "d9072f3d8e6f55eee1cde88ba9bb5194_0.kt"
  },
  {
    "conversation_hash": "d9072f3d8e6f55eee1cde88ba9bb5194",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerViewModel(private val context: Context) : ViewModel() {\n    // ...\n\n    init {\n        // Load favorites during ViewModel initialization\n        _favorites.value = loadFavorites()\n    }\n\n    // ...\n\n}",
    "filename": "d9072f3d8e6f55eee1cde88ba9bb5194_1.kt"
  },
  {
    "conversation_hash": "04199d045830cba27157248026d41d2f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "LazyColumn(contentPadding = PaddingValues(16.dp)) {\n    items(artists) { artist ->\n        ArtistItem(artist) { onArtistSelected(artist) } // FIX HERE\n    }\n}",
    "filename": "04199d045830cba27157248026d41d2f_0.kt"
  },
  {
    "conversation_hash": "b72b2c9562e16acf4f361229c4975b07",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.DisposableEffect"
    ],
    "code": "import androidx.compose.runtime.DisposableEffect\n\n@Composable\nfun FavoritesScreen() {\n    val context = LocalContext.current\n    val playerViewModel = remember { PlayerViewModel(context) }\n    val favorites by playerViewModel.favorites.collectAsState(emptyList<Song>())\n\n    Scaffold(\n        topBar = { TopBar(title = \"Favorites\") },\n        content = { padding ->\n            Column(modifier = Modifier.padding(padding)) {\n                FavoritesList(favorites, playerViewModel)\n            }\n        }\n    )\n\n    DisposableEffect(Unit) {\n        onDispose {\n            playerViewModel.stopSong()\n        }\n    }\n}",
    "filename": "b72b2c9562e16acf4f361229c4975b07_0.kt"
  },
  {
    "conversation_hash": "1f57f55f16d125ede51383b5eac5bdb3",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "val db = readableDatabase\nval records = mutableListOf<Record>()\n\nval cursor = db.query(\n    \"my_table\",\n    arrayOf(\"_id\", \"name\", \"age\"),\n    null,\n    null,\n    null,\n    null,\n    null\n)\n\nwhile (cursor.moveToNext()) {\n    val id = cursor.getInt(cursor.getColumnIndex(\"_id\"))\n    val name = cursor.getString(cursor.getColumnIndex(\"name\"))\n    val age = cursor.getInt(cursor.getColumnIndex(\"age\"))\n    val record = Record(id, name, age)\n    records.add(record)\n}\n\ncursor.close()\ndb.close()\n\nreturn records",
    "filename": "1f57f55f16d125ede51383b5eac5bdb3_2.kt"
  },
  {
    "conversation_hash": "f02a43b5bdcd710d87e3a91004a4b3e1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : ComponentActivity(), OnBackPressedDispatcherOwner {\n    private lateinit var backDispatcher: OnBackPressedDispatcher\n    private lateinit var navController: NavController\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        backDispatcher = OnBackPressedDispatcher {\n            onBackPressedDispatcher.onBackPressed()\n        }\n\n        setContent {\n            MusicAppTheme {\n                // Find the NavController within the NavHost in your app\n                navController = rememberNavController()\n                NavHost(navController, startDestination = \"album_detail\") {\n                    composable(\"album_detail\") {\n                        AlbumDetailScreen(navController)\n                    }\n                    \n                    composable(\"favorites\") {\n                        FavoritesScreen(navController)\n                    }\n                }\n            }\n        }\n    }\n\n    override fun getOnBackPressedDispatcher(): OnBackPressedDispatcher {\n        return backDispatcher\n    }\n}",
    "filename": "f02a43b5bdcd710d87e3a91004a4b3e1_1.kt"
  },
  {
    "conversation_hash": "16ec5d0ef3b0638d32621cfab68e05ef",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "val canvasStateSaver = Saver<TransformableState, List<Float>>(\n    save = { listOf(it.scale, it.offset.x, it.offset.y) },\n    restore = {\n        TransformableState().apply {\n            scale = it[0]\n            offset = Offset(it[1], it[2])\n        }\n    }\n)\n\nval canvasState = rememberSaveable(stateSaver = canvasStateSaver) {\n    TransformableState().apply {\n        onTransformGesture = { _, _, _ ->\n            // Save the state when it changes\n            canvasStateSaver.save(this)\n        }\n    }\n}",
    "filename": "16ec5d0ef3b0638d32621cfab68e05ef_0.kt"
  },
  {
    "conversation_hash": "16ec5d0ef3b0638d32621cfab68e05ef",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val canvasStateSaver = Saver<TransformationState, List<Float>>(\n    save = { listOf(it.scale, it.offset.x, it.offset.y) },\n    restore = {\n        TransformationState().apply {\n            scale = it[0]\n            offset = Offset(it[1], it[2])\n        }\n    }\n)\n\nval canvasState = rememberSaveable(stateSaver = canvasStateSaver) {\n    TransformationState().apply {\n        onTransformGesture = { _, _, _ ->\n            canvasStateSaver.save(this)\n        }\n    }\n}",
    "filename": "16ec5d0ef3b0638d32621cfab68e05ef_1.kt"
  },
  {
    "conversation_hash": "30900889c05a44e22f2e0576c1f3f438",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "if (cursor.moveToFirst()) {\n    val name = cursor.getString(cursor.getColumnIndex(\"name\"))\n    val age = cursor.getInt(cursor.getColumnIndex(\"age\"))\n    // Create a User object with the retrieved values\n    val user = User(name, age)\n    // Do something with the User object\n}",
    "filename": "30900889c05a44e22f2e0576c1f3f438_6.kt"
  },
  {
    "conversation_hash": "7c52daabf806792dc4463fd54670d1f4",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.serialization.ExperimentalSerializationApi",
      "kotlinx.serialization.KSerializer",
      "kotlinx.serialization.SerializationException",
      "kotlinx.serialization.descriptors.",
      "kotlinx.serialization.encoding.",
      "kotlinx.serialization.json."
    ],
    "code": "import kotlinx.serialization.ExperimentalSerializationApi\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.SerializationException\nimport kotlinx.serialization.descriptors.*\nimport kotlinx.serialization.encoding.*\nimport kotlinx.serialization.json.*\n\nopen class JsonObjectDeserializer<T>(private val type: KClass<T>) : JsonTransformingSerializer<T>(\n    JsonElement.serializer()\n) {\n    override fun transformDeserialize(element: JsonElement): JsonElement {\n        // Only transform JsonObject\n        return if (element is JsonObject) {\n            JsonPrimitive(element.toString())\n        } else {\n            element\n        }\n    }\n\n    override fun deserialize(transformed: JsonElement): T {\n        val json = Json.decodeFromString(JsonObject.serializer(), transformed.jsonPrimitive.content)\n        return type.serializer().deserialize(JsonObjectDecoder(json))\n    }\n}\n\n// Example usage for User class\n@Serializable\nclass User {\n    var id: Int = 0\n    var name: String? = null\n    @SerialName(\"credential.id\")\n    var credentialId: Int = 0\n    @SerialName(\"credential.code\")\n    var credentialCode: String? = null\n    @SerialName(\"service.name\")\n    var serviceName: String? = null\n    @SerialName(\"photo.type\")\n    var type: Int = 0\n    @SerialName(\"photo.image.data\")\n    var photo: String? = null\n}\n\nclass UserDeserializer : KSerializer<User> {\n    override val descriptor: SerialDescriptor = User::class.serializer().descriptor\n\n    override fun serialize(encoder: Encoder, value: User) {\n        throw UnsupportedOperationException(\"Serialization is not implemented !\")\n    }\n\n    @OptIn(ExperimentalSerializationApi::class)\n    override fun deserialize(decoder: Decoder): User {\n        return decoder.decodeStructure(descriptor) {\n            val user = User()\n            while (true) {\n                when (val index = decodeElementIndex(descriptor)) {\n                    0 -> {\n                        val photoJson = decodeNullableSerializableElement(descriptor, index, JsonObjectDeserializer::class.serializer())\n                        if (photoJson != null) {\n                            user.type = photoJson.getValue(\"type\").jsonPrimitive.content.toInt()\n                            val imageJson = photoJson.getValue(\"image\").jsonObject\n                            user.photo = imageJson.getValue(\"data\").jsonPrimitive.content\n                        }\n                    }\n                    1 -> {\n                        val serviceJson = decodeNullableSerializableElement(descriptor, index, JsonObjectDeserializer::class.serializer())\n                        if (serviceJson != null) {\n                            user.serviceName = serviceJson.getValue(\"name\").jsonPrimitive.content\n                        }\n                    }\n                    2 -> {\n                        val credentialJson = decodeNullableSerializableElement(descriptor, index, JsonObjectDeserializer::class.serializer())\n                        if (credentialJson != null) {\n                            user.credentialId = credentialJson.getValue(\"id\").jsonPrimitive.content.toInt()\n                            user.credentialCode = credentialJson.getValue(\"code\").jsonPrimitive.content\n                        }\n                    }\n                    3 -> user.id = decodeIntElement(descriptor, index)\n                    4 -> user.name = decodeStringElement(descriptor, index)\n                    CompositeDecoder.DECODE_DONE -> break\n                    else -> throw SerializationException(\"Unknown index $index\")\n                }\n            }\n            user\n        }\n    }\n}\n\n// Example usage with input JSON\nfun main() {\n    val json = \"\"\"\n        {\n            \"credential\": {\n                \"code\": \"1111\",\n                \"id\": 10\n            },\n            \"id\": 1,\n            \"name\": \"toto\",\n            \"photo\": {\n                \"image\": {\n                    \"data\": \"xxxx\"\n                },\n                \"type\": 0\n            },\n            \"service\": {\n                \"name\": \"serviceIT\"\n            }\n        }\n    \"\"\".trimIndent()\n\n    val user = Json.decodeFromString(UserDeserializer(), json)\n    println(user)\n}",
    "filename": "7c52daabf806792dc4463fd54670d1f4_0.kt"
  },
  {
    "conversation_hash": "7eb1749d4b66944540adeb518ab7a3fb",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.serialization.json.JsonElement",
      "kotlinx.serialization.json.JsonObject",
      "kotlinx.serialization.json.JsonPrimitive",
      "kotlinx.serialization.json.JsonTransformingSerializer"
    ],
    "code": "import kotlinx.serialization.json.JsonObject\nimport kotlinx.serialization.json.JsonPrimitive\nimport kotlinx.serialization.json.JsonTransformingSerializer\nimport kotlinx.serialization.json.JsonElement\n\nclass FlattenJsonTransformer<T>(serializable: KSerializer<T>) : JsonTransformingSerializer<T>(serializable) {\n    override fun transformDeserialize(element: JsonElement): JsonElement {\n        if (element is JsonObject) {\n            return flattenJson(element)\n        }\n        return element\n    }\n\n    private fun flattenJson(element: JsonObject, prefix: String = \"\"): JsonObject {\n        val result = mutableMapOf<String, JsonElement>()\n        element.forEach { (key, value) ->\n            val newKey = if (prefix.isEmpty()) key else \"$prefix.$key\"\n            if (value is JsonObject) {\n                result.putAll(flattenJson(value, newKey))\n            } else {\n                result[newKey] = value\n            }\n        }\n        return JsonObject(result)\n    }\n}",
    "filename": "7eb1749d4b66944540adeb518ab7a3fb_0.kt"
  },
  {
    "conversation_hash": "5e4012a455ab2ede676e2f0f1f6a3698",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyComposable() {\n    val viewModel = viewModel<SharedViewModel>()\n    val counter = viewModel.counter.value\n    val name = viewModel.name.value\n\n    // Update the state variables as needed\n    viewModel.counter.value++\n    viewModel.name.value = \"New Name\"\n}",
    "filename": "5e4012a455ab2ede676e2f0f1f6a3698_1.kt"
  },
  {
    "conversation_hash": "5e4012a455ab2ede676e2f0f1f6a3698",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyComposable() {\n    val viewModel = viewModel<SharedViewModel>()\n    val counter = viewModel.counter.value\n    val name = viewModel.name.value\n    val counterState = rememberSaveable { mutableStateOf(counter) }\n    val nameState = rememberSaveable { mutableStateOf(name) }\n\n    // Update the state variables as needed\n    counterState.value++\n    nameState.value = \"New Name\"\n    viewModel.counter.value = counterState.value\n    viewModel.name.value = nameState.value\n\n    // Use the state variables in the UI\n    Text(text = \"Counter: ${counterState.value}\")\n    TextField(value = nameState.value, onValueChange = { nameState.value = it })\n}",
    "filename": "5e4012a455ab2ede676e2f0f1f6a3698_2.kt"
  },
  {
    "conversation_hash": "5e4012a455ab2ede676e2f0f1f6a3698",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class SharedViewModel : ViewModel() {\n    private val defaultState = \"Default\"\n\n    private val _text = mutableStateOf(defaultState)\n    val text: State<String> = _text\n\n    fun onReset() {\n        _text.value = defaultState\n    }\n\n    fun onUpdate(value: String) {\n        _text.value = value\n    }\n}",
    "filename": "5e4012a455ab2ede676e2f0f1f6a3698_3.kt"
  },
  {
    "conversation_hash": "8f31bd0ed60310359bad8e6753a95a24",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class DhcpServer(private val subnet: String) {\n        private val leases = mutableMapOf<Int, String>()\n        private var nextIpAddress = 0\n\n        fun allocateIpAddress(deviceId: Int): String {\n            if (leases.containsKey(deviceId)) {\n                return leases[deviceId].toString()\n            }\n\n            val ipAddress = getNextIpAddress()\n            leases[deviceId] = ipAddress\n            return ipAddress\n        }\n\n        private fun getNextIpAddress(): String {\n            val parts = subnet.split(\".\")\n            val base = \"${parts[0]}.${parts[1]}.${parts[2]}.\"\n            val ipAddress = base + nextIpAddress.toString()\n\n            nextIpAddress += 1\n            return ipAddress\n        }\n    }",
    "filename": "8f31bd0ed60310359bad8e6753a95a24_4.kt"
  },
  {
    "conversation_hash": "8f31bd0ed60310359bad8e6753a95a24",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "connections.forEach { connection ->\n        val device1 = devices.first { it.id == connection.deviceId1 }\n        val device2 = devices.first { it.id == connection.deviceId2 }\n\n        println(\"Device ${device1.id} (${device1.ipAddress}) is connected to device ${device2.id} (${device2.ipAddress})\")\n    }",
    "filename": "8f31bd0ed60310359bad8e6753a95a24_6.kt"
  },
  {
    "conversation_hash": "192f1fe605d2dd670dcd68871dbdfaf7",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.ViewModel",
      "kotlinx.coroutines.delay"
    ],
    "code": "import androidx.lifecycle.ViewModel\nimport kotlinx.coroutines.delay\n\nclass MyViewModel : ViewModel() {\n\n    fun startInfiniteLoop() {\n        var counter = 0\n        while (true) {\n            // perform your task here\n            println(\"Counter: $counter\")\n            counter++\n\n            // add delay so that the loop doesn't consume too much processing power\n            Thread.sleep(1000)\n        }\n    }\n}",
    "filename": "192f1fe605d2dd670dcd68871dbdfaf7_6.kt"
  },
  {
    "conversation_hash": "192f1fe605d2dd670dcd68871dbdfaf7",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.ViewModel",
      "kotlinx.coroutines.delay",
      "kotlinx.coroutines.runBlocking"
    ],
    "code": "import androidx.lifecycle.ViewModel\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.runBlocking\n\nclass MyViewModel : ViewModel() {\n\n    fun startInfiniteLoop() {\n        var counter = 0\n        runBlocking {\n            while (true) {\n                // perform your task here\n                println(\"Counter: $counter\")\n                counter++\n\n                // add delay so that the loop doesn't consume too much processing power\n                delay(1000)\n            }\n        }\n    }\n}",
    "filename": "192f1fe605d2dd670dcd68871dbdfaf7_7.kt"
  },
  {
    "conversation_hash": "192f1fe605d2dd670dcd68871dbdfaf7",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewModelScope",
      "kotlinx.coroutines.delay",
      "kotlinx.coroutines.launch"
    ],
    "code": "import androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\n\nclass MyViewModel : ViewModel() {\n\n    fun startLongRunningTask() {\n        viewModelScope.launch {\n            // run the long running task in the background\n            var counter = 0\n            while (true) {\n                // perform your task here\n                println(\"Counter: $counter\")\n                counter++\n\n                // add delay so that the task doesn't consume too much processing power\n                delay(1000)\n            }\n        }\n    }\n}",
    "filename": "192f1fe605d2dd670dcd68871dbdfaf7_8.kt"
  },
  {
    "conversation_hash": "192f1fe605d2dd670dcd68871dbdfaf7",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewModelScope",
      "java.io.IOException",
      "kotlinx.coroutines.Dispatchers",
      "kotlinx.coroutines.launch",
      "kotlinx.coroutines.withContext"
    ],
    "code": "import androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\nimport java.io.IOException\n\nclass MyViewModel : ViewModel() {\n\n    fun performNetworkOperation() {\n        viewModelScope.launch {\n            try {\n                // perform network operation in the background\n                val result = withContext(Dispatchers.IO) {\n                    // perform the actual network request and return the result\n                }\n\n                // update the UI with the result\n                updateUi(result)\n           } catch (e: IOException) {\n                // handle any network errors here\n           }\n        }\n    }\n\n    private fun updateUi(result: String) {\n        // update the UI with the result using LiveData or other UI communication methods\n    }\n}",
    "filename": "192f1fe605d2dd670dcd68871dbdfaf7_9.kt"
  },
  {
    "conversation_hash": "192f1fe605d2dd670dcd68871dbdfaf7",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewModelScope",
      "kotlinx.coroutines.delay",
      "kotlinx.coroutines.launch"
    ],
    "code": "import androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\n\nclass MyViewModel : ViewModel() {\n\n    fun startPeriodicUpdates() {\n        viewModelScope.launch {\n            while(true) {\n                // update the database table here\n                // ...\n                delay(10000) // wait for 10 seconds\n            }\n        }\n    }\n}",
    "filename": "192f1fe605d2dd670dcd68871dbdfaf7_10.kt"
  },
  {
    "conversation_hash": "9cd81acef2bd0681319b7101b83b0300",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyScreen(vm: MyViewModel) {\n    // ...\n\n    Button(\n        onClick = { vm.currentMode = Mode.Connecting }\n    ) {\n        Text(\"Connect\")\n    }\n\n    Button(\n        onClick = { vm.currentMode = Mode.Deleting }\n    ) {\n        Text(\"Delete\")\n    }\n\n    Button(\n        onClick = { vm.currentMode = Mode.Emulating }\n    ) {\n        Text(\"Emulate\")\n    }\n\n    Button(\n        onClick = { vm.currentMode = Mode.SendPackets }\n    ) {\n        Text(\"Send Packets\")\n    }\n\n    // ...\n}",
    "filename": "9cd81acef2bd0681319b7101b83b0300_5.kt"
  },
  {
    "conversation_hash": "9cd81acef2bd0681319b7101b83b0300",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onEvent(event: EmulatorEvent) {\n    when (vm.currentMode) {\n        Mode.Connecting -> {\n            // Perform connecting mode actions\n        }\n        Mode.Deleting -> {\n            // Perform deleting mode actions\n        }\n        Mode.Emulating -> {\n            // Perform emulating mode actions\n        }\n        Mode.SendPackets -> {\n            // Perform send packets mode actions\n        }\n        else -> {\n            // Perform normal mode actions\n        }\n    }\n}",
    "filename": "9cd81acef2bd0681319b7101b83b0300_6.kt"
  },
  {
    "conversation_hash": "9cd81acef2bd0681319b7101b83b0300",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyScreen() {\n    // ...\n\n    Button(\n        onClick = { \n            _state.update { it.copy(mode = Mode.Connecting) }\n        }\n    ) {\n        Text(\"Connect\")\n    }\n\n    Button(\n        onClick = { \n            _state.update { it.copy(mode = Mode.Deleting) }\n        }\n    ) {\n        Text(\"Delete\")\n    }\n\n    Button(\n        onClick = { \n            _state.update { it.copy(mode = Mode.Emulating) }\n        }\n    ) {\n        Text(\"Emulate\")\n    }\n\n    Button(\n        onClick = { \n            _state.update { it.copy(mode = Mode.SendPackets) }\n        }\n    ) {\n        Text(\"Send Packets\")\n    }\n\n    // ...\n}",
    "filename": "9cd81acef2bd0681319b7101b83b0300_8.kt"
  },
  {
    "conversation_hash": "614bf7c639eaadbc1904922fe862c86b",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "val myList = mutableListOf<String>()\n\nfor (i in 1..10) {\n    myList.add(\"Item $i\")\n}\n\nprintln(myList)",
    "filename": "614bf7c639eaadbc1904922fe862c86b_0.kt"
  },
  {
    "conversation_hash": "614bf7c639eaadbc1904922fe862c86b",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "if(packetsQueue?.isNotEmpty() == true) {\n    // Do something if the packetsQueue is not empty\n} else {\n    // Do something if the packetsQueue is empty or null\n}",
    "filename": "614bf7c639eaadbc1904922fe862c86b_3.kt"
  },
  {
    "conversation_hash": "491a833dcbd26d8dac90c7d623cc67fd",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class EmulatorViewModel @Inject constructor(\n    private val emulatorUseCases: EmulatorUseCases\n) : ViewModel() {\n    // ...\n\n    fun animatePacket(sender: Device, receiver: Device, packetType: PacketType) {\n        _eventFlow.tryEmit(UiEvent.AnimatePacket(sender, receiver, packetType))\n    }\n}",
    "filename": "491a833dcbd26d8dac90c7d623cc67fd_4.kt"
  },
  {
    "conversation_hash": "491a833dcbd26d8dac90c7d623cc67fd",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.Image",
      "androidx.compose.foundation.layout.fillMaxSize",
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.Modifier",
      "androidx.compose.ui.graphics.painter.Painter",
      "androidx.compose.ui.res.painterResource",
      "androidx.compose.ui.res.useResource"
    ],
    "code": "import androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.res.useResource\n\n@Composable\nfun MyComposable() {\n    val svgPainter: Painter = painterResource(id = R.drawable.my_svg_image)\n    Image(\n        painter = svgPainter,\n        contentDescription = \"My SVG Image\",\n        modifier = Modifier.fillMaxSize()\n    )\n}",
    "filename": "491a833dcbd26d8dac90c7d623cc67fd_7.kt"
  },
  {
    "conversation_hash": "d25b19d34d349ea1b240f68ba2fff1a1",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewModel : ViewModel() {\n    var data: String by mutableStateOf(\"\")\n}\n\nclass MyFragment : Fragment() {\n    private val viewModel: MyViewModel by activityViewModel()\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return ComposeView(requireContext()).apply {\n            setContent {\n                Text(text = viewModel.data)\n            }\n        }\n    }\n}",
    "filename": "d25b19d34d349ea1b240f68ba2fff1a1_5.kt"
  },
  {
    "conversation_hash": "e45ebf4e1f1aa27e6be2bed9175c5cde",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    // создать список с числами\n    val numbers = mutableListOf(1, -2, 3, -4, 5, -6)\n\n    // изменить знак для всех положительных элементов списка\n    for (i in numbers.indices) {\n        val number = numbers[i]\n        if (number > 0) {\n            // умножение на -1 обратит знак\n            numbers[i] = number * -1\n        }\n    }\n\n    // вывод измененного списка\n    println(numbers) // [-1, -2, -3, -4, -5, -6]\n}",
    "filename": "e45ebf4e1f1aa27e6be2bed9175c5cde_0.kt"
  },
  {
    "conversation_hash": "e45ebf4e1f1aa27e6be2bed9175c5cde",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    // создать список с числами\n    val numbers = listOf(1, -2, 3, -4, 5, -6)\n\n    // изменить знак для всех положительных элементов списка\n    val updatedNumbers = numbers.map { if (it > 0) -it else it }\n\n    // вывод измененного списка\n    println(updatedNumbers) // [-1, -2, -3, -4, -5, -6]\n}",
    "filename": "e45ebf4e1f1aa27e6be2bed9175c5cde_1.kt"
  },
  {
    "conversation_hash": "09e6eabff0138b9f45bfb1831073f772",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyComposableFunction(context = this)\n        }\n    }\n}",
    "filename": "09e6eabff0138b9f45bfb1831073f772_4.kt"
  },
  {
    "conversation_hash": "09e6eabff0138b9f45bfb1831073f772",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyComposableFunction() {\n    val context = LocalContext.current\n    // Use the context object to access app resources, services, etc.\n}",
    "filename": "09e6eabff0138b9f45bfb1831073f772_5.kt"
  },
  {
    "conversation_hash": "37b9ea4d3eae543b8230b50bb0b3283c",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.widget.Button",
      "androidx.fragment.app.Fragment",
      "java.io.IOException",
      "okhttp3."
    ],
    "code": "import android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport androidx.fragment.app.Fragment\nimport okhttp3.*\nimport java.io.IOException\n\nclass FirstFragment : Fragment() {\n\n    private lateinit var button: Button\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n\n        val view = inflater.inflate(R.layout.fragment_first, container, false)\n        button = view.findViewById(R.id.button)\n        button.setOnClickListener {\n            fetchData()\n        }\n        return view\n    }\n\n    private fun fetchData() {\n        val client = OkHttpClient()\n        val url = \"https://api.openweathermap.org/data/2.5/weather?q=Moscow&appid=YOUR_API_KEY\"\n        val request = Request.Builder().url(url).build()\n\n        client.newCall(request).enqueue(object : Callback {\n            override fun onFailure(call: Call, e: IOException) {\n                println(e.message)\n            }\n\n            override fun onResponse(call: Call, response: Response) {\n                val body = response.body?.string()\n                println(body)\n            }\n        })\n    }\n}",
    "filename": "37b9ea4d3eae543b8230b50bb0b3283c_2.kt"
  },
  {
    "conversation_hash": "37b9ea4d3eae543b8230b50bb0b3283c",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.widget.TextView",
      "androidx.fragment.app.Fragment"
    ],
    "code": "import android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.TextView\nimport androidx.fragment.app.Fragment\n\nclass SecondFragment : Fragment() {\n\n    private lateinit var textView: TextView\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n\n        val view = inflater.inflate(R.layout.fragment_second, container, false)\n        textView = view.findViewById(R.id.textView)\n        return view\n    }\n\n    fun displayData(data: String) {\n        textView.text = data\n    }\n}",
    "filename": "37b9ea4d3eae543b8230b50bb0b3283c_3.kt"
  },
  {
    "conversation_hash": "37b9ea4d3eae543b8230b50bb0b3283c",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun fetchData() {\n        val client = OkHttpClient()\n        val url = \"https://api.openweathermap.org/data/2.5/weather?q=Moscow&appid=YOUR_API_KEY\"\n        val request = Request.Builder().url(url).build()\n\n        client.newCall(request).enqueue(object : Callback {\n            override fun onFailure(call: Call, e: IOException) {\n                println(e.message)\n            }\n\n            override fun onResponse(call: Call, response: Response) {\n                val data = response.body?.string()\n\n                activity?.runOnUiThread {\n                    val secondFragment = SecondFragment()\n                    secondFragment.displayData(data)\n                    fragmentManager?.beginTransaction()\n                            ?.replace(R.id.container, secondFragment)\n                            ?.addToBackStack(null)\n                            ?.commit()\n                }\n            }\n        })\n    }",
    "filename": "37b9ea4d3eae543b8230b50bb0b3283c_6.kt"
  },
  {
    "conversation_hash": "28af3c4911f5e7453d0592c8a0a0d615",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PositiveOnlySalary(var amount: Double) {\n    init {\n        if (amount < 0) amount = 0.0\n    }\n}\n\nclass Employee(salary: Double) {\n    var salaryDelegate = PositiveOnlySalary(salary)\n    var salary: Double\n        get() = salaryDelegate.amount\n        set(value) { salaryDelegate.amount = value }\n}\n\nfun main() {\n    val emp = Employee(-100.0)\n    println(emp.salary) // prints 0.0\n    emp.salary = 5000.0\n    println(emp.salary) // prints 5000.0\n}",
    "filename": "28af3c4911f5e7453d0592c8a0a0d615_0.kt"
  },
  {
    "conversation_hash": "28af3c4911f5e7453d0592c8a0a0d615",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface Shape {\n    fun draw()\n}\n\nclass Rectangle(val width: Int, val height: Int) : Shape {\n    override fun draw() {\n        println(\"Drawing a rectangle with width $width and height $height.\")\n    }\n}\n\nclass Square(val side: Int) : Shape {\n    override fun draw() {\n        println(\"Drawing a square with side $side.\")\n    }\n}\n\nclass Canvas(private val shape: Shape) : Shape by shape\n\nfun main() {\n    val rectangle = Rectangle(10, 5)\n    val square = Square(10)\n\n    val canvas1 = Canvas(rectangle)\n    val canvas2 = Canvas(square)\n\n    canvas1.draw()\n    canvas2.draw()\n}",
    "filename": "28af3c4911f5e7453d0592c8a0a0d615_1.kt"
  },
  {
    "conversation_hash": "3c3587040dfae070279b0ebf1ac078e6",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun downloadXmlFile(url: String): InputStream {\n        val client = OkHttpClient()\n        val request = Request.Builder()\n            .url(url)\n            .build()\n        val response = client.newCall(request).execute()\n\n        if (!response.isSuccessful) {\n            throw IOException(\"Failed to download XML: $response\")\n        }\n\n        return response.body?.byteStream() ?: throw IOException(\"Empty response body\")\n    }",
    "filename": "3c3587040dfae070279b0ebf1ac078e6_1.kt"
  },
  {
    "conversation_hash": "3c3587040dfae070279b0ebf1ac078e6",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun parseXml(xml: InputStream): MyEntity {\n        val parser = XmlPullParserFactory.newInstance().newPullParser()\n        parser.setInput(xml, null)\n\n        var eventType = parser.eventType\n        while (eventType != XmlPullParser.END_DOCUMENT) {\n            when (eventType) {\n                XmlPullParser.START_TAG -> {\n                    when (parser.name) {\n                        \"field1\" -> myEntity.field1 = parser.nextText()\n                        \"field2\" -> myEntity.field2 = parser.getAttributeValue(null, \"attributeName\")\n                        // add more fields and attributes as needed\n                    }\n                }\n            }\n\n            eventType = parser.next()\n        }\n\n        return myEntity\n    }",
    "filename": "3c3587040dfae070279b0ebf1ac078e6_2.kt"
  },
  {
    "conversation_hash": "3c3587040dfae070279b0ebf1ac078e6",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun downloadAndReadFile(url: String): String {\n    // Download the file\n    val connection = URL(url).openConnection() as HttpURLConnection\n    connection.requestMethod = \"GET\"\n    connection.connect()\n    val inputStream = connection.inputStream\n\n    // Read the contents of the file\n    val reader = BufferedReader(InputStreamReader(inputStream))\n    val stringBuilder = StringBuilder()\n    var line: String?\n    while (reader.readLine().also { line = it } != null) {\n        stringBuilder.append(line)\n    }\n    reader.close()\n\n    return stringBuilder.toString()\n}",
    "filename": "3c3587040dfae070279b0ebf1ac078e6_4.kt"
  },
  {
    "conversation_hash": "3c3587040dfae070279b0ebf1ac078e6",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun downloadAndParseXml(url: String) {\n    val connection = URL(url).openConnection() as HttpURLConnection\n    connection.requestMethod = \"GET\"\n    connection.connect()\n    val inputStream = connection.inputStream\n\n    try {\n        val xmlString = inputStream.bufferedReader().use { it.readText() }\n\n        // Parse the XML data\n        val parser = XmlPullParserFactory.newInstance().newPullParser()\n        parser.setInput(StringReader(xmlString))\n        var eventType = parser.eventType\n        while (eventType != XmlPullParser.END_DOCUMENT) {\n            // Handle each event type as needed\n            when (eventType) {\n                XmlPullParser.START_TAG -> {\n                    // Handle start tag\n                }\n                XmlPullParser.END_TAG -> {\n                    // Handle end tag\n                }\n                XmlPullParser.TEXT -> {\n                    // Handle text content\n                }\n            }\n            eventType = parser.next()\n        }\n\n    } catch (e: IOException) {\n        // Handle I/O exceptions\n    } catch (e: XmlPullParserException) {\n        // Handle XML parsing exceptions\n    } finally {\n        inputStream.close()\n    }\n}",
    "filename": "3c3587040dfae070279b0ebf1ac078e6_5.kt"
  },
  {
    "conversation_hash": "3c3587040dfae070279b0ebf1ac078e6",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private lateinit var editText: EditText\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Get a reference to the EditText view\n        editText = findViewById(R.id.edit_text)\n\n        // Add a click listener to the button\n        val button = findViewById<Button>(R.id.button)\n        button.setOnClickListener {\n            // Get the name entered by the user\n            val name = editText.text.toString()\n\n            // Create a new database if it doesn't exist\n            val db = SQLiteDatabase.openOrCreateDatabase(\n                applicationContext.getDatabasePath(\"mydatabase.db\"), null)\n\n            // Create a table if it doesn't exist\n            db.execSQL(\n                \"CREATE TABLE IF NOT EXISTS mytable (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)\")\n\n            // Insert a new record into the table\n            val values = ContentValues().apply {\n                put(\"name\", name)\n            }\n            db.insert(\"mytable\", null, values)\n\n            // Navigate to a different activity\n            val intent = Intent(this, NewActivity::class.java)\n            startActivity(intent)\n        }\n    }\n}",
    "filename": "3c3587040dfae070279b0ebf1ac078e6_6.kt"
  },
  {
    "conversation_hash": "3c3587040dfae070279b0ebf1ac078e6",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private lateinit var editText: EditText\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Get a reference to the EditText view\n        editText = findViewById(R.id.edit_text)\n\n        // Check if the database exists\n        if (isDatabaseExists()) {\n            // Navigate to a different activity\n            val intent = Intent(this, NewActivity::class.java)\n            startActivity(intent)\n            finish()\n        }\n\n        // Add a click listener to the button\n        val button = findViewById<Button>(R.id.button)\n        button.setOnClickListener {\n            // Get the name entered by the user\n            val name = editText.text.toString()\n\n            // Create a new database if it doesn't exist\n            val db = SQLiteDatabase.openOrCreateDatabase(\n                applicationContext.getDatabasePath(\"mydatabase.db\"), null)\n\n            // Create a table if it doesn't exist\n            db.execSQL(\n                \"CREATE TABLE IF NOT EXISTS mytable (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)\")\n\n            // Insert a new record into the table\n            val values = ContentValues().apply {\n                put(\"name\", name)\n            }\n            db.insert(\"mytable\", null, values)\n\n            // Navigate to a different activity\n            val intent = Intent(this, NewActivity::class.java)\n            startActivity(intent)\n            finish()\n        }\n    }\n\n    private fun isDatabaseExists(): Boolean {\n        val file = applicationContext.getDatabasePath(\"mydatabase.db\")\n        return file.exists()\n    }\n}",
    "filename": "3c3587040dfae070279b0ebf1ac078e6_7.kt"
  },
  {
    "conversation_hash": "3c3587040dfae070279b0ebf1ac078e6",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun backupDatabase() {\n    val dbFile = getDatabasePath(\"mydatabase.db\")\n    val backupFile = File(\"${getExternalFilesDir(null)}, backups/\")\n    backupFile.mkdirs()\n    val targetFile = File(backupFile, \"mydatabase_backup.db\")\n\n    try {\n        val db = SQLiteDatabase.openDatabase(dbFile.absolutePath, null, SQLiteDatabase.OPEN_READWRITE)\n        db.backup(FileOutputStream(targetFile))\n        db.close()\n    } catch (e: SQLiteException) {\n        // Handle the error\n    }\n}",
    "filename": "3c3587040dfae070279b0ebf1ac078e6_8.kt"
  },
  {
    "conversation_hash": "3c3587040dfae070279b0ebf1ac078e6",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyDatabaseHelper(context: Context) : SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {\n\n    companion object {\n        private const val DATABASE_NAME = \"mydatabase.db\"\n        private const val DATABASE_VERSION = 1\n    }\n\n    override fun onCreate(db: SQLiteDatabase) {\n        // Create a table\n        db.execSQL(\"CREATE TABLE IF NOT EXISTS mytable (id INTEGER PRIMARY KEY, name TEXT)\")\n    }\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        // Upgrade the database schema\n    }\n}",
    "filename": "3c3587040dfae070279b0ebf1ac078e6_9.kt"
  },
  {
    "conversation_hash": "3c3587040dfae070279b0ebf1ac078e6",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun isWithin24Hours(date: LocalDate): Boolean {\n    val now = LocalDateTime.now()\n    val dateTime = date.atStartOfDay()\n    val duration = Duration.between(dateTime, now)\n    return duration.toHours() < 24\n}",
    "filename": "3c3587040dfae070279b0ebf1ac078e6_10.kt"
  },
  {
    "conversation_hash": "fdf513ae7a42fb3ba984860ef3fd422c",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.nfc.NfcAdapter",
      "android.os.Bundle",
      "android.widget.TextView",
      "androidx.appcompat.app.AppCompatActivity",
      "com.github.entur"
    ],
    "code": "import android.content.Intent\nimport android.nfc.NfcAdapter\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.TextView\nimport com.github.entur:nfc.desfire.cmd.CardStatus\nimport com.github.entur:nfc.desfire.cmd.DESFireCommand\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var nfcAdapter: NfcAdapter\n    private lateinit var textView: TextView\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        textView = findViewById(R.id.textView)\n\n        nfcAdapter = NfcAdapter.getDefaultAdapter(this)\n        if (nfcAdapter == null) {\n            textView.text = \"NFC not supported on this device\"\n            return\n        }\n\n        if (!nfcAdapter.isEnabled) {\n            textView.text = \"Please enable NFC\"\n            return\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        nfcAdapter.enableForegroundDispatch(this, androidNfc.createPendingIntent(), null, null)\n    }\n\n    override fun onPause() {\n        super.onPause()\n        nfcAdapter.disableForegroundDispatch(this)\n    }\n\n    override fun onNewIntent(intent: Intent) {\n        super.onNewIntent(intent)\n        val action = intent.action\n        if (NfcAdapter.ACTION_TECH_DISCOVERED == action) {\n            readDesfireCard(intent)\n        }\n    }\n\n    private fun readDesfireCard(intent: Intent) {\n        try {\n            val desfireCommand = DESFireCommand(intent)\n            val cardStatus: CardStatus? = desfireCommand.getCardStatus()\n\n            if (cardStatus != null) {\n                textView.text = \"Card detected: \\nUID: ${cardStatus.uid}\"\n            } else {\n                textView.text = \"Card detected: \\nUnable to read card status\"\n            }\n        } catch (e: Exception) {\n            textView.text = \"Error reading card: \\n${e.message}\"\n            e.printStackTrace()\n        }\n    }\n}",
    "filename": "fdf513ae7a42fb3ba984860ef3fd422c_2.kt"
  },
  {
    "conversation_hash": "ab36c7755d68e869d979d9f76e766070",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [
      "android.content.SharedPreferences",
      "android.graphics.drawable.AnimatedVectorDrawableCompat",
      "android.os.Bundle",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.widget.Button",
      "android.widget.EditText",
      "android.widget.Toast",
      "androidx.fragment.app.Fragment",
      "androidx.fragment.app.FragmentTransaction",
      "com.example.myapp_2.R",
      "com.example.myapp_2.UI.view.fragments.FirstFragment",
      "java.util."
    ],
    "code": "import android.content.SharedPreferences\nimport android.graphics.drawable.AnimatedVectorDrawableCompat\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.FragmentTransaction\nimport com.example.myapp_2.R\nimport com.example.myapp_2.UI.view.fragments.FirstFragment\nimport java.util.*\n\nclass RegistrationFragment : Fragment() {\n\n    private lateinit var editTextName: EditText\n    private lateinit var editTextEmail: EditText\n    private lateinit var editTextPassword: EditText\n    private lateinit var buttonRegister_1: Button\n    private lateinit var buttonLogin_1: Button\n    private lateinit var buttonExit: Button\n\n    private lateinit var userDAO: UserDAO\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        userDAO = UserDAO(requireContext())\n        userDAO.open()\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View = inflater.inflate(R.layout.refister, container, false)\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        requireActivity().findViewById<View>(R.id.bottomNavigationView).visibility = View.GONE\n        editTextName = view.findViewById(R.id.editTextName)\n        editTextEmail = view.findViewById(R.id.editTextEmail)\n        editTextPassword = view.findViewById(R.id.editTextPassword)\n        buttonRegister_1 = view.findViewById(R.id.buttonRegister_1)\n        buttonLogin_1 = view.findViewById(R.id.buttonLogin_1)\n        buttonExit = view.findViewById(R.id.buttonExit)\n\n        //add animation for button Register icon\n        buttonRegister_1.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_register, 0, 0)\n        val anim = AnimatedVectorDrawableCompat.create(requireContext(), R.anim.register_anim)\n        buttonRegister_1.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_register, anim, 0)\n        anim.start()\n\n        buttonRegister_1.setOnClickListener {\n            val name = editTextName.text.toString()\n            val email = editTextEmail.text.toString()\n            val password = editTextPassword.text.toString()\n\n            val rowID = userDAO.register(name, email, password)\n            if (rowID > 0) {\n                Toast.makeText(context, \"Registration successful\", Toast.LENGTH_SHORT).show()\n\n                // set profile_num to the newly registered user’s id\n                LoginFragment.profile_num = userDAO.getUserByEmail(email).id\n\n                // go to another fragment\n                val editor = requireActivity().getSharedPreferences(\"MY_PREFS_NAME\", requireActivity().MODE_PRIVATE).edit()\n                editor.putInt(\"profile_num\", LoginFragment.profile_num)\n                editor.apply()\n\n                val transaction: FragmentTransaction = requireActivity().supportFragmentManager.beginTransaction()\n                transaction.replace(R.id.nav_container, FirstFragment())\n                transaction.addToBackStack(null)\n                transaction.commit()\n            } else if (rowID == -1L) {\n                Toast.makeText(context, \"Invalid email\", Toast.LENGTH_SHORT).show()\n                // print all users to the log\n                val users: List<User> = userDAO.getAllUsers()\n                for (user in users) {\n                    println(user)\n                }\n            } else {\n                Toast.makeText(context, \"Registration failed\", Toast.LENGTH_SHORT).show()\n            }\n        }\n\n        buttonLogin_1.setOnClickListener {\n            val transaction: FragmentTransaction = requireActivity().supportFragmentManager.beginTransaction()\n            transaction.replace(R.id.nav_container, LoginFragment())\n            transaction.addToBackStack(null)\n            transaction.commit()\n        }\n\n        buttonExit.setOnClickListener {\n            requireActivity().supportFragmentManager.popBackStack()\n            val transaction: FragmentTransaction = requireActivity().supportFragmentManager.beginTransaction()\n            transaction.replace(R.id.nav_container, FirstFragment())\n            transaction.addToBackStack(null)\n            transaction.commit()\n        }\n\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        userDAO.close()\n    }\n}",
    "filename": "ab36c7755d68e869d979d9f76e766070_9.kt"
  },
  {
    "conversation_hash": "ab36c7755d68e869d979d9f76e766070",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "//add animation for button Register icon\nbuttonRegister_1.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_register, 0, 0)\nval anim = AnimatedVectorDrawableCompat.create(requireContext(), R.anim.register_anim)\nbuttonRegister_1.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_register, anim, 0)\nanim.start()",
    "filename": "ab36c7755d68e869d979d9f76e766070_10.kt"
  },
  {
    "conversation_hash": "11d5e0aecc86ef412b1d7b726e8490f4",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun readItemsFromXml(xmlString: String) {\n    val factory = XmlPullParserFactory.newInstance()\n    val parser = factory.newPullParser()\n    parser.setInput(StringReader(xmlString))\n    var eventType = parser.eventType\n    var itemId: String? = null\n    while (eventType != XmlPullParser.END_DOCUMENT) {\n        when (eventType) {\n            XmlPullParser.START_TAG -> {\n                if (parser.name == \"item\") {\n                    // This is an \"item\" tag, so read its \"id\" property\n                    itemId = parser.getAttributeValue(null, \"id\")\n                }\n            }\n            XmlPullParser.END_TAG -> {\n                if (parser.name == \"item\") {\n                    // We have finished reading one \"item\" tag, so do something with its \"id\" property\n                    handleItemId(itemId)\n                    itemId = null\n                }\n            }\n        }\n        eventType = parser.next()\n    }\n}\n\nprivate fun handleItemId(itemId: String?) {\n    // Do something with the itemId (e.g. add it to a list)\n    if (itemId != null) {\n        Log.d(TAG, \"Found item with id: $itemId\")\n    }\n}",
    "filename": "11d5e0aecc86ef412b1d7b726e8490f4_0.kt"
  },
  {
    "conversation_hash": "11d5e0aecc86ef412b1d7b726e8490f4",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun readItemsFromXml(xmlString: String) {\n    val factory = XmlPullParserFactory.newInstance()\n    val parser = factory.newPullParser()\n    parser.setInput(StringReader(xmlString))\n    \n    var eventType = parser.eventType\n    var itemId: String? = null\n    var itemName: String? = null\n    var itemDescription: String? = null\n    \n    while (eventType != XmlPullParser.END_DOCUMENT) {\n        when (eventType) {\n            XmlPullParser.START_TAG -> {\n                when (parser.name) {\n                    \"item\" -> {\n                        // This is an \"item\" tag, so read its \"id\" property\n                        itemId = parser.getAttributeValue(null, \"id\")\n                    }\n                    \"name\" -> {\n                        // This is a \"name\" tag, so read its text content\n                        itemName = parser.nextText()\n                    }\n                    \"description\" -> {\n                        // This is a \"description\" tag, so read its text content\n                        itemDescription = parser.nextText()\n                    }\n                }\n            }\n            XmlPullParser.END_TAG -> {\n                if (parser.name == \"item\") {\n                    // We have finished reading one \"item\" tag, so do something with its properties\n                    handleItem(itemId, itemName, itemDescription)\n                    itemId = null\n                    itemName = null\n                    itemDescription = null\n                }\n            }\n        }\n        eventType = parser.next()\n    }\n}\n\nprivate fun handleItem(itemId: String?, itemName: String?, itemDescription: String?) {\n    // Do something with the item properties (e.g. print them to the console)\n    if (itemId != null && itemName != null && itemDescription != null) {\n        Log.d(TAG, \"Found item with id=$itemId, name=$itemName, description=$itemDescription\")\n    }\n}",
    "filename": "11d5e0aecc86ef412b1d7b726e8490f4_4.kt"
  },
  {
    "conversation_hash": "11d5e0aecc86ef412b1d7b726e8490f4",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "// ...after parsing the start tag of the \"item\" tag...\nif (\"item\" == parser.name) {\n    val itemId = parser.getAttributeValue(null, \"id\")\n    val textContent = parser.nextText() // retrieves \"This is the text content of the item tag!\"\n    // ... handle the item and textContent here ...\n}",
    "filename": "11d5e0aecc86ef412b1d7b726e8490f4_7.kt"
  },
  {
    "conversation_hash": "4379103857e5e41ca0faa3d75c973535",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "java.sql.DriverManager"
    ],
    "code": "import java.sql.DriverManager\n\ndata class Person(val id: Int, val name: String)\n\nfun addRecordToDatabase(person: Person) {\n    val conn = DriverManager.getConnection(\"jdbc:sqlite:mydatabase.db\") //opens the database file\n    val stmt = conn.createStatement()\n    val sql = \"INSERT INTO mytable (id, name) VALUES (${person.id}, '${person.name}')\"\n    stmt.executeUpdate(sql) // executes SQL query to add a new record to table\n    conn.close() // closes the database connection\n}",
    "filename": "4379103857e5e41ca0faa3d75c973535_1.kt"
  },
  {
    "conversation_hash": "4379103857e5e41ca0faa3d75c973535",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "java.sql.DriverManager",
      "javax.xml.parsers.DocumentBuilderFactory",
      "org.w3c.dom.Document"
    ],
    "code": "import java.sql.DriverManager\nimport org.w3c.dom.Document\nimport javax.xml.parsers.DocumentBuilderFactory\n\ndata class Person(val id: Int, val name: String)\n\nfun fetchDataFromXml(xmlString: String): List<Person> {\n    val factory = DocumentBuilderFactory.newInstance()\n    val builder = factory.newDocumentBuilder()\n    val xml = builder.parse(xmlString.byteInputStream())\n    val persons = mutableListOf<Person>()\n    val personNodes = xml.documentElement.getElementsByTagName(\"person\")\n    for (i in 0 until personNodes.length) {\n        val node = personNodes.item(i)\n        if (node.nodeType == Document.ELEMENT_NODE) {\n            val element = node as org.w3c.dom.Element\n            val id = element.getAttribute(\"id\").toInt()\n            val name = element.getElementsByTagName(\"name\").item(0).textContent\n            persons.add(Person(id, name))\n        }\n    }\n    return persons\n}\n\nfun addRecordToDatabase(person: Person) {\n    val conn = DriverManager.getConnection(\"jdbc:sqlite:mydatabase.db\") //opens the database file\n    val stmt = conn.createStatement()\n    val sql = \"INSERT INTO mytable (id, name) VALUES (${person.id}, '${person.name}')\"\n    stmt.executeUpdate(sql) // executes SQL query to add a new record to table\n    conn.close() // closes the database connection\n}\n\nfun main() {\n    val xmlString = \"<persons><person id='1'><name>John</name></person><person id='2'><name>Jane</name></person></persons>\"\n    val persons = fetchDataFromXml(xmlString)\n    persons.forEach { addRecordToDatabase(it) }\n}",
    "filename": "4379103857e5e41ca0faa3d75c973535_2.kt"
  },
  {
    "conversation_hash": "4379103857e5e41ca0faa3d75c973535",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "android.content.ContentValues",
      "android.content.Context",
      "android.database.sqlite.SQLiteDatabase",
      "android.database.sqlite.SQLiteOpenHelper",
      "java.io.StringReader",
      "org.xml.sax.InputSource",
      "org.xml.sax.XMLReader",
      "org.xml.sax.helpers.XMLReaderFactory"
    ],
    "code": "import android.content.ContentValues\nimport android.content.Context\nimport android.database.sqlite.SQLiteDatabase\nimport android.database.sqlite.SQLiteOpenHelper\nimport org.xml.sax.InputSource\nimport org.xml.sax.XMLReader\nimport org.xml.sax.helpers.XMLReaderFactory\nimport java.io.StringReader\n\ndata class Game(val title: String, val developer: String, val year: Int)\n\nclass GameDatabase(context: Context) : SQLiteOpenHelper(context, \"games.db\", null, 1) {\n\n    override fun onCreate(db: SQLiteDatabase) {\n        db.execSQL(\"CREATE TABLE IF NOT EXISTS games(title TEXT, developer TEXT, year INT)\")\n    }\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        db.execSQL(\"DROP TABLE IF EXISTS games\")\n        onCreate(db)\n    }\n\n    fun addGame(game: Game) {\n        val db = writableDatabase\n        val values = ContentValues()\n        values.put(\"title\", game.title)\n        values.put(\"developer\", game.developer)\n        values.put(\"year\", game.year)\n        db.insert(\"games\", null, values)\n        db.close()\n    }\n}\n\nclass GameHandler(private val db: GameDatabase) : org.xml.sax.helpers.DefaultHandler() {\n\n    private var currentElement = \"\"\n\n    private var title = \"\"\n    private var developer = \"\"\n    private var year = 0\n\n    override fun startElement(uri: String?, localName: String?, qName: String?, attributes: org.xml.sax.Attributes?) {\n        currentElement = qName\n    }\n\n    override fun characters(ch: CharArray, start: Int, length: Int) {\n        val data = String(ch, start, length)\n        when (currentElement) {\n            \"title\" -> title += data\n            \"developer\" -> developer += data\n            \"year\" -> year += data.toInt()\n        }\n    }\n\n    override fun endElement(uri: String?, localName: String?, qName: String?) {\n        when (qName) {\n            \"game\" -> {\n                val game = Game(title, developer, year)\n                db.addGame(game)\n                title = \"\"\n                developer = \"\"\n                year = 0\n            }\n        }\n    }\n}\n\nfun parseGamesFromXml(xmlString: String, db: GameDatabase) {\n    val xr: XMLReader = XMLReaderFactory.createXMLReader()\n    xr.contentHandler = GameHandler(db)\n    xr.parse(InputSource(StringReader(xmlString)))\n}\n\nfun main() {\n    val xmlString = \"<games><game><title>Super Mario Bros.</title><developer>Nintendo</developer><year>1985</year></game><game><title>The Legend of Zelda</title><developer>Nintendo</developer><year>1986</year></game></games>\"\n    val context: Context = TODO()\n    val db = GameDatabase(context)\n    parseGamesFromXml(xmlString, db)\n}",
    "filename": "4379103857e5e41ca0faa3d75c973535_4.kt"
  },
  {
    "conversation_hash": "4379103857e5e41ca0faa3d75c973535",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val xmlString = \"<games><game><title>Super Mario Bros.</title><developer>Nintendo</developer><year>1985</year></game><game><title>The Legend of Zelda</title><developer>Nintendo</developer><year>1986</year></game></games>\"\n        val db = GameDatabase(this) // pass the Activity context to the GameDatabase constructor\n        parseGamesFromXml(xmlString, db)\n    }\n}",
    "filename": "4379103857e5e41ca0faa3d75c973535_5.kt"
  },
  {
    "conversation_hash": "4379103857e5e41ca0faa3d75c973535",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "fun parseXmlFile(xmlFile: File) {\n    // read data from the file\n    // parse the data\n    // add the parsed data to the database using the GameDatabase class\n    val db = GameDatabase(/* what do i put here? */)\n    // call the methods of the GameDatabase class to add data to the database\n}",
    "filename": "4379103857e5e41ca0faa3d75c973535_6.kt"
  },
  {
    "conversation_hash": "4379103857e5e41ca0faa3d75c973535",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "fun parseXmlFile(xmlFile: File, context: Context) {\n    // read data from the file\n    // parse the data\n    // add the parsed data to the database using the GameDatabase class\n    val db = GameDatabase(context)\n    // call the methods of the GameDatabase class to add data to the database\n}",
    "filename": "4379103857e5e41ca0faa3d75c973535_7.kt"
  },
  {
    "conversation_hash": "4379103857e5e41ca0faa3d75c973535",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val xmlFile = File(filesDir, \"games.xml\")\n        parseXmlFile(xmlFile, this)\n    }\n}",
    "filename": "4379103857e5e41ca0faa3d75c973535_8.kt"
  },
  {
    "conversation_hash": "168df7a844e804e73f12bb77e24aa772",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class RecipeAdapter(private var recipeList: List<Recipe>) : RecyclerView.Adapter<RecipeAdapter.RecipeViewHolder>() {\n\n    inner class RecipeViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val textViewName: TextView = itemView.findViewById(R.id.recipe_name)\n        val imageView: ImageView = itemView.findViewById(R.id.recipe_image)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecipeViewHolder {\n        val itemView = LayoutInflater.from(parent.context).inflate(R.layout.recipe_item, parent, false)\n        return RecipeViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: RecipeViewHolder, position: Int) {\n        val currentItem = recipeList[position]\n        holder.textViewName.text = currentItem.name\n        Glide.with(holder.itemView)\n            .load(currentItem.imageUrl)\n            .into(holder.imageView)\n    }\n}",
    "filename": "168df7a844e804e73f12bb77e24aa772_2.kt"
  },
  {
    "conversation_hash": "168df7a844e804e73f12bb77e24aa772",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface RecipeApi {\n    @GET(\"search/\")\n    suspend fun getRecipes(\n        @Query(\"app_id\") appId: String,\n        appQuery(\"app_key\") appKey: String,\n        appQuery(\"q\") query: String\n    ): Response<RecipeResponse>\n}",
    "filename": "168df7a844e804e73f12bb77e24aa772_3.kt"
  },
  {
    "conversation_hash": "168df7a844e804e73f12bb77e24aa772",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class RecipeViewModel : ViewModel() {\n    private val _recipes = MutableLiveData<List<Recipe>>()\n    val recipes: LiveData<List<Recipe>> get() = _recipes\n\n    suspend fun getRecipes() {\n        val recipeResponse = RecipeApiService.instance.getRecipes(API_ID, API_KEY, \"shrimp\")\n        if (recipeResponse.isSuccessful && recipeResponse.body() != null) {\n            _recipes.value = recipeResponse.body()!!.hits.map { it.recipe }\n        }\n    }\n}",
    "filename": "168df7a844e804e73f12bb77e24aa772_4.kt"
  },
  {
    "conversation_hash": "dd0e19adef51f1030c52c74b4079d918",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "android.graphics.Matrix",
      "android.graphics.PointF",
      "android.view.MotionEvent",
      "android.view.View",
      "android.widget.ImageView",
      "kotlin.math.atan2",
      "kotlin.math.sqrt"
    ],
    "code": "import android.content.Context\nimport android.graphics.Matrix\nimport android.graphics.PointF\nimport android.view.MotionEvent\nimport android.view.View\nimport android.widget.ImageView\nimport kotlin.math.atan2\nimport kotlin.math.sqrt\n\nopen class RotatableImageView : BaseImageView, View.OnTouchListener {\n\n    private var start = PointF()\n    private var mid = PointF()\n    private var oldDist = 0f\n    private val matrix = Matrix()\n    private val savedMatrix = Matrix()\n    private var mode = NONE\n\n    constructor(context: Context) : super(context) {\n        this.setOnTouchListener(this)\n    }\n\n    override fun onTouch(v: View, event: MotionEvent): Boolean {\n        val view = v as ImageView\n        when (event.action and MotionEvent.ACTION_MASK) {\n            MotionEvent.ACTION_DOWN -> {\n                savedMatrix.set(matrix)\n                start.set(event.x, event.y)\n                mode = DRAG\n            }\n            MotionEvent.ACTION_POINTER_DOWN -> {\n                oldDist = spacing(event)\n                if (oldDist > 10f) {\n                    savedMatrix.set(matrix)\n                    midPoint(mid, event)\n                    mode = ROTATE\n                }\n            }\n            MotionEvent.ACTION_UP, MotionEvent.ACTION_POINTER_UP -> mode = NONE\n            MotionEvent.ACTION_MOVE -> if (mode == ROTATE) {\n                val newDist = spacing(event)\n                if (newDist > 10f) {\n                    val scale = newDist / oldDist\n                    matrix.set(savedMatrix)\n                    val rotation = rotation(event)\n                    matrix.postRotate(rotation, mid.x, mid.y)\n                    matrix.postScale(scale, scale, mid.x, mid.y)\n                }\n            }\n        }\n\n        view.imageMatrix = matrix\n        return true\n    }\n\n    private fun rotation(event: MotionEvent): Float {\n        val deltaX = event.getX(0) - event.getX(1)\n        val deltaY = event.getY(0) - event.getY(1)\n        val radians = atan2(deltaY.toDouble(), deltaX.toDouble()).toFloat()\n\n        return Math.toDegrees(radians.toDouble()).toFloat()\n    }\n\n    private fun spacing(event: MotionEvent): Float {\n        val x = event.getX(0) - event.getX(1)\n        val y = event.getY(0) - event.getY(1)\n        return sqrt(x * x + y * y.toDouble()).toFloat()\n    }\n\n    private fun midPoint(point: PointF, event: MotionEvent) {\n        val x = event.getX(0) + event.getX(1)\n        val y = event.getY(0) + event.getY(1)\n        point.set(x / 2, y / 2)\n    }\n\n    companion object {\n        private const val NONE = 0\n        private const val DRAG = 1\n        private const val ROTATE = 2\n    }\n}",
    "filename": "dd0e19adef51f1030c52c74b4079d918_0.kt"
  },
  {
    "conversation_hash": "7b5bf1a19487ae6d8aceee23fad94625",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.view.View",
      "android.widget.Button",
      "android.widget.TextView",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.TextView\n\nclass MainActivity : AppCompatActivity() {\n\n    private var result = \"\"\n    private lateinit var resultTextView: TextView\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        resultTextView = findViewById(R.id.result_text)\n    }\n\n    fun onNumberClick(v: View) {\n        val button = v as Button\n\n        // Add the clicked number to the result string\n        result += button.text.toString()\n\n        // Update the result text view\n        resultTextView.text = result\n    }\n\n    fun onOperationClick(v: View) {\n        val button = v as Button\n\n        // Add the operation symbol to the result string\n        result += button.text.toString()\n\n        // Update the result text view\n        resultTextView.text = result\n    }\n\n    fun onClearClick(v: View) {\n        // Clear the result string and update the result text view\n        result = \"\"\n        resultTextView.text = result\n    }\n\n    fun onEqualClick(v: View) {\n        // Evaluate the result string and show the result in the text view\n        result = eval(result).toString()\n        resultTextView.text = result\n    }\n\n    private fun eval(s: String): Int {\n        // Evaluate the arithmetic expressions and return the result\n        return object : Any() {\n            var pos = -1\n            var ch = 0\n\n            fun nextChar(): Char {\n                ch = if (++pos < s.length) s[pos].code else -1\n                return ch.toChar()\n            }\n\n            fun eat(charToEat: Char): Boolean {\n                while (ch == ' '.code) nextChar()\n                if (ch == charToEat.code) {\n                    nextChar()\n                    return true\n                }\n                return false\n            }\n\n            fun parse(): Int {\n                var x = parseTerm()\n                while (true) {\n                    if (eat('+')) x += parseTerm() // addition\n                    else if (eat('-')) x -= parseTerm() // subtraction\n                    else return x\n                }\n            }\n\n            fun parseTerm(): Int {\n                var x = parseFactor()\n                while (true) {\n                    if (eat('*')) x *= parseFactor() // multiplication\n                    else if (eat('/')) x /= parseFactor() // division\n                    else return x\n                }\n            }\n\n            fun parseFactor(): Int {\n                if (eat('(')) {\n                    val x = parse()\n                    eat(')')\n                    return x\n                }\n                val sb = StringBuilder()\n                while (ch in '0'..'9' || ch == '.') {\n                    sb.append(nextChar())\n                }\n                return sb.toString().toInt()\n            }\n        }.parse()\n    }\n}",
    "filename": "7b5bf1a19487ae6d8aceee23fad94625_1.kt"
  },
  {
    "conversation_hash": "411316b05d3052339a25d30077829b0e",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private var result = \"\"\n    private var oldResult = \"\"\n    private var lastOperation = \"\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val clearButton = findViewById<Button>(R.id.clear)\n        val deleteButton = findViewById<Button>(R.id.delete)\n        val addButton = findViewById<Button>(R.id.add)\n        val subtractButton = findViewById<Button>(R.id.subtract)\n        val multiplyButton = findViewById<Button>(R.id.multiply)\n        val divideButton = findViewById<Button>(R.id.divide)\n        val equalsButton = findViewById<Button>(R.id.equals)\n\n        clearButton.setOnClickListener { clear() }\n        deleteButton.setOnClickListener { delete() }\n        addButton.setOnClickListener { operation(\"+\") }\n        subtractButton.setOnClickListener { operation(\"-\") }\n        multiplyButton.setOnClickListener { operation(\"*\") }\n        divideButton.setOnClickListener { operation(\"/\") }\n        equalsButton.setOnClickListener { calculate() }\n\n        val num0 = findViewById<Button>(R.id.num0)\n        num0.setOnClickListener { addNumber(\"0\") }\n\n        val num1 = findViewById<Button>(R.id.num1)\n        num1.setOnClickListener { addNumber(\"1\") }\n\n        val num2 = findViewById<Button>(R.id.num2)\n        num2.setOnClickListener { addNumber(\"2\") }\n\n        val num3 = findViewById<Button>(R.id.num3)\n        num3.setOnClickListener { addNumber(\"3\") }\n\n        val num4 = findViewById<Button>(R.id.num4)\n        num4.setOnClickListener { addNumber(\"4\") }\n\n        val num5 = findViewById<Button>(R.id.num5)\n        num5.setOnClickListener { addNumber(\"5\") }\n\n        val num6 = findViewById<Button>(R.id.num6)\n        num6.setOnClickListener { addNumber(\"6\") }\n\n        val num7 = findViewById<Button>(R.id.num7)\n        num7.setOnClickListener { addNumber(\"7\") }\n\n        val num8 = findViewById<Button>(R.id.num8)\n        num8.setOnClickListener { addNumber(\"8\") }\n\n        val num9 = findViewById<Button>(R.id.num9)\n        num9.setOnClickListener { addNumber(\"9\") }\n\n        val dotButton = findViewById<Button>(R.id.dot)\n        dotButton.setOnClickListener { addDot() }\n    }\n\n    private fun addNumber(number: String) {\n        result += number\n        display()\n    }\n\n    private fun addDot() {\n        if (result.isEmpty()) {\n            result += \"0.\"\n        } else if (!oldResult.contains(\".\") && !result.contains(\".\")) {\n            result += \".\"\n        }\n        display()\n    }\n\n    private fun clear() {\n        result = \"\"\n        oldResult = \"\"\n        lastOperation = \"\"\n        display()\n    }\n\n    private fun delete() {\n        if (result.isNotEmpty()) {\n            result = result.substring(0, result.length - 1)\n            display()\n        }\n    }\n\n    private fun operation(operator: String) {\n        if (result.isNotEmpty()) {\n            calculate()\n            oldResult = result\n            result = \"\"\n            lastOperation = operator\n        } else if (oldResult.isNotEmpty()) {\n            lastOperation = operator\n        }\n    }\n\n    private fun calculate() {\n        if (result.isNotEmpty() && oldResult.isNotEmpty() && lastOperation.isNotEmpty()) {\n            when (lastOperation) {\n                \"+\" -> {\n                    result = (oldResult.toDoubleOrNull() ?: 0.0 + result.toDoubleOrNull() ?: 0.0).toString()\n                }\n                \"-\" -> {\n                    result = (oldResult.toDoubleOrNull() ?: 0.0 - result.toDoubleOrNull() ?: 0.0).toString()\n                }\n                \"*\" -> {\n                    result = (oldResult.toDoubleOrNull() ?: 0.0 * result.toDoubleOrNull() ?: 0.0).toString()\n                }\n                \"/\" -> {\n                    result = (oldResult.toDoubleOrNull() ?: 0.0 / result.toDoubleOrNull() ?: 1.0).toString()\n                }\n                else -> {\n                    result = \"0\"\n                }\n            }\n            oldResult = \"\"\n            lastOperation = \"\"\n            display()\n        }\n    }\n\n    private fun display() {\n        findViewById<EditText>(R.id.result).setText(result)\n    }\n}",
    "filename": "411316b05d3052339a25d30077829b0e_2.kt"
  },
  {
    "conversation_hash": "71ee8511d6341e800413093862f78123",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "javax.validation.Valid",
      "org.springframework.web.bind.annotation."
    ],
    "code": "import org.springframework.web.bind.annotation.*\nimport javax.validation.Valid\n\n@RestController\n@RequestMapping(\"/mbom\")\nclass MBomController {\n\n    // 新增主表\n    @PostMapping(\"/\")\n    fun createBom(@RequestBody @Valid mBomDO: MBomDO): MBomDO {\n        // 新建主表的逻辑\n    }\n\n    // 修改主表\n    @PutMapping(\"/{id}\")\n    fun updateBom(@PathVariable id: Long, @RequestBody @Valid mBomDO: MBomDO): MBomDO {\n        // 修改主表的逻辑\n    }\n\n}",
    "filename": "71ee8511d6341e800413093862f78123_0.kt"
  },
  {
    "conversation_hash": "71ee8511d6341e800413093862f78123",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "javax.validation.Valid",
      "org.springframework.web.bind.annotation."
    ],
    "code": "import org.springframework.web.bind.annotation.*\nimport javax.validation.Valid\n\n@RestController\n@RequestMapping(\"/mbom/detail\")\nclass MBomDetailController {\n\n    // 新增明细表\n    @PostMapping(\"/\")\n    fun createBomDetail(@RequestBody @Valid mBomDetailDO: MBomDetailDO): MBomDetailDO {\n        // 新建明细表的逻辑\n    }\n\n    // 修改明细表\n    @PutMapping(\"/{id}\")\n    fun updateBomDetail(@PathVariable id: Long, @RequestBody @Valid mBomDetailDO: MBomDetailDO): MBomDetailDO {\n        // 修改明细表的逻辑\n    }\n\n}",
    "filename": "71ee8511d6341e800413093862f78123_1.kt"
  },
  {
    "conversation_hash": "109fc7616e586ce3651759f171bb71d5",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun imitationOne() {\n    for (i in 1..10) {\n        Thread.sleep(1000)\n        println(\"One $i\")\n    }\n}\n\nfun imitationTwo() {\n    for (i in 1..10) {\n        Thread.sleep(1000)\n        println(\"Two $i\")\n    }\n}\n\nfun main() {\n    println(\"Начало Main\")\n    Thread {\n        imitationTwo()\n        imitationOne()\n    }.start()\n    println(\"Конец Main\")\n}",
    "filename": "109fc7616e586ce3651759f171bb71d5_0.kt"
  },
  {
    "conversation_hash": "109fc7616e586ce3651759f171bb71d5",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    println(\"Начало Main\")\n    Thread {\n        imitationTwo()\n        imitationOne()\n    }.start().join()\n    println(\"Конец Main\")\n}",
    "filename": "109fc7616e586ce3651759f171bb71d5_2.kt"
  },
  {
    "conversation_hash": "109fc7616e586ce3651759f171bb71d5",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun imitationOne() {\n    for (i in 1..10) {\n        Thread.sleep(1000)\n        println(\"One $i\")\n    }\n}\n\nfun imitationTwo() {\n    for (i in 1..10) {\n        Thread.sleep(1500) // увеличили время задержки\n        println(\"Two $i\")\n    }\n}\n\nfun main() {\n    println(\"Начало Main\")\n    Thread {\n        imitationTwo()\n    }.start()\n    Thread {\n        imitationOne()\n    }.start()\n    Thread.sleep(30000) // установили общую задержку\n    println(\"Конец Main\")\n}",
    "filename": "109fc7616e586ce3651759f171bb71d5_3.kt"
  },
  {
    "conversation_hash": "3de267bea44890226fb1a696e5c44d4a",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "variable_data = cell2mat(raw); % 将原始数据转换为数值矩阵\nvariable_data_cell = cellstr(num2str(variable_data)); % 将数值矩阵转换为字符串单元格数组\nvariable_names = arrayfun(@(i) ['var_', num2str(i)], 1:29, 'UniformOutput', false); % 构造29个变量名\n\n% 将每列字符串单元格数组转换为一个变量\nassignin('base', variable_names{:}, num2cell(variable_data_cell, 1));",
    "filename": "3de267bea44890226fb1a696e5c44d4a_8.kt"
  },
  {
    "conversation_hash": "27878da0ed1ef36eaf76e09a7cc13573",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "android.os.Handler",
      "android.util.AttributeSet",
      "androidx.appcompat.widget.AppCompatImageView"
    ],
    "code": "import android.content.Context\nimport android.os.Handler\nimport android.util.AttributeSet\nimport androidx.appcompat.widget.AppCompatImageView\n\nabstract class BaseImageIteratorView : AppCompatImageView {\n\n    private val handler = Handler()\n    private val images = mutableListOf<Int>()\n    private var currentIndex = 0\n\n    constructor(context: Context) : super(context) {\n        setup()\n    }\n\n    constructor(context: Context, attrs: AttributeSet) : super(context, attrs) {\n        setup()\n    }\n\n    constructor(context: Context, attrs: AttributeSet, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {\n        setup()\n    }\n\n    private fun setup() {\n        images.addAll(provideImages())\n        startIteratingImages()\n    }\n\n    private fun startIteratingImages() {\n        setImageResource(images[currentIndex])\n        handler.postDelayed({\n            currentIndex = (currentIndex + 1) % images.size\n            startIteratingImages()\n        }, getDelayMillis())\n    }\n\n    abstract fun provideImages(): List<Int>\n\n    abstract fun getDelayMillis(): Long\n}\n\nclass CustomImageIteratorView : BaseImageIteratorView {\n\n    constructor(context: Context) : super(context)\n\n    constructor(context: Context, attrs: AttributeSet) : super(context, attrs)\n\n    constructor(context: Context, attrs: AttributeSet, defStyleAttr: Int) : super(context, attrs, defStyleAttr)\n\n    override fun provideImages(): List<Int> {\n        return listOf(\n            R.drawable.image_1,\n            R.drawable.image_2,\n            R.drawable.image_3\n        )\n    }\n\n    override fun getDelayMillis(): Long {\n        return 3000L\n    }\n}",
    "filename": "27878da0ed1ef36eaf76e09a7cc13573_0.kt"
  },
  {
    "conversation_hash": "3289799c4253417a88f09ba683e3998c",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "private class DownloadFileTask : AsyncTask<String, Void, String>() {\n\n    override fun doInBackground(vararg urls: String): String? {\n        try {\n            val url = URL(urls[0])\n            val connection = url.openConnection() as HttpURLConnection\n            connection.connect()\n\n            val inputStream = connection.inputStream\n\n            // Parse the downloaded file here\n\n            return \"Download successful.\"\n        } catch (e: Exception) {\n            Log.e(\"DownloadFileTask\", \"Error downloading file: $e\")\n            return null\n        }\n    }\n\n    override fun onPostExecute(result: String?) {\n        // Update UI here with the result of the download\n    }\n}",
    "filename": "3289799c4253417a88f09ba683e3998c_1.kt"
  },
  {
    "conversation_hash": "3289799c4253417a88f09ba683e3998c",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun downloadAndParseFile(urlString: String) {\n    GlobalScope.launch(Dispatchers.IO) {\n        try {\n            val url = URL(urlString)\n            val connection = url.openConnection() as HttpURLConnection\n            connection.connect()\n\n            val inputStream = connection.inputStream\n\n            // Parse the downloaded file here\n\n            withContext(Dispatchers.Main) {\n                // Update UI with the result of the download\n            }\n        } catch (e: Exception) {\n            Log.e(\"DownloadFileTask\", \"Error downloading file: $e\")\n        }\n    }\n}",
    "filename": "3289799c4253417a88f09ba683e3998c_3.kt"
  },
  {
    "conversation_hash": "a4f6b5551af003b16bb76a564993fb8e",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.",
      "the"
    ],
    "code": "import kotlinx.coroutines.*\n\nsuspend fun downloadAndCreateDatabase(url: String): Database {\n    val fileData = withContext(Dispatchers.IO) {\n        URL(url).readText() // download the file\n    }\n\n    val parsedData = parseFileData(fileData) // parse the file data\n    val database = createDatabase(parsedData) // create the database\n\n    return database\n}\n\nsuspend fun parseFileData(fileData: String): List<Data> = withContext(Dispatchers.Default) {\n    // parse the file data to create a list of objects\n    // return the list of parsed objects\n}\n\nsuspend fun createDatabase(parsedData: List<Data>): Database = withContext(Dispatchers.Default) {\n    // create a database from the parsed data\n    // return the created database\n}",
    "filename": "a4f6b5551af003b16bb76a564993fb8e_0.kt"
  },
  {
    "conversation_hash": "a4f6b5551af003b16bb76a564993fb8e",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines."
    ],
    "code": "import kotlinx.coroutines.*\n\nfun main() {\n    runBlocking { // will start a coroutine that runs in the current thread\n        val url = \"https://example.com/data.txt\"\n        val result = downloadAndCreateDatabase(url)\n        println(result)\n    }\n}",
    "filename": "a4f6b5551af003b16bb76a564993fb8e_2.kt"
  },
  {
    "conversation_hash": "a4f6b5551af003b16bb76a564993fb8e",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines."
    ],
    "code": "import kotlinx.coroutines.*\n\nsuspend fun yourCoroutineFunction() {\n    val url = \"https://example.com/data.txt\"\n    val result = downloadAndCreateDatabase(url)\n    println(result)\n}",
    "filename": "a4f6b5551af003b16bb76a564993fb8e_3.kt"
  },
  {
    "conversation_hash": "a4f6b5551af003b16bb76a564993fb8e",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "androidx.core.content.ContextCompat",
      "kotlinx.coroutines."
    ],
    "code": "import kotlinx.coroutines.*\nimport androidx.core.content.ContextCompat\n\nfun main() {\n    val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)\n\n    coroutineScope.launch {\n        val context = ContextCompat.getContext(coroutineContext)\n        val url = \"https://example.com/data.txt\"\n        val result = downloadAndCreateDatabase(url, context)\n        println(result)\n    }\n}\n\nsuspend fun downloadAndCreateDatabase(url: String, context: Context): String = withContext(Dispatchers.IO) {\n    // ...\n    return@withContext \"Database created successfully\"\n}",
    "filename": "a4f6b5551af003b16bb76a564993fb8e_7.kt"
  },
  {
    "conversation_hash": "a4f6b5551af003b16bb76a564993fb8e",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "kotlinx.coroutines.",
      "kotlinx.coroutines.Dispatchers.Main"
    ],
    "code": "import kotlinx.coroutines.*\nimport android.content.Context\nimport kotlinx.coroutines.Dispatchers.Main\n\nfun main() {\n    val coroutineScope = CoroutineScope(SupervisorJob() + Main)\n\n    coroutineScope.launch {\n        val context = coroutineContext[CoroutineContext.Key<Context>]!!\n        val url = \"https://example.com/data.txt\"\n        val result = downloadAndCreateDatabase(url, context)\n        println(result)\n    }\n}\n\nsuspend fun downloadAndCreateDatabase(url: String, context: Context): String = withContext(Dispatchers.IO) {\n    // ...\n    return@withContext \"Database created successfully\"\n}",
    "filename": "a4f6b5551af003b16bb76a564993fb8e_8.kt"
  },
  {
    "conversation_hash": "a4f6b5551af003b16bb76a564993fb8e",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "kotlinx.coroutines.",
      "kotlinx.coroutines.Dispatchers.Main"
    ],
    "code": "import kotlinx.coroutines.*\nimport android.content.Context\nimport kotlinx.coroutines.Dispatchers.Main\n\nfun main() {\n    val coroutineScope = CoroutineScope(SupervisorJob() + Main)\n\n    coroutineScope.launch {\n        val context = coroutineContext[ContinuationInterceptor] as Context\n        val url = \"https://example.com/data.txt\"\n        val result = downloadAndCreateDatabase(url, context)\n        println(result)\n    }\n}\n\nsuspend fun downloadAndCreateDatabase(url: String, context: Context): String = withContext(Dispatchers.IO) {\n    // ...\n    return@withContext \"Database created successfully\"\n}",
    "filename": "a4f6b5551af003b16bb76a564993fb8e_9.kt"
  },
  {
    "conversation_hash": "05f7a2d5023047bf46759d2903c0f7f7",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "for station in bike_stations\n    println(\"Station \", station.id, \" has \", station.num_bikes,\n            \" bikes, with \", length(station.outgoing_trips),\n            \" bikes in transit to other stations.\")\nend",
    "filename": "05f7a2d5023047bf46759d2903c0f7f7_5.kt"
  },
  {
    "conversation_hash": "2838d6244073ce54746cccf96b48ee57",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class FirstActivity : AppCompatActivity() {\n    \n    private lateinit var viewModel: MyViewModel\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_first)\n        \n        viewModel = ViewModelProvider(this).get(MyViewModel::class.java)\n        \n        viewModel.createData().observe(this, Observer { success ->\n            if (success) {\n                startActivity(Intent(this, SecondActivity::class.java))\n                finish()\n            } else {\n                // handle database create error\n            }\n        })\n    }\n}\n\nclass MyViewModel(application: Application) : AndroidViewModel(application) {\n    \n    fun createData(): LiveData<Boolean> {\n        val successLiveData = MutableLiveData<Boolean>()\n        \n        viewModelScope.launch {\n            try {\n                // Run your database operation here\n                val result = myDatabase.createData()\n                \n                // Set the result on the LiveData\n                successLiveData.postValue(result)\n            } catch (e: Exception) {\n                // Handle error during database operation\n                successLiveData.postValue(false)\n            }\n        }\n        \n        return successLiveData\n    }\n}",
    "filename": "2838d6244073ce54746cccf96b48ee57_1.kt"
  },
  {
    "conversation_hash": "2838d6244073ce54746cccf96b48ee57",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        CoroutineScope(Dispatchers.Default).launch {\n            // Do database operation\n        }.join()\n\n        startActivity(Intent(this, SecondActivity::class.java))\n        finish()\n    }\n}",
    "filename": "2838d6244073ce54746cccf96b48ee57_2.kt"
  },
  {
    "conversation_hash": "2838d6244073ce54746cccf96b48ee57",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private val latch = CountDownLatch(1)\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        CoroutineScope(Dispatchers.Default).launch {\n            // Do database operation\n\n            // Signal that the database operation is complete\n            latch.countDown()\n        }\n\n        // Wait until the database operation is complete\n        latch.await()\n\n        startActivity(Intent(this, SecondActivity::class.java))\n        finish()\n    }\n}",
    "filename": "2838d6244073ce54746cccf96b48ee57_3.kt"
  },
  {
    "conversation_hash": "2838d6244073ce54746cccf96b48ee57",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyActivity : AppCompatActivity() {\n\n    // Define the progress bar\n    private lateinit var progressBar: ProgressBar\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_my)\n\n        // Get a reference to the progress bar\n        progressBar = findViewById(R.id.progress_bar)\n\n        // Hide the progress bar by default\n        progressBar.visibility = View.INVISIBLE\n\n        // Start a long-running operation\n        CoroutineScope(Dispatchers.Default).launch {\n            // Show the progress bar\n            withContext(Dispatchers.Main) {\n                progressBar.visibility = View.VISIBLE\n            }\n\n            // Do the long-running operation and update the progress\n            for (i in 0..100) {\n                // Do a small part of the operation\n                delay(50)\n\n                // Update the progress\n                withContext(Dispatchers.Main) {\n                    progressBar.progress = i\n                }\n            }\n\n            // Hide the progress bar when the operation is complete\n            withContext(Dispatchers.Main) {\n                progressBar.visibility = View.INVISIBLE\n            }\n        }\n    }\n}",
    "filename": "2838d6244073ce54746cccf96b48ee57_4.kt"
  },
  {
    "conversation_hash": "2838d6244073ce54746cccf96b48ee57",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyActivity : AppCompatActivity() {\n\n    // Define the progress bar\n    private lateinit var progressBar: ProgressBar\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_my)\n\n        // Get a reference to the progress bar\n        progressBar = findViewById(R.id.progress_bar)\n\n        // Set the progress bar to be indefinite\n        progressBar.isIndeterminate = true\n\n        // Show the progress bar\n        progressBar.visibility = View.VISIBLE\n\n        // Start a long-running operation\n        CoroutineScope(Dispatchers.Default).launch {\n\n            // Do the long-running operation\n\n            // Hide the progress bar when the operation is complete\n            withContext(Dispatchers.Main) {\n                progressBar.visibility = View.INVISIBLE\n            }\n        }\n    }\n}",
    "filename": "2838d6244073ce54746cccf96b48ee57_5.kt"
  },
  {
    "conversation_hash": "308aa9a2e48608c8c09ff05af4828ce1",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val myNumbers = listOf(1, 2, 3, 4, 5)\n\n    myNumbers.forEach numberLoop@{ number ->\n        if (number > 3) {\n            println(\"Invalid number\")\n            return@numberLoop\n        }\n        \n        println(\"Valid number: $number\")\n    }\n\n    println(\"Finished processing numbers\")\n}",
    "filename": "308aa9a2e48608c8c09ff05af4828ce1_2.kt"
  },
  {
    "conversation_hash": "850ae1113a04e87b5819515afc57c5c1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity(), MyCallback {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Perform insertion operation and call onInsertionComplete method once complete\n        performInsertionOperation(this)\n    }\n\n    override fun onInsertionComplete() {\n        // Perform query operation here once insertion is complete\n        performQueryOperation()\n    }\n\n    // Rest of the code\n}",
    "filename": "850ae1113a04e87b5819515afc57c5c1_1.kt"
  },
  {
    "conversation_hash": "850ae1113a04e87b5819515afc57c5c1",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun performInsertionOperation(callback: MyCallback) {\n    // Perform insertion operation here\n\n    // Call onInsertionComplete method once complete\n    callback.onInsertionComplete()\n}",
    "filename": "850ae1113a04e87b5819515afc57c5c1_2.kt"
  },
  {
    "conversation_hash": "850ae1113a04e87b5819515afc57c5c1",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun performQueryOperation() {\n    val db = dbHelper.readableDatabase\n    val count = DatabaseUtils.queryNumEntries(db, \"my_table\")\n    db.close()\n    \n    // Update UI with count value\n    updateCountValue(count)\n}",
    "filename": "850ae1113a04e87b5819515afc57c5c1_5.kt"
  },
  {
    "conversation_hash": "850ae1113a04e87b5819515afc57c5c1",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "class TableActivity : AppCompatActivity() {\n\n    private lateinit var tableLayout: TableLayout\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_table)\n        \n        // Get the reference to the TableLayout\n        tableLayout = findViewById(R.id.table_layout)\n        \n        // Retrieve the data from the database as a list of objects\n        val dataList = getDataFromDatabase()\n        \n        // Iterate over the list, and for each object, create a TableRow dynamically and add it to the TableLayout\n        for (data in dataList) {\n            val tableRow = TableRow(this)\n            \n            // Create two TextViews for displaying name and description\n            val nameTextView = TextView(this)\n            val descriptionTextView = TextView(this)\n            \n            // Set the text of each TextView to the corresponding data from the object\n            nameTextView.text = data.name\n            descriptionTextView.text = data.description\n            \n            // Add the TextViews to the TableRow\n            tableRow.addView(nameTextView)\n            tableRow.addView(descriptionTextView)\n            \n            // Add the TableRow to the TableLayout\n            tableLayout.addView(tableRow)\n        }\n    }\n    \n    private fun getDataFromDatabase(): List<Data> {\n        // Retrieve the data from the database as a list of objects and return it\n    }\n}",
    "filename": "850ae1113a04e87b5819515afc57c5c1_7.kt"
  },
  {
    "conversation_hash": "850ae1113a04e87b5819515afc57c5c1",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "class TableActivity : AppCompatActivity() {\n\n    private lateinit var tableLayout: TableLayout\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_table)\n        \n        // Get reference to the TableLayout\n        tableLayout = findViewById(R.id.table_layout)\n        \n        // Retrieve data from the database as a list of objects\n        val dataList = getDataFromDatabase()\n        \n        // Create TableRow dynamically and add it to the TableLayout for each object\n        for (data in dataList) {\n            val tableRow = TableRow(this)\n            \n            // Set OnClickListener for TableRow\n            tableRow.setOnClickListener {\n                // Create Intent for next Activity\n                val intent = Intent(this, NextActivity::class.java)\n                \n                // Add data as extras to Intent\n                intent.putExtra(\"name\", data.name)\n                intent.putExtra(\"description\", data.description)\n                \n                // Start next Activity using Intent\n                startActivity(intent)\n            }\n            \n            // Create two TextViews for displaying name and description\n            val nameTextView = TextView(this)\n            val descriptionTextView = TextView(this)\n            \n            // Set text of each TextView to corresponding data\n            nameTextView.text = data.name\n            descriptionTextView.text = data.description\n            \n            // Add TextViews to TableRow\n            tableRow.addView(nameTextView)\n            tableRow.addView(descriptionTextView)\n            \n            // Add TableRow to TableLayout\n            tableLayout.addView(tableRow)\n        }\n    }\n    \n    private fun getDataFromDatabase(): List<Data> {\n        // Retrieve the data from the database as a list of objects and return it\n    }\n}",
    "filename": "850ae1113a04e87b5819515afc57c5c1_8.kt"
  },
  {
    "conversation_hash": "850ae1113a04e87b5819515afc57c5c1",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "class TableActivity : AppCompatActivity() {\n\n    private lateinit var tableLayout: TableLayout\n    private var dataList: List<Data> = emptyList()\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_table)\n        \n        // Get reference to the TableLayout\n        tableLayout = findViewById(R.id.table_layout)\n        \n        // Retrieve data from the database as a list of objects and store it in a field\n        dataList = getDataFromDatabase()\n        \n        // Populate the table with data\n        populateTable()\n    }\n    \n    // Inflate the sorting options menu\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n        menuInflater.inflate(R.menu.sort_options_menu, menu)\n        return super.onCreateOptionsMenu(menu)\n    }\n    \n    // Handle the user's selection in the sorting options menu\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        when (item.itemId) {\n            R.id.menu_item_name_asc -> {\n                // Sort the data list by name in ascending order\n                dataList = sortDataListByNameAscending(dataList)\n                \n                // Re-populate the table with the sorted data\n                populateTable()\n            }\n            R.id.menu_item_name_desc -> {\n                // Sort the data list by name in descending order\n                dataList = sortDataListByNameDescending(dataList)\n                \n                // Re-populate the table with the sorted data\n                populateTable()\n            }\n            // Add more cases for other sorting options\n        }\n        return super.onOptionsItemSelected(item)\n    }\n    \n    private fun populateTable() {\n        // Clear existing rows from the table\n        tableLayout.removeAllViews()\n        \n        // Add TableRow for each object in the data list\n        for (data in dataList) {\n            val tableRow = TableRow(this)\n            \n            // Create two TextViews for displaying name and description\n            val nameTextView = TextView(this)\n            val descriptionTextView = TextView(this)\n            \n            // Set text of each TextView to corresponding data\n            nameTextView.text = data.name\n            descriptionTextView.text = data.description\n            \n            // Add TextViews to TableRow\n            tableRow.addView(nameTextView)\n            tableRow.addView(descriptionTextView)\n            \n            // Add TableRow to TableLayout\n            tableLayout.addView(tableRow)\n        }\n    }\n    \n    private fun sortDataListByNameAscending(list: List<Data>): List<Data> {\n        // Sort the list by name in ascending order and return it\n    }\n    \n    private fun sortDataListByNameDescending(list: List<Data>): List<Data> {\n        // Sort the list by name in descending order and return it\n    }\n    \n    private fun getDataFromDatabase(): List<Data> {\n        // Retrieve the data from the database as a list of objects and return it\n    }\n}",
    "filename": "850ae1113a04e87b5819515afc57c5c1_10.kt"
  },
  {
    "conversation_hash": "850ae1113a04e87b5819515afc57c5c1",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "class TableActivity : AppCompatActivity() {\n\n    private lateinit var tableLayout: TableLayout\n    private var dataList: List<Data> = emptyList()\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_table)\n        \n        // Get reference to the TableLayout\n        tableLayout = findViewById(R.id.table_layout)\n        \n        // Retrieve data from the database as a list of objects and store it in a field\n        dataList = getDataFromDatabase()\n        \n        // Populate the table with data\n        populateTable()\n    }\n    \n    // Inflate the sorting options menu\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n        menuInflater.inflate(R.menu.sort_options_menu, menu)\n        return super.onCreateOptionsMenu(menu)\n    }\n    \n    // Handle the user's selection in the sorting options menu\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        when (item.itemId) {\n            R.id.menu_item_name_asc -> {\n                // Sort the data list by name in ascending order\n                dataList = sortDataListByNameAscending(dataList)\n                \n                // Re-populate the table with the sorted data\n                populateTable()\n            }\n            R.id.menu_item_name_desc -> {\n                // Sort the data list by name in descending order\n                dataList = sortDataListByNameDescending(dataList)\n                \n                // Re-populate the table with the sorted data\n                populateTable()\n            }\n            // Add more cases for other sorting options\n        }\n        return super.onOptionsItemSelected(item)\n    }\n    \n    private fun populateTable() {\n        // Clear existing rows from the table\n        tableLayout.removeAllViews()\n        \n        // Add TableRow for each object in the data list\n        for (data in dataList) {\n            val tableRow = TableRow(this)\n            \n            // Create two TextViews for displaying name and description\n            val nameTextView = TextView(this)\n            val descriptionTextView = TextView(this)\n\n            // Set the layout_width to 0dp and layout_weight to 1 for both TextViews\n            nameTextView.layoutParams = TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1f)\n            descriptionTextView.layoutParams = TableRow.LayoutParams(0, TableRow.LayoutParams.MATCH_PARENT, 1f)\n            \n            // Set text of each TextView to corresponding data\n            nameTextView.text = data.name\n            descriptionTextView.text = data.description\n            \n            // Add TextViews to TableRow\n            tableRow.addView(nameTextView)\n            tableRow.addView(descriptionTextView)\n            \n            // Add TableRow to TableLayout\n            tableLayout.addView(tableRow)\n        }\n    }\n    \n    private fun sortDataListByNameAscending(list: List<Data>): List<Data> {\n        // Sort the list by name in ascending order and return it\n    }\n    \n    private fun sortDataListByNameDescending(list: List<Data>): List<Data> {\n        // Sort the list by name in descending order and return it\n    }\n    \n    private fun getDataFromDatabase(): List<Data> {\n        // Retrieve the data from the database as a list of objects and return it\n    }\n}",
    "filename": "850ae1113a04e87b5819515afc57c5c1_11.kt"
  },
  {
    "conversation_hash": "6336f5839b1ff39ba61a53e8cc5c8068",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines."
    ],
    "code": "import kotlinx.coroutines.*\n\nfun main() = runBlocking {\n    // your coroutine code here\n    delay(1000) // wait for 1 second\n    println(\"Hello, world!\")\n}",
    "filename": "6336f5839b1ff39ba61a53e8cc5c8068_5.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.atomic.AtomicReference"
    ],
    "code": "import java.util.concurrent.atomic.AtomicReference\n\nclass MyConcurrentStack<E> {\n    private val head = AtomicReference<Node<E>>(null)\n\n    fun push(element: E) {\n        var oldNode: Node<E>?\n        do {\n            oldNode = head.get()\n        } while (!head.compareAndSet(oldNode, Node(element, oldNode)))\n    }\n\n    fun pop(): E? {\n        var oldNode: Node<E>?\n        do {\n            oldNode = head.get()\n            if (oldNode == null) {\n                return null // Stack is empty\n            }\n        } while (!head.compareAndSet(oldNode, oldNode.next))\n        return oldNode.value\n    }\n\n    private class Node<E>(val value: E, val next: Node<E>?)\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_1.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.kotlinx.lincheck.LoggingLevel.INFO",
      "org.jetbrains.kotlinx.lincheck.annotations.Operation",
      "org.jetbrains.kotlinx.lincheck.annotations.Param",
      "org.jetbrains.kotlinx.lincheck.paramgen.IntGen",
      "org.jetbrains.kotlinx.lincheck.strategy.managed.modelchecking.ModelCheckingOptions",
      "org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions",
      "org.jetbrains.kotlinx.lincheck.testing.RandomCTest",
      "org.jetbrains.kotlinx.lincheck.verifier.linearizability.LinearizabilityVerifier",
      "org.junit.jupiter.api.Test"
    ],
    "code": "import org.jetbrains.kotlinx.lincheck.LoggingLevel.INFO\nimport org.jetbrains.kotlinx.lincheck.annotations.Operation\nimport org.jetbrains.kotlinx.lincheck.strategy.managed.modelchecking.ModelCheckingOptions\nimport org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions\nimport org.jetbrains.kotlinx.lincheck.verifier.linearizability.LinearizabilityVerifier\nimport org.jetbrains.kotlinx.lincheck.testing.RandomCTest\nimport org.jetbrains.kotlinx.lincheck.annotations.Param\nimport org.jetbrains.kotlinx.lincheck.paramgen.IntGen\nimport org.junit.jupiter.api.Test\n\n@Param.Params(\n    Param(name = \"value\", gen = IntGen::class, conf = \"1:10\")\n)\nclass MyConcurrentStackTest {\n    private val stack = MyConcurrentStack<Int>()\n\n    @Operation\n    fun push(@Param(name = \"value\") value: Int) = stack.push(value)\n\n    @Operation\n    fun pop() = stack.pop()\n\n    @Test\n    fun modelCheckingTest() {\n        ModelCheckingOptions()\n            .actorsBefore(0) // Disable the initial sequential part\n            .actorsPerThread(3)\n            .actorsAfter(3)\n            .threads(3)\n            .requires(1) // At least one thread is required to perform the operations\n            .verifier(LinearizabilityVerifier::class.java)\n            .configure()\n            .addCustomScenario(\n                RandomCTest {\n                    push(1)\n                    pop()\n                    push(2)\n                    push(3)\n                    pop()\n                }\n            )\n        val scenarios = ModelCheckingOptions().genTestScenarios(MyConcurrentStackTest::class.java)\n        ModelCheckingOptions().launch(scenarios.forEach { it.run() }, array2);\n    }\n\n    @Test\n    fun stressTest() {\n        StressOptions()\n            .iterations(100)\n            .invocationsPerIteration(50)\n            .threads(4)\n            .actorsPerThread(10)\n            .logLevel(INFO)\n            .verify()\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_2.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Counter {\n    var value = 0\n\n    fun increment() {\n        value++\n    }\n\n    fun get() = value\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_3.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.kotlinx.lincheck.annotations.Operation",
      "org.jetbrains.kotlinx.lincheck.check",
      "org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions",
      "org.junit.jupiter.api.Test"
    ],
    "code": "import org.jetbrains.kotlinx.lincheck.check\nimport org.jetbrains.kotlinx.lincheck.annotations.Operation\nimport org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions\nimport org.junit.jupiter.api.Test\n\nclass CounterTest {\n    private val counter = Counter()\n\n    @Operation\n    fun increment() = counter.increment()\n\n    @Operation\n    fun get() = counter.get()\n\n    @Test\n    fun stressTest() {\n        StressOptions()\n            .iterations(100)\n            .invocationsPerIteration(50)\n            .threads(4)\n            .actorsPerThread(10)\n            .verify()\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_4.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class BankAccount {\n    var balance = 0.0\n\n    fun withdraw(amount: Double): Boolean {\n        if (balance >= amount) {\n            balance -= amount\n            return true\n        }\n        return false\n    }\n\n    fun deposit(amount: Double) {\n        balance += amount\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_5.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.kotlinx.lincheck.annotations.Operation",
      "org.jetbrains.kotlinx.lincheck.check",
      "org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions",
      "org.junit.jupiter.api.Test"
    ],
    "code": "import org.jetbrains.kotlinx.lincheck.check\nimport org.jetbrains.kotlinx.lincheck.annotations.Operation\nimport org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions\nimport org.junit.jupiter.api.Test\n\nclass BankAccountTest {\n    private val account = BankAccount()\n\n    @Operation\n    fun deposit(amount: Double) = account.deposit(amount)\n\n    @Operation\n    fun withdraw(amount: Double) = account.withdraw(amount)\n\n    @Test\n    fun stressTest() {\n        StressOptions()\n            .iterations(100)\n            .invocationsPerIteration(50)\n            .threads(4)\n            .actorsPerThread(10)\n            .verify()\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_6.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class SimpleResizableList {\n    private var array = arrayOfNulls<Int>(2)\n    private var size = 0\n\n    fun add(value: Int): Boolean {\n        if (size == array.size) {\n            array = array.copyOf(size * 2)\n        }\n        array[size++] = value\n        return true\n    }\n\n    fun get(index: Int): Int? {\n        if (index < size) {\n            return array[index]\n        }\n        return null\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_7.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.kotlinx.lincheck.annotations.Operation",
      "org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions",
      "org.junit.jupiter.api.Test"
    ],
    "code": "import org.jetbrains.kotlinx.lincheck.annotations.Operation\nimport org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions\nimport org.junit.jupiter.api.Test\n\nclass SimpleResizableListTest {\n    private val list = SimpleResizableList()\n\n    @Operation\n    fun add(value: Int) = list.add(value)\n\n    @Operation\n    fun get(index: Int) = list.get(index)\n\n    @Test\n    fun stressTest() {\n        StressOptions()\n            .iterations(100)\n            .invocationsPerIteration(50)\n            .threads(4)\n            .actorsPerThread(10)\n            .verify()\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_8.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Resource {\n    private val lock = Object()\n\n    fun doWork() {\n        synchronized(lock) {\n            Thread.sleep(100)\n        }\n    }\n}\n\nclass ResourceUser(private val first: Resource, private val second: Resource) {\n    fun work() {\n        synchronized(first) {\n            synchronized(second) {\n                first.doWork()\n                second.doWork()\n            }\n        }\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_9.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.kotlinx.lincheck.annotations.Operation",
      "org.jetbrains.kotlinx.lincheck.check",
      "org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions",
      "org.junit.jupiter.api.Test"
    ],
    "code": "import org.jetbrains.kotlinx.lincheck.check\nimport org.jetbrains.kotlinx.lincheck.annotations.Operation\nimport org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions\nimport org.junit.jupiter.api.Test\n\nclass ResourceUserTest {\n    private val r1 = Resource()\n    private val r2 = Resource()\n    private val user1 = ResourceUser(r1, r2)\n    private val user2 = ResourceUser(r2, r1)\n\n    @Operation\n    fun user1Work() = user1.work()\n\n    @Operation\n    fun user2Work() = user2.work()\n\n    @Test\n    fun stressTest() {\n        StressOptions()\n            .iterations(100)\n            .invocationsPerIteration(50)\n            .threads(4)\n            .actorsPerThread(10)\n            .verify()\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_10.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "class BoundedBuffer(size: Int) {\n    private val buffer = Array<Int?>(size) {null}\n    private var tail = 0\n    private var head = 0\n\n    fun put(value: Int): Boolean {\n        if (buffer[head] == null) {\n            buffer[head] = value\n            head = (head + 1) % buffer.size\n            return true\n        }\n        return false\n    }\n\n    fun take(): Int? {\n        val value = buffer[tail]\n        if (value != null) {\n            buffer[tail] = null\n            tail = (tail + 1) % buffer.size\n        }\n        return value\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_11.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.kotlinx.lincheck.annotations.Operation",
      "org.jetbrains.kotlinx.lincheck.check",
      "org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions",
      "org.junit.jupiter.api.Test"
    ],
    "code": "import org.jetbrains.kotlinx.lincheck.check\nimport org.jetbrains.kotlinx.lincheck.annotations.Operation\nimport org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions\nimport org.junit.jupiter.api.Test\n\nclass BoundedBufferTest {\n    private val buffer = BoundedBuffer(5)\n\n    @Operation\n    fun put(value: Int) = buffer.put(value)\n\n    @Operation\n    fun take(): Int? = buffer.take()\n\n    @Test\n    fun stressTest() {\n        StressOptions()\n            .iterations(100)\n            .invocationsPerIteration(50)\n            .threads(4)\n            .actorsPerThread(10)\n            .verify()\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_12.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "class AccountSafe1 {\n    private var balance = 0.0\n\n    @Synchronized\n    fun modify(difference: Double) {\n        balance += difference\n    }\n\n    @Synchronized\n    fun get() = balance\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_13.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [],
    "code": "class AccountSafe2 {\n    private var balance = 0.0\n    private val lock = Object()\n\n    fun modify(difference: Double) {\n        synchronized(lock) {\n            balance += difference\n        }\n    }\n\n    fun get(): Double {\n        synchronized(lock) {\n            return balance\n        }\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_14.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.locks.ReentrantLock",
      "kotlin.concurrent.withLock"
    ],
    "code": "import java.util.concurrent.locks.ReentrantLock\nimport kotlin.concurrent.withLock\n\nclass AccountSafe3 {\n    private var balance = 0.0\n    private val lock = ReentrantLock()\n\n    fun modify(difference: Double) {\n        lock.withLock {\n            balance += difference\n        }\n    }\n\n    fun get(): Double {\n        lock.withLock {\n            return balance\n        }\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_15.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [
      "com.google.common.util.concurrent.AtomicDouble"
    ],
    "code": "import com.google.common.util.concurrent.AtomicDouble\n\nclass AccountSafe4 {\n    private val balance = AtomicDouble(0.0)\n\n    fun modify(difference: Double) {\n        balance.addAndGet(difference)\n    }\n\n    fun get() = balance.get()\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_16.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.locks.ReentrantReadWriteLock",
      "kotlin.concurrent.read",
      "kotlin.concurrent.write"
    ],
    "code": "import java.util.concurrent.locks.ReentrantReadWriteLock\nimport kotlin.concurrent.read\nimport kotlin.concurrent.write\n\nclass AccountSafe5 {\n    private var balance = 0.0\n    private val lock = ReentrantReadWriteLock()\n\n    fun modify(difference: Double) {\n        lock.write {\n            balance += difference\n        }\n    }\n\n    fun get(): Double {\n        return lock.read {\n            balance\n        }\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_17.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 18,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.atomic.AtomicIntegerFieldUpdater"
    ],
    "code": "import java.util.concurrent.atomic.AtomicIntegerFieldUpdater\n\nclass AccountSafe6 {\n    @Volatile\n    private var balance = 0\n\n    companion object {\n        private val updater = AtomicIntegerFieldUpdater.newUpdater(\n            AccountSafe6::class.java, \"balance\"\n        )\n    }\n\n    fun modify(difference: Double) {\n        val differenceAsInt = (difference * 100).toInt()\n\n        updater.getAndUpdate(this) { currentValue ->\n            currentValue + differenceAsInt\n        }\n    }\n\n    fun get() = balance.toDouble() / 100\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_18.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 19,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.locks.StampedLock"
    ],
    "code": "import java.util.concurrent.locks.StampedLock\n\nclass AccountSafe7 {\n    private var balance = 0.0\n    private val lock = StampedLock()\n\n    fun modify(difference: Double) {\n        val stamp = lock.writeLock()\n        try {\n            balance += difference\n        } finally {\n            lock.unlockWrite(stamp)\n        }\n    }\n\n    fun get(): Double {\n        val stamp = lock.readLock()\n        try {\n            return balance\n        } finally {\n            lock.unlockRead(stamp)\n        }\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_19.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 20,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.sync.Mutex",
      "kotlinx.coroutines.sync.withLock"
    ],
    "code": "import kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\n\nclass AccountSafe8 {\n    private var balance = 0.0\n    private val mutex = Mutex()\n\n    suspend fun modify(difference: Double) {\n        mutex.withLock {\n            balance += difference\n        }\n    }\n\n    suspend fun get(): Double {\n        mutex.withLock {\n            return balance\n        }\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_20.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 21,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.Semaphore"
    ],
    "code": "import java.util.concurrent.Semaphore\n\nclass AccountSafe9 {\n    private var balance = 0.0\n    private val semaphore = Semaphore(1)\n\n    fun modify(difference: Double) {\n        semaphore.acquireUninterruptibly()\n        try {\n            balance += difference\n        } finally {\n            semaphore.release()\n        }\n    }\n\n    fun get(): Double {\n        semaphore.acquireUninterruptibly()\n        try {\n            return balance\n        } finally {\n            semaphore.release()\n        }\n    }\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_21.kt"
  },
  {
    "conversation_hash": "ab9efa6da5f6d4aa046ece220c78c950",
    "code_index": 22,
    "language": "Kotlin",
    "libraries": [],
    "code": "class AccountSafe10 {\n    private val _balance = DoubleWrapper(0.0)\n\n    fun modify(difference: Double) {\n        synchronized(_balance) {\n            _balance.value += difference\n        }\n    }\n\n    fun get(): Double {\n        synchronized(_balance) {\n            return _balance.value\n        }\n    }\n\n    private class DoubleWrapper(var value: Double)\n}",
    "filename": "ab9efa6da5f6d4aa046ece220c78c950_22.kt"
  },
  {
    "conversation_hash": "ff4efc706f48525d071ab08162c1e656",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.",
      "org.jetbrains.kotlinx.lincheck.LinChecker",
      "org.jetbrains.kotlinx.lincheck.annotations.Operation",
      "org.jetbrains.kotlinx.lincheck.annotations.Param",
      "org.jetbrains.kotlinx.lincheck.paramgen.DoubleGen",
      "org.jetbrains.kotlinx.lincheck.strategy.managed.modelchecking.ModelCheckingOptions",
      "org.jetbrains.kotlinx.lincheck.verifier.VerifierState",
      "org.junit.Test"
    ],
    "code": "import kotlinx.coroutines.*\nimport org.jetbrains.kotlinx.lincheck.LinChecker\nimport org.jetbrains.kotlinx.lincheck.annotations.Operation\nimport org.jetbrains.kotlinx.lincheck.annotations.Param\nimport org.jetbrains.kotlinx.lincheck.paramgen.DoubleGen\nimport org.jetbrains.kotlinx.lincheck.strategy.managed.modelchecking.ModelCheckingOptions\nimport org.jetbrains.kotlinx.lincheck.verifier.VerifierState\nimport org.junit.Test\n\nclass AccountSafe6Test {\n    @Test\n    fun testAccountSafe6() {\n        val options = ModelCheckingOptions()\n            .actorsPerThread(3)\n            .actorsBefore(0)\n            .actorsAfter(0)\n            .requireStateEquivalenceImplCheck(true)\n        LinChecker.check(AccountSafe6TestModel::class.java, options)\n    }\n}\n\nclass AccountSafe6TestModel: VerifierState() {\n    private val account = AccountSafe6()\n\n    @Operation\n    suspend fun modify(@Param(gen = DoubleGen::class, conf = \"1:500\") difference: Double) {\n        account.modify(difference)\n    }\n\n    @Operation\n    fun get(): Double = account.get()\n\n    override fun extractState(): Any = account.get()\n}",
    "filename": "ff4efc706f48525d071ab08162c1e656_1.kt"
  },
  {
    "conversation_hash": "ff4efc706f48525d071ab08162c1e656",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.",
      "kotlinx.coroutines.CompletableDeferred",
      "kotlinx.coroutines.CoroutineScope",
      "kotlinx.coroutines.Dispatchers",
      "kotlinx.coroutines.channels.actor",
      "kotlinx.coroutines.coroutineScope",
      "kotlinx.coroutines.launch",
      "org.jetbrains.kotlinx.lincheck.LinChecker",
      "org.jetbrains.kotlinx.lincheck.annotations.Operation",
      "org.jetbrains.kotlinx.lincheck.annotations.Param",
      "org.jetbrains.kotlinx.lincheck.paramgen.DoubleGen",
      "org.jetbrains.kotlinx.lincheck.strategy.managed.modelchecking.ModelCheckingOptions",
      "org.jetbrains.kotlinx.lincheck.verifier.VerifierState",
      "org.junit.Test"
    ],
    "code": "import kotlinx.coroutines.*\nimport kotlinx.coroutines.channels.actor\nimport kotlinx.coroutines.CompletableDeferred\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.coroutineScope\nimport kotlinx.coroutines.launch\nimport org.jetbrains.kotlinx.lincheck.LinChecker\nimport org.jetbrains.kotlinx.lincheck.annotations.Operation\nimport org.jetbrains.kotlinx.lincheck.annotations.Param\nimport org.jetbrains.kotlinx.lincheck.paramgen.DoubleGen\nimport org.jetbrains.kotlinx.lincheck.strategy.managed.modelchecking.ModelCheckingOptions\nimport org.jetbrains.kotlinx.lincheck.verifier.VerifierState\nimport org.junit.Test\n\nclass AccountSafe8Test {\n    @Test\n    fun testAccountSafe8() {\n        val options = ModelCheckingOptions()\n            .actorsPerThread(3)\n            .actorsBefore(0)\n            .actorsAfter(0)\n            .requireStateEquivalenceImplCheck(true)\n        LinChecker.check(AccountSafe8TestModel::class.java, options)\n    }\n}\n\nclass AccountSafe8TestModel : VerifierState() {\n    private val account = AccountSafe8()\n\n    @Operation\n    suspend fun modify(@Param(gen = DoubleGen::class, conf = \"1:500\") difference: Double) {\n        account.modify(difference)\n    }\n\n    @Operation\n    fun get(): Double {\n        return runBlocking { account.get() }\n    }\n\n    override fun extractState(): Any = runBlocking { account.get() }\n}",
    "filename": "ff4efc706f48525d071ab08162c1e656_3.kt"
  },
  {
    "conversation_hash": "1d48eda7944146ce55b645e373f22846",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun sortRecords(records: List<Record>, sortBy: String, ascending: Boolean): List<Record> {\n    return when(sortBy) {\n        \"name\" -> if (ascending) records.sortedBy { it.name } else records.sortedByDescending { it.name }\n        \"year\" -> if (ascending) records.sortedBy { it.year } else records.sortedByDescending { it.year }\n        else -> records\n    }\n}",
    "filename": "1d48eda7944146ce55b645e373f22846_2.kt"
  },
  {
    "conversation_hash": "1d48eda7944146ce55b645e373f22846",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onContextItemSelected(item: MenuItem?): Boolean {\n    return when(item?.itemId) {\n        R.id.sort_by_name_asc -> {\n            // Sort by name in ascending order\n            val sortedRecords = sortRecords(records, \"name\", true)\n            \n            // Update ordinals\n            sortedRecords.forEachIndexed { index, record ->\n                record.ordinal = index + 1\n            }\n            \n            // TODO: Update your table view with sorted data\n            true\n        }\n        R.id.sort_by_name_desc -> {\n            // Sort by name in descending order\n            val sortedRecords = sortRecords(records, \"name\", false)\n            \n            // Update ordinals\n            sortedRecords.forEachIndexed { index, record ->\n                record.ordinal = index + 1\n            }\n            \n            // TODO: Update your table view with sorted data\n            true\n        }\n        R.id.sort_by_year_asc -> {\n            // Sort by year in ascending order\n            val sortedRecords = sortRecords(records, \"year\", true)\n            \n            // Update ordinals\n            sortedRecords.forEachIndexed { index, record ->\n                record.ordinal = index + 1\n            }\n            \n            // TODO: Update your table view with sorted data\n            true\n        }\n        R.id.sort_by_year_desc -> {\n            // Sort by year in descending order\n            val sortedRecords = sortRecords(records, \"year\", false)\n            \n            // Update ordinals\n            sortedRecords.forEachIndexed { index, record ->\n                record.ordinal = index + 1\n            }\n            \n            // TODO: Update your table view with sorted data\n            true\n        }\n        else -> {\n            super.onContextItemSelected(item)\n        }\n    }\n}",
    "filename": "1d48eda7944146ce55b645e373f22846_6.kt"
  },
  {
    "conversation_hash": "1d48eda7944146ce55b645e373f22846",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun sortRows(rows: List<TableRow>, sortBy: String, ascending: Boolean): List<TableRow> {\n    return when (sortBy) {\n        \"name\" -> if (ascending) rows.sortedBy { it.getChildAt(1) as TextView } else rows.sortedByDescending { it.getChildAt(1) as TextView }\n        \"year\" -> if (ascending) rows.sortedBy { it.getChildAt(2) as TextView } else rows.sortedByDescending { it.getChildAt(2) as TextView }\n        else -> rows\n    }\n}",
    "filename": "1d48eda7944146ce55b645e373f22846_7.kt"
  },
  {
    "conversation_hash": "1d48eda7944146ce55b645e373f22846",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onContextItemSelected(item: MenuItem?): Boolean {\n    return when(item?.itemId) {\n        R.id.sort_by_name_asc -> {\n            // Sort by name in ascending order\n            val sortedRows = sortRows(getTableRowList(), \"name\", true)\n\n            // Update ordinals\n            sortedRows.forEachIndexed { index, row ->\n                row.getChildAt(0) as TextView // update the ordinal value TextView\n                        .text = (index + 1).toString()\n            }\n\n            // TODO: Update your table view with sorted data\n            true\n        }\n        R.id.sort_by_name_desc -> {\n            // Sort by name in descending order\n            val sortedRows = sortRows(getTableRowList(), \"name\", false)\n\n            // Update ordinals\n            sortedRows.forEachIndexed { index, row ->\n                row.getChildAt(0) as TextView // update the ordinal value TextView\n                        .text = (index + 1).toString()\n            }\n\n            // TODO: Update your table view with sorted data\n            true\n        }\n        R.id.sort_by_year_asc -> {\n            // Sort by year in ascending order\n            val sortedRows = sortRows(getTableRowList(), \"year\", true)\n\n            // Update ordinals\n            sortedRows.forEachIndexed { index, row ->\n                row.getChildAt(0) as TextView // update the ordinal value TextView\n                        .text = (index + 1).toString()\n            }\n\n            // TODO: Update your table view with sorted data\n            true\n        }\n        R.id.sort_by_year_desc -> {\n            // Sort by year in descending order\n            val sortedRows = sortRows(getTableRowList(), \"year\", false)\n\n            // Update ordinals\n            sortedRows.forEachIndexed { index, row ->\n                row.getChildAt(0) as TextView // update the ordinal value TextView\n                        .text = (index + 1).toString()\n            }\n\n            // TODO: Update your table view with sorted data\n            true\n        }\n        else -> {\n            super.onContextItemSelected(item)\n        }\n    }\n}",
    "filename": "1d48eda7944146ce55b645e373f22846_8.kt"
  },
  {
    "conversation_hash": "1d48eda7944146ce55b645e373f22846",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onContextItemSelected(item: MenuItem): Boolean {\n    when (item.itemId) {\n        R.id.sort_by_name_asc -> {\n            // Sort by name in ascending order\n            val sortedRows = sortRows(getTableRowList(), \"name\", true)\n\n            // Update ordinals\n            sortedRows.forEachIndexed { index, row ->\n                (row.getChildAt(0) as TextView).text = (index + 1).toString()\n            }\n\n            // Update your table view with sorted data\n            updateTableView(sortedRows)\n            return true\n        }\n        R.id.sort_by_name_desc -> {\n            // Sort by name in descending order\n            val sortedRows = sortRows(getTableRowList(), \"name\", false)\n\n            // Update ordinals\n            sortedRows.forEachIndexed { index, row ->\n                (row.getChildAt(0) as TextView).text = (index + 1).toString()\n            }\n\n            // Update your table view with sorted data\n            updateTableView(sortedRows)\n            return true\n        }\n        R.id.sort_by_year_asc -> {\n            // Sort by year in ascending order\n            val sortedRows = sortRows(getTableRowList(), \"year\", true)\n\n            // Update ordinals\n            sortedRows.forEachIndexed { index, row ->\n                (row.getChildAt(0) as TextView).text = (index + 1).toString()\n            }\n\n            // Update your table view with sorted data\n            updateTableView(sortedRows)\n            return true\n        }\n        R.id.sort_by_year_desc -> {\n            // Sort by year in descending order\n            val sortedRows = sortRows(getTableRowList(), \"year\", false)\n\n            // Update ordinals\n            sortedRows.forEachIndexed { index, row ->\n                (row.getChildAt(0) as TextView).text = (index + 1).toString()\n            }\n\n            // Update your table view with sorted data\n            updateTableView(sortedRows)\n            return true\n        }\n        else -> return super.onContextItemSelected(item)\n    }\n}",
    "filename": "1d48eda7944146ce55b645e373f22846_9.kt"
  },
  {
    "conversation_hash": "1d48eda7944146ce55b645e373f22846",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun sortRows(rows: List<TableRow>, sortBy: String, ascending: Boolean): List<TableRow> {\n    return when (sortBy) {\n        \"name\" -> {\n            val comparator = compareBy<TableRow> { (it.getChildAt(1) as TextView).text.toString() }\n            if (ascending) rows.sortedWith(comparator) else rows.sortedWith(comparator.reversed())\n        }\n        \"year\" -> {\n            val comparator = compareBy<TableRow> { (it.getChildAt(2) as TextView).text.toString().toInt() }\n            if (ascending) rows.sortedWith(comparator) else rows.sortedWith(comparator.reversed())\n        }\n        else -> rows\n    }\n}",
    "filename": "1d48eda7944146ce55b645e373f22846_10.kt"
  },
  {
    "conversation_hash": "1d48eda7944146ce55b645e373f22846",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreateContextMenu(menu: ContextMenu?, v: View?,\n        menuInfo: ContextMenu.ContextMenuInfo?) {\n    super.onCreateContextMenu(menu, v, menuInfo)\n    menuInflater.inflate(R.menu.context_menu, menu)\n}\n\noverride fun onContextItemSelected(item: MenuItem): Boolean {\n    when (item.itemId) {\n        R.id.context_menu_item1 -> {\n            // Perform action 1\n            return true\n        }\n        R.id.context_menu_item2 -> {\n            // Perform action 2\n            return true\n        }\n        R.id.context_menu_item3 -> {\n            // Perform action 3\n            return true\n        }\n        else -> return super.onContextItemSelected(item)\n    }\n}",
    "filename": "1d48eda7944146ce55b645e373f22846_13.kt"
  },
  {
    "conversation_hash": "a50d54c0d0687e87d1355b20c0b341cd",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.kotlinx.lincheck.LinChecker",
      "org.jetbrains.kotlinx.lincheck.annotations.Operation",
      "org.jetbrains.kotlinx.lincheck.strategy.stress.StressCTest",
      "org.jetbrains.kotlinx.lincheck.verifier.VerifierState",
      "org.junit.Test"
    ],
    "code": "import org.jetbrains.kotlinx.lincheck.LinChecker\nimport org.jetbrains.kotlinx.lincheck.annotations.Operation\nimport org.jetbrains.kotlinx.lincheck.strategy.stress.StressCTest\nimport org.jetbrains.kotlinx.lincheck.verifier.VerifierState\nimport org.junit.Test\n\n@StressCTest\nclass ReferenceProblemTest : VerifierState() {\n    private val referenceProblem = ReferenceProblem()\n\n    @Operation\n    fun getData(): Map<String, String> = referenceProblem.getData()\n\n    @Operation\n    fun refreshData(randomData: String) {\n        referenceProblem.refreshData(randomData)\n    }\n\n    override fun verifyEquality(obj1: Any?, obj2: Any?): Boolean {\n        if (obj1 !is Map<*, *> || obj2 !is Map<*, *>) return false\n        return obj1 == obj2\n    }\n\n    override fun extractState(): Any? {\n        return referenceProblem.getData()\n    }\n\n    @Test\n    fun runTest() {\n        LinChecker.check(ReferenceProblemTest::class.java)\n    }\n}",
    "filename": "a50d54c0d0687e87d1355b20c0b341cd_0.kt"
  },
  {
    "conversation_hash": "cb508d198eec50e4993a48af65862e52",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun sortRows(rows: List<TableRow>, sortBy: String, ascending: Boolean): List<TableRow> {\n    return when (sortBy) {\n        \"title\" -> {\n            val comparator = compareBy<TableRow> { (it.getChildAt(2) as TextView).text.toString() }\n            val sortedRows = rows.subList(1, rows.size).sortedWith(comparator)\n            rows.subList(0, 1) + if (ascending) sortedRows else sortedRows.reversed()\n        }\n        \"year\" -> {\n            val comparator = compareBy<TableRow> { (it.getChildAt(3) as TextView).text.toString().toInt() }\n            val sortedRows = rows.subList(1, rows.size).sortedWith(comparator)\n            rows.subList(0, 1) + if (ascending) sortedRows else sortedRows.reversed()\n        }\n        else -> rows\n    }\n}",
    "filename": "cb508d198eec50e4993a48af65862e52_0.kt"
  },
  {
    "conversation_hash": "cb508d198eec50e4993a48af65862e52",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onOptionsItemSelected(item: MenuItem): Boolean {\n    return when (item.itemId) {\n        R.id.action_sort_title -> {\n            // handle sort by title\n            true\n        }\n        R.id.action_sort_year -> {\n            // handle sort by year\n            true\n        }\n        else -> super.onOptionsItemSelected(item)\n    }\n}",
    "filename": "cb508d198eec50e4993a48af65862e52_3.kt"
  },
  {
    "conversation_hash": "a31c4741d50a4da24bbda1a7fd71388a",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class TipSelectionDelegate(\n    private val tipConfiguration: TipConfiguration,\n    private val customTipUiState: MutableStateFlow<CustomTipUiState>,\n    private val sheetUiState: MutableStateFlow<TipSheetUiState>\n) {\n    // Move the logic related to the TipSelectionScreen here.\n}\n\nclass CustomTipDelegate(\n    private val tipConfiguration: TipConfiguration,\n    private val customTipUiState: MutableStateFlow<CustomTipUiState>,\n    private val sheetUiState: MutableStateFlow<TipSheetUiState>,\n    private val selectedTip: StateFlow<Tip?>\n) {\n    // Move the logic related to the CustomTipScreen here.\n}\n\nclass TipPaymentDelegate(\n    private val tipPaymentUiState: MutableStateFlow<TipPaymentUiState>,\n    private val sheetUiState: MutableStateFlow<TipSheetUiState>,\n    private val paymentInteractor: PaymentInteractor,\n    private val viewModelScope: CoroutineScope,\n    private val tippingArgs: TippingArgs\n) {\n    // Move the logic related to the TipPaymentScreen here.\n}",
    "filename": "a31c4741d50a4da24bbda1a7fd71388a_0.kt"
  },
  {
    "conversation_hash": "a31c4741d50a4da24bbda1a7fd71388a",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onTipSelected(tip: Tip) {\n    tipSelectionDelegate.onTipSelected(tip)\n}\n\nfun onFinishTipSelection() {\n    tipSelectionDelegate.onFinishTipSelection()\n}\n\nfun onChangeCustomTipAmount(amount: String) {\n    customTipDelegate.onChangeCustomTipAmount(amount)\n}\n\nfun onApplyCustomTip() {\n    customTipDelegate.onApplyCustomTip()\n}\n\nfun onPaymentOptions(fm: FragmentManager?) {\n    tipPaymentDelegate.onPaymentOptions(fm)\n}\n\nfun onSubmitTip() {\n    tipPaymentDelegate.onSubmitTip()\n}\n\nfun onRetryPayment() {\n    tipPaymentDelegate.onRetryPayment()\n}\n\nfun back() {\n    tipSelectionDelegate.back()\n}",
    "filename": "a31c4741d50a4da24bbda1a7fd71388a_2.kt"
  },
  {
    "conversation_hash": "81dfb77504aef8607062fa77c10d2642",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "org.junit.Test",
      "org.junit.runner.RunWith",
      "org.openjdk.jcstress.annotations.",
      "org.openjdk.jcstress.infra.results.I_Result"
    ],
    "code": "import org.junit.Test\nimport org.junit.runner.RunWith\nimport org.openjdk.jcstress.annotations.*\nimport org.openjdk.jcstress.infra.results.I_Result\n\n@RunWith(org.openjdk.jcstress.junit.JCStressRunner::class)\n@Outcome(id = [\"1\"], expect = Expect.ACCEPTABLE, desc = \"getData() called before refreshData()\")\n@Outcome(id = [\"2\"], expect = Expect.ACCEPTABLE, desc = \"getData() called after refreshData()\")\n@Outcome(id = [\"3\"], expect = Expect.FORBIDDEN, desc = \"Concurrent modification exception occurred\")\n@State\nclass ReferenceProblemTest {\n    private val referenceProblem: ReferenceProblem = ReferenceProblem()\n\n    @Actor\n    fun actor1() {\n        referenceProblem.refreshData(\"foo\")\n    }\n\n    @Actor\n    fun actor2(result: I_Result) {\n        try {\n            referenceProblem.getData() // first, we read the data to get the old size\n            referenceProblem.refreshData(\"bar\")\n            result.r1 = 2 // refreshing the data was successful\n        } catch (e: ConcurrentModificationException) {\n            result.r1 = 3 // concurrent modification exception occurred\n        }\n    }\n\n    @Arbiter\n    fun arbiter(result: I_Result) {\n        val dataSize = referenceProblem.getData().size\n\n        if (dataSize == 1) {\n            result.r1 = 1 // getData() was called before the refreshData()\n        } else if (dataSize == 2) {\n            result.r1 = 2 // getData() was called after the refreshData()\n        }\n    }\n}",
    "filename": "81dfb77504aef8607062fa77c10d2642_0.kt"
  },
  {
    "conversation_hash": "81dfb77504aef8607062fa77c10d2642",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.TimeUnit",
      "org.junit.jupiter.api.Assertions.assertEquals",
      "org.junit.jupiter.api.Test",
      "org.junit.jupiter.api.extension.ExtendWith",
      "org.openjdk.jcstress.annotations.",
      "org.openjdk.jcstress.infra.results.I_Result",
      "org.openjdk.jcstress.junit5.JCStress",
      "org.openjdk.jcstress.junit5.JCStressTest",
      "org.openjdk.jcstress.junit5.Timeout"
    ],
    "code": "import org.junit.jupiter.api.Assertions.assertEquals\nimport org.junit.jupiter.api.Test\nimport org.junit.jupiter.api.extension.ExtendWith\nimport org.openjdk.jcstress.annotations.*\nimport org.openjdk.jcstress.infra.results.I_Result\nimport org.openjdk.jcstress.junit5.JCStress\nimport org.openjdk.jcstress.junit5.JCStressTest\nimport org.openjdk.jcstress.junit5.Timeout\nimport java.util.concurrent.TimeUnit\n\n@JCStressTest\n@Timeout(value = 10, unit = TimeUnit.SECONDS)\n@State\n@Outcome(id = [\"1\"], expect = Expect.ACCEPTABLE_INTERESTING, desc = \"getData() called before refreshData()\")\n@Outcome(id = [\"2\"], expect = Expect.ACCEPTABLE, desc = \"getData() called after refreshData()\")\n@Outcome(id = [\"3\"], expect = Expect.FORBIDDEN, desc = \"Concurrent modification exception occurred\")\n@ExtendWith(JcStressResultExtension::class)\nclass ReferenceProblemTest {\n    private val referenceProblem: ReferenceProblem = ReferenceProblem()\n\n    @Actor\n    fun actor1() {\n        referenceProblem.refreshData(\"foo\")\n    }\n\n    @Actor\n    fun actor2(result: I_Result) {\n        try {\n            referenceProblem.getData() // first, we read the data to get the old size\n            referenceProblem.refreshData(\"bar\")\n            result.r1 = 2 // refreshing the data was successful\n        } catch (e: ConcurrentModificationException) {\n            result.r1 = 3 // concurrent modification exception occurred\n        }\n    }\n\n    @Arbiter\n    fun arbiter(result: I_Result) {\n        val dataSize = referenceProblem.getData().size\n        if (dataSize == 1) {\n            result.r1 = 1 // getData() was called before the refreshData()\n        } else if (dataSize == 2) {\n            result.r1 = 2 // getData() was called after the refreshData()\n        }\n    }\n\n    @Test\n    fun testReferenceProblem() {\n        val result = runJCStressTest(ReferenceProblemTest::class.java)\n        assertEquals(Expect.ACCEPTABLE, result.getOutcome()) // Acceptable outcome means the test passed\n    }\n}",
    "filename": "81dfb77504aef8607062fa77c10d2642_1.kt"
  },
  {
    "conversation_hash": "81dfb77504aef8607062fa77c10d2642",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.ConcurrentModificationException",
      "kotlinx.coroutines.",
      "org.junit.Assert.assertEquals",
      "org.junit.Test"
    ],
    "code": "import kotlinx.coroutines.*\nimport org.junit.Assert.assertEquals\nimport org.junit.Test\nimport java.util.concurrent.ConcurrentModificationException\n\nclass ReferenceProblemTest {\n    private val referenceProblem = ReferenceProblem()\n\n    @Test\n    fun testReferenceProblem() {\n        runBlocking {\n            val job1 = launch {\n                referenceProblem.refreshData(\"foo\")\n            }\n\n            val job2 = launch {\n                try {\n                    referenceProblem.getData() // first, we read the data to get the old size\n                    delay(100)\n                    referenceProblem.refreshData(\"bar\")\n                } catch (e: ConcurrentModificationException) {\n                    error(\"Concurrent modification exception occurred\")\n                }\n            }\n\n            joinAll(job1, job2)\n\n            val dataSize = referenceProblem.getData().size\n            if (dataSize == 1) {\n                // getData() was called before refreshData()\n                println(\"getData() called before refreshData()\")\n            } else if (dataSize == 2) {\n                // getData() was called after refreshData()\n                println(\"getData() called after refreshData()\")\n            }\n        }\n    }\n}",
    "filename": "81dfb77504aef8607062fa77c10d2642_2.kt"
  },
  {
    "conversation_hash": "81dfb77504aef8607062fa77c10d2642",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "org.junit.Test",
      "org.junit.runner.RunWith",
      "org.openjdk.jcstress.annotations.",
      "org.openjdk.jcstress.infra.results.II_Result"
    ],
    "code": "import org.junit.Test\nimport org.junit.runner.RunWith\nimport org.openjdk.jcstress.annotations.*\nimport org.openjdk.jcstress.infra.results.II_Result\n\n@RunWith(org.openjdk.jcstress.junit.JCStressRunner::class)\n@Outcome(id = [\"0, 0\", \"1, 1\"], expect = Expect.ACCEPTABLE, desc = \"Functions use the same lock\")\n@Outcome(id = [\"0, 1\"], expect = Expect.FORBIDDEN, desc = \"Functions don't use the same lock\")\n@State\nclass SharedLockTest {\n    private var counter1: Int = 0\n    private var counter2: Int = 0\n    private val lock: Any = Object()\n\n    @Actor\n    fun actor1() {\n        synchronized(lock) {\n            counter1++\n        }\n    }\n\n    @Actor\n    fun actor2() {\n        synchronized(lock) {\n            counter2++\n        }\n    }\n\n    @Arbiter\n    fun arbiter(result: II_Result) {\n        result.r1 = counter1\n        result.r2 = counter2\n    }\n}",
    "filename": "81dfb77504aef8607062fa77c10d2642_3.kt"
  },
  {
    "conversation_hash": "81dfb77504aef8607062fa77c10d2642",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "java.lang.IllegalStateException",
      "java.util.concurrent.TimeUnit",
      "org.junit.jupiter.api.Assertions.assertThrows",
      "org.junit.jupiter.api.Test",
      "org.junit.jupiter.api.extension.ExtendWith",
      "org.openjdk.jcstress.annotations.",
      "org.openjdk.jcstress.infra.results.I_Result",
      "org.openjdk.jcstress.junit5.JCStress",
      "org.openjdk.jcstress.junit5.JCStressTest",
      "org.openjdk.jcstress.junit5.Timeout"
    ],
    "code": "import org.junit.jupiter.api.Assertions.assertThrows\nimport org.junit.jupiter.api.Test\nimport org.junit.jupiter.api.extension.ExtendWith\nimport org.openjdk.jcstress.annotations.*\nimport org.openjdk.jcstress.infra.results.I_Result\nimport org.openjdk.jcstress.junit5.JCStress\nimport org.openjdk.jcstress.junit5.JCStressTest\nimport org.openjdk.jcstress.junit5.Timeout\nimport java.lang.IllegalStateException\nimport java.util.concurrent.TimeUnit\n\n@JCStressTest\n@Timeout(value = 10, unit = TimeUnit.SECONDS)\n@Outcome(id = [\"0\"], expect = Expect.ACCEPTABLE, desc = \"A and B use different lock objects.\")\n@Outcome(id = [\"1\"], expect = Expect.FORBIDDEN, desc = \"A and B use the same lock object.\")\n@ExtendWith(JcStressResultExtension::class)\nclass SameLockButDifferentClassDeadLockTest {\n    private val sameLockButDifferentClassDeadlock = SameLockButDifferentClassDeadLock(A(), B())\n\n    @Actor\n    fun actor1() {\n        sameLockButDifferentClassDeadlock.work1()\n    }\n\n    @Actor\n    fun actor2() {\n        Thread.sleep(10)  // give actor1 time to acquire the lock\n        sameLockButDifferentClassDeadlock.work2()\n    }\n\n    @Arbiter\n    fun arbiter(result: I_Result) {\n        val aLock = sameLockButDifferentClassDeadlock.a.aLock\n        val bLock = sameLockButDifferentClassDeadlock.b.bLock\n\n        if (aLock === bLock) {\n            // A and B are using the same lock\n            assertThrows(IllegalStateException::class.java) {\n                error(\"A and B use the same lock object.\")\n            }\n            result.r1 = 1  // forbidden\n        } else {\n            result.r1 = 0  // acceptable\n        }\n    }\n\n    @Test\n    fun testSameLockButDifferentClassDeadlock() {\n        runJCStressTest(SameLockButDifferentClassDeadLockTest::class.java)\n    }\n}",
    "filename": "81dfb77504aef8607062fa77c10d2642_4.kt"
  },
  {
    "conversation_hash": "81dfb77504aef8607062fa77c10d2642",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "java.lang.IllegalStateException",
      "kotlinx.atomicfu.atomic",
      "kotlinx.atomicfu.getAndUpdate",
      "org.jetbrains.kotlinx.lincheck.LinChecker",
      "org.jetbrains.kotlinx.lincheck.LoggingLevel",
      "org.jetbrains.kotlinx.lincheck.Options",
      "org.jetbrains.kotlinx.lincheck.Reporter",
      "org.jetbrains.kotlinx.lincheck.annotations.",
      "org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions"
    ],
    "code": "import kotlinx.atomicfu.atomic\nimport kotlinx.atomicfu.getAndUpdate\nimport org.jetbrains.kotlinx.lincheck.LinChecker\nimport org.jetbrains.kotlinx.lincheck.LoggingLevel\nimport org.jetbrains.kotlinx.lincheck.Options\nimport org.jetbrains.kotlinx.lincheck.Reporter\nimport org.jetbrains.kotlinx.lincheck.annotations.*\nimport org.jetbrains.kotlinx.lincheck.strategy.stress.StressOptions\nimport java.lang.IllegalStateException\n\n@Param(name = \"state\", gen = StateGen::class, config = \"1:2\")\nclass SameLockButDifferentClassDeadLockTest {\n    private val sameLockButDifferentClassDeadlock = SameLockButDifferentClassDeadLock(A(), B())\n    \n    @Operation(customReturnValue = true)\n    fun work1(): Any? {\n        synchronized(sameLockButDifferentClassDeadlock.a.aLock) {\n            return work2()\n        }\n    }\n\n    @Operation\n    fun work2() {\n        synchronized(sameLockButDifferentClassDeadlock.b.bLock) {}\n    }\n\n    @Test\n    fun runTest() {\n        val opts = StressOptions()\n            .iterations(10)\n            .logLevel(LoggingLevel.DEBUG)\n            .actorsBefore(2)\n            .actorsAfter(1)\n            .sequentialSpecification(Specification::class.java)\n            .invocationsPerIteration(10_000_000)\n            .verifier(Verifier::class.java)\n            .addCustomState(SameLockButDifferentClassDeadLockTest::class.java)\n            .useDefaultSearch()\n            .checkObfuscation()\n\n        LinChecker.check(SameLockButDifferentClassDeadLockTest::class.java, opts)\n    }\n\n    class Specification : VerifierState {\n        private val sameLockDetected = atomic(false)\n\n        @Operation\n        fun detectSameLock() {\n            val aLock = sameLockButDifferentClassDeadlock.a.aLock\n            val bLock = sameLockButDifferentClassDeadlock.b.bLock\n\n            if (aLock === bLock) {\n                // A and B are using the same lock\n                error(\"A and B are using the same lock object.\")\n                sameLockDetected.getAndUpdate { true }\n            }\n        }\n\n        override fun extractState() = sameLockDetected.value\n    }\n\n    class Verifier : Reporter<Specification, Boolean>() {\n        override fun verify(state: Boolean) {\n            if (state) {\n                throw IllegalStateException(\"A and B are using the same lock object.\")\n            }\n        }\n    }\n}\n\nclass SameLockButDifferentClassDeadLock(val a: A, val b: B) {\n\n    fun work1() {\n        synchronized(a.aLock) {\n            work2()\n        }\n    }\n\n    fun work2() {\n        synchronized(b.bLock) {}\n    }\n}\n\nclass A {\n    val aLock = \"LOCK\"\n}\n\nclass B {\n    val bLock = \"LOCK\"\n}\n\nclass StateGen : ParamGenerator<Pair<A, B>> {\n    override fun generate(params: Array<out String>): Pair<A, B> {\n        return Pair(A(), B())\n    }\n}",
    "filename": "81dfb77504aef8607062fa77c10d2642_5.kt"
  },
  {
    "conversation_hash": "556223422a0d1d2a19135aabd8fa05ca",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "VerifierState",
      "kotlinx.coroutines.runBlocking",
      "org.jetbrains.kotlinx.lincheck.LinChecker",
      "org.jetbrains.kotlinx.lincheck.LoggingLevel",
      "org.jetbrains.kotlinx.lincheck.annotations.Operation",
      "org.jetbrains.kotlinx.lincheck.strategy.managed.modelchecking.ModelCheckingCTestConfiguration",
      "org.jetbrains.kotlinx.lincheck.verifier.VerifierState",
      "org.junit.jupiter.api.Test"
    ],
    "code": "package devnovikov.lincheck.account\n\nimport kotlinx.coroutines.runBlocking\nimport org.jetbrains.kotlinx.lincheck.LinChecker\nimport org.jetbrains.kotlinx.lincheck.LoggingLevel\nimport org.jetbrains.kotlinx.lincheck.annotations.Operation\nimport org.jetbrains.kotlinx.lincheck.strategy.managed.modelchecking.ModelCheckingCTestConfiguration\nimport org.jetbrains.kotlinx.lincheck.verifier.VerifierState\nimport org.junit.jupiter.api.Test\n\nclass AccountSafe8Test : VerifierState() {\n    private val accountSafe = AccountSafe8()\n\n    // The modify operation\n    @Operation\n    fun modify(difference: Double) = runBlocking {\n        accountSafe.modify(difference)\n    }\n\n    // The get operation\n    @Operation\n    fun get(): Double = runBlocking {\n        accountSafe.get()\n    }\n\n    // The test\n    @Test\n    fun test() {\n        val modelCheckingCTestConfiguration = ModelCheckingCTestConfiguration()\n        modelCheckingCTestConfiguration.loggingLevel = LoggingLevel.INFO\n        LinChecker.check(this::class.java, modelCheckingCTestConfiguration)\n    }\n\n    // Implement abstract methods from VerifierState\n    override fun extractState(): Any {\n        return this // your custom state extraction here\n    }\n\n    override fun setUp() {} // your custom setup code here\n\n    override fun tearDown() {} // your custom teardown code here\n}",
    "filename": "556223422a0d1d2a19135aabd8fa05ca_1.kt"
  },
  {
    "conversation_hash": "19c9fa8e588474401ef741433efc778a",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "val customInterstitialListener = object : AdColonyInterstitialListener() {\n     override fun onAdColonyInterstitialLoaded(interstitial: AdColonyInterstitial) {\n           // Ad loaded successfully.\n     }\n     \n     override fun onAdColonyInterstitialOpened(interstitial: AdColonyInterstitial) {\n           // Ad opened.\n     }\n     \n     override fun onAdColonyInterstitialClosed(interstitial: AdColonyInterstitial) {\n           // Ad closed.\n     }\n     \n     // Implement other listener methods for ad events.\n}",
    "filename": "19c9fa8e588474401ef741433efc778a_3.kt"
  },
  {
    "conversation_hash": "00c6275bf216cd32b29fbadb374cb1f2",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyApp : Application() {\n\n    override fun onCreate() {\n        super.onCreate()\n\n        val appOptions = AdColonyAppOptions().apply {\n            userId = \"YOUR_USER_ID\"\n        }\n\n        val adColonyAppId = \"YOUR_AD_COLONY_APP_ID\"\n        val adColonyZoneIds = listOf(\"YOUR_AD_COLONY_ZONE_ID_1\", \"YOUR_AD_COLONY_ZONE_ID_2\")\n\n        AdColony.configure(this, appOptions, adColonyAppId, *adColonyZoneIds.toTypedArray())\n    }\n}",
    "filename": "00c6275bf216cd32b29fbadb374cb1f2_1.kt"
  },
  {
    "conversation_hash": "00c6275bf216cd32b29fbadb374cb1f2",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyInterstitialListener : AdColonyInterstitialListener() {\n\n    override fun onRequestFilled(ad: AdColonyInterstitial) {\n        // Interstitial ad is ready to be shown\n    }\n\n    override fun onRequestNotFilled(zoneId: String) {\n        // No fill for interstitial ad\n    }\n\n    override fun onOpened(ad: AdColonyInterstitial) {\n        // Interstitial ad is opened\n    }\n\n    override fun onClosed(ad: AdColonyInterstitial) {\n        // Interstitial ad is closed\n    }\n\n    override fun onIAPEvent(ad: AdColonyInterstitial, productId: String, engagementType: AdColonyIAPEngagementType) {\n        // Interstitial ad IAP event occurred\n    }\n}",
    "filename": "00c6275bf216cd32b29fbadb374cb1f2_2.kt"
  },
  {
    "conversation_hash": "00c6275bf216cd32b29fbadb374cb1f2",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private var interstitial: AdColonyInterstitial? = null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val adColonyZoneId = \"YOUR_AD_COLONY_ZONE_ID\"\n        val listener = MyInterstitialListener()\n\n        AdColony.requestInterstitial(adColonyZoneId, listener)\n    }\n\n    ...\n\n    fun showInterstitial() {\n        interstitial?.show()\n    }\n}",
    "filename": "00c6275bf216cd32b29fbadb374cb1f2_3.kt"
  },
  {
    "conversation_hash": "00c6275bf216cd32b29fbadb374cb1f2",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyInterstitialListener : AdColonyInterstitialListener() {\n\n    override fun onRequestFilled(ad: AdColonyInterstitial) {\n        // Interstitial ad is ready to be shown\n        interstitial = ad\n    }\n\n    ...\n}\n\nclass MainActivity : AppCompatActivity() {\n\n    ...\n\n    fun showInterstitial() {\n        interstitial?.show()\n    }\n}",
    "filename": "00c6275bf216cd32b29fbadb374cb1f2_4.kt"
  },
  {
    "conversation_hash": "00c6275bf216cd32b29fbadb374cb1f2",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyApp : Application() {\n\n    override fun onCreate() {\n        super.onCreate()\n    \n        val appOptions = AdColonyAppOptions()\n            .setAppVersion(\"1.0.0\")\n            .setGDPRConsentString(\"YOUR_GDPR_CONSENT_STRING\")\n            \n        AdColony.setAppOptions(appOptions)\n        \n        val adColonyAppId = \"YOUR_AD_COLONY_APP_ID\"\n        val adColonyZoneIds = listOf(\"YOUR_AD_COLONY_ZONE_ID_1\", \"YOUR_AD_COLONY_ZONE_ID_2\")\n\n        AdColony.configure(this, adColonyAppId, appOptions, *adColonyZoneIds.toTypedArray())\n    }\n}",
    "filename": "00c6275bf216cd32b29fbadb374cb1f2_6.kt"
  },
  {
    "conversation_hash": "00c6275bf216cd32b29fbadb374cb1f2",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyInterstitialListener : AdColonyInterstitialListener() {\n\n    override fun onRequestFilled(ad: AdColonyInterstitial) {\n        // Interstitial ad is ready to be shown\n    }\n\n    override fun onRequestNotFilled(zoneId: String) {\n        // No fill for interstitial ad\n    }\n\n    override fun onOpened(ad: AdColonyInterstitial) {\n        // Interstitial ad is opened\n    }\n\n    override fun onClosed(ad: AdColonyInterstitial) {\n        // Interstitial ad is closed\n    }\n\n    override fun onIAPEvent(ad: AdColonyInterstitial, productId: String, engagementType: AdColonyIAPEngagementType) {\n        // Interstitial ad IAP event occurred\n    }\n}",
    "filename": "00c6275bf216cd32b29fbadb374cb1f2_7.kt"
  },
  {
    "conversation_hash": "00c6275bf216cd32b29fbadb374cb1f2",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private var interstitial: AdColonyInterstitial? = null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val adColonyZoneId = \"YOUR_AD_COLONY_ZONE_ID\"\n        val listener = MyInterstitialListener()\n\n        AdColony.requestInterstitial(adColonyZoneId, listener)\n    }\n\n    ...\n\n    fun showInterstitial() {\n        interstitial?.show()\n    }\n}",
    "filename": "00c6275bf216cd32b29fbadb374cb1f2_8.kt"
  },
  {
    "conversation_hash": "00c6275bf216cd32b29fbadb374cb1f2",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyInterstitialListener : AdColonyInterstitialListener() {\n\n    override fun onRequestFilled(ad: AdColonyInterstitial) {\n        // Interstitial ad is ready to be shown\n        interstitial = ad\n    }\n\n    ...\n}\n\nclass MainActivity : AppCompatActivity() {\n\n    ...\n\n    fun showInterstitial() {\n        interstitial?.show()\n    }\n}",
    "filename": "00c6275bf216cd32b29fbadb374cb1f2_9.kt"
  },
  {
    "conversation_hash": "6805cdbde9dd0ce82947a93520fb2548",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.app.Application",
      "com.adcolony.sdk.AdColony",
      "com.adcolony.sdk.AdColonyAppOptions"
    ],
    "code": "import android.app.Application\nimport com.adcolony.sdk.AdColony\nimport com.adcolony.sdk.AdColonyAppOptions\n\nclass MyApp: Application() {\n    override fun onCreate() {\n        super.onCreate()\n\n        val appID = \"your_app_id\"\n        val zoneIDs = arrayOf(\"your_zone_id\")\n        val appOptions = AdColonyAppOptions()\n\n        AdColony.configure(this, appOptions, appID, *zoneIDs)\n    }\n}",
    "filename": "6805cdbde9dd0ce82947a93520fb2548_2.kt"
  },
  {
    "conversation_hash": "6805cdbde9dd0ce82947a93520fb2548",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.widget.FrameLayout",
      "androidx.appcompat.app.AppCompatActivity",
      "com.adcolony.sdk.AdColony",
      "com.adcolony.sdk.AdColonyAdView",
      "com.adcolony.sdk.AdColonyAdViewListener",
      "com.adcolony.sdk.AdColonyZone"
    ],
    "code": "import android.os.Bundle\nimport android.widget.FrameLayout\nimport androidx.appcompat.app.AppCompatActivity\nimport com.adcolony.sdk.AdColony\nimport com.adcolony.sdk.AdColonyAdView\nimport com.adcolony.sdk.AdColonyAdViewListener\nimport com.adcolony.sdk.AdColonyZone\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var bannerContainer: FrameLayout\n    private val zoneID = \"your_zone_id\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        bannerContainer = findViewById(R.id.ad_colony_banner_container)\n\n        loadBannerAd()\n    }\n\n    private fun loadBannerAd() {\n        AdColony.requestAdView(zoneID, object : AdColonyAdViewListener() {\n            override fun onRequestFilled(ad: AdColonyAdView) {\n                bannerContainer.removeAllViews()\n                bannerContainer.addView(ad)\n            }\n\n            override fun onRequestNotFilled(zone: AdColonyZone) {\n                // Handle the case when the ad request is not filled\n            }\n        }, AdColonyAdView.BANNER)\n    }\n}",
    "filename": "6805cdbde9dd0ce82947a93520fb2548_5.kt"
  },
  {
    "conversation_hash": "9e75b07677190650a8e762f0addefaaf",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val list = listOf(1, 2, 3, 1000, 4, 5)\n\nval newList = mutableListOf<Int>()\nrun loop@{\n    list.forEach { item ->\n        if(item == 1000)\n            return@loop // break\n        newList.add(item)\n    }\n}",
    "filename": "9e75b07677190650a8e762f0addefaaf_1.kt"
  },
  {
    "conversation_hash": "783fba3161c79e802416395eb520ef94",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ImageViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    private val imageView: ImageView = itemView.findViewById(R.id.image)\n    private val nameView: TextView = itemView.findViewById(R.id.name)\n\n    fun bind(image: Image) {\n        // Load image using Glide or Picasso\n        Glide.with(imageView)\n            .load(image.uri)\n            .into(imageView)\n        nameView.text = image.name\n    }\n}",
    "filename": "783fba3161c79e802416395eb520ef94_1.kt"
  },
  {
    "conversation_hash": "783fba3161c79e802416395eb520ef94",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ImageAdapter(private val images: List<Image>) : RecyclerView.Adapter<ImageViewHolder>() {\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ImageViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_image, parent, false)\n        return ImageViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ImageViewHolder, position: Int) {\n        val image = images[position]\n        holder.bind(image)\n    }\n\n    override fun getItemCount(): Int {\n        return images.size\n    }\n}",
    "filename": "783fba3161c79e802416395eb520ef94_2.kt"
  },
  {
    "conversation_hash": "3b738fd0d072eb3b42e40fef65886f49",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n\n    if (requestCode == PICK_IMAGE_REQUEST && resultCode == Activity.RESULT_OK && data != null) {\n        val imageUri = data.data\n        // Do something with the image URI\n    }\n}",
    "filename": "3b738fd0d072eb3b42e40fef65886f49_1.kt"
  },
  {
    "conversation_hash": "3b738fd0d072eb3b42e40fef65886f49",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private val PICK_IMAGE_REQUEST = 1\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Launch the image picker on a button click\n        button_pick_image.setOnClickListener {\n            val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.INTERNAL_CONTENT_URI)\n            startActivityForResult(intent, PICK_IMAGE_REQUEST)\n        }\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n\n        if (requestCode == PICK_IMAGE_REQUEST && resultCode == Activity.RESULT_OK && data != null) {\n            val imageUri = data.data\n            // Do something with the image URI\n        }\n    }\n}",
    "filename": "3b738fd0d072eb3b42e40fef65886f49_3.kt"
  },
  {
    "conversation_hash": "3b738fd0d072eb3b42e40fef65886f49",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private val PICK_IMAGE_REQUEST = \"image/*\"\n    private var imageUri: Uri? = null\n\n    private val getImageLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->\n        uri?.let {\n            imageUri = it\n            // Do something with the image URI\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Launch the image picker on a button click\n        button_pick_image.setOnClickListener {\n            getImageLauncher.launch(PICK_IMAGE_REQUEST)\n        }\n    }\n}",
    "filename": "3b738fd0d072eb3b42e40fef65886f49_4.kt"
  },
  {
    "conversation_hash": "3b738fd0d072eb3b42e40fef65886f49",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private lateinit var imageUri: Uri\n\n    private val getContent =\n        registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->\n            if (uri != null) {\n                // Save the selected image URI\n                imageUri = uri\n\n                // Do something with the image URI, such as display or upload it\n            }\n        }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Launch the image picker on a button click\n        button_pick_image.setOnClickListener {\n            getContent.launch(\"image/*\")\n        }\n    }\n}",
    "filename": "3b738fd0d072eb3b42e40fef65886f49_6.kt"
  },
  {
    "conversation_hash": "3b738fd0d072eb3b42e40fef65886f49",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ImageAdapter(private val context: Context, private val images: List<ImageItem>) :\n    RecyclerView.Adapter<ImageAdapter.ImageViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ImageViewHolder {\n        val itemView = LayoutInflater.from(context).inflate(R.layout.item_image, parent, false)\n        return ImageViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: ImageViewHolder, position: Int) {\n        val image = images[position]\n        holder.bind(image)\n    }\n\n    override fun getItemCount(): Int = images.size\n\n    inner class ImageViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val imageView: ImageView = itemView.findViewById(R.id.image_view)\n\n        fun bind(image: ImageItem) {\n            Glide.with(context)\n                .load(image.path) // Load the image URI using Glide\n                .centerCrop()\n                .into(imageView)\n        }\n    }\n}",
    "filename": "3b738fd0d072eb3b42e40fef65886f49_9.kt"
  },
  {
    "conversation_hash": "3b738fd0d072eb3b42e40fef65886f49",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private val imageItems = mutableListOf<ImageItem>()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Populate imageItems with the list of image URIs from the internal storage\n\n        val recyclerView: RecyclerView = findViewById(R.id.recycler_view)\n        recyclerView.layoutManager = LinearLayoutManager(this)\n\n        val adapter = ImageAdapter(this, imageItems)\n        recyclerView.adapter = adapter\n    }\n}",
    "filename": "3b738fd0d072eb3b42e40fef65886f49_11.kt"
  },
  {
    "conversation_hash": "3b738fd0d072eb3b42e40fef65886f49",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [
      "file"
    ],
    "code": "class ImageAdapter(private val context: Context, private val images: List<ImageItem>) :\n    RecyclerView.Adapter<ImageAdapter.ImageViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ImageViewHolder {\n        val itemView = LayoutInflater.from(context).inflate(R.layout.item_image, parent, false)\n        return ImageViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: ImageViewHolder, position: Int) {\n        val image = images[position]\n        \n        // Load bitmap from file and set it in the ImageView\n        val file = File(image.path)\n        val bitmap: Bitmap = BitmapFactory.decodeFile(file.absolutePath)\n        holder.imageView.setImageBitmap(bitmap)\n    }\n\n    override fun getItemCount(): Int = images.size\n\n    inner class ImageViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val imageView: ImageView = itemView.findViewById(R.id.image_view)\n    }\n}",
    "filename": "3b738fd0d072eb3b42e40fef65886f49_13.kt"
  },
  {
    "conversation_hash": "3b738fd0d072eb3b42e40fef65886f49",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private val imageItems = mutableListOf<ImageItem>()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Populate imageItems with the list of image URIs from the internal storage\n\n        val recyclerView: RecyclerView = findViewById(R.id.recycler_view)\n        recyclerView.layoutManager = LinearLayoutManager(this)\n\n        val adapter = ImageAdapter(this, imageItems)\n        recyclerView.adapter = adapter\n    }\n}",
    "filename": "3b738fd0d072eb3b42e40fef65886f49_15.kt"
  },
  {
    "conversation_hash": "3b738fd0d072eb3b42e40fef65886f49",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [
      "file",
      "the"
    ],
    "code": "class ImageAdapter(private val context: Context, private val images: List<ImageItem>) :\n    RecyclerView.Adapter<ImageAdapter.ImageViewHolder>() {\n\n    class ImageViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val imageView: ImageView = itemView.findViewById(R.id.image_view)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ImageViewHolder {\n        val itemView = LayoutInflater.from(context).inflate(R.layout.item_image, parent, false)\n        return ImageViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: ImageViewHolder, position: Int) {\n        val image = images[position]\n\n        holder.imageView.apply {\n            setOnClickListener {\n                // Handle image click events here, if needed\n            }\n            setOnCreateContextMenuListener { menu, view, contextMenuInfo ->\n                // Set up the context menu for the image view\n                val deleteItem = menu.add(Menu.NONE, 1, 1, R.string.delete_image)\n                deleteItem.setOnMenuItemClickListener {\n                    deleteImage(image)\n                    true\n                }\n            }\n            // Optionally, you can add a long-press listener to also show the context menu\n            setOnLongClickListener {\n                showContextMenu()\n                true\n            }\n        }\n\n        // Load bitmap from file and set it in the ImageView\n        val file = File(image.path)\n        val bitmap: Bitmap = BitmapFactory.decodeFile(file.absolutePath)\n        holder.imageView.setImageBitmap(bitmap)\n    }\n\n    override fun getItemCount(): Int = images.size\n\n    private fun deleteImage(image: ImageItem) {\n        // Delete the image record from the database\n        // ...\n\n        // Remove the image item from the adapter's list\n        val index = images.indexOf(image)\n        images.removeAt(index)\n        notifyItemRemoved(index)\n    }\n}",
    "filename": "3b738fd0d072eb3b42e40fef65886f49_16.kt"
  },
  {
    "conversation_hash": "3b738fd0d072eb3b42e40fef65886f49",
    "code_index": 18,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private val imageItems = mutableListOf<ImageItem>()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Populate imageItems with the list of image URIs from the internal storage\n\n        val recyclerView: RecyclerView = findViewById(R.id.recycler_view)\n        recyclerView.layoutManager = LinearLayoutManager(this)\n        recyclerView.adapter = ImageAdapter(this, imageItems)\n\n        recyclerView.setOnCreateContextMenuListener { menu, v, menuInfo ->\n            menuInflater.inflate(R.menu.context_menu, menu)\n        }\n    }\n\n    override fun onContextItemSelected(item: MenuItem): Boolean {\n        return when (item.itemId) {\n            R.id.delete_image -> {\n                // Handle delete image context menu item here\n                true\n            }\n            else -> super.onContextItemSelected(item)\n        }\n    }\n}",
    "filename": "3b738fd0d072eb3b42e40fef65886f49_18.kt"
  },
  {
    "conversation_hash": "0f7781ac2cadb568873b0d57ed09d4d9",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun addImage(image: String, game_id: Int) {\n    val values = ContentValues().apply {            \n        put(\"image\", image)\n        put(\"game_id\", game_id)\n    }\n    \n    writableDatabase.insert(TABLE_IMAGES, null, values)\n}",
    "filename": "0f7781ac2cadb568873b0d57ed09d4d9_6.kt"
  },
  {
    "conversation_hash": "0f7781ac2cadb568873b0d57ed09d4d9",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class CustomClass(val id: Int, val name: String)\n\nval customList = mutableListOf<CustomClass>()\n\n// Add some elements to the list\ncustomList.add(CustomClass(1, \"Element 1\"))\ncustomList.add(CustomClass(2, \"Element 2\"))\ncustomList.add(CustomClass(3, \"Element 3\"))\n\n// Remove an element at index 1\ncustomList.removeAt(1) // this will remove the second element\n\n// Print the remaining elements\nfor (element in customList) {\n    println(\"ID: ${element.id}, Name: ${element.name}\")\n}",
    "filename": "0f7781ac2cadb568873b0d57ed09d4d9_7.kt"
  },
  {
    "conversation_hash": "0f7781ac2cadb568873b0d57ed09d4d9",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "private val getImageLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->\n    uri?.let { it ->\n        imageUri = it\n        val imagePath: String? = it?.let { getImagePath(this, it) }\n        if (imagePath != null) {\n            val bitmap = BitmapFactory.decodeFile(imagePath)\n            val imagedb = ImageDB(this, null, null, 1)\n            val id = intent.getLongExtra(\"id\", 0)\n            imagedb.addImage(imagePath, id.toInt())\n        }\n    }\n}",
    "filename": "0f7781ac2cadb568873b0d57ed09d4d9_8.kt"
  },
  {
    "conversation_hash": "0f7781ac2cadb568873b0d57ed09d4d9",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "val cursor = db.query(TABLE_NAME, null, null, null, null, null, null)\nif (cursor.moveToFirst()) {\n    do {\n        // Access column data here\n    } while (cursor.moveToNext())\n}\ncursor.close()",
    "filename": "0f7781ac2cadb568873b0d57ed09d4d9_9.kt"
  },
  {
    "conversation_hash": "a6dfe19e0670202f77863cbe1686887c",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "if (requestCode == REQUEST_CODE_SELECT_IMAGE && resultCode == RESULT_OK) {\n    val imageUri = data?.data\n    val image = Image(title, imageUri.toString())\n    imageDB.addImage(image)\n    imageAdapter.updateImages(imageDB.getImages())\n}",
    "filename": "a6dfe19e0670202f77863cbe1686887c_2.kt"
  },
  {
    "conversation_hash": "a6dfe19e0670202f77863cbe1686887c",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onItemLongClick(image: Image) {\n    registerForContextMenu(recyclerView)\n    selectedImage = image\n    recyclerView.showContextMenu()\n}\n\noverride fun onCreateContextMenu(menu: ContextMenu?, v: View?, menuInfo: ContextMenu.ContextMenuInfo?) {\n    menuInflater.inflate(R.menu.context_menu, menu)\n    super.onCreateContextMenu(menu, v, menuInfo)\n}\n\noverride fun onContextItemSelected(item: MenuItem?): Boolean {\n    if (item?.itemId == R.id.delete) {\n        selectedImage?.let { image ->\n            imageDB.deleteImage(image.id)\n            imageAdapter.updateImages(imageDB.getImages())\n            selectedImage = null\n        }\n    }\n    return super.onContextItemSelected(item)\n}",
    "filename": "a6dfe19e0670202f77863cbe1686887c_4.kt"
  },
  {
    "conversation_hash": "aa1ee927a0ac3c7a0d6a8943203c5413",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.Manifest",
      "android.app.Activity",
      "android.content.Intent",
      "android.content.pm.PackageManager",
      "android.os.Bundle",
      "android.provider.MediaStore",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.core.app.ActivityCompat",
      "androidx.core.content.ContextCompat",
      "java.util."
    ],
    "code": "import android.Manifest\nimport android.app.Activity\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.os.Bundle\nimport android.provider.MediaStore\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport java.util.*\n\nclass MainActivity : AppCompatActivity() {\n\n    private val PERMISSION_REQUEST_CODE = 100\n    private val PICK_IMAGE_REQUEST_CODE = 200\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val button = findViewById<Button>(R.id.select_image_button)\n        button.setOnClickListener {\n            if (ContextCompat.checkSelfPermission(this,\n                    Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                ActivityCompat.requestPermissions(this,\n                    arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE), PERMISSION_REQUEST_CODE)\n            } else {\n                openGallery()\n            }\n        }\n    }\n\n    private fun openGallery() {\n        val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)\n        intent.type = \"image/*\"\n        startActivityForResult(intent, PICK_IMAGE_REQUEST_CODE)\n    }\n\n    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\n        when (requestCode) {\n            PERMISSION_REQUEST_CODE -> {\n                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    openGallery()\n                } else {\n                    Toast.makeText(this, \"Permission denied\", Toast.LENGTH_SHORT).show()\n                }\n                return\n            }\n        }\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n\n        if (requestCode == PICK_IMAGE_REQUEST_CODE && resultCode == Activity.RESULT_OK && data != null && data.data != null) {\n            val imageUri = data.data\n\n            // Add the image to the database\n            val image = Images(imageUri.toString(), Date())\n            addImage(image)\n        }\n    }\n\n    private fun addImage(image: Images) {\n        // Add the image to the database\n        val dbHelper = ImageDBHelper(this)\n        dbHelper.addImage(image)\n    }\n}",
    "filename": "aa1ee927a0ac3c7a0d6a8943203c5413_0.kt"
  },
  {
    "conversation_hash": "aa1ee927a0ac3c7a0d6a8943203c5413",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.Manifest",
      "android.app.Activity",
      "android.content.ContentResolver",
      "android.content.Intent",
      "android.content.pm.PackageManager",
      "android.net.Uri",
      "android.os.Bundle",
      "android.provider.MediaStore",
      "android.widget.Button",
      "android.widget.Toast",
      "androidx.activity.result.ActivityResult",
      "androidx.activity.result.contract.ActivityResultContracts",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.core.app.ActivityCompat",
      "androidx.core.content.ContextCompat",
      "java.util."
    ],
    "code": "import android.Manifest\nimport android.app.Activity\nimport android.content.ContentResolver\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.net.Uri\nimport android.os.Bundle\nimport android.provider.MediaStore\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.activity.result.ActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport java.util.*\n\nclass MainActivity : AppCompatActivity() {\n\n    private val PERMISSION_REQUEST_CODE = 100\n    private val PICK_IMAGE_REQUEST_CODE = 200\n\n    private lateinit var getContent : ActivityResultLauncher<String>\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        getContent = registerForActivityResult(ActivityResultContracts.GetContent()){ result: Uri? ->\n            result?.let {\n                // Add the image to the database\n                val image = Images(it.toString(), Date())\n                addImage(image)\n            }\n        }\n\n        val button = findViewById<Button>(R.id.select_image_button)\n        button.setOnClickListener {\n            if (ContextCompat.checkSelfPermission(this,\n                    Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                ActivityCompat.requestPermissions(this,\n                    arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE), PERMISSION_REQUEST_CODE)\n            } else {\n                getContent.launch(\"image/*\")\n            }\n        }\n    }\n\n    private fun addImage(image: Images) {\n        // Add the image to the database\n        val dbHelper = ImageDBHelper(this)\n        dbHelper.addImage(image)\n    }\n\n    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\n        when (requestCode) {\n            PERMISSION_REQUEST_CODE -> {\n                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    getContent.launch(\"image/*\")\n                } else {\n                    Toast.makeText(this, \"Permission denied\", Toast.LENGTH_SHORT).show()\n                }\n                return\n            }\n        }\n    }\n}",
    "filename": "aa1ee927a0ac3c7a0d6a8943203c5413_2.kt"
  },
  {
    "conversation_hash": "c4994abf4eb2bfa42c82466b8936b1e1",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "val pickImage = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->\n    if (uri != null) {\n        // Do something with the selected image URI\n        val imageLocation = saveImageToInternalStorage(uri)\n    }\n}\n\nval pickImageButton: Button = findViewById(R.id.pick_image_button)\npickImageButton.setOnClickListener {\n    pickImage.launch(\"image/*\")\n}\n\nprivate fun saveImageToInternalStorage(uri: Uri): String {\n    val inputStream = contentResolver.openInputStream(uri)\n    val type = contentResolver.getType(uri) ?: \"image/png\"\n    val extension = when (type) {\n        \"image/jpeg\" -> \"jpg\"\n        \"image/png\" -> \"png\"\n        else -> \"jpg\"\n    }\n    val file = File(filesDir, \"${UUID.randomUUID()}.$extension\")\n    val outputStream = FileOutputStream(file)\n    inputStream?.copyTo(outputStream)\n    return file.absolutePath\n}",
    "filename": "c4994abf4eb2bfa42c82466b8936b1e1_0.kt"
  },
  {
    "conversation_hash": "c4994abf4eb2bfa42c82466b8936b1e1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val pickImage = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->\n    if (uri != null) {\n        // Do something with the selected image URI\n        val imageLocation = saveImageToInternalStorage(uri)\n        saveImagePath(imageLocation) // Save the file path in your app's data storage\n    }\n}\n\nval pickImageButton: Button = findViewById(R.id.pick_image_button)\npickImageButton.setOnClickListener {\n    pickImage.launch(\"image/*\")\n}\n\nprivate fun saveImageToInternalStorage(uri: Uri): String {\n    val inputStream = contentResolver.openInputStream(uri)\n    val type = contentResolver.getType(uri) ?: \"image/png\"\n    val extension = when (type) {\n        \"image/jpeg\" -> \"jpg\"\n        \"image/png\" -> \"png\"\n        else -> \"jpg\"\n    }\n    val file = File(filesDir, \"${UUID.randomUUID()}.$extension\")\n    val outputStream = FileOutputStream(file)\n    inputStream?.copyTo(outputStream)\n    return file.absolutePath\n}\n\nprivate fun saveImagePath(path: String) {\n    // Save the file path in your app's data storage (such as in a database or shared preferences)\n}",
    "filename": "c4994abf4eb2bfa42c82466b8936b1e1_1.kt"
  },
  {
    "conversation_hash": "c4994abf4eb2bfa42c82466b8936b1e1",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ImageAdapter(private val imageLocations: List<String>) : RecyclerView.Adapter<ImageAdapter.ViewHolder>() {\n\n    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        val imageView: ImageView = view.findViewById(R.id.image_view)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.image_item_layout, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        Glide.with(holder.imageView)\n            .load(File(imageLocations[position]))\n            .into(holder.imageView)\n    }\n\n    override fun getItemCount() = imageLocations.size\n}",
    "filename": "c4994abf4eb2bfa42c82466b8936b1e1_3.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n       val itemView = LayoutInflater.from(parent.context)\n           .inflate(R.layout.recycler_view_item, parent, false)\n       return MyViewHolder(itemView)\n   }",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_2.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\n       val imageFile = File(imageLocations[position])\n       val bitmap = BitmapFactory.decodeFile(imageFile.path)\n       holder.imageView.setImageBitmap(bitmap)\n   }",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_3.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyAdapter(private val imageLocations: List<String>) : RecyclerView.Adapter<MyViewHolder>() {\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n        // Inflate the layout for the RecyclerView item\n        val itemView = LayoutInflater.from(parent.context)\n           .inflate(R.layout.recycler_view_item, parent, false)\n        return MyViewHolder(itemView)\n    }\n \n    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\n        // Load the image at the specified location and set it to the ImageView\n        val imageFile = File(imageLocations[position])\n        val bitmap = BitmapFactory.decodeFile(imageFile.path)\n        holder.imageView.setImageBitmap(bitmap)\n    }\n \n    override fun getItemCount(): Int {\n        // Return the number of items in the RecyclerView\n        return imageLocations.size\n    }\n}",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_4.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n       val imageView: ImageView = itemView.findViewById(R.id.imageView)\n       \n       init {\n           // Add an OnClickListener to the imageView to handle clicks\n           imageView.setOnClickListener {\n               // Notify the adapter's click listener interface about the click event\n               clickListener?.onClick(adapterPosition)\n           }\n       }\n   }",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_9.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "adapter.clickListener = object : MyAdapter.ClickListener {\n       override fun onClick(position: Int) {\n           val imageFile = File(imageLocations[position])\n           val bitmap = BitmapFactory.decodeFile(imageFile.path)\n           val intent = Intent(this@MyActivity, FullScreenImageActivity::class.java)\n           intent.putExtra(\"image\", bitmap)\n           startActivity(intent)\n       }\n   }",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_10.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n       val imageView: ImageView = itemView.findViewById(R.id.imageView)\n       \n       init {\n           imageView.setOnClickListener {\n               clickListener?.onImageClick(adapterPosition)\n           }\n       }\n   }",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_13.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "adapter.clickListener = object : MyAdapter.ClickListener {\n       override fun onImageClick(position: Int) {\n           // Retrieve the image file at the clicked position\n           val imageFile = File(imageLocations[position])\n           \n           // Create a bitmap from the image file and pass it to the full-screen activity\n           val bitmap = BitmapFactory.decodeFile(imageFile.path)\n           val intent = Intent(this@MyActivity, FullScreenImageActivity::class.java)\n           intent.putExtra(\"image\", bitmap)\n           startActivity(intent)\n       }\n   }",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_14.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ImageClickItemDecoration(private val clickListener: MyAdapter.ClickListener) :\n       RecyclerView.ItemDecoration() {\n\n       override fun getItemOffsets(\n           outRect: Rect,\n           view: View,\n           parent: RecyclerView,\n           state: RecyclerView.State\n       ) {\n           super.getItemOffsets(outRect, view, parent, state)\n\n           // Attach a click listener to the ImageView in the ViewHolder\n           (view as? MyViewHolder)?.imageView?.setOnClickListener {\n               val position = parent.getChildAdapterPosition(view)\n               clickListener.onImageClick(position)\n           }\n       }\n   }",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_17.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 18,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "recyclerView.addItemDecoration(ImageClickItemDecoration(object : MyAdapter.ClickListener {\n       override fun onImageClick(position: Int) {\n           // Retrieve the image file at the clicked position\n           val imageFile = File(imageLocations[position])\n           \n           // Create a bitmap from the image file and pass it to the full-screen activity\n           val bitmap = BitmapFactory.decodeFile(imageFile.path)\n           val intent = Intent(this@MyActivity, FullScreenImageActivity::class.java)\n           intent.putExtra(\"image\", bitmap)\n           startActivity(intent)\n       }\n   }))\n\n   adapter.clickListener = recyclerView.itemDecoration.getChildAt(0) as MyAdapter.ClickListener",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_18.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 21,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Get a reference to the ImageView in your layout\n   val imageView = findViewById<ImageView>(R.id.image_view)\n   \n   // Set the bitmap to the ImageView\n   imageView.setImageBitmap(bitmap)",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_21.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 22,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView), View.OnCreateContextMenuListener {\n       val imageView: ImageView = itemView.findViewById(R.id.imageView)\n       \n       init {\n           // Add the context menu listener to the imageView\n           imageView.setOnCreateContextMenuListener(this)\n       }\n   \n       override fun onCreateContextMenu(\n           menu: ContextMenu?,\n           v: View?,\n           menuInfo: ContextMenu.ContextMenuInfo?\n       ) {\n           // Inflate the context menu\n           menuInflater.inflate(R.menu.context_menu, menu)\n           \n           // Set the menu title to the clicked image's file name\n           menu?.setHeaderTitle(File(imageLocations[adapterPosition]).name)\n           \n           // Add a delete menu item\n           menu?.add(Menu.NONE, R.id.action_delete, Menu.NONE, \"Delete\")\n       }\n   }",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_22.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 24,
    "language": "Kotlin",
    "libraries": [
      "storage",
      "the"
    ],
    "code": "class MyActivity : AppCompatActivity(), MyAdapter.ClickListener, View.OnCreateContextMenuListener {\n   \n       // ...\n       \n       override fun onCreateContextMenu(\n           menu: ContextMenu,\n           view: View,\n           menuInfo: ContextMenu.ContextMenuInfo?\n       ) {\n           val inflater: MenuInflater = menuInflater\n           inflater.inflate(R.menu.context_menu, menu)\n       }\n       \n       override fun onContextItemSelected(item: MenuItem): Boolean {\n           return when (item.itemId) {\n               R.id.action_delete -> {\n                   // Retrieve the image file at the clicked position\n                   val imageFile = File(imageLocations[selectedPosition])\n                   \n                   // Delete the image file from storage\n                   imageFile.delete()\n                   \n                   // Remove the image from the list and notify the adapter\n                   imageLocations.removeAt(selectedPosition)\n                   adapter.notifyItemRemoved(selectedPosition)\n                   \n                   true\n               }\n               else -> super.onContextItemSelected(item)\n           }\n       }\n   }",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_24.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 25,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n       // ...\n       recyclerView.setOnCreateContextMenuListener(this@MyActivity)\n       registerForContextMenu(recyclerView)\n   }",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_25.kt"
  },
  {
    "conversation_hash": "f1b601a1c5aa058aae1de2e0318da837",
    "code_index": 26,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView), View.OnLongClickListener {\n       val imageView: ImageView = itemView.findViewById(R.id.imageView)\n       \n       init {\n           imageView.setOnLongClickListener(this)\n       }\n   \n       override fun onLongClick(view: View?): Boolean {\n           // Notify the adapter's click listener interface about the long-press event\n           clickListener?.onImageLongPress(adapterPosition)\n           return true\n       }\n   }",
    "filename": "f1b601a1c5aa058aae1de2e0318da837_26.kt"
  },
  {
    "conversation_hash": "fa79118fac9fc0d29fc119322dd564b6",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class GameInfo : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_game_info)\n\n        val pickImage = registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->\n            uri?.let { saveImageToInternalStorage(it) }\n        }\n\n        findViewById<Button>(R.id.addImage).setOnClickListener {\n            pickImage.launch(\"image/*\")\n        }\n\n        val id = intent.getLongExtra(\"id\", 0)\n        val thumb = findViewById<ImageView>(R.id.thumbnail)\n        val gamename = findViewById<TextView>(R.id.gameName)\n        val gameyear = findViewById<TextView>(R.id.gameYear)\n        val gamerank = findViewById<TextView>(R.id.gameRank)\n        val gamedb = GameDB(this, null, null, 1)\n        val game: GameData = gamedb.getGame(id)\n        gamename.text = \"Tytuł: ${game.title}\"\n        gameyear.text = \"Rok: ${game.year}\"\n        gamerank.text = \"Pozycja w rankingu: ${game.rank}\"\n        Glide.with(this).load(game.thumb).into(thumb)\n\n        val imagedb = ImageDB(this, null, null, 1)\n        val images: MutableList<Images> = imagedb.getImages(id.toInt())\n        val recyclerView = findViewById<RecyclerView>(R.id.recycler)\n        recyclerView.layoutManager = LinearLayoutManager(this)\n        recyclerView.adapter = MyAdapter(images)\n    }\n\n    private fun saveImageToInternalStorage(uri: Uri) {\n        val inputStream = contentResolver.openInputStream(uri)\n        val extension = when (contentResolver.getType(uri)) {\n            \"image/jpeg\" -> \"jpg\"\n            \"image/png\" -> \"png\"\n            else -> \"jpg\"\n        }\n        val file = File(filesDir, \"${UUID.randomUUID()}.$extension\")\n        val outputStream = FileOutputStream(file)\n        inputStream?.copyTo(outputStream)\n        inputStream?.close()\n        val imagedb = ImageDB(this, null, null, 1)\n        val id = intent.getLongExtra(\"id\", 0)\n        imagedb.addImage(file.absolutePath, id.toInt())\n    }\n}\n\nclass MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    val imageView: ImageView = itemView.findViewById(R.id.imageView)\n}\n\nclass MyAdapter(private val imageLocations: MutableList<Images>) : RecyclerView.Adapter<MyViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n        val itemView = LayoutInflater.from(parent.context)\n            .inflate(R.layout.image_view, parent, false)\n        return MyViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\n        val imageFile = File(imageLocations[position].image)\n        Glide.with(holder.itemView).load(imageFile).into(holder.imageView)\n    }\n\n    override fun getItemCount(): Int {\n        return imageLocations.size\n    }\n}",
    "filename": "fa79118fac9fc0d29fc119322dd564b6_4.kt"
  },
  {
    "conversation_hash": "fa79118fac9fc0d29fc119322dd564b6",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class GameInfo : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_game_info)\n\n        val pickImage = registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->\n            uri?.let { saveImageToInternalStorage(it) }\n        }\n\n        findViewById<Button>(R.id.addImage).setOnClickListener {\n            pickImage.launch(\"image/*\")\n        }\n\n        val id = intent.getLongExtra(\"id\", 0)\n        val thumb = findViewById<ImageView>(R.id.thumbnail)\n        val gamename = findViewById<TextView>(R.id.gameName)\n        val gameyear = findViewById<TextView>(R.id.gameYear)\n        val gamerank = findViewById<TextView>(R.id.gameRank)\n        val gamedb = GameDB(this, null, null, 1)\n        val game: GameData = gamedb.getGame(id)\n        gamename.text = \"Tytuł: ${game.title}\"\n        gameyear.text = \"Rok: ${game.year}\"\n        gamerank.text = \"Pozycja w rankingu: ${game.rank}\"\n        setThumbnail(thumb, game.thumb)\n\n        val imagedb = ImageDB(this, null, null, 1)\n        val images: MutableList<Images> = imagedb.getImages(id.toInt())\n        val recyclerView = findViewById<RecyclerView>(R.id.recycler)\n        recyclerView.layoutManager = LinearLayoutManager(this)\n        recyclerView.adapter = MyAdapter(images)\n    }\n\n    private fun saveImageToInternalStorage(uri: Uri) {\n        val inputStream = contentResolver.openInputStream(uri)\n        val extension = when (contentResolver.getType(uri)) {\n            \"image/jpeg\" -> \"jpg\"\n            \"image/png\" -> \"png\"\n            else -> \"jpg\"\n        }\n        val file = File(filesDir, \"${UUID.randomUUID()}.$extension\")\n        val outputStream = FileOutputStream(file)\n        try {\n            inputStream?.copyTo(outputStream)\n        } finally {\n            inputStream?.close()\n            outputStream.close()\n        }\n        val imagedb = ImageDB(this, null, null, 1)\n        val id = intent.getLongExtra(\"id\", 0)\n        imagedb.addImage(file.absolutePath, id.toInt())\n    }\n\n    private fun setThumbnail(imageView: ImageView, imageUrl: String) {\n        try {\n            val inputStream = URL(imageUrl).openStream()\n            val options = BitmapFactory.Options().apply {\n                inSampleSize = 4 // scale down image by factor of 4\n            }\n            val bitmap = BitmapFactory.decodeStream(inputStream, null, options)\n            imageView.setImageBitmap(bitmap)\n        } catch (e: Exception) {\n            Log.e(\"GameInfo\", \"Error setting thumbnail\", e)\n        }\n    }\n}\n\nclass MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    val imageView: ImageView = itemView.findViewById(R.id.imageView)\n}\n\nclass MyAdapter(private val imageLocations: List<Images>) : RecyclerView.Adapter<MyViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n        val itemView = LayoutInflater.from(parent.context)\n            .inflate(R.layout.image_view, parent, false)\n        return MyViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\n        val imageFile = File(imageLocations[position].image)\n        val options = BitmapFactory.Options().apply {\n            inSampleSize = 4 // scale down image by factor of 4\n        }\n        val bitmap = BitmapFactory.decodeFile(imageFile.path, options)\n        holder.imageView.setImageBitmap(bitmap)\n    }\n\n    override fun getItemCount(): Int {\n        return imageLocations.size\n    }\n}",
    "filename": "fa79118fac9fc0d29fc119322dd564b6_5.kt"
  },
  {
    "conversation_hash": "fa79118fac9fc0d29fc119322dd564b6",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "itemView.setOnLongClickListener {\n    val popupMenu = PopupMenu(itemView.context, itemView)\n    popupMenu.inflate(R.menu.image_context_menu)\n    popupMenu.setOnMenuItemClickListener { menuItem ->\n        return@setOnMenuItemClickListener when (menuItem.itemId) {\n            R.id.delete_image_item -> {\n                // call a listener method to delete the image at this position\n                listener?.onDeleteImage(adapterPosition)\n                true\n            }\n            else -> false\n        }\n    }\n    popupMenu.show()\n    true\n}",
    "filename": "fa79118fac9fc0d29fc119322dd564b6_6.kt"
  },
  {
    "conversation_hash": "fa79118fac9fc0d29fc119322dd564b6",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface OnImageClickListener {\n    fun onDeleteImage(position: Int)\n}\n\nclass MyAdapter(private val imageLocations: MutableList<Images>, private val listener: OnImageClickListener?) : RecyclerView.Adapter<MyViewHolder>() {\n    // ...\n}",
    "filename": "fa79118fac9fc0d29fc119322dd564b6_7.kt"
  },
  {
    "conversation_hash": "fa79118fac9fc0d29fc119322dd564b6",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "recyclerView.adapter = MyAdapter(images, object : MyAdapter.OnImageClickListener {\n    override fun onDeleteImage(position: Int) {\n        deleteImage(position)\n    }\n})",
    "filename": "fa79118fac9fc0d29fc119322dd564b6_8.kt"
  },
  {
    "conversation_hash": "fa79118fac9fc0d29fc119322dd564b6",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun deleteImage(position: Int) {\n    val imageLocation = (recyclerView.adapter as MyAdapter).imageLocations[position].image\n    val imagedb = ImageDB(this, null, null, 1)\n    imagedb.deleteImage(imageLocation)\n    (recyclerView.adapter as MyAdapter).imageLocations.removeAt(position)\n    recyclerView.adapter?.notifyItemRemoved(position)\n}",
    "filename": "fa79118fac9fc0d29fc119322dd564b6_9.kt"
  },
  {
    "conversation_hash": "fa79118fac9fc0d29fc119322dd564b6",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewHolder(itemView: View, private val listener: OnImageClickListener?) : RecyclerView.ViewHolder(itemView) {\n    val imageView: ImageView = itemView.findViewById(R.id.imageView)\n\n    init {\n        itemView.setOnLongClickListener {\n            val popupMenu = PopupMenu(itemView.context, itemView)\n            popupMenu.inflate(R.menu.image_context_menu)\n            popupMenu.setOnMenuItemClickListener { menuItem ->\n                return@setOnMenuItemClickListener when (menuItem.itemId) {\n                    R.id.delete_image_item -> {\n                        listener?.onDeleteImage(adapterPosition)\n                        true\n                    }\n                    else -> false\n                }\n            }\n            popupMenu.show()\n            true\n        }\n    }\n}",
    "filename": "fa79118fac9fc0d29fc119322dd564b6_11.kt"
  },
  {
    "conversation_hash": "fa79118fac9fc0d29fc119322dd564b6",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun deleteImage(position: Int) {\n    val imageFile = File((recyclerView.adapter as MyAdapter).imageLocations[position].image)\n    if (imageFile.exists()) {\n        imageFile.delete()\n    }\n    val imagedb = ImageDB(this, null, null, 1)\n    imagedb.deleteImage(imageFile.absolutePath)\n    (recyclerView.adapter as MyAdapter).imageLocations.removeAt(position)\n    recyclerView.adapter?.notifyItemRemoved(position)\n}",
    "filename": "fa79118fac9fc0d29fc119322dd564b6_12.kt"
  },
  {
    "conversation_hash": "fa79118fac9fc0d29fc119322dd564b6",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [],
    "code": "recyclerView.adapter = MyAdapter(images, object : MyAdapter.OnImageClickListener {\n    override fun onDeleteImage(position: Int, recyclerView: RecyclerView) {\n        deleteImage(position, recyclerView)\n    }\n})",
    "filename": "fa79118fac9fc0d29fc119322dd564b6_14.kt"
  },
  {
    "conversation_hash": "bea6f4f75111f55eebfd470333951f7a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "// 使用Spark SQL统计每个电影的平均得分\n   val averageMoviesDF: DataFrame = ratingsDF.groupBy(\"movieId\")\n     .agg(avg(\"rating\").as(\"avg_rating\"))\n\n   // 将统计结果保存到MongoDB的AverageMovies数据集中\n   averageMoviesDF.write\n     .format(\"com.mongodb.spark.sql.DefaultSource\")\n     .mode(\"overwrite\")\n     .option(\"collection\", \"average_movies\")\n     .save()",
    "filename": "bea6f4f75111f55eebfd470333951f7a_1.kt"
  },
  {
    "conversation_hash": "f2fdab2b31ab4348aa8a8ad22264857c",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "java.io.File",
      "org.jdom2.Document",
      "org.jdom2.input.SAXBuilder"
    ],
    "code": "import org.jdom2.Document\nimport org.jdom2.input.SAXBuilder\nimport java.io.File\n\nfun getColumnValuesFromXml(file: File, columnName: String): List<String> {\n    val builder = SAXBuilder()\n    val document: Document = builder.build(file)\n    val root = document.rootElement\n    val columnValues = mutableListOf<String>()\n\n    // находим столбец с заданным именем и получаем все его значения\n    root.children.forEach { row ->\n        val column = row.getChild(columnName)\n        if (column != null) {\n            columnValues.add(columnValue.text)\n        }\n    }\n\n    return columnValues\n}",
    "filename": "f2fdab2b31ab4348aa8a8ad22264857c_3.kt"
  },
  {
    "conversation_hash": "f2fdab2b31ab4348aa8a8ad22264857c",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun getColumnValuesFromCsv(file: File, columnName: String): List<String> {\n    val columnValues = mutableListOf<String>()\n    val scanner = Scanner(BufferedReader(FileReader(file)))\n    val headers = scanner.nextLine().split(\",\")\n    val columnIndex = headers.indexOf(columnName)\n\n    while (scanner.hasNextLine()) {\n        val line = scanner.nextLine()\n        val values = line.split(\",\")\n        if (values.size > columnIndex) {\n            columnValues.add(values[columnIndex])\n        }\n    }\n\n    scanner.close()\n    return columnValues\n}",
    "filename": "f2fdab2b31ab4348aa8a8ad22264857c_5.kt"
  },
  {
    "conversation_hash": "f4a0b899211f74259c6c379aa5f8ecad",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "% Prompt user to enter dry bulb temperature\ndry_bulb_temp = input('Enter dry bulb temperature in Celsius: ');\n\n% Prompt user to enter wet bulb temperature\nwet_bulb_temp = input('Enter wet bulb temperature in Celsius: ');\n\n% Calculate vapor pressure for dry bulb temperature\nEw1 = 6.11 * 10^((7.5 * dry_bulb_temp) / (dry_bulb_temp + 237.3));\nA = 7.5 * dry_bulb_temp / (dry_bulb_temp + 237.3);\nPa = 101.325 * ((2.7 * 10^(-7)) * 610.7 * exp(A));\n\n% Calculate vapor pressure for wet bulb temperature\nEw2 = 6.11 * 10^((7.5 * wet_bulb_temp) / (wet_bulb_temp + 237.3));\nAw = 7.5 * wet_bulb_temp / (wet_bulb_temp + 237.3);\nPw = 101.325 * ((2.7 * 10^(-7)) * 610.7 * exp(Aw));\n\n% Calculate dew point\nB = log(Pw / 101.325) * (237.3 + wet_bulb_temp) / ((17.27 * wet_bulb_temp / (237.3 + wet_bulb_temp)) - log(Pw / 101.325));\nTd = 237.3 * B / (17.27 - B);\n\n% Calculate relative humidity\nrh = 100 * ((Ew2 / Pa) * (1 - (0.00066 * (dry_bulb_temp - wet_bulb_temp) * (1 + (0.00115 * wet_bulb_temp)))));\n\n% Display result to user\nfprintf('Relative humidity is %.2f%%\\n', rh);",
    "filename": "f4a0b899211f74259c6c379aa5f8ecad_1.kt"
  },
  {
    "conversation_hash": "84e831c90fe800ca0d79e4cfad3f54ee",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "com.google.gson.Gson"
    ],
    "code": "import com.google.gson.Gson\n\ndata class LoginRequest(\n    val username: String,\n    val password: String\n)\n\nfun main() {\n    val loginRequest = LoginRequest(username = \"johndoe\", password = \"password123\")\n    val gson = Gson()\n    val loginRequestJson: String = gson.toJson(loginRequest)\n    println(loginRequestJson)\n}",
    "filename": "84e831c90fe800ca0d79e4cfad3f54ee_4.kt"
  },
  {
    "conversation_hash": "84e831c90fe800ca0d79e4cfad3f54ee",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "com.google.gson.Gson",
      "io.ktor.application.call",
      "io.ktor.request.receive",
      "io.ktor.response.respond",
      "io.ktor.routing.",
      "io.ktor.server.engine.embeddedServer",
      "io.ktor.server.netty.Netty",
      "org.jetbrains.exposed.sql.Database",
      "org.jetbrains.exposed.sql.ResultRow",
      "org.jetbrains.exposed.sql.selectAll",
      "org.jetbrains.exposed.sql.transactions.transaction"
    ],
    "code": "import com.google.gson.Gson\nimport io.ktor.application.call\nimport io.ktor.request.receive\nimport io.ktor.response.respond\nimport io.ktor.routing.*\nimport io.ktor.server.engine.embeddedServer\nimport io.ktor.server.netty.Netty\nimport org.jetbrains.exposed.sql.Database\nimport org.jetbrains.exposed.sql.ResultRow\nimport org.jetbrains.exposed.sql.selectAll\nimport org.jetbrains.exposed.sql.transactions.transaction\n\ndata class LoginRequest(\n    val username: String,\n    val password: String\n)\n\ndata class LoginResponse(\n    val token: String,\n    val userId: Int\n)\n\nfun login(request: LoginRequest): LoginResponse? {\n    var result: LoginResponse? = null\n\n    transaction {\n        Database.connect(\"jdbc:h2:mem:test\", driver = \"org.h2.Driver\")\n\n        val usersTable = object : org.jetbrains.exposed.sql.Table(\"users\") {\n            val id = integer(\"id\").autoIncrement().primaryKey()\n            val username = varchar(\"username\", 50).uniqueIndex()\n            val password = varchar(\"password\", 50)\n        }\n\n        usersTable.insert {\n            it[username] = \"johndoe\"\n            it[password] = \"password123\"\n        }\n\n        val user = usersTable.select {\n            (usersTable.username eq request.username) and (usersTable.password eq request.password)\n        }.toList().firstOrNull()\n\n        user?.let {\n            result = LoginResponse(\"mytoken123\", user[usersTable.id])\n        }\n    }\n\n    return result\n}\n\nfun main() {\n    val gson = Gson()\n\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            post(\"/login\") {\n                val request = call.receive<LoginRequest>()\n                val response = login(request)\n\n                if (response == null) {\n                    call.respond(401, \"Usuario o contraseña incorrectos\")\n                } else {\n                    val jsonResponse = gson.toJson(response)\n                    call.respond(jsonResponse)\n                }\n            }\n        }\n    }.start(wait = true)\n}",
    "filename": "84e831c90fe800ca0d79e4cfad3f54ee_8.kt"
  },
  {
    "conversation_hash": "84e831c90fe800ca0d79e4cfad3f54ee",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "com.google.gson.Gson",
      "io.ktor.application.call",
      "io.ktor.request.receive",
      "io.ktor.response.respond",
      "io.ktor.routing.",
      "io.ktor.server.engine.embeddedServer",
      "io.ktor.server.netty.Netty",
      "org.jetbrains.exposed.sql.Database",
      "org.jetbrains.exposed.sql.ResultRow",
      "org.jetbrains.exposed.sql.selectAll",
      "org.jetbrains.exposed.sql.transactions.transaction",
      "org.mindrot.jbcrypt.BCrypt"
    ],
    "code": "import com.google.gson.Gson\nimport io.ktor.application.call\nimport io.ktor.request.receive\nimport io.ktor.response.respond\nimport io.ktor.routing.*\nimport io.ktor.server.engine.embeddedServer\nimport io.ktor.server.netty.Netty\nimport org.jetbrains.exposed.sql.Database\nimport org.jetbrains.exposed.sql.ResultRow\nimport org.jetbrains.exposed.sql.selectAll\nimport org.jetbrains.exposed.sql.transactions.transaction\nimport org.mindrot.jbcrypt.BCrypt\n\ndata class LoginRequest(\n    val username: String,\n    val password: String\n)\n\ndata class LoginResponse(\n    val token: String,\n    val userId: Int\n)\n\nfun hashPassword(password: String): String {\n    return BCrypt.hashpw(password, BCrypt.gensalt())\n}\n\nfun checkPassword(password: String, hashed: String): Boolean {\n    return BCrypt.checkpw(password, hashed)\n}\n\nfun login(request: LoginRequest): LoginResponse? {\n    var result: LoginResponse? = null\n\n    transaction {\n        Database.connect(\"jdbc:h2:mem:test\", driver = \"org.h2.Driver\")\n\n        val usersTable = object : org.jetbrains.exposed.sql.Table(\"users\") {\n            val id = integer(\"id\").autoIncrement().primaryKey()\n            val username = varchar(\"username\", 50).uniqueIndex()\n            val password = varchar(\"password\", 60)\n        }\n\n        usersTable.insert {\n            it[username] = \"johndoe\"\n            it[password] = hashPassword(\"password123\")\n        }\n\n        val user = usersTable.select {\n            (usersTable.username eq request.username)\n        }.toList().firstOrNull()\n\n        user?.let {\n            if (checkPassword(request.password, user[usersTable.password])) {\n                result = LoginResponse(\"mytoken123\", user[usersTable.id])\n            }\n        }\n    }\n\n    return result\n}\n\nfun main() {\n    val gson = Gson()\n\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            post(\"/login\") {\n                val request = call.receive<LoginRequest>()\n                val response = login(request)\n\n                if (response == null) {\n                    call.respond(401, \"Usuario o contraseña incorrectos\")\n                } else {\n                    val jsonResponse = gson.toJson(response)\n                    call.respond(jsonResponse)\n                }\n            }\n        }\n    }.start(wait = true)\n}",
    "filename": "84e831c90fe800ca0d79e4cfad3f54ee_10.kt"
  },
  {
    "conversation_hash": "84e831c90fe800ca0d79e4cfad3f54ee",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [
      "com.google.gson.Gson",
      "io.ktor.application.call",
      "io.ktor.request.receive",
      "io.ktor.response.respond",
      "io.ktor.routing.",
      "io.ktor.server.engine.embeddedServer",
      "io.ktor.server.netty.Netty",
      "org.jetbrains.exposed.sql.",
      "org.jetbrains.exposed.sql.transactions.transaction",
      "org.mindrot.jbcrypt.BCrypt"
    ],
    "code": "import com.google.gson.Gson\nimport io.ktor.application.call\nimport io.ktor.request.receive\nimport io.ktor.response.respond\nimport io.ktor.routing.*\nimport io.ktor.server.engine.embeddedServer\nimport io.ktor.server.netty.Netty\nimport org.jetbrains.exposed.sql.*\nimport org.jetbrains.exposed.sql.transactions.transaction\nimport org.mindrot.jbcrypt.BCrypt\n\ndata class RegisterRequest(\n    val username: String,\n    val password: String\n)\n\ndata class RegisterResponse(\n    val userId: Int\n)\n\nfun hashPassword(password: String): String {\n    return BCrypt.hashpw(password, BCrypt.gensalt())\n}\n\nfun register(request: RegisterRequest): RegisterResponse {\n    var userId: Int = -1\n\n    transaction {\n        Database.connect(\"jdbc:h2:mem:test\", driver = \"org.h2.Driver\")\n\n        val usersTable = object : org.jetbrains.exposed.sql.Table(\"users\") {\n            val id = integer(\"id\").autoIncrement().primaryKey()\n            val username = varchar(\"username\", 50).uniqueIndex()\n            val password = varchar(\"password\", 60)\n        }\n\n        usersTable.insert {\n            it[username] = request.username\n            it[password] = hashPassword(request.password)\n        }\n\n        val user = usersTable.select {\n            (usersTable.username eq request.username)\n        }.toList().firstOrNull()\n\n        user?.let {\n            userId = user[usersTable.id]\n        }\n    }\n\n    return RegisterResponse(userId)\n}\n\nfun main() {\n    val gson = Gson()\n\n    embeddedServer(Netty, port = 8080) {\n        routing {\n            post(\"/register\") {\n                val request = call.receive<RegisterRequest>()\n                val response = register(request)\n\n                val jsonResponse = gson.toJson(response)\n                call.respond(jsonResponse)\n            }\n        }\n    }.start(wait = true)\n}",
    "filename": "84e831c90fe800ca0d79e4cfad3f54ee_11.kt"
  },
  {
    "conversation_hash": "84e831c90fe800ca0d79e4cfad3f54ee",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.exposed.sql.Database",
      "org.jetbrains.exposed.sql.insertAndGetId",
      "org.jetbrains.exposed.sql.transactions.transaction"
    ],
    "code": "import org.jetbrains.exposed.sql.Database\nimport org.jetbrains.exposed.sql.insertAndGetId\nimport org.jetbrains.exposed.sql.transactions.transaction\n\nfun main() {\n    Database.connect(\"jdbc:h2:mem:test\", driver = \"org.h2.Driver\")\n\n    transaction {\n        val userId = Users.insertAndGetId {\n            it[name] = \"John\"\n        }\n        println(userId)\n    }\n}",
    "filename": "84e831c90fe800ca0d79e4cfad3f54ee_13.kt"
  },
  {
    "conversation_hash": "fa39d74f908b8652b2fc95f2ad914649",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.exposed.dao.",
      "org.jetbrains.exposed.sql."
    ],
    "code": "import org.jetbrains.exposed.sql.*\nimport org.jetbrains.exposed.dao.*\n\nobject MyTable : IntIdTable() {\n    val myStringField = varchar(\"my_string_field\", 50)\n}\n\nfun main() {\n    Database.connect(\"jdbc:mysql://localhost:3306/mydatabase\", driver = \"com.mysql.cj.jdbc.Driver\", user = \"root\", password = \"mypassword\")\n\n    val myTable = MyTable.select { MyTable.id eq 1 }.first()\n\n    val myStringValue = myTable[MyTable.myStringField]\n    println(\"Value of myStringField: $myStringValue\")\n}",
    "filename": "fa39d74f908b8652b2fc95f2ad914649_0.kt"
  },
  {
    "conversation_hash": "fa39d74f908b8652b2fc95f2ad914649",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "org.mindrot.jbcrypt.BCrypt"
    ],
    "code": "import org.mindrot.jbcrypt.BCrypt\n\nfun verifyPassword(password: String, hashedPassword: String): Boolean {\n    return if (BCrypt.checkpw(password, hashedPassword)) {\n        true\n    } else {\n        val newHash = BCrypt.hashpw(password, BCrypt.gensalt())\n        return newHash == hashedPassword\n    }\n}",
    "filename": "fa39d74f908b8652b2fc95f2ad914649_2.kt"
  },
  {
    "conversation_hash": "b0b148e984ee8a30634c72ccd4237eb6",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "val username = \"nombredeusuario\" // Nombre de usuario buscado\nval user = UserEntity.find { UsersTable.username eq username }.singleOrNull() // Buscar el usuario por nombre de usuario\n\nif (user != null) {\n    // Imprimir el correo electrónico del usuario\n    println(\"Email del usuario ${user.username}: ${user.email}\")\n} else {\n    println(\"Usuario no encontrado\")\n}",
    "filename": "b0b148e984ee8a30634c72ccd4237eb6_0.kt"
  },
  {
    "conversation_hash": "15bfe778fc6805ed7eea2d7248fa86b8",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "private val PICK_IMAGE_REQUEST = 1\n\nprivate fun openGallery() {\n    val intent = Intent()\n    intent.type = \"image/*\"\n    intent.action = Intent.ACTION_GET_CONTENT\n    startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), PICK_IMAGE_REQUEST)\n}",
    "filename": "15bfe778fc6805ed7eea2d7248fa86b8_1.kt"
  },
  {
    "conversation_hash": "15bfe778fc6805ed7eea2d7248fa86b8",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "private val REQUEST_PERMISSION_CODE = 100\n\nprivate fun requestPermission() {\n    ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE), REQUEST_PERMISSION_CODE)\n}",
    "filename": "15bfe778fc6805ed7eea2d7248fa86b8_2.kt"
  },
  {
    "conversation_hash": "15bfe778fc6805ed7eea2d7248fa86b8",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (requestCode == PICK_IMAGE_REQUEST && resultCode == Activity.RESULT_OK && data != null && data.data != null) {\n        val uri = data.data\n        // استخدم هذا الـ URI لإعداد شعار Qr code الخاص بك\n        setupQrCodeWithImage(uri)\n    }\n}",
    "filename": "15bfe778fc6805ed7eea2d7248fa86b8_4.kt"
  },
  {
    "conversation_hash": "15bfe778fc6805ed7eea2d7248fa86b8",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun setupQrCodeWithImage(imageUri: Uri?) {\n    if (imageUri != null) {\n        val bitmap = MediaStore.Images.Media.getBitmap(contentResolver, imageUri)\n        val drawable = BitmapDrawable(resources, bitmap)\n\n        QrCodeView {\n            +QrVector(\n                data = \"Hello, World!\",\n                logo = {\n                    this.drawable = drawable\n                    size = .25f\n                    padding = QrVectorLogoPadding.Natural(.2f)\n                    shape = QrVectorLogoShape\n                        .Circle\n                }\n            )\n        }\n    } else {\n        QrCodeView {\n            +QrVector(\n                data = \"Hello, World!\",\n                logo = {\n                    drawable = ContextCompat.getDrawable(this@Qr_generator, R.drawable.logosendwhats)\n                    size = .25f\n                    padding = QrVectorLogoPadding.Natural(.2f)\n                    shape = QrVectorLogoShape\n                        .Circle\n                }\n            )\n        }\n    }\n}",
    "filename": "15bfe778fc6805ed7eea2d7248fa86b8_5.kt"
  },
  {
    "conversation_hash": "15bfe778fc6805ed7eea2d7248fa86b8",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {\n    if (requestCode == REQUEST_PERMISSION_CODE) {\n        if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n            //الإذن قد تم منحه، افتح المعرض للمستخدم\n            openGallery()\n        } else {\n            Toast.makeText(this, \"Permission denied\", Toast.LENGTH_SHORT).show()\n        }\n    }\n    super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n}",
    "filename": "15bfe778fc6805ed7eea2d7248fa86b8_6.kt"
  },
  {
    "conversation_hash": "33a6788430a1b37b8431cc6e5b58a450",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun parsePerson(row: ResultRow): Person {\n    val id = row.get(PersonTable.id)\n    val name = row.get(PersonTable.name)\n    val age = row.get(PersonTable.age)\n    return Person(id, name, age)\n}",
    "filename": "33a6788430a1b37b8431cc6e5b58a450_1.kt"
  },
  {
    "conversation_hash": "33a6788430a1b37b8431cc6e5b58a450",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.exposed.sql.ResultRow"
    ],
    "code": "import org.jetbrains.exposed.sql.ResultRow\n\ninterface SqlModel {\n    fun fromRow(row: ResultRow): SqlModel\n}\n\ndata class User(val id: Int, val username: String) : SqlModel {\n    override fun fromRow(row: ResultRow): User {\n        return User(\n            id = row[Users.id],\n            username = row[Users.username]\n        )\n    }\n}",
    "filename": "33a6788430a1b37b8431cc6e5b58a450_3.kt"
  },
  {
    "conversation_hash": "33a6788430a1b37b8431cc6e5b58a450",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.exposed.sql.Table"
    ],
    "code": "import org.jetbrains.exposed.sql.Table\n\nobject Users : Table() {\n    val id = integer(\"id\").autoIncrement()\n    val username = varchar(\"username\", 50).uniqueIndex()\n    val password = varchar(\"password\", 50)\n    override val primaryKey = PrimaryKey(id, name = \"PK_User_ID\")\n\n    fun findByName(name: String): Users? = Users.select { Users.username eq name }.firstOrNull()\n}",
    "filename": "33a6788430a1b37b8431cc6e5b58a450_4.kt"
  },
  {
    "conversation_hash": "33a6788430a1b37b8431cc6e5b58a450",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.exposed.sql.transactions.transaction"
    ],
    "code": "import org.jetbrains.exposed.sql.transactions.transaction\n\nclass UserDAO {\n    fun findUserByUsername(username: String): User? {\n        val userRow = transaction {\n            Users.findByName(username)\n        }\n\n        return userRow?.let { User.fromRow(it) }\n    }\n}",
    "filename": "33a6788430a1b37b8431cc6e5b58a450_5.kt"
  },
  {
    "conversation_hash": "33a6788430a1b37b8431cc6e5b58a450",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.exposed.dao.EntityID",
      "org.jetbrains.exposed.dao.IntIdTable"
    ],
    "code": "import org.jetbrains.exposed.dao.IntIdTable\nimport org.jetbrains.exposed.dao.EntityID\n\nobject Users : IntIdTable() {\n    val username = varchar(\"username\", 50).uniqueIndex()\n    val password = varchar(\"password\", 50)\n}\n\nclass UserEntity(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<UserEntity>(Users)\n\n    var username by Users.username\n    var password by Users.password\n\n    fun toUser(): User {\n        return User(id.value, username, password)\n    }\n}",
    "filename": "33a6788430a1b37b8431cc6e5b58a450_7.kt"
  },
  {
    "conversation_hash": "33a6788430a1b37b8431cc6e5b58a450",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.exposed.sql.transactions.transaction"
    ],
    "code": "import org.jetbrains.exposed.sql.transactions.transaction\n\nclass UserDAO {\n    fun findUserByUsername(username: String): User? {\n        val userRow = transaction {\n            UserEntity.find { Users.username eq username }.firstOrNull()\n        }\n\n        return userRow?.toUser()\n    }\n}",
    "filename": "33a6788430a1b37b8431cc6e5b58a450_8.kt"
  },
  {
    "conversation_hash": "33a6788430a1b37b8431cc6e5b58a450",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "com.auth0.jwt.JWT",
      "com.auth0.jwt.algorithms.Algorithm",
      "org.jetbrains.exposed.sql.transactions.transaction"
    ],
    "code": "import com.auth0.jwt.JWT\nimport com.auth0.jwt.algorithms.Algorithm\nimport org.jetbrains.exposed.sql.transactions.transaction\n\nclass UserDAO {\n    fun login(username: String, password: String): String? {\n        val userEntity = transaction {\n            UserEntity.find { Users.username eq username  }.firstOrNull()\n        }\n\n        if (userEntity != null && userEntity.password == password) {\n            val algorithm = Algorithm.HMAC256(\"secret\")\n            val token = JWT.create()\n                .withIssuer(\"auth0\")\n                .withClaim(\"username\", userEntity.username)\n                .sign(algorithm)\n            return token\n        } else {\n            return null\n        }\n    }\n}",
    "filename": "33a6788430a1b37b8431cc6e5b58a450_10.kt"
  },
  {
    "conversation_hash": "33a6788430a1b37b8431cc6e5b58a450",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [
      "com.auth0.jwt.JWT",
      "com.auth0.jwt.algorithms.Algorithm",
      "org.jetbrains.exposed.sql.transactions.transaction"
    ],
    "code": "import com.auth0.jwt.JWT\nimport com.auth0.jwt.algorithms.Algorithm\nimport org.jetbrains.exposed.sql.transactions.transaction\n\nclass UserDAO {\n    fun login(username: String, password: String): String? {\n        val userEntity = transaction {\n            UserEntity.find { Users.username eq username  }.firstOrNull()\n        }\n\n        if (userEntity != null && userEntity.password == password) {\n            val algorithm = Algorithm.HMAC256(\"secret\")\n            val token = JWT.create()\n                .withIssuer(\"auth0\")\n                .withClaim(\"username\", userEntity.username)\n                .sign(algorithm)\n            \n            transaction {\n                userEntity.token = token\n            }\n            \n            return token\n        } else {\n            return null\n        }\n    }\n}",
    "filename": "33a6788430a1b37b8431cc6e5b58a450_11.kt"
  },
  {
    "conversation_hash": "33a6788430a1b37b8431cc6e5b58a450",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "object Users : IntIdTable() {\n    val username = varchar(\"username\", 50).uniqueIndex()\n    val password = varchar(\"password\", 50)\n    val token = varchar(\"token\", 255).nullable()\n\n...\n\nclass UserEntity(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<UserEntity>(Users)\n\n    var username by Users.username\n    var password by Users.password\n    var token by Users.token\n\n    fun toUser(): User {\n        return User(id.value, username, password, token)\n    }\n}",
    "filename": "33a6788430a1b37b8431cc6e5b58a450_12.kt"
  },
  {
    "conversation_hash": "2fd259c6f34401a98d48de7621451505",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class Person(val name: String, val age: Int) : Comparable<Person> {\n    override fun compareTo(other: Person): Int {\n        return this.age.compareTo(other.age)\n    }\n}",
    "filename": "2fd259c6f34401a98d48de7621451505_1.kt"
  },
  {
    "conversation_hash": "2fd259c6f34401a98d48de7621451505",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "val list = listOf(\"apple\", \"banana\", \"orange\")\nfor (fruit in list) {\n    println(fruit)\n}\n\nval arr = arrayOf(1, 2, 3, 4, 5)\nfor (i in arr.indices) {\n    println(arr[i])\n}",
    "filename": "2fd259c6f34401a98d48de7621451505_4.kt"
  },
  {
    "conversation_hash": "2fd259c6f34401a98d48de7621451505",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "for (i in 0 until 10) {\n    if (i == 3) {\n        continue  // 跳过本次循环\n    }\n    if (i == 7) {\n        break  // 跳出循环\n    }\n    println(i)\n}",
    "filename": "2fd259c6f34401a98d48de7621451505_5.kt"
  },
  {
    "conversation_hash": "2ce1b51b0f3e3e88ad6a95937b2fe99a",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val recyclerView: RecyclerView = findViewById(R.id.rcView)\n        val adapter = Adapter(fetchData())\n        recyclerView.layoutManager = GridLayoutManager(this, 2)\n        recyclerView.adapter = adapter\n    }\n\n    private fun fetchData(): MutableList<Int> {\n        val item = mutableListOf<Int>()\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        return item\n    }\n}",
    "filename": "2ce1b51b0f3e3e88ad6a95937b2fe99a_0.kt"
  },
  {
    "conversation_hash": "2ce1b51b0f3e3e88ad6a95937b2fe99a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val recyclerView: RecyclerView = findViewById(R.id.rcView)\n        val adapter = Adapter(fetchData())\n        recyclerView.layoutManager = GridLayoutManager(this, 2)\n        recyclerView.adapter = adapter\n    }\n\n    private fun fetchData(): MutableList<Int> {\n        val item = mutableListOf<Int>()\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        item.add(com.google.android.material.R.drawable.ic_clock_black_24dp)\n        return item\n    }\n}",
    "filename": "2ce1b51b0f3e3e88ad6a95937b2fe99a_1.kt"
  },
  {
    "conversation_hash": "2ce1b51b0f3e3e88ad6a95937b2fe99a",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Adapter (private val images: ArrayList<Int>) : RecyclerView.Adapter<Adapter.ViewHolder>() {\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val imageView: ImageView = itemView.findViewById(R.id.imgView)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.photo_item, parent, false))\n    }\n\n    override fun getItemCount(): Int {\n        return images.size\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        holder.imageView.setImageResource(images[position])\n    }\n}",
    "filename": "2ce1b51b0f3e3e88ad6a95937b2fe99a_2.kt"
  },
  {
    "conversation_hash": "be0b5c0f0ea43c82e04c3e981a3d863c",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class CommentExpandableListAdapter(private val context: Context,\n                                   private val commentList: List<Comment>,\n                                   private val replyMap: HashMap<Comment, List<Comment>>)\n    : BaseExpandableListAdapter() {\n\n    override fun getGroup(parentPosition: Int): Any = commentList[parentPosition]\n\n    override fun getChild(parentPosition: Int, childPosition: Int): Any =\n        replyMap[commentList[parentPosition]]!![childPosition]\n\n    // Other required adapter methods...\n}",
    "filename": "be0b5c0f0ea43c82e04c3e981a3d863c_3.kt"
  },
  {
    "conversation_hash": "dcbd88e8a6d8978c27d11f089d4047c4",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.exposed.sql.and",
      "org.jetbrains.exposed.sql.innerJoin",
      "org.jetbrains.exposed.sql.selectAll",
      "org.jetbrains.exposed.sql.transactions.transaction"
    ],
    "code": "import org.jetbrains.exposed.sql.and\nimport org.jetbrains.exposed.sql.innerJoin\nimport org.jetbrains.exposed.sql.selectAll\nimport org.jetbrains.exposed.sql.transactions.transaction\n\nfun Users.getUserByUsername(username: String): UserWithRoles? {\n    var userWithRoles: UserWithRoles? = null\n\n    transaction {\n        val query = (Users innerJoin UserRoles innerJoin Roles)\n            .select { (Users.username eq username) and (Users.id eq UserRoles.userId) and (Roles.id eq UserRoles.roleId) }\n\n        query.forEach {\n            if (userWithRoles == null) {\n                val userId = it[Users.id]\n                val username = it[Users.username]\n                val password = it[Users.password]\n                val token = it[Users.token]\n\n                userWithRoles = UserWithRoles(User(userId, username, password, token), mutableListOf())\n            }\n\n            userWithRoles?.roles?.add(Role(it[Roles.id], it[Roles.name]))\n        }\n    }\n\n    return userWithRoles\n}",
    "filename": "dcbd88e8a6d8978c27d11f089d4047c4_2.kt"
  },
  {
    "conversation_hash": "dcbd88e8a6d8978c27d11f089d4047c4",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.exposed.sql.insert",
      "org.jetbrains.exposed.sql.transactions.transaction"
    ],
    "code": "import org.jetbrains.exposed.sql.insert\nimport org.jetbrains.exposed.sql.transactions.transaction\n\nfun insertUsers() {\n    transaction {\n        Users.insert {\n            it[username] = \"alice\"\n            it[password] = \"password1\"\n            it[token] = \"token1\"\n        }\n        Users.insert {\n            it[username] = \"bob\"\n            it[password] = \"password2\"\n            it[token] = \"token2\"\n        }\n    }\n}\n\nfun insertRoles() {\n    transaction {\n        Roles.insert { it[name] = \"admin\" }\n        Roles.insert { it[name] = \"user\" }\n    }\n}\n\nfun assignRoles() {\n    transaction {\n        UserRoles.insert {\n            it[userId] = 1\n            it[roleId] = 1\n        }\n        UserRoles.insert {\n            it[userId] = 1\n            it[roleId] = 2\n        }\n        UserRoles.insert {\n            it[userId] = 2\n            it[roleId] = 2\n        }\n    }\n}",
    "filename": "dcbd88e8a6d8978c27d11f089d4047c4_4.kt"
  },
  {
    "conversation_hash": "dcbd88e8a6d8978c27d11f089d4047c4",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Role(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<Role>(RolesTable)\n\n    var name by RolesTable.name\n    val users by UserRole referrersOn UserRolesTable.role\n}",
    "filename": "dcbd88e8a6d8978c27d11f089d4047c4_9.kt"
  },
  {
    "conversation_hash": "dcbd88e8a6d8978c27d11f089d4047c4",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "object UserRolesTable : Table() {\n    val user = reference(\"user_id\", UsersTable)\n    val role = reference(\"role_id\", RolesTable)\n\n    override val primaryKey = PrimaryKey(user, role)\n}\n\nclass UserRole(id: EntityID<EntityIDType<Int, UserRolesTable>>) : Entity<EntityIDType<Int, UserRolesTable>>(id) {\n    companion object : EntityClass<EntityIDType<Int, UserRolesTable>, UserRole>(UserRolesTable)\n\n    var user by User referencedOn UserRolesTable.user\n    var role by Role referencedOn UserRolesTable.role\n}",
    "filename": "dcbd88e8a6d8978c27d11f089d4047c4_10.kt"
  },
  {
    "conversation_hash": "dcbd88e8a6d8978c27d11f089d4047c4",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun getUserByUsername(username: String): User? {\n    return transaction {\n        User.find { UsersTable.username eq username }\n            .firstOrNull()?.apply {\n                roles\n                    .map { it.name }\n                    .joinToString(\", \")\n                    .also { println(\"Roles: $it\") }\n            }\n    }\n}",
    "filename": "dcbd88e8a6d8978c27d11f089d4047c4_11.kt"
  },
  {
    "conversation_hash": "dcbd88e8a6d8978c27d11f089d4047c4",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun assignRoleToUser(userId: Int, roleId: Int) {\n    transaction {\n        User.findById(userId)?.let { user ->\n            Role.findById(roleId)?.let { role ->\n                UserRole.new {\n                    this.user = user\n                    this.role = role\n                }\n            }\n        }\n    }\n}",
    "filename": "dcbd88e8a6d8978c27d11f089d4047c4_12.kt"
  },
  {
    "conversation_hash": "c690d5d90b253337e5886515a14b8d73",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.exposed.dao.IntIdTable",
      "org.jetbrains.exposed.sql.Column"
    ],
    "code": "import org.jetbrains.exposed.dao.IntIdTable\nimport org.jetbrains.exposed.sql.Column\n\nobject Users : IntIdTable() {\n    val username: Column<String> = varchar(\"username\", length = 50).uniqueIndex()\n    val password: Column<String> = varchar(\"password\", length = 255)\n    val email: Column<String> = varchar(\"email\", length = 100)\n    \n    fun toUser() = User[id.value, username, password, email]\n}\n\nclass User(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<User>(Users)\n\n    var username by Users.username\n    var password by Users.password\n    var email by Users.email\n    \n    override fun toString(): String {\n        return \"User(id=$id, username='$username', password='[PROTECTED]', email='$email')\"\n    }\n}",
    "filename": "c690d5d90b253337e5886515a14b8d73_4.kt"
  },
  {
    "conversation_hash": "c690d5d90b253337e5886515a14b8d73",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "org.jetbrains.exposed.dao.IntIdTable",
      "org.jetbrains.exposed.sql.Column"
    ],
    "code": "import org.jetbrains.exposed.dao.IntIdTable\nimport org.jetbrains.exposed.sql.Column\n\nobject Roles : IntIdTable() {\n    val name: Column<String> = varchar(\"name\", length = 50).uniqueIndex()\n    val description: Column<String> = varchar(\"description\", length = 255)\n    \n    fun toRole() = Role[id.value, name, description]\n}\n\nclass Role(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<Role>(Roles)\n\n    var name by Roles.name\n    var description by Roles.description\n    \n    override fun toString(): String {\n        return \"Role(id=$id, name='$name', description='$description')\"\n    }\n}",
    "filename": "c690d5d90b253337e5886515a14b8d73_5.kt"
  },
  {
    "conversation_hash": "c690d5d90b253337e5886515a14b8d73",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class User(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<User>(Users)\n    \n    var username by Users.username\n    var password by Users.password\n    var email by Users.email\n    \n    val roles by Role via UserRole\n    \n    override fun toString(): String {\n        return \"User(id=$id, username='$username', password='[PROTECTED]', email='$email')\"\n    }\n}\n\nclass Role(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<Role>(Roles)\n    \n    var name by Roles.name\n    var description by Roles.description\n    \n    val users by User via UserRole\n    \n    override fun toString(): String {\n        return \"Role(id=$id, name='$name', description='$description')\"\n    }\n}",
    "filename": "c690d5d90b253337e5886515a14b8d73_7.kt"
  },
  {
    "conversation_hash": "c690d5d90b253337e5886515a14b8d73",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "object Roles : IntIdTable() {\n    val name: Column<String> = varchar(\"name\", length = 50).uniqueIndex()\n    val description: Column<String> = varchar(\"description\", length = 255)\n    val token: Column<String> = varchar(\"token\", length = 100)\n    \n    fun toRole() = Role[id.value, name, description, token]\n}",
    "filename": "c690d5d90b253337e5886515a14b8d73_8.kt"
  },
  {
    "conversation_hash": "c690d5d90b253337e5886515a14b8d73",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Role(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<Role>(Roles)\n    \n    var name by Roles.name\n    var description by Roles.description\n    var token by Roles.token\n    \n    val users by User via UserRole\n    \n    override fun toString(): String {\n        return \"Role(id=$id, name='$name', description='$description', token='$token')\"\n    }\n}",
    "filename": "c690d5d90b253337e5886515a14b8d73_9.kt"
  },
  {
    "conversation_hash": "e462ed7b0c0d02b649729fbdd2fd18f2",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun uploadImageToDrive(driveService: Drive, filePath: String, fileName: String) {\n    val file = java.io.File(filePath)\n    val fileContent = FileContent(\"image/jpeg\", file)\n\n    val metaData = File()\n    metaData.name = fileName\n    metaData.parents = Collections.singletonList(ParentReference().setId(\"root\"))\n\n    val request = driveService.files().create(metaData, fileContent)\n    request.mediaHttpUploader.isDirectUploadEnabled = true\n\n    request.execute()\n}",
    "filename": "e462ed7b0c0d02b649729fbdd2fd18f2_0.kt"
  },
  {
    "conversation_hash": "e462ed7b0c0d02b649729fbdd2fd18f2",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun uploadToDrive(driveService: Drive, contentUri: Uri): String? {\n    val projection = arrayOf(MediaStore.Images.Media.DISPLAY_NAME, MediaStore.Images.Media.SIZE)\n    val cursor = contentResolver.query(contentUri, projection, null, null, null)\n\n    cursor?.let {\n        it.moveToFirst()\n        val fileName = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME))\n        val fileSize = cursor.getLong(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.SIZE))\n        val mimeType = getMimeType(contentUri)\n\n        val metaData = File()\n        metaData.name = fileName\n        metaData.parents = Collections.singletonList(ParentReference().setId(\"root\"))\n\n        val fileContent = ByteArrayContent(mimeType, contentResolver.openInputStream(contentUri)!!.readBytes())\n\n        val request = driveService.files().create(metaData, fileContent)\n        request.mediaHttpUploader.isDirectUploadEnabled = true\n        request.execute()\n\n        return metaData.id\n    }\n\n    return null\n}\n\nfun getMimeType(fileUri: Uri): String {\n    return if (fileUri.scheme == ContentResolver.SCHEME_CONTENT) {\n        contentResolver.getType(fileUri)\n    } else {\n        val fileExtension = MimeTypeMap.getFileExtensionFromUrl(fileUri.toString())\n        MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension.toLowerCase())\n    } ?: \"image/jpeg\"\n}",
    "filename": "e462ed7b0c0d02b649729fbdd2fd18f2_2.kt"
  },
  {
    "conversation_hash": "e462ed7b0c0d02b649729fbdd2fd18f2",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "val signInIntent = googleSignInClient.signInIntent\nstartActivityForResult(signInIntent, RC_SIGN_IN)\n\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n\n    if (requestCode == RC_SIGN_IN) {\n        val task = GoogleSignIn.getSignedInAccountFromIntent(data)\n        val googleAccount = task.result\n        val credential = GoogleAccountCredential.usingOAuth2(this, listOf(DriveScopes.DRIVE_FILE))\n        credential.selectedAccount = googleAccount!!.account\n\n        val httpTransport = AndroidHttp.newCompatibleTransport()\n        val jsonFactory = JacksonFactory.getDefaultInstance()\n\n        val driveService = Drive.Builder(httpTransport, jsonFactory, credential)\n                .setApplicationName(getString(R.string.app_name))\n                .build()\n\n        val contentUri = ... // Get the image URI from the user's device\n        val fileId = uploadToDrive(driveService, contentUri)\n    }\n}",
    "filename": "e462ed7b0c0d02b649729fbdd2fd18f2_3.kt"
  },
  {
    "conversation_hash": "69782086f701366f94a95bb179419824",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun toJson(a: A, allBs: List<B>): String {\n  val bNames = a.bIds.map { id ->\n    allBs.firstOrNull { it.id == id }?.name // Buscar el objeto B correspondiente por ID\n  }.filterNotNull()\n  val json = \"\"\"{\"id\": ${a.id}, \"name\": \"${a.name}\", \"bs\": ${bNames}}\" \"\"\"\n  return json\n}",
    "filename": "69782086f701366f94a95bb179419824_3.kt"
  },
  {
    "conversation_hash": "42eb21a8e31bf68efbe5ba448455fed0",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class UserAdapter(private val userList: List<User>) : RecyclerView.Adapter<UserAdapter.UserViewHolder>() {\n\n    inner class UserViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val nameTextView: TextView = itemView.findViewById(R.id.name_text)\n        val emailTextView: TextView = itemView.findViewById(R.id.email_text)\n        val phoneTextView: TextView = itemView.findViewById(R.id.phone_text)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): UserViewHolder {\n        val itemView = LayoutInflater.from(parent.context)\n            .inflate(R.layout.user_item, parent, false)\n        return UserViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: UserViewHolder, position: Int) {\n        val currentUser = userList[position]\n        holder.nameTextView.text = currentUser.name\n        holder.emailTextView.text = currentUser.email\n        holder.phoneTextView.text = currentUser.phone\n    }\n\n    override fun getItemCount() = userList.size\n}",
    "filename": "42eb21a8e31bf68efbe5ba448455fed0_7.kt"
  },
  {
    "conversation_hash": "58941bf7ee99985b69ce49f5037e0f00",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.recyclerview.widget.LinearLayoutManager",
      "com.example.recyclerview.databinding.ActivityMainBinding",
      "com.google.gson.Gson"
    ],
    "code": "import android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.recyclerview.databinding.ActivityMainBinding\nimport com.google.gson.Gson\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var binding: ActivityMainBinding\n    private lateinit var data: ArrayList<PhoneInfo>\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        data = ArrayList()\n        loadDataFromJson()\n        binding.recyclerView.layoutManager = LinearLayoutManager(this)\n        binding.recyclerView.adapter = PhoneListAdapter(data)\n    }\n\n    private fun loadDataFromJson() {\n        val jsonString =\n            \"\"\"\n            [\n              {\n                \"name\": \"(Приёмная)\",\n                \"phone\": \"+375 (2239) 7-17-80\",\n                \"type\": \"\"\n              },\n              {\n                \"name\": \"(Реализация на внутренний рынок)\",\n                \"phone\": \"+375 (2239) 7-18-25\",\n                \"type\": \"Сектор сбыта бумаги\"\n              },\n              {\n                \"name\": \"\",\n                \"phone\": \"+375 44 580 09 70\",\n                \"type\": \"Сектор сбыта продукции деревообработки\"\n              },\n              {\n                \"name\": \"(Реализация продукции деревообработки)\",\n                \"phone\": \"+375 (2239) 7-18-42\",\n                \"type\": \"Сектор сбыта продукции деревообработки\"\n              },\n              {\n                \"name\": \"(Реализация продукции деревообработки)\",\n                \"phone\": \"+375 (2239) 3-64-71\",\n                \"type\": \"Сектор сбыта продукции деревообработки\"\n              },\n              {\n                \"name\": \"\",\n                \"phone\": \"+375 29 352 25 20\",\n                \"type\": \"Реализация домов, бань, беседок, клеёного бруса\"\n              },\n              {\n                \"name\": \"\",\n                \"phone\": \"+375 (2239) 7-18-43\",\n                \"type\": \"Реализация домов, бань, беседок, клеёного бруса\"\n              },\n              {\n                \"name\": \"(приемная)\",\n                \"phone\": \"+375 (2239) 7-17-80\",\n                \"type\": \"Факс\"\n              },\n              {\n                \"name\": \"(отдел сбыта)\",\n                \"phone\": \"+375 (2239) 7-17-79\",\n                \"type\": \"Факс\"\n              },\n              {\n                \"name\": \"(отдел материально-технического снабжения)\",\n                \"phone\": \"+375 (2239) 7-17-82\",\n                \"type\": \"Факс\"\n              },\n              {\n                \"name\": \"(служба главного энергетика)\",\n                \"phone\": \"+375 (2239) 7-18-06\",\n                \"type\": \"Факс\"\n              }\n            ]\n        \"\"\".trimIndent()\n\n        data = Gson().fromJson(jsonString, Array<PhoneInfo>::class.java).toList() as ArrayList<PhoneInfo>\n    }\n}",
    "filename": "58941bf7ee99985b69ce49f5037e0f00_0.kt"
  },
  {
    "conversation_hash": "58941bf7ee99985b69ce49f5037e0f00",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.ViewGroup",
      "androidx.recyclerview.widget.RecyclerView",
      "com.example.recyclerview.databinding.PhoneItemBinding"
    ],
    "code": "import android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.recyclerview.databinding.PhoneItemBinding\n\nclass PhoneListAdapter(private val data: ArrayList<PhoneInfo>) :\n    RecyclerView.Adapter<PhoneListAdapter.PhoneViewHolder>() {\n\n    class PhoneViewHolder(val binding: PhoneItemBinding) : RecyclerView.ViewHolder(binding.root)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PhoneViewHolder {\n        val binding =\n            PhoneItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return PhoneViewHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: PhoneViewHolder, position: Int) {\n        val phoneInfo = data[position]\n\n        holder.binding.tvName.text = phoneInfo.name\n        holder.binding.tvPhone.text = phoneInfo.phone\n        holder.binding.tvType.text = phoneInfo.type\n    }\n\n    override fun getItemCount(): Int {\n        return data.size\n    }\n}",
    "filename": "58941bf7ee99985b69ce49f5037e0f00_1.kt"
  },
  {
    "conversation_hash": "58941bf7ee99985b69ce49f5037e0f00",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity",
      "com.example.myapplication.databinding.ActivityMainBinding",
      "com.google.gson.Gson"
    ],
    "code": "import android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.myapplication.databinding.ActivityMainBinding\nimport com.google.gson.Gson\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var binding: ActivityMainBinding\n    private lateinit var contactsAdapter: ContactsAdapter\n    private lateinit var contacts: List<ContactsNW.Contact>\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        val jsonString =\n            \"[{\\\"name\\\":\\\"(Приёмная)\\\",\\\"phone\\\":\\\"+375 (2239) 7-17-80\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"(Бухгалтерия)\\\",\\\"phone\\\":\\\"+375 (2239) 7-17-64\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"(Бухгалтерия)\\\",\\\"phone\\\":\\\"+375 (2239) 7-18-08\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"(Юридическое бюро)\\\",\\\"phone\\\":\\\"+375 (2239) 7-17-63\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"(Отдел правовой и кадровой работы)\\\",\\\"phone\\\":\\\"+375 (2239) 7-17-93\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"(Отдел материально-технического снабжения)\\\",\\\"phone\\\":\\\"+375 (2239) 7-18-12\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"\\\",\\\"phone\\\":\\\"+375 44 712 36 26\\\",\\\"type\\\":\\\"Сектор сбыта бумаги\\\"},{\\\"name\\\":\\\"(Реализация на внутренний рынок)\\\",\\\"phone\\\":\\\"+375 (2239) 7-17-79\\\",\\\"type\\\":\\\"Сектор сбыта бумаги\\\"},{\\\"name\\\":\\\"(Реализация на внешний рынок)\\\",\\\"phone\\\":\\\"+375 (2239) 4-11-77\\\",\\\"type\\\":\\\"Сектор сбыта бумаги\\\"}]\"\n        contacts = parseContacts(jsonString)\n        contactsAdapter = ContactsAdapter(contacts)\n        initRecyclerView()\n    }\n\n    private fun initRecyclerView() {\n        binding.recyclerView.apply {\n            layoutManager = LinearLayoutManager(this@MainActivity)\n            adapter = contactsAdapter\n        }\n    }\n\n    private fun parseContacts(jsonString: String): List<ContactsNW.Contact> {\n        return Gson().fromJson(jsonString, Array<ContactsNW.Contact>::class.java).toList()\n    }\n}",
    "filename": "58941bf7ee99985b69ce49f5037e0f00_7.kt"
  },
  {
    "conversation_hash": "bf251d231f79056d6a47a49c717929cd",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyAdapter(private val items: List<String>) :\n    RecyclerView.Adapter<MyAdapter.ViewHolder>() {\n\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val textView: TextView = itemView.findViewById(R.id.item_text_view)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context)\n            .inflate(R.layout.item_layout, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = items[position]\n        holder.textView.text = item\n    }\n\n    override fun getItemCount(): Int = items.size\n}",
    "filename": "bf251d231f79056d6a47a49c717929cd_6.kt"
  },
  {
    "conversation_hash": "bf251d231f79056d6a47a49c717929cd",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val recyclerView: RecyclerView = findViewById(R.id.my_recycler_view)\n\n        val items = listOf(\n            \"item1\", \"item2\", \"item3\", \"item4\", \"item5\",\n            \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"\n        )\n\n        val adapter = MyAdapter(items)\n\n        recyclerView.adapter = adapter\n    }\n}",
    "filename": "bf251d231f79056d6a47a49c717929cd_7.kt"
  },
  {
    "conversation_hash": "bf251d231f79056d6a47a49c717929cd",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun initRecyclerView() {\n    binding.contactsRecyclerView.layoutManager = LinearLayoutManager(this)\n    binding.contactsRecyclerView.setHasFixedSize(false)\n    binding.contactsRecyclerView.adapter = contactsAdapter\n}",
    "filename": "bf251d231f79056d6a47a49c717929cd_11.kt"
  },
  {
    "conversation_hash": "bf251d231f79056d6a47a49c717929cd",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ContactsAdapter(private val contacts: List<ContactsNW.Contact>) :\n    RecyclerView.Adapter<ContactsAdapter.ContactViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ContactViewHolder {\n        val binding = ItemPhonenumberBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return ContactViewHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: ContactViewHolder, position: Int) {\n        holder.bind(contacts[position])\n    }\n\n    override fun getItemCount(): Int {\n        return contacts.size\n    }\n\n    inner class ContactViewHolder(private val binding: ItemPhonenumberBinding) :\n        RecyclerView.ViewHolder(binding.root) {\n\n        fun bind(contact: ContactsNW.Contact) {\n            binding.txtViewName.text = contact.name\n            binding.txtViewPhone.text = contact.phone\n            binding.txtViewType.text= contact.type\n        }\n    }\n}\n\nclass ContactsNW : ArrayList<ContactsNW.Contact>(){\n    data class Contact(\n        @SerializedName(\"name\")\n        val name: String,\n        @SerializedName(\"phone\")\n        val phone: String,\n        @SerializedName(\"type\")\n        val type: String\n    )\n}\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n    private lateinit var contactsAdapter: ContactsAdapter\n    private lateinit var contacts: List<ContactsNW.Contact>\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        val jsonString =\n            \"[{\\\"name\\\":\\\"(Приёмная)\\\",\\\"phone\\\":\\\"+375 (2239) 7-17-80\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"(Бухгалтерия)\\\",\\\"phone\\\":\\\"+375 (2239) 7-17-64\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"(Бухгалтерия)\\\",\\\"phone\\\":\\\"+375 (2239) 7-18-08\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"(Юридическое бюро)\\\",\\\"phone\\\":\\\"+375 (2239) 7-17-63\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"(Отдел правовой и кадровой работы)\\\",\\\"phone\\\":\\\"+375 (2239) 7-17-93\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"(Отдел материально-технического снабжения)\\\",\\\"phone\\\":\\\"+375 (2239) 7-18-12\\\",\\\"type\\\":\\\"\\\"},{\\\"name\\\":\\\"\\\",\\\"phone\\\":\\\"+375 44 712 36 26\\\",\\\"type\\\":\\\"Сектор сбыта бумаги\\\"},{\\\"name\\\":\\\"(Реализация на внутренний рынок)\\\",\\\"phone\\\":\\\"+375 (2239) 7-17-79\\\",\\\"type\\\":\\\"Сектор сбыта бумаги\\\"},{\\\"name\\\":\\\"(Реализация на внешний рынок)\\\",\\\"phone\\\":\\\"+375 (2239) 4-11-77\\\",\\\"type\\\":\\\"Сектор сбыта бумаги\\\"}]\"\n        contacts = parseContacts(jsonString)\n        contactsAdapter = ContactsAdapter(contacts)\n        initRecyclerView()\n\n    }\n\n    private fun initRecyclerView() {\n        binding.contactsRecyclerView.layoutManager = LinearLayoutManager(this)\n        binding.contactsRecyclerView.setHasFixedSize(false)\n        binding.contactsRecyclerView.adapter = contactsAdapter\n    }\n\n    fun parseContacts(jsonString: String): List<ContactsNW.Contact> {\n        val jsonArray = JSONArray(jsonString)\n        val contacts = mutableListOf<ContactsNW.Contact>()\n        for (i in 0 until jsonArray.length()) {\n            val jsonObject = jsonArray.getJSONObject(i)\n            val name = jsonObject.getString(\"name\")\n            val phone = jsonObject.getString(\"phone\")\n            val type = jsonObject.getString(\"type\")\n            contacts.add(ContactsNW.Contact(name, phone, type))\n        }\n        return contacts\n    }\n}",
    "filename": "bf251d231f79056d6a47a49c717929cd_12.kt"
  },
  {
    "conversation_hash": "6917c52296b066c52d3a71d7d162547d",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun bitmapToNV21(bitmap: Bitmap): ByteArray {\n    // 将 Bitmap 转换为 byte 数组\n    val out = ByteArrayOutputStream()\n    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out)\n    val imageBytes = out.toByteArray()\n\n    // 将 byte 数组转换为 NV21 格式的 byte 数组\n    val pixels = IntArray(bitmap.width * bitmap.height)\n    bitmap.getPixels(pixels, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)\n    val nv21Bytes = ByteArray(pixels.size * 3 / 2)\n    encodeNV21(nv21Bytes, pixels, bitmap.width, bitmap.height)\n\n    return nv21Bytes\n}\n\nfun generateWhiteNV21Bytes(width: Int, height: Int): ByteArray {\n    // 填充像素数组\n    val pixels = IntArray(width * height)\n    Arrays.fill(pixels, 0xffffffff.toInt()) // 将所有像素点填充为白色\n\n    // 将像素数组编码为 NV21 格式的 byte 数组\n    val nv21Bytes = ByteArray(width * height * 3 / 2)\n    encodeNV21(nv21Bytes, pixels, width, height)\n\n    return nv21Bytes\n}\n\nprivate fun encodeNV21(yuv420sp: ByteArray, argb: IntArray, width: Int, height: Int) {\n    val frameSize = width * height\n\n    var yIndex = 0\n    var uvIndex = frameSize\n\n    var a: Int\n    var R: Int\n    var G: Int\n    var B: Int\n    var Y: Int\n    var U: Int\n    var V: Int\n    var argbIndex = 0\n\n    for (j in 0 until height) {\n        for (i in 0 until width) {\n            a = argb[argbIndex].ushr(24) and 0xff // 获取Alpha值\n            R = argb[argbIndex].ushr(16) and 0xff // 获取Red值\n            G = argb[argbIndex].ushr(8) and 0xff // 获取Green值\n            B = argb[argbIndex] and 0xff // 获取Blue值\n\n            // RGB 转 YUV 公式\n            Y = (66 * R + 129 * G + 25 * B + 128 shr 8) + 16\n            U = (-38 * R - 74 * G + 112 * B + 128 shr 8) + 128\n            V = (112 * R - 94 * G - 18 * B + 128 shr 8) + 128\n\n            // 防止越界\n            Y = Math.max(0, Math.min(Y, 255))\n            U = Math.max(0, Math.min(U, 255))\n            V = Math.max(0, Math.min(V, 255))\n\n            // 将 Y 值赋给 Y 分量\n            yuv420sp[yIndex++] = Y.toByte()\n\n            // 每隔 2 个像素存储一个 U 值和一个 V 值\n            if (j % 2 == 0 && i % 2 == 0) {\n                yuv420sp[uvIndex++] = U.toByte()\n                yuv420sp[uvIndex++] = V.toByte()\n            }\n\n            argbIndex++\n        }\n    }\n}",
    "filename": "6917c52296b066c52d3a71d7d162547d_4.kt"
  },
  {
    "conversation_hash": "18fa981311f60594816da073666be642",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Person {\n    // properties\n    var name: String = \"\"\n    var age: Int = 0\n    \n    // methods\n    fun speak() {\n        println(\"Hello, my name is $name and I'm $age years old.\")\n    }\n}",
    "filename": "18fa981311f60594816da073666be642_0.kt"
  },
  {
    "conversation_hash": "18fa981311f60594816da073666be642",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Person(val name: String, var age: Int) {\n    // methods\n    fun speak() {\n        println(\"Hello, my name is $name and I'm $age years old.\")\n    }\n}",
    "filename": "18fa981311f60594816da073666be642_2.kt"
  },
  {
    "conversation_hash": "c6e9736b9b04ae65770a0123e86f4a52",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    println(\"Enter the width of the rectangle:\")\n    val widthInput = readLine()!!.toInt()\n    \n    println(\"Enter the height of the rectangle:\")\n    val heightInput = readLine()!!.toInt()\n    \n    val area = widthInput * heightInput\n    \n    println(\"The area of the rectangle is: $area\")\n}",
    "filename": "c6e9736b9b04ae65770a0123e86f4a52_3.kt"
  },
  {
    "conversation_hash": "38d6f54c4f907e526db7c03e04396318",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Using the safe call operator (?.)\nval input: String? = readLine()?.trim()\n\n// Using the elvis operator (?:)\nval input: String = readLine()?.trim() ?: \"\"",
    "filename": "38d6f54c4f907e526db7c03e04396318_0.kt"
  },
  {
    "conversation_hash": "ec7bd827d4333696770b614f9d09aeb5",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    println(\"Enter the width of the rectangle\")\n    val widthInput = readLine()?.toInt() ?: 0 // default value of 0 if null\n    \n    println(\"Enter the height of the rectangle\")\n    val heightInput = readLine()?.toInt() ?: 0 // default value of 0 if null\n    \n    val area = widthInput * heightInput\n    \n    println(\"The area of the rectangle is: $area\")\n}",
    "filename": "ec7bd827d4333696770b614f9d09aeb5_0.kt"
  },
  {
    "conversation_hash": "ec7bd827d4333696770b614f9d09aeb5",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    println(\"Enter the width of the rectangle\")\n    val widthInput = readLine()?.toInt() ?: 0 // default value of 0 if null\n    \n    println(\"Enter the height of the rectangle\")\n    val heightInput = readLine()?.toInt() ?: 0 // default value of 0 if null\n    \n    val area = widthInput * heightInput\n    \n    println(\"The area of the rectangle is: $area\")\n    \n    System.out.flush() // flushes the output buffer\n}",
    "filename": "ec7bd827d4333696770b614f9d09aeb5_1.kt"
  },
  {
    "conversation_hash": "67293fda634527cfd7613f2e46816555",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PagePredictor(private val pages: List<String>) {\n    private val graph: MutableMap<String, MutableSet<String>> = mutableMapOf()\n    private val visitCountMap: MutableMap<String, Int> = mutableMapOf()\n    private val sequence: LinkedList<String> = LinkedList()\n\n    init {\n        for (page in pages) {\n            graph[page] = mutableSetOf()\n            visitCountMap[page] = 0\n        }\n    }\n\n    fun addPage(pageName: String, resources: Set<String>) {\n        graph[pageName]?.addAll(resources)\n    }\n\n    fun logPageVisit(pageName: String) {\n        visitCountMap[pageName] = visitCountMap[pageName]?.plus(1) ?: 1\n        sequence.add(pageName)\n    }\n\n    fun predictNextPage(currentPage: String): Set<String> {\n        val distances = getDistances(currentPage)\n        val reachablePages = getReachablePages(currentPage, distances)\n        val mostVisitedNextPage = getMostVisitedNextPage(reachablePages)\n        return graph[mostVisitedNextPage] ?: emptySet<String>()\n    }\n\n    private fun getDistances(startPage: String): MutableMap<String, Int> {\n        val distances = mutableMapOf<String, Int>()\n        for (page in pages) {\n            distances[page] = Integer.MAX_VALUE\n        }\n        distances[startPage] = 0\n\n        val visited = mutableSetOf<String>()\n        visited.add(startPage)\n\n        val queue = LinkedList<String>()\n        queue.add(startPage)\n\n        while (queue.isNotEmpty()) {\n            val currentPage = queue.poll()\n            for (nextPage in graph[currentPage] ?: emptySet()) {\n                val distance = distances[currentPage]!! + 1\n                if (distance < distances[nextPage]!!) {\n                    distances[nextPage] = distance\n                }\n\n                if (!visited.contains(nextPage)) {\n                    visited.add(nextPage)\n                    queue.add(nextPage)\n                }\n            }\n        }\n\n        return distances\n    }\n\n    private fun getReachablePages(currentPage: String, distances: Map<String, Int>): Set<String> {\n        val reachablePages = mutableSetOf<String>()\n        for ((page, distance) in distances) {\n            if (graph[currentPage]?.contains(page) == true || currentPage == page) {\n                if (distance != Integer.MAX_VALUE) {\n                    reachablePages.add(page)\n                }\n            }\n        }\n        return reachablePages\n    }\n\n    private fun getMostVisitedNextPage(pages: Set<String>): String {\n        var mostVisitedPage = \"\"\n        var highestVisitCount = -1\n        for (page in pages) {\n            val visitCount = visitCountMap[page]\n            if (visitCount != null && visitCount > highestVisitCount) {\n                highestVisitCount = visitCount\n                mostVisitedPage = page\n            }\n        }\n        return mostVisitedPage\n    }\n}",
    "filename": "67293fda634527cfd7613f2e46816555_1.kt"
  },
  {
    "conversation_hash": "d10fe17b841370b302660ce128439f04",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun printNumbers(vararg numbers: Int) {\n    for (number in numbers) {\n        println(number)\n    }\n}",
    "filename": "d10fe17b841370b302660ce128439f04_2.kt"
  },
  {
    "conversation_hash": "d10fe17b841370b302660ce128439f04",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun printNumbers(vararg numbers: Int) {\n    for (number in numbers) {\n        println(number)\n    }\n}\n\nfun printStrings(vararg strings: String) {\n    for (string in strings) {\n        println(string)\n    }\n}",
    "filename": "d10fe17b841370b302660ce128439f04_6.kt"
  },
  {
    "conversation_hash": "d10fe17b841370b302660ce128439f04",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun printValues(vararg values: Any) {\n    for (value in values) {\n        println(value)\n    }\n}",
    "filename": "d10fe17b841370b302660ce128439f04_7.kt"
  },
  {
    "conversation_hash": "d10fe17b841370b302660ce128439f04",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun printNumbers(numbers: IntArray) {\n    for (number in numbers) {\n        println(number)\n    }\n}",
    "filename": "d10fe17b841370b302660ce128439f04_8.kt"
  },
  {
    "conversation_hash": "1b3ca652bb631b92aa78dda2a943b589",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "val map = mapOf<TipoAttoRegolamentare, String>(...)\n\nval sortedList = mutableListOf<String>()\nsortedList.addAll(map.values())\nCollections.sort(sortedList) { a, b -> a.compareTo(b) }\n\nval sortedMap = mutableMapOf<TipoAttoRegolamentare, String>()\nsortedList.forEach { value ->\n    for ((key, originalValue) in map) {\n        if (value == originalValue) {\n            sortedMap[key] = value\n        }\n    }\n}",
    "filename": "1b3ca652bb631b92aa78dda2a943b589_0.kt"
  },
  {
    "conversation_hash": "ecad471a6bc6a56ea4d049e8a50cfabe",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun getResponseSizeRange(responseSize: Int): String {\n    return when {\n        responseSize in 901..1000 -> \"901-1000\"\n        responseSize in 801..900 -> \"801-900\"\n        responseSize in 701..800 -> \"701-800\"\n        responseSize in 301..700 -> \"301-700\"\n        responseSize in 201..300 -> \"201-300\"\n        responseSize in 101..200 -> \"101-200\"\n        responseSize in 31..100 -> \"31-100\"\n        responseSize in 26..30 -> \"26-30\"\n        responseSize in 21..25 -> \"21-25\"\n        responseSize in 16..20 -> \"16-20\"\n        responseSize in 11..15 -> \"11-15\"\n        responseSize in 6..10 -> \"6-10\"\n        responseSize in 1..5 -> \"1-5\"\n        responseSize <= 0 -> \"0\"\n        else -> \"1000+\"\n    }\n}\n\nval responseSize = list.size\nmetric.increment(TAG_RESPONSE_SIZE, getResponseSizeRange(responseSize))",
    "filename": "ecad471a6bc6a56ea4d049e8a50cfabe_0.kt"
  },
  {
    "conversation_hash": "ecad471a6bc6a56ea4d049e8a50cfabe",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class ResponseSizeRange(val range: IntRange, val label: String)\n\nval responseSizeRanges = listOf(\n    ResponseSizeRange(901..1000, \"901-1000\"),\n    ResponseSizeRange(801..900, \"801-900\"),\n    ResponseSizeRange(701..800, \"701-800\"),\n    ResponseSizeRange(301..700, \"301-700\"),\n    ResponseSizeRange(201..300, \"201-300\"),\n    ResponseSizeRange(101..200, \"101-200\"),\n    ResponseSizeRange(31..100, \"31-100\"),\n    ResponseSizeRange(26..30, \"26-30\"),\n    ResponseSizeRange(21..25, \"21-25\"),\n    ResponseSizeRange(16..20, \"16-20\"),\n    ResponseSizeRange(11..15, \"11-15\"),\n    ResponseSizeRange(6..10, \"6-10\"),\n    ResponseSizeRange(1..5, \"1-5\"),\n    ResponseSizeRange(Int.MIN_VALUE..0, \"0\")\n)\n\nprivate fun getResponseSizeRange(responseSize: Int): String {\n    return responseSizeRanges.firstOrNull { responseSize in it.range }?.label ?: \"1000+\"\n}\n\nval responseSize = list.size\nmetric.increment(TAG_RESPONSE_SIZE, getResponseSizeRange(responseSize))",
    "filename": "ecad471a6bc6a56ea4d049e8a50cfabe_1.kt"
  },
  {
    "conversation_hash": "ecad471a6bc6a56ea4d049e8a50cfabe",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun getResponseSizeRange(responseSize: Int): String {\n    return when {\n        responseSize > 1000 -> \"1000+\"\n        responseSize <= 0 -> \"0\"\n        responseSize % 100 == 0 -> \"${responseSize - 99}-${responseSize}\"\n        else -> {\n            val upperBound = (responseSize / 100) * 100\n            val lowerBound = upperBound - 99\n            \"$lowerBound-$upperBound\"\n        }\n    }\n}\n\nval responseSize = list.size\nmetric.increment(TAG_RESPONSE_SIZE, getResponseSizeRange(responseSize))",
    "filename": "ecad471a6bc6a56ea4d049e8a50cfabe_2.kt"
  },
  {
    "conversation_hash": "ecad471a6bc6a56ea4d049e8a50cfabe",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "val responseSizeRanges = mapOf(\n    901..1000 to \"901-1000\",\n    801..900 to \"801-900\",\n    701..800 to \"701-800\",\n    301..700 to \"301-700\",\n    201..300 to \"201-300\",\n    101..200 to \"101-200\",\n    31..100 to \"31-100\",\n    26..30 to \"26-30\",\n    21..25 to \"21-25\",\n    16..20 to \"16-20\",\n    11..15 to \"11-15\",\n    6..10 to \"6-10\",\n    1..5 to \"1-5\",\n    Int.MIN_VALUE..0 to \"0\"\n)\n\nprivate fun getResponseSizeRange(responseSize: Int): String {\n    return responseSizeRanges.filterKeys { responseSize in it }.values.firstOrNull() ?: \"1000+\"\n}\n\nval responseSize = list.size\nmetric.increment(TAG_RESPONSE_SIZE, getResponseSizeRange(responseSize))",
    "filename": "ecad471a6bc6a56ea4d049e8a50cfabe_3.kt"
  },
  {
    "conversation_hash": "2e9badf2203b0da41fcd61a40a93afa1",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.time.Duration",
      "java.time.Instant"
    ],
    "code": "import java.time.Duration\nimport java.time.Instant\n\ndata class Token(val date: Instant)\n\nfun isTokenDatePassedDays(tokenDate: Instant, days: Long?): Boolean {\n    if (days == null) {\n        return false\n    }\n    val now = Instant.now()\n    val daysDuration = Duration.ofDays(days)\n    val pastTimeFromNow = tokenDate.plus(daysDuration)\n\n    return pastTimeFromNow.isBefore(now)\n}\n\nfun main() {\n    val token = Token(Instant.now().minusSeconds(5184000)) // For example, 60 days ago\n    val days: Long? = 60L\n\n    val isPassed = isTokenDatePassedDays(token.date, days)\n    println(\"Is token date passed 60 days: $isPassed\")\n}",
    "filename": "2e9badf2203b0da41fcd61a40a93afa1_0.kt"
  },
  {
    "conversation_hash": "2e9badf2203b0da41fcd61a40a93afa1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "java.time.Duration",
      "java.time.Instant",
      "java.time.LocalDateTime",
      "java.time.ZoneOffset"
    ],
    "code": "import java.time.Duration\nimport java.time.Instant\nimport java.time.LocalDateTime\nimport java.time.ZoneOffset\n\ndata class Token(val date: Instant)\n\nfun isTokenDatePassedDate20230522(tokenDate: Instant): Boolean {\n    val targetDate = LocalDateTime.parse(\"2023-05-22T14:00:00\").toInstant(ZoneOffset.UTC)\n    return tokenDate.isBefore(targetDate)\n}\n\nfun main() {\n    val token = Token(Instant.now().minusSeconds(5184000)) // For example, 60 days ago\n\n    val isPassed = isTokenDatePassedDate20230522(token.date)\n    println(\"Is token date passed 2023-05-22T14:00:00Z: $isPassed\")\n}",
    "filename": "2e9badf2203b0da41fcd61a40a93afa1_1.kt"
  },
  {
    "conversation_hash": "a65a54f66facc364f47e05dfbedb938a",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.io.File",
      "java.io.FileOutputStream",
      "java.io.InputStream",
      "java.net.HttpURLConnection",
      "java.net.URL"
    ],
    "code": "import java.io.File\nimport java.io.FileOutputStream\nimport java.io.InputStream\nimport java.net.HttpURLConnection\nimport java.net.URL\n\nfun downloadFileToDevNull(url: String) {\n    val connection = URL(url).openConnection() as HttpURLConnection\n    connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Linux; Android 11.0; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Mobile Safari/537.36\")\n    connection.connect()\n\n    val inputStream: InputStream = connection.inputStream\n    val devNull = File(\"/dev/null\")\n    val outputStream = FileOutputStream(devNull)\n\n    val buffer = ByteArray(1024)\n    var bytesRead: Int\n\n    while (inputStream.read(buffer).also { bytesRead = it } != -1) {\n        outputStream.write(buffer, 0, bytesRead)\n    }\n\n    outputStream.flush()\n    outputStream.close()\n    inputStream.close()\n}",
    "filename": "a65a54f66facc364f47e05dfbedb938a_0.kt"
  },
  {
    "conversation_hash": "bc8198dac29bd10705bd03984bf2b85c",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// 定义一个可变字符串变量\nvar str = \"Hello, world!\"\nprintln(str)  // 输出：Hello, world!\n\n// 可变变量可以被重新赋值\nstr = \"Hi, Scala!\"\nprintln(str)  // 输出：Hi, Scala!\n\n// 定义一个不可变整型常量\nval num = 123\nprintln(num)  // 输出：123\n\n// 不可变变量赋值会引起编译错误\n// num = 456  // 编译错误：reassignment to val",
    "filename": "bc8198dac29bd10705bd03984bf2b85c_0.kt"
  },
  {
    "conversation_hash": "c973f499716ec1753e0e6d471085798b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "java.io.IOException",
      "okhttp3.Call",
      "okhttp3.Callback",
      "okhttp3.OkHttpClient",
      "okhttp3.Request",
      "okhttp3.Response"
    ],
    "code": "import okhttp3.Call\nimport okhttp3.Callback\nimport okhttp3.OkHttpClient\nimport okhttp3.Request\nimport okhttp3.Response\nimport java.io.IOException\n\nclass DownloadFileWithoutWriting {\n\n    private val client = OkHttpClient()\n\n    fun startRepeatedDownload(url: String, repeatTimes: Int) {\n        for (i in 0 until repeatTimes) {\n            downloadFile(url)\n        }\n    }\n\n    private fun downloadFile(url: String) {\n        val request = Request.Builder()\n            .url(url)\n            .build()\n\n        client.newCall(request).enqueue(object : Callback {\n            override fun onFailure(call: Call, e: IOException) {\n                e.printStackTrace()\n            }\n\n            override fun onResponse(call: Call, response: Response) {\n                // 这里是下载文件的回调，不进行实际的写入操作，只是模拟下载操作\n                response.body?.byteStream()\n            }\n        })\n    }\n}",
    "filename": "c973f499716ec1753e0e6d471085798b_1.kt"
  },
  {
    "conversation_hash": "c973f499716ec1753e0e6d471085798b",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val downloader = DownloadFileWithoutWriting()\n\n    // 循环5次下载文件\n    downloader.startRepeatedDownload(\"https://example.com/myfile.txt\", 5)\n}",
    "filename": "c973f499716ec1753e0e6d471085798b_2.kt"
  },
  {
    "conversation_hash": "0dff125e8c34789d93334913cecef71b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class SplashScreenActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_splash_screen)\n\n        // Добавьте задержку перед переходом на основной экран приложения\n        Handler(Looper.getMainLooper()).postDelayed({\n            val intent = Intent(this, MainActivity::class.java)\n            startActivity(intent)\n            finish()\n        }, 2000)\n    }\n}",
    "filename": "0dff125e8c34789d93334913cecef71b_1.kt"
  },
  {
    "conversation_hash": "0dff125e8c34789d93334913cecef71b",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class SplashScreenActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_splash_screen)\n\n        // Здесь вы можете выполнить все необходимые действия для загрузки вашего основного контента\n        // Как только основной контент будет готов, вы можете закрыть Splash Screen Activity и перейти на основной экран приложения\n        val intent = Intent(this, MainActivity::class.java)\n        startActivity(intent)\n        finish()\n    }\n}",
    "filename": "0dff125e8c34789d93334913cecef71b_3.kt"
  },
  {
    "conversation_hash": "ddfdeaea98390d12c06d1ad052ac9f98",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.material.Text",
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.tooling.preview.Preview"
    ],
    "code": "import androidx.compose.material.Text\n   import androidx.compose.runtime.Composable\n   import androidx.compose.ui.tooling.preview.Preview\n\n   @Composable\n   fun Greeting(name: String) {\n       Text(text = \"Hello $name!\")\n   }\n\n   @Preview\n   @Composable\n   fun PreviewGreeting() {\n       Greeting(name = \"World\")\n   }",
    "filename": "ddfdeaea98390d12c06d1ad052ac9f98_1.kt"
  },
  {
    "conversation_hash": "ddfdeaea98390d12c06d1ad052ac9f98",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.Column",
      "androidx.compose.foundation.layout.fillMaxWidth",
      "androidx.compose.foundation.layout.padding",
      "androidx.compose.material.Card",
      "androidx.compose.material.MaterialTheme",
      "androidx.compose.material.Text",
      "androidx.compose.runtime.Composable"
    ],
    "code": "import androidx.compose.foundation.layout.Column\n   import androidx.compose.foundation.layout.fillMaxWidth\n   import androidx.compose.foundation.layout.padding\n   import androidx.compose.material.Card\n   import androidx.compose.material.MaterialTheme\n   import androidx.compose.material.Text\n   import androidx.compose.runtime.Composable\n\n   @Composable\n   fun MyCard(title: String, body: String) {\n       Card(\n           modifier = Modifier.fillMaxWidth().padding(16.dp),\n           elevation = 8.dp,\n           shape = MaterialTheme.shapes.medium\n       ) {\n           Column(modifier = Modifier.padding(16.dp)) {\n               Text(text = title, style = MaterialTheme.typography.h6)\n               Text(text = body, style = MaterialTheme.typography.body1)\n           }\n       }\n   }",
    "filename": "ddfdeaea98390d12c06d1ad052ac9f98_4.kt"
  },
  {
    "conversation_hash": "ddfdeaea98390d12c06d1ad052ac9f98",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.tooling.preview.Preview"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.compose.ui.tooling.preview.Preview\n\n@Composable\nfun MyComposable(message: String) {\n    Text(text = message)\n}\n\n@Preview\n@Composable\nfun MyComposablePreview() {\n    MyComposable(message = \"Hello, World!\")\n}",
    "filename": "ddfdeaea98390d12c06d1ad052ac9f98_15.kt"
  },
  {
    "conversation_hash": "ddfdeaea98390d12c06d1ad052ac9f98",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.tooling.preview.Preview",
      "androidx.compose.ui.tooling.preview.PreviewParameter"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.PreviewParameter\n\n@Composable\nfun MyComposable(message: String, count: Int = 1) {\n    repeat(count) {\n        Text(text = message)\n    }\n}\n\n@Preview\n@Composable\nfun MyComposablePreview(@PreviewParameter(message = \"Sample message\") message: String, \n                        @PreviewParameter(message = \"Sample count\") count: Int = 3) {\n    MyComposable(message = message, count = count)\n}",
    "filename": "ddfdeaea98390d12c06d1ad052ac9f98_16.kt"
  },
  {
    "conversation_hash": "d8c365ee3f2cc3596007ba7794bd58ee",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "kotlin.random.Random"
    ],
    "code": "import kotlin.random.Random\n\nfun generateRandomJson(seed: Long): JsonElement {\n    val random = Random(seed)\n    \n    fun generateJsonValue(): JsonElement {\n        val randomNumber = random.nextInt(10)\n        val randomBoolean = random.nextBoolean()\n        val randomString = (0..5).map { ('a'..'z').random() }.joinToString(\"\")\n        \n        return when (randomNumber) {\n            in 0..5 -> JsonElement.JsonPrimitive.JsonNumber(randomNumber)\n            6 -> JsonElement.JsonPrimitive.JsonBoolean(randomBoolean)\n            else -> JsonElement.JsonPrimitive.JsonString(randomString)\n        }\n    }\n    \n    fun generateJsonObject(depth: Int): JsonElement.JsonObject {\n        val jsonObject = JsonElement.JsonObject()\n        \n        if (depth > 0) {\n            val keyCount = random.nextInt(1, 5)\n            \n            for (i in 1..keyCount) {\n                val key = \"key$i\"\n                val value = generateJsonValue()\n                jsonObject.add(key, value)\n                \n                if (random.nextBoolean()) {\n                    val nestedObject = generateJsonObject(depth - 1)\n                    jsonObject.add(key + \"_nested\", nestedObject)\n                }\n            }\n        }\n        \n        return jsonObject\n    }\n    \n    fun generateJsonArray(depth: Int): JsonElement.JsonArray {\n        val jsonArray = JsonElement.JsonArray()\n        \n        if (depth > 0) {\n            val elementCount = random.nextInt(1, 5)\n            \n            for (i in 1..elementCount) {\n                val value = generateJsonValue()\n                jsonArray.add(value)\n                \n                if (random.nextBoolean()) {\n                    val nestedArray = generateJsonArray(depth - 1)\n                    jsonArray.add(nestedArray)\n                }\n            }\n        }\n        \n        return jsonArray\n    }\n    \n    return when (random.nextInt(0, 3)) {\n        0 -> generateJsonValue()\n        1 -> generateJsonObject(2)\n        else -> generateJsonArray(2)\n    }\n}",
    "filename": "d8c365ee3f2cc3596007ba7794bd58ee_0.kt"
  },
  {
    "conversation_hash": "1489b5b7562763dd5a2ee0126790f2cc",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class User(\n    val id: Long,\n    val username: String,\n    val firstName: String,\n    val lastName: String,\n    val selectedEmoji: Emoji?,\n    val articles: List<Article> = listOf()\n)\n\ndata class Emoji(\n    val id: Long,\n    val name: String,\n    val imageUrl: String,\n    val category: String\n)\n\ndata class Article(\n    val id: Long,\n    val title: String,\n    val author: String,\n    val datePublished: String,\n    val content: String,\n    val tags: List<String>\n)\n\nclass ArticleService {\n    private val articleRepository: ArticleRepository = // Инициализация репозитория\n    private val emojiRepository: EmojiRepository = // Инициализация репозитория\n\n    fun getArticlesForUser(user: User): List<Article> {\n        val selectedEmoji = user.selectedEmoji\n        return if (selectedEmoji != null) {\n            val articlesByEmoji = articleRepository.getArticlesByEmoji(selectedEmoji)\n            filterArticlesByUserPreferences(user, articlesByEmoji)\n        } else {\n            listOf()\n        }\n    }\n\n    private fun filterArticlesByUserPreferences(user: User, articles: List<Article>): List<Article> {\n        // Дополнительная логика фильтрации статей в соответствии с предпочтениями пользователя\n        // Например, фильтрация по тегам или другим критериям\n        return articles\n    }\n}\n\ninterface ArticleRepository {\n    fun getArticlesByEmoji(emoji: Emoji): List<Article>\n}\n\ninterface EmojiRepository {\n    fun getEmojiById(id: Long): Emoji?\n}",
    "filename": "1489b5b7562763dd5a2ee0126790f2cc_4.kt"
  },
  {
    "conversation_hash": "046de2bd2c7688bff10937e6a510f047",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class User(\n    val id: Int,\n    val username: String,\n    val email: String,\n    val password: String,\n    val age: Int,\n    var isActive: Boolean\n)\n\nclass UserRepository {\n    private val users = mutableListOf<User>()\n\n    fun addUser(user: User) {\n        users.add(user)\n    }\n\n    fun getUserById(userId: Int): User? {\n        return users.find { it.id == userId }\n    }\n\n    fun getUserByUsername(username: String): User? {\n        return users.find { it.username == username }\n    }\n\n    fun updateUser(user: User) {\n        val existingUser = users.find { it.id == user.id }\n        existingUser?.let {\n            it.username = user.username\n            it.email = user.email\n            it.password = user.password\n            it.age = user.age\n            it.isActive = user.isActive\n        }\n    }\n\n    fun deleteUser(userId: Int) {\n        users.removeIf { it.id == userId }\n    }\n\n    fun getAllUsers(): List<User> {\n        return users.toList()\n    }\n}",
    "filename": "046de2bd2c7688bff10937e6a510f047_0.kt"
  },
  {
    "conversation_hash": "b48d06304c395bb55be6fc408fb52479",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "% 创建一个新的元胞数组\nnewCellArray = cell(size(oldCellArray));\n\n% 遍历每个元胞数据\nfor i = 1:numel(oldCellArray)\n    % 获取当前元胞数据的矩阵\n    matrix = oldCellArray{i};\n    \n    % 计算矩阵的长度\n    len = size(matrix, 1);\n    \n    % 如果长度大于等于100，则进行划分\n    if len >= 100\n        % 计算需要划分成几个100长度的子矩阵\n        numParts = ceil(len / 100);\n        \n        % 计算子矩阵的划分索引\n        splitIdx = linspace(1, len, numParts+1);\n        \n        % 将当前元胞数据划分为子矩阵\n        parts = arrayfun(@(x, y) matrix(x:y, :), splitIdx(1:end-1), splitIdx(2:end), 'UniformOutput', false);\n        \n        % 展开子矩阵，并将它们存储到新的元胞数据中\n        parts = cellfun(@(x) x(:,:), parts, 'UniformOutput', false);\n        \n        % 将划分后的子矩阵放入新的元胞数据中\n        newCellArray{i} = vertcat(parts{:});\n        \n    % 如果长度小于100，则保持原矩阵不变\n    else\n        newCellArray{i} = matrix;\n    end\nend",
    "filename": "b48d06304c395bb55be6fc408fb52479_1.kt"
  },
  {
    "conversation_hash": "053c4a93d892c319f970c6a6f1335044",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class User(private var username: String, private var password: String) {\n    \n    fun setUsername(username: String) {\n        // Perform any necessary validations\n        this.username = username\n    }\n\n    fun setPassword(password: String) {\n        // Perform any necessary validations\n        this.password = password\n    }\n\n    fun validateLogin() {\n        // Perform login authentication logic\n        // ...\n    }\n\n    fun updateProfile(newInfo: String) {\n        // Perform profile update logic\n        // ...\n    }\n}\n\nclass Course(private val title: String, private val description: String, private val instructor: String) {\n    \n    fun getCourseMaterials() {\n        // Retrieve course materials logic\n        // ...\n    }\n\n    fun enrollStudent(student: User) {\n        // Perform enroll student logic\n        // ...\n    }\n}\n\nclass StudentInterface {\n    private var loggedInUser: User? = null\n\n    fun login(username: String, password: String) {\n        loggedInUser = User(username, password)\n        loggedInUser?.validateLogin()\n        // ...\n    }\n\n    fun enrollInCourse(course: Course) {\n        loggedInUser?.let { user ->\n            course.enrollStudent(user)\n            // ...\n        }\n    }\n}\n\nclass InstructorInterface(private val instructor: User) {\n    \n    fun gradeAssignment(assignment: Assignment, student: User, grade: Int) {\n        // Grading logic performed by the instructor\n        // ...\n    }\n}\n\n// Usage example:\nval studentInterface = StudentInterface()\n\n// Student logging in\nstudentInterface.login(\"username\", \"password\")\n\n// Enrolling in a course\nval course = Course(\"Mathematics\", \"Advanced math course\", \"John Doe\")\nstudentInterface.enrollInCourse(course)\n\n// Instructor grading an assignment\nval instructor = User(\"instructor\", \"password\")\nval instructorInterface = InstructorInterface(instructor)\n\nval assignment = Assignment(\"Assignment1\", \"Math assignment\")\nval student = User(\"student\", \"password\")\nval grade = 85\n\ninstructorInterface.gradeAssignment(assignment, student, grade)",
    "filename": "053c4a93d892c319f970c6a6f1335044_1.kt"
  },
  {
    "conversation_hash": "acea5770fc772f715b85d24b55c1f0b5",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyClass {\n  constructor() {\n    // constructor code\n  }\n\n  myMethod() {\n    // method code\n  }\n}",
    "filename": "acea5770fc772f715b85d24b55c1f0b5_5.kt"
  },
  {
    "conversation_hash": "814ed69a208f3d0655f59c95e413874d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "SPEARMINT                                            PEPPERMINT\n  · Milder flavor                                  · Stronger flavor\n  · Pointed, spear-shaped leaves          · Oval-shaped leaves\n  · Light green color                                · Dark green color\n  · Used in culinary dishes                    · Used in culinary dishes and herbal remedies\n  · Typically used for garnishing         · Used in teas, candies, and breath fresheners\n  · Refreshing and cooling                      · Provides a cooling and warming sensation simultaneously",
    "filename": "814ed69a208f3d0655f59c95e413874d_0.kt"
  },
  {
    "conversation_hash": "e1b0422112a32045bd6a6c2bd9bb057c",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.util."
    ],
    "code": "import java.util.*\n\nfun generateRandomString(random: Random, length: Int): String {\n    val validUnicodeRanges = listOf(\n        0x0020..0x007E, // ASCII printable characters\n        0x00A1..0x00FF, // Latin-1 Supplement\n        0x0400..0x04FF, // Cyrillic\n        0x4E00..0x9FBF, // CJK Unified Ideographs\n    )\n\n    val result = StringBuilder(length)\n    val currentIndexes = IntArray(validUnicodeRanges.size) { random.nextInt(validUnicodeRanges[it].last - validUnicodeRanges[it].first) }\n\n    for (i in 0 until length) {\n        val rangeIndex = random.nextInt(validUnicodeRanges.size)\n        val currentIndex = currentIndexes[rangeIndex]\n\n        val currentChar = (validUnicodeRanges[rangeIndex].first + currentIndex).toInt().toChar()\n        result.append(currentChar)\n\n        currentIndexes[rangeIndex] = (currentIndex + 1) % (validUnicodeRanges[rangeIndex].last - validUnicodeRanges[rangeIndex].first)\n    }\n\n    return result.toString()\n}\n\nfun main() {\n    val random = Random()\n    val generatedString = generateRandomString(random, 20)\n    println(generatedString)\n}",
    "filename": "e1b0422112a32045bd6a6c2bd9bb057c_0.kt"
  },
  {
    "conversation_hash": "3cdfd066511fc2a41166a14f4fd2c3a3",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "0    0.1\n1    0.2\n2    0.3\n3    0.4\n4    0.5\n5    0.6\n6    0.7\n7    0.8\n8    0.9\n9    1.0\ndtype: float64",
    "filename": "3cdfd066511fc2a41166a14f4fd2c3a3_7.kt"
  },
  {
    "conversation_hash": "a6124943a44e291656acf8eeb271ba94",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun getRandomPage(nextPagesAndCount: HashMap<String, Long>): String? {\n    // 检查 map 是否为空\n    if (nextPagesAndCount.isEmpty()) {\n        return null\n    }\n\n    // 获取所有访问次数大于 0 的页面名称\n    val popularPages = nextPagesAndCount.filterValues { it > 0 }.keys.toList()\n\n    // 检查 popularPages 是否为空\n    if (popularPages.isEmpty()) {\n        return null\n    }\n\n    // 计算总访问次数\n    val totalVisits = popularPages.sumOf { nextPagesAndCount[it] ?: 0 }\n\n    // 生成一个随机数\n    val randomCount = (0 until totalVisits).random()\n\n    // 根据随机数选择一个页面名称\n    var cumulativeCount = 0\n    for (page in popularPages) {\n        val count = nextPagesAndCount[page] ?: 0\n        if (randomCount < cumulativeCount + count) {\n            return page\n        }\n        cumulativeCount += count\n    }\n\n    return null\n}",
    "filename": "a6124943a44e291656acf8eeb271ba94_0.kt"
  },
  {
    "conversation_hash": "dbd118d49fb0db573789976e51709945",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "0   -0.434783\n1   -0.130435\n2    0.173913\n3    0.478261\n4    0.913043\ndtype: float64",
    "filename": "dbd118d49fb0db573789976e51709945_10.kt"
  },
  {
    "conversation_hash": "93cf8d600a2cae76a64ba15ad036d03d",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.net.Uri",
      "androidx.annotation.NonNull",
      "io.flutter.embedding.engine.plugins.FlutterPlugin",
      "io.flutter.embedding.engine.plugins.activity.ActivityAware",
      "io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding",
      "io.flutter.plugin.common.MethodCall",
      "io.flutter.plugin.common.MethodChannel"
    ],
    "code": "package com.example.my_pdf_viewer_plugin\n\nimport android.content.Intent\nimport android.net.Uri\nimport androidx.annotation.NonNull\nimport io.flutter.embedding.engine.plugins.FlutterPlugin\nimport io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding\nimport io.flutter.embedding.engine.plugins.activity.ActivityAware\nimport io.flutter.plugin.common.MethodCall\nimport io.flutter.plugin.common.MethodChannel\n\nclass MyPdfViewerPlugin : FlutterPlugin, MethodChannel.MethodCallHandler, ActivityAware {\n    private lateinit var channel: MethodChannel\n    private var activityBinding: ActivityPluginBinding? = null\n\n    override fun onAttachedToEngine(@NonNull flutterPluginBinding: FlutterPlugin.FlutterPluginBinding) {\n        channel = MethodChannel(flutterPluginBinding.binaryMessenger, \"my_pdf_viewer_plugin\")\n        channel.setMethodCallHandler(this)\n    }\n\n    override fun onMethodCall(call: MethodCall, result: MethodChannel.Result) {\n        if (call.method == \"loadPdf\") {\n            val pdfPath = call.argument<String>(\"pdfPath\")\n            if (pdfPath != null) {\n                loadPdf(pdfPath)\n                result.success(null)\n            } else {\n                result.error(\"INVALID_ARGUMENT\", \"PDF path cannot be null\", null)\n            }\n        } else {\n            result.notImplemented()\n        }\n    }\n\n    override fun onAttachedToActivity(binding: ActivityPluginBinding) {\n        activityBinding = binding\n    }\n\n    override fun onDetachedFromActivity() {\n        activityBinding = null\n    }\n\n    override fun onDetachedFromEngine(@NonNull binding: FlutterPlugin.FlutterPluginBinding) {\n        channel.setMethodCallHandler(null)\n    }\n\n    private fun loadPdf(pdfPath: String) {\n        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(pdfPath))\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n        activityBinding?.activity?.startActivity(intent)\n    }\n}",
    "filename": "93cf8d600a2cae76a64ba15ad036d03d_1.kt"
  },
  {
    "conversation_hash": "463a108255926bcefe8a7c741e444801",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.material.Button",
      "androidx.compose.material.Text",
      "androidx.compose.runtime.Composable"
    ],
    "code": "import androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\n\n@Composable\nfun MyButton(onClick: () -> Unit) {\n    Button(onClick = onClick) {\n        Text(text = \"Click me!\")\n    }\n}",
    "filename": "463a108255926bcefe8a7c741e444801_2.kt"
  },
  {
    "conversation_hash": "bb52bf3b1a527948f926a64df9ee38c4",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun MyComposable() {\n    var toastMessage by mutableStateOf(\"\")\n    val scaffoldState = rememberScaffoldState()\n    \n    // Rest of the code\n}",
    "filename": "bb52bf3b1a527948f926a64df9ee38c4_11.kt"
  },
  {
    "conversation_hash": "bb52bf3b1a527948f926a64df9ee38c4",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "Button(onClick = {\n    toastMessage = \"Button clicked!\"\n    scaffoldState.snackbarHostState.showSnackbar(toastMessage)\n}) {\n    Text(text = \"Click me!\")\n}",
    "filename": "bb52bf3b1a527948f926a64df9ee38c4_13.kt"
  },
  {
    "conversation_hash": "cabb2b725288d803eddff8eac85fc788",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main(args: Array<String>) {\n    var name: String = \"Hello world!\"\n    val symbol: Char = 'H'\n    name += symbol\n    println(\"Результат $name\")\n}",
    "filename": "cabb2b725288d803eddff8eac85fc788_0.kt"
  },
  {
    "conversation_hash": "70071e2eb584daafc5a69209e075915e",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "jarjar {\n    exclude 'unnecessary/**' // исключение ненужных директорий или файлов из Fat JAR\n\n    rule 'com.myproject.**' 'new.com.myproject.@1'\n    rule 'org.some.**' 'new.org.some.@1'\n    rule 'org.other.**' 'new.org.other.@1'\n}",
    "filename": "70071e2eb584daafc5a69209e075915e_3.kt"
  },
  {
    "conversation_hash": "7a5dd86ae7ca0a486eb4c452c125727f",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun car_2(Arh: Int): Int {\n    val newArh = Arh + 1\n\n    return newArh\n}",
    "filename": "7a5dd86ae7ca0a486eb4c452c125727f_1.kt"
  },
  {
    "conversation_hash": "3b7fc0badb175a7a721b37443299d2bf",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.awt.Robot",
      "java.awt.event.InputEvent"
    ],
    "code": "import java.awt.Robot\nimport java.awt.event.InputEvent\n\nfun main() {\n    val robot = Robot()\n    robot.mouseMove(10, 10) // Перемещаем курсор в координаты (10, 10)\n    robot.mousePress(InputEvent.BUTTON1_DOWN_MASK) // Нажимаем левую кнопку мыши\n    robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK) // Отпускаем левую кнопку мыши\n}",
    "filename": "3b7fc0badb175a7a721b37443299d2bf_0.kt"
  },
  {
    "conversation_hash": "fea88280d6673e4f13a7c2e87e9a2928",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.awt.Robot",
      "java.awt.event.KeyEvent"
    ],
    "code": "import java.awt.Robot\nimport java.awt.event.KeyEvent\n\nfun main() {\n    val robot = Robot()\n    robot.keyPress(KeyEvent.VK_CONTROL)\n    robot.keyPress(KeyEvent.VK_Y)\n    robot.keyRelease(KeyEvent.VK_Y)\n    robot.keyRelease(KeyEvent.VK_CONTROL)\n}",
    "filename": "fea88280d6673e4f13a7c2e87e9a2928_0.kt"
  },
  {
    "conversation_hash": "4452e95cda5c4738a5cd5a39e942f956",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.awt.Robot",
      "java.awt.event.KeyEvent"
    ],
    "code": "import java.awt.Robot\nimport java.awt.event.KeyEvent\n\nfun main() {\n    val robot = Robot()\n    robot.keyPress(KeyEvent.VK_CONTROL)\n    robot.keyPress(KeyEvent.VK_Y)\n    robot.keyRelease(KeyEvent.VK_Y)\n    robot.keyRelease(KeyEvent.VK_CONTROL)\n}",
    "filename": "4452e95cda5c4738a5cd5a39e942f956_0.kt"
  },
  {
    "conversation_hash": "30ad8796397e68caf8b9e5e474c5566d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.os.Bundle",
      "android.widget.Button",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.content.Intent\nimport android.os.Bundle\nimport android.widget.Button\nimport androidx.appcompat.app.AppCompatActivity\n\nclass RegistrationActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_registration)\n\n        val registerButton: Button = findViewById(R.id.register_button)\n        registerButton.setOnClickListener {\n            // Действия при нажатии кнопки регистрации\n            // Например, проверка введенных данных и регистрация пользователя\n\n            // Переход в основной экран после успешной регистрации\n            val intent = Intent(this@RegistrationActivity, MainActivity::class.java)\n            startActivity(intent)\n            finish()\n        }\n    }\n}",
    "filename": "30ad8796397e68caf8b9e5e474c5566d_0.kt"
  },
  {
    "conversation_hash": "5b86ca86d973eb8de33169d3a5c565c8",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "val names = arrayOf(\"Alice\", \"Bob\", \"Charlie\")\n\nval iterator = names.iterator() // получаем итератор\n\nwhile (iterator.hasNext()) {\n    val name = iterator.next() // получаем следующий элемент\n    println(name)\n}",
    "filename": "5b86ca86d973eb8de33169d3a5c565c8_2.kt"
  },
  {
    "conversation_hash": "5b86ca86d973eb8de33169d3a5c565c8",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "val numbers = mutableListOf(1, 2, 3, 4, 5)\n\nval iterator = numbers.iterator()\n\nwhile (iterator.hasNext()) {\n    val number = iterator.next()\n\n    if (number % 2 == 0) {\n        iterator.remove() // удаляем четные числа\n    }\n}",
    "filename": "5b86ca86d973eb8de33169d3a5c565c8_3.kt"
  },
  {
    "conversation_hash": "e64f3226cfe2a9a733b98b3648c916b9",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "syntax = \"proto3\";\n\nmessage Request {\n  string message = 1;\n}\n\nmessage Response {\n  string message = 1;\n}\n\nservice MyService {\n  rpc MyMethod(stream Request) returns (stream Response) {}\n}",
    "filename": "e64f3226cfe2a9a733b98b3648c916b9_0.kt"
  },
  {
    "conversation_hash": "e64f3226cfe2a9a733b98b3648c916b9",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "syntax = \"proto3\";\n\nmessage Request {\n  string message = 1;\n}\n\nmessage Response {\n  string message = 1;\n}\n\nservice MyService {\n  rpc MyMethod(stream Request) returns (stream Response) {}\n}",
    "filename": "e64f3226cfe2a9a733b98b3648c916b9_5.kt"
  },
  {
    "conversation_hash": "3e8408b54a2245b08174d947e1af291f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun Toastsmth(view: View) {\n    val myToast = Toast.makeText(this, \"lets do it twice rat king\", Toast.LENGTH_SHORT)\n    myToast.show()\n    \n    val textView2: TextView = findViewById(R.id.textView2)\n    var cod = 2\n    textView2.text = cod.toString()\n}",
    "filename": "3e8408b54a2245b08174d947e1af291f_0.kt"
  },
  {
    "conversation_hash": "3e8408b54a2245b08174d947e1af291f",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun Toastsmth(view: View) {\n    val myToast = Toast.makeText(view.context, \"lets do it twice rat king\", Toast.LENGTH_SHORT)\n    myToast.show()\n\n    val textView2: TextView = findViewById(R.id.textView2)\n    var cod = 0\n    cod++\n    textView2.text = cod.toString()\n}",
    "filename": "3e8408b54a2245b08174d947e1af291f_1.kt"
  },
  {
    "conversation_hash": "d1898e1e59801a73a5c54b44441278d9",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    var cod:Int = 0\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        \n        cod = 0 // Обновляем значение переменной на 0\n        \n        val textView2:TextView = findViewById(R.id.textView2)\n        textView2.text = cod.toString()\n    }\n\n    fun Toastsmth(view: View) {\n        val myToast = Toast.makeText(this,\"lets do it twice rat king\",Toast.LENGTH_SHORT)\n        myToast.show()\n        cod++\n        val textView2:TextView = findViewById(R.id.textView2)\n        textView2.text = cod.toString()\n    }\n}",
    "filename": "d1898e1e59801a73a5c54b44441278d9_0.kt"
  },
  {
    "conversation_hash": "06810b6d1c0aa720a9be3de5760d29a8",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun loadDataFromNetwork(callback: NetworkCallback) {\n    // Выполнение операции загрузки данных в фоновом потоке\n    // ...\n    // После завершения вызываем обратный вызов (callback) на главном потоке\n    callback.onDataLoaded(result)\n}",
    "filename": "06810b6d1c0aa720a9be3de5760d29a8_3.kt"
  },
  {
    "conversation_hash": "06810b6d1c0aa720a9be3de5760d29a8",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "GlobalScope.launch(Dispatchers.Main) {\n    val result = withContext(Dispatchers.IO) {\n        // Выполнение операции загрузки данных в фоновом потоке\n        // ...\n    }\n    // После завершения выполнения кода в фоновом потоке, продолжаем на главном потоке\n    callback.onDataLoaded(result)\n}",
    "filename": "06810b6d1c0aa720a9be3de5760d29a8_4.kt"
  },
  {
    "conversation_hash": "06810b6d1c0aa720a9be3de5760d29a8",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyTask : AsyncTask<Unit, Unit, Result>() {\n    override fun doInBackground(vararg params: Unit): Result {\n        // Выполнение операции загрузки данных в фоновом потоке\n        // ...\n        return result\n    }\n\n    override fun onPostExecute(result: Result) {\n        // Выполнение действий после завершения задачи в фоновом потоке на главном потоке\n        callback.onDataLoaded(result)\n    }\n}\n\nval task = MyTask()\ntask.execute()",
    "filename": "06810b6d1c0aa720a9be3de5760d29a8_5.kt"
  },
  {
    "conversation_hash": "ff60c6dec09865bb1a122cca92f48f49",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "java.awt.image.BufferedImage",
      "java.io.File",
      "javax.imageio.ImageIO",
      "org.apache.pdfbox.pdmodel.PDDocument",
      "org.apache.pdfbox.rendering.PDFRenderer"
    ],
    "code": "import org.apache.pdfbox.pdmodel.PDDocument\nimport org.apache.pdfbox.rendering.PDFRenderer\nimport java.awt.image.BufferedImage\nimport java.io.File\nimport javax.imageio.ImageIO\n\nfun convertPdfToImage(pdfPath: String, imagePath: String) {\n    val document = PDDocument.load(File(pdfPath))\n    val pdfRenderer = PDFRenderer(document)\n    \n    val firstPage = document.getPage(0)\n    val image = pdfRenderer.renderImageWithDPI(0, 300f)\n    \n    ImageIO.write(image, \"png\", File(imagePath))\n    \n    document.close()\n}\n\nfun main() {\n    val pdfPath = \"path/to/input.pdf\"\n    val imagePath = \"path/to/output.png\"\n    \n    convertPdfToImage(pdfPath, imagePath)\n}",
    "filename": "ff60c6dec09865bb1a122cca92f48f49_2.kt"
  },
  {
    "conversation_hash": "ff60c6dec09865bb1a122cca92f48f49",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "java.awt.image.BufferedImage",
      "java.io.File",
      "javax.imageio.ImageIO",
      "org.apache.pdfbox.pdmodel.PDDocument",
      "org.apache.pdfbox.rendering.PDFRenderer"
    ],
    "code": "import org.apache.pdfbox.pdmodel.PDDocument\nimport org.apache.pdfbox.rendering.PDFRenderer\nimport java.awt.image.BufferedImage\nimport java.io.File\nimport javax.imageio.ImageIO\n\nfun convertPdfToImage(pdfPath: String, imagePath: String) {\n    val document = PDDocument.load(File(pdfPath))\n    val pdfRenderer = PDFRenderer(document)\n    \n    val firstPage = document.getPage(0)\n    val image = pdfRenderer.renderImageWithDPI(0, 300f)\n    \n    ImageIO.write(image, \"png\", File(imagePath))\n    \n    document.close()\n}\n\nfun main() {\n    val pdfPath = \"path/to/input.pdf\"\n    val imagePath = \"path/to/output.png\"\n    \n    convertPdfToImage(pdfPath, imagePath)\n}",
    "filename": "ff60c6dec09865bb1a122cca92f48f49_3.kt"
  },
  {
    "conversation_hash": "ff60c6dec09865bb1a122cca92f48f49",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "java.awt.image.BufferedImage",
      "java.io.File",
      "java.io.InputStream",
      "java.net.URL",
      "javax.imageio.ImageIO",
      "org.apache.pdfbox.pdmodel.PDDocument",
      "org.apache.pdfbox.rendering.PDFRenderer"
    ],
    "code": "import org.apache.pdfbox.pdmodel.PDDocument\nimport org.apache.pdfbox.rendering.PDFRenderer\nimport java.awt.image.BufferedImage\nimport java.io.File\nimport java.io.InputStream\nimport java.net.URL\nimport javax.imageio.ImageIO\n\nfun convertPdfToImage(pdfUrl: String, imagePath: String) {\n    val url = URL(pdfUrl)\n    val inputStream: InputStream = url.openStream()\n    val document = PDDocument.load(inputStream)\n    val pdfRenderer = PDFRenderer(document)\n\n    val firstPage = document.getPage(0)\n    val image = pdfRenderer.renderImageWithDPI(0, 300f)\n\n    ImageIO.write(image, \"png\", File(imagePath))\n\n    document.close()\n}\n\nfun main() {\n    val pdfUrl = \"https://example.com/remote-pdf.pdf\"\n    val imagePath = \"path/to/output.png\"\n\n    convertPdfToImage(pdfUrl, imagePath)\n}",
    "filename": "ff60c6dec09865bb1a122cca92f48f49_4.kt"
  },
  {
    "conversation_hash": "5c0f430643f1222c5ed11c8ccebb5645",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyAdapter(private val items: List<String>) : RecyclerView.Adapter<MyAdapter.ViewHolder>() {\n\n    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val textView: TextView = itemView.findViewById(R.id.item_text_view)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_layout, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = items[position]\n        holder.textView.text = item\n    }\n\n    override fun getItemCount(): Int {\n        return items.size\n    }\n}",
    "filename": "5c0f430643f1222c5ed11c8ccebb5645_0.kt"
  },
  {
    "conversation_hash": "f6c6f2f285a511a1e3dc7fac5903eb85",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyClass {\n    companion object {\n        fun myStaticMethod() {\n            println(\"This is a static method\")\n        }\n        \n        val myStaticProperty: Int = 42\n    }\n}\n\nfun main() {\n    MyClass.myStaticMethod() // Вызов статического метода\n    println(MyClass.myStaticProperty) // Обращение к статическому свойству\n}",
    "filename": "f6c6f2f285a511a1e3dc7fac5903eb85_0.kt"
  },
  {
    "conversation_hash": "03d9b6b648f6efb2a51a94c1bafbb4df",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Module\nclass ApplicationModule {\n\n    @Provides\n    fun provideSomeDependency(): SomeDependency {\n        return SomeDependency()\n    }\n}",
    "filename": "03d9b6b648f6efb2a51a94c1bafbb4df_11.kt"
  },
  {
    "conversation_hash": "03d9b6b648f6efb2a51a94c1bafbb4df",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Path(\"/example\")\nclass Endpoint {\n\n    @Inject\n    lateinit var someDependency: SomeDependency\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    fun getExample(): Response {\n        // Use the injected dependencies\n        val result = someDependency.someMethod()\n\n        return Response.ok(result).build()\n    }\n}",
    "filename": "03d9b6b648f6efb2a51a94c1bafbb4df_13.kt"
  },
  {
    "conversation_hash": "03d9b6b648f6efb2a51a94c1bafbb4df",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val applicationComponent = DaggerApplicationComponent.create()\n    applicationComponent.inject(Endpoint())\n\n    val configurer = Configurer {\n        endpoints {\n            endpoint<Endpoint>()\n        }\n    }\n\n    HillaServer(configurer).start()\n}",
    "filename": "03d9b6b648f6efb2a51a94c1bafbb4df_14.kt"
  },
  {
    "conversation_hash": "a83c348a9e4c1dd8fe0cec8a17a5b1fc",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.lang.management.ManagementFactory",
      "java.text.DecimalFormat"
    ],
    "code": "import java.lang.management.ManagementFactory\nimport java.text.DecimalFormat\n\nfun main() {\n    val decimalFormat = DecimalFormat(\"#.##\")\n\n    val operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean()\n\n    if (operatingSystemMXBean is com.sun.management.OperatingSystemMXBean) {\n        while (true) {\n            val systemCpuLoad = operatingSystemMXBean.systemCpuLoad\n\n            // Chuyển đổi phần trăm thành định dạng hai chữ số sau dấu thập phân\n            val formattedCpuLoad = decimalFormat.format(systemCpuLoad * 100)\n\n            println(\"Phần trăm CPU tiêu thụ: $formattedCpuLoad%\")\n\n            // Thời gian mili giây từ khi hệ thống được khởi động\n            val uptimeInMillis = ManagementFactory.getRuntimeMXBean().uptime\n\n            // Chuyển đổi thời gian thành định dạng giờ:phút:giây\n            val formattedUptime = String.format(\n                \"%02d:%02d:%02d\",\n                uptimeInMillis / 3600000,\n                uptimeInMillis % 3600000 / 60000,\n                uptimeInMillis % 60000 / 1000\n            )\n\n            println(\"Thời gian thực: $formattedUptime\")\n\n            // Delay một giây trước khi hiển thị lại thông tin\n            Thread.sleep(1000)\n        }\n    } else {\n        println(\"Không thể truy xuất thông tin CPU tiêu thụ cho hệ thống này.\")\n    }\n}",
    "filename": "a83c348a9e4c1dd8fe0cec8a17a5b1fc_0.kt"
  },
  {
    "conversation_hash": "c5becd8f07497fb775dca74f835ca27a",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun checkAuthorized(\n    context: Context,\n    auth: FirebaseAuth,\n    email: MutableState<String>,\n    password: MutableState<String>,\n    navController: NavHostController,\n) {\n    if (email.value.isNotEmpty() && password.value.isNotEmpty()) {\n        auth.signInWithEmailAndPassword(email.value, password.value)\n            .addOnCompleteListener { task ->\n                if (task.isSuccessful) {\n                    // Обновить значение пользователя\n                    val user = auth.currentUser\n                    val updatedUser = user?.apply {\n                        // Обновить необходимые поля пользователя\n                        // Например:\n                        displayName = \"Новое имя пользователя\"\n                    }\n\n                    auth.updateCurrentUser(updatedUser)\n                        .addOnCompleteListener { updateTask ->\n                            if (updateTask.isSuccessful) {\n                                // Пользователь успешно обновлен\n                                navController.navigate(HOME_SCREEN) {\n                                    popUpTo(navController.graph.id) { inclusive = true }\n                                }\n                            } else {\n                                // Ошибка обновления пользователя\n                                Toast.makeText(\n                                    context,\n                                    R.string.user_update_error,\n                                    Toast.LENGTH_SHORT\n                                ).show()\n                            }\n                        }\n                } else {\n                    // Ошибка авторизации\n                    Toast.makeText(\n                        context,\n                        R.string.check_email_and_password,\n                        Toast.LENGTH_SHORT\n                    ).show()\n                }\n            }\n    } else {\n        Toast.makeText(\n            context, R.string.enter_email_and_password, Toast.LENGTH_SHORT\n        ).show()\n    }\n}",
    "filename": "c5becd8f07497fb775dca74f835ca27a_0.kt"
  },
  {
    "conversation_hash": "e35ce0be9eb02a60a469331a166b7e55",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun checkAuthorized(\n    context: Context,\n    auth: FirebaseAuth,\n    email: MutableState<String>,\n    password: MutableState<String>,\n    navController: NavHostController,\n) {\n    if (email.value.isNotEmpty() && password.value.isNotEmpty()) {\n        auth.signInWithEmailAndPassword(email.value, password.value)\n            .addOnCompleteListener { task ->\n                if (task.isSuccessful) {\n                    // Обновление значения пользователя\n                    FirebaseAuth.getInstance().currentUser?.let { user ->\n                        user.updateEmail(email.value)\n                            .addOnCompleteListener { updateEmailTask ->\n                                if (updateEmailTask.isSuccessful) {\n                                    Toast.makeText(\n                                        context,\n                                        R.string.email_updated,\n                                        Toast.LENGTH_SHORT\n                                    ).show()\n                                } else {\n                                    Toast.makeText(\n                                        context,\n                                        R.string.email_update_failed,\n                                        Toast.LENGTH_SHORT\n                                    ).show()\n                                }\n                            }\n                    }\n                    navController.navigate(HOME_SCREEN) {\n                        popUpTo(navController.graph.id) { inclusive = true }\n                    }\n                } else {\n                    Toast.makeText(\n                        context,\n                        R.string.check_email_and_password,\n                        Toast.LENGTH_SHORT\n                    ).show()\n                }\n            }\n    } else {\n        Toast.makeText(\n            context, R.string.enter_email_and_password, Toast.LENGTH_SHORT\n        ).show()\n    }\n}",
    "filename": "e35ce0be9eb02a60a469331a166b7e55_0.kt"
  },
  {
    "conversation_hash": "f47bf8f316f59d3d0721f06ea59cdab2",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "LaunchedEffect(Unit) {\n    val result = fetchData() // Replace with your async operation\n    \n    // Update state only if the result is not null\n    if (result != null) {\n        resultState.value = result\n    }\n}",
    "filename": "f47bf8f316f59d3d0721f06ea59cdab2_1.kt"
  },
  {
    "conversation_hash": "0e2d4c2b023145aa21a16f866f57b772",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface ApiService {\n    @GET(\"your_endpoint\")\n    @Headers(\"header1: value1\", \"header2: value2\")\n    suspend fun getHeaders(): Response<CustomHeaders>\n}",
    "filename": "0e2d4c2b023145aa21a16f866f57b772_1.kt"
  },
  {
    "conversation_hash": "942bb9492645e4061a6c2125ef562164",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "0     2.718282\n1     7.389056\n2    20.085537\n3    54.598150\n4   148.413159\ndtype: float64",
    "filename": "942bb9492645e4061a6c2125ef562164_3.kt"
  },
  {
    "conversation_hash": "42494b1dce2179904ec68f909b75ee04",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "android.hardware.Sensor",
      "android.hardware.SensorEvent",
      "android.hardware.SensorEventListener",
      "android.hardware.SensorManager"
    ],
    "code": "import android.content.Context\nimport android.hardware.Sensor\nimport android.hardware.SensorEvent\nimport android.hardware.SensorEventListener\nimport android.hardware.SensorManager\n\nclass AccelerometerSensor(context: Context) {\n    private val sensorManager: SensorManager = context.getSystemService(Context.SENSOR_SERVICE) as SensorManager\n    private val accelerometerSensor: Sensor? = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)\n    private var listener: SensorEventListener? = null\n\n    fun startListening(listener: (FloatArray) -> Unit) {\n        this.listener = object : SensorEventListener {\n            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {}\n\n            override fun onSensorChanged(event: SensorEvent?) {\n                event?.let {\n                    if (event.sensor.type == Sensor.TYPE_ACCELEROMETER) {\n                        listener.invoke(event.values)\n                    }\n                }\n            }\n        }\n\n        accelerometerSensor?.let { sensor ->\n            sensorManager.registerListener(listener, sensor, SensorManager.SENSOR_DELAY_NORMAL)\n        }\n    }\n\n    fun stopListening() {\n        listener?.let { sensorManager.unregisterListener(it) }\n        listener = null\n    }\n}",
    "filename": "42494b1dce2179904ec68f909b75ee04_2.kt"
  },
  {
    "conversation_hash": "42494b1dce2179904ec68f909b75ee04",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private lateinit var accelerometerSensor: AccelerometerSensor\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        accelerometerSensor = AccelerometerSensor(this)\n    }\n\n    override fun onResume() {\n        super.onResume()\n\n        accelerometerSensor.startListening { values ->\n            // 处理传感器的值\n            Log.d(\"Accelerometer\", \"X: ${values[0]}, Y: ${values[1]}, Z: ${values[2]}\")\n        }\n    }\n\n    override fun onPause() {\n        super.onPause()\n\n        accelerometerSensor.stopListening()\n    }\n}",
    "filename": "42494b1dce2179904ec68f909b75ee04_3.kt"
  },
  {
    "conversation_hash": "c7f9cab484e2f4233dd3dcaa44efef3d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun TextWithButton() {\n    Column {\n        Text(\"Hello, Jetpack Compose!\")\n        Button(onClick = { /* button click logic */ }) {\n            Text(\"Click me\")\n        }\n    }\n}",
    "filename": "c7f9cab484e2f4233dd3dcaa44efef3d_0.kt"
  },
  {
    "conversation_hash": "c7f9cab484e2f4233dd3dcaa44efef3d",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun TextWithButton() {\n    val context = LocalContext.current\n\n    Column {\n        Text(\"Hello, Jetpack Compose!\")\n        Button(onClick = {\n            LaunchedEffect(Unit) {\n                suspendFunction(context)\n            }\n        }) {\n            Text(\"Click me\")\n        }\n    }\n}\n\nsuspend fun suspendFunction(context: Context) {\n    // Perform async operations\n    // ...\n}",
    "filename": "c7f9cab484e2f4233dd3dcaa44efef3d_1.kt"
  },
  {
    "conversation_hash": "3527bf2dc94b693c5198c088725433a9",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class HomeFragment : Fragment() {\n\n    companion object {\n        fun newInstance(): HomeFragment {\n            return HomeFragment()\n        }\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_home, container, false)\n    }\n\n\n}",
    "filename": "3527bf2dc94b693c5198c088725433a9_0.kt"
  },
  {
    "conversation_hash": "d41dc7e7fde8009a92f46b91559be79f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun replaceFragment(fragment: Fragment) {\n    supportFragmentManager.beginTransaction()\n        .replace(R.id.container, fragment)\n        .commit()\n}",
    "filename": "d41dc7e7fde8009a92f46b91559be79f_0.kt"
  },
  {
    "conversation_hash": "d41dc7e7fde8009a92f46b91559be79f",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    // Создаем экземпляр фрагмента, который хотим отобразить\n    val fragment = YourFragment()\n\n    // Вызываем функцию для замены содержимого контейнера на фрагмент\n    replaceFragment(fragment)\n}",
    "filename": "d41dc7e7fde8009a92f46b91559be79f_1.kt"
  },
  {
    "conversation_hash": "1869b77fc3732375f8af9140479be121",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val str: String? = \"Пример строки\"\n     \n     str?.let {\n         val length = it.length\n         println(length) // Блок кода выполняется только, если str не равно null\n     }",
    "filename": "1869b77fc3732375f8af9140479be121_1.kt"
  },
  {
    "conversation_hash": "2081a929b19ec3d8e2bffe6c4590ea35",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity",
      "com.google.android.material.bottomnavigation.BottomNavigationView"
    ],
    "code": "import android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport com.google.android.material.bottomnavigation.BottomNavigationView\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var bottomNavigationView: BottomNavigationView\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        bottomNavigationView = findViewById(R.id.bottom_navigation)\n\n        // Установка слушателя для элементов нижнего меню\n        bottomNavigationView.setOnNavigationItemSelectedListener { menuItem ->\n            when (menuItem.itemId) {\n                R.id.menu_item1 -> {\n                    // Обработка нажатия на первый элемент меню\n                    true\n                }\n                R.id.menu_item2 -> {\n                    // Обработка нажатия на второй элемент меню\n                    true\n                }\n                R.id.menu_item3 -> {\n                    // Обработка нажатия на третий элемент меню\n                    true\n                }\n                else -> false\n            }\n        }\n    }\n}",
    "filename": "2081a929b19ec3d8e2bffe6c4590ea35_0.kt"
  },
  {
    "conversation_hash": "31a2223027cefeb36c76dd5fc3f72f49",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "android.Manifest",
      "android.content.pm.PackageManager",
      "android.hardware.camera2.CameraAccessException",
      "android.hardware.camera2.CameraManager",
      "android.os.Bundle",
      "android.os.Handler",
      "android.view.View",
      "android.widget.Button",
      "android.widget.EditText",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.core.app.ActivityCompat",
      "androidx.core.content.ContextCompat"
    ],
    "code": "import android.Manifest\nimport android.content.pm.PackageManager\nimport android.hardware.camera2.CameraAccessException\nimport android.hardware.camera2.CameraManager\nimport android.os.Bundle\nimport android.os.Handler\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var timeEditText: EditText\n    private lateinit var digitEditText: EditText\n    private lateinit var startButton: Button\n\n    private val handler = Handler()\n    private var currentIndex = 0\n    private var binaryDigits = \"\"\n\n    private var cameraManager: CameraManager? = null\n    private var cameraID: String? = null\n    private var isFlashOn = false\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        timeEditText = findViewById(R.id.timeEditText)\n        digitEditText = findViewById(R.id.digitEditText)\n        startButton = findViewById(R.id.startButton)\n\n        cameraManager = getSystemService(CAMERA_SERVICE) as CameraManager?\n\n        // Проверяем и запрашиваем разрешение камеры, если требуется\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)\n                != PackageManager.PERMISSION_GRANTED) {\n            ActivityCompat.requestPermissions(this,\n                    arrayOf(Manifest.permission.CAMERA), CAMERA_PERMISSION_CODE)\n        }\n\n        startButton.setOnClickListener {\n            val timeStr = timeEditText.text.toString()\n            val digitStr = digitEditText.text.toString()\n\n            if (timeStr.isNotEmpty() && digitStr.isNotEmpty()) {\n                val time = timeStr.toLong()\n                binaryDigits = digitStr\n                currentIndex = 0\n\n                startAnimation(time)\n            }\n        }\n    }\n\n    private fun startAnimation(time: Long) {\n        if (currentIndex >= binaryDigits.length) {\n            return\n        }\n\n        val currentDigit = binaryDigits[currentIndex]\n        toggleFlashLight(currentDigit == '1')\n\n        handler.postDelayed({\n            currentIndex++\n            startAnimation(time)\n        }, time)\n    }\n\n    private fun toggleFlashLight(isOn: Boolean) {\n        try {\n            if (isOn) {\n                if (!isFlashOn) {\n                    if (cameraID == null) {\n                        val cameraIds = cameraManager?.cameraIdList\n                        if (cameraIds != null) {\n                            for (id in cameraIds) {\n                                val characteristics = cameraManager?.getCameraCharacteristics(id)\n                                val flashAvailable = characteristics?.get(CameraManager.FLASH_INFO_AVAILABLE)\n                                val lensFacing = characteristics?.get(CameraManager.LENS_FACING)\n\n                                if (flashAvailable == true && lensFacing == CameraCharacteristics.LENS_FACING_BACK) {\n                                    cameraID = id\n                                    break\n                                }\n                            }\n                        }\n                    }\n\n                    cameraManager?.setTorchMode(cameraID!!, true)\n                    isFlashOn = true\n                }\n            } else {\n                if (isFlashOn) {\n                    cameraManager?.setTorchMode(cameraID!!, false)\n                    isFlashOn = false\n                }\n            }\n        } catch (e: CameraAccessException) {\n            e.printStackTrace()\n        }\n    }\n\n    companion object {\n        private const val CAMERA_PERMISSION_CODE = 123\n    }\n}",
    "filename": "31a2223027cefeb36c76dd5fc3f72f49_4.kt"
  },
  {
    "conversation_hash": "80b9edcb77bcf272f7121d2aaf6a8e55",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.os.Handler",
      "android.widget.Button",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.os.Bundle\nimport android.os.Handler\nimport android.widget.Button\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var button: Button\n    private val handler = Handler()\n    private var counter = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        button = findViewById(R.id.button)\n\n        button.setOnClickListener {\n            counter = 0\n            scheduleBeep()\n        }\n    }\n\n    private fun scheduleBeep() {\n        if (counter < 3) {\n            handler.postDelayed({\n                beep()\n                counter++\n            }, 1000)\n        }\n    }\n\n    private fun beep() {\n        // Здесь добавьте код для звука пика\n    }\n}",
    "filename": "80b9edcb77bcf272f7121d2aaf6a8e55_0.kt"
  },
  {
    "conversation_hash": "6dfad6ca564a640cfad52ea7dddaa0e5",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class SliderAdapter(private val images: List<Int>) : RecyclerView.Adapter<SliderAdapter.SliderViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SliderViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_slider, parent, false)\n        return SliderViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: SliderViewHolder, position: Int) {\n        val imageRes = images[position]\n        holder.imageView.setImageResource(imageRes)\n    }\n\n    override fun getItemCount(): Int {\n        return images.size\n    }\n\n    inner class SliderViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val imageView: ImageView = itemView.findViewById(R.id.sliderImage)\n    }\n}",
    "filename": "6dfad6ca564a640cfad52ea7dddaa0e5_2.kt"
  },
  {
    "conversation_hash": "6dfad6ca564a640cfad52ea7dddaa0e5",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var sliderAdapter: SliderAdapter\n\n    private val images = listOf(R.drawable.image1, R.drawable.image2, R.drawable.image3) // Замените на свои изображения\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        recyclerView = findViewById(R.id.sliderRecyclerView)\n        recyclerView.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\n\n        sliderAdapter = SliderAdapter(images)\n        recyclerView.adapter = sliderAdapter\n\n        val snapHelper = PagerSnapHelper()\n        snapHelper.attachToRecyclerView(recyclerView)\n    }\n}",
    "filename": "6dfad6ca564a640cfad52ea7dddaa0e5_3.kt"
  },
  {
    "conversation_hash": "6dfad6ca564a640cfad52ea7dddaa0e5",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class SliderFragment : Fragment() {\n\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var sliderAdapter: SliderAdapter\n\n    private val images = listOf(R.drawable.image1, R.drawable.image2, R.drawable.image3) // Замените на свои изображения\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        val view = inflater.inflate(R.layout.fragment_slider, container, false)\n\n        recyclerView = view.findViewById(R.id.sliderRecyclerView)\n        recyclerView.layoutManager = LinearLayoutManager(activity, LinearLayoutManager.HORIZONTAL, false)\n\n        sliderAdapter = SliderAdapter(images)\n        recyclerView.adapter = sliderAdapter\n\n        val snapHelper = PagerSnapHelper()\n        snapHelper.attachToRecyclerView(recyclerView)\n\n        return view\n    }\n}",
    "filename": "6dfad6ca564a640cfad52ea7dddaa0e5_4.kt"
  },
  {
    "conversation_hash": "bfebb2dc48592d77597ef8c3f98bde6f",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class SliderAdapter(private val itemList: List<SlideItem>) :\n    RecyclerView.Adapter<SliderAdapter.ViewHolder>() {\n\n    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val title: TextView = itemView.findViewById(R.id.titleTextView)\n        val description: TextView = itemView.findViewById(R.id.descriptionTextView)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context)\n            .inflate(R.layout.slide_item, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = itemList[position]\n        holder.title.text = item.title\n        holder.description.text = item.description\n    }\n\n    override fun getItemCount(): Int {\n        return itemList.size\n    }\n}",
    "filename": "bfebb2dc48592d77597ef8c3f98bde6f_2.kt"
  },
  {
    "conversation_hash": "bfebb2dc48592d77597ef8c3f98bde6f",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n\n    val sliderRecyclerView: RecyclerView = view.findViewById(R.id.sliderRecyclerView)\n    sliderRecyclerView.layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\n\n    val slideItems = listOf(\n        SlideItem(\"Slide 1\", \"Description 1\"),\n        SlideItem(\"Slide 2\", \"Description 2\"),\n        SlideItem(\"Slide 3\", \"Description 3\")\n    )\n    val sliderAdapter = SliderAdapter(slideItems)\n    sliderRecyclerView.adapter = sliderAdapter\n}",
    "filename": "bfebb2dc48592d77597ef8c3f98bde6f_4.kt"
  },
  {
    "conversation_hash": "bfebb2dc48592d77597ef8c3f98bde6f",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class SliderFragment : Fragment() {\n\n    data class SlideItem(val title: String, val description: String)\n\n    private lateinit var sliderRecyclerView: RecyclerView\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_slider, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        sliderRecyclerView = view.findViewById(R.id.sliderRecyclerView)\n        sliderRecyclerView.layoutManager =\n            LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\n\n        val slideItems = listOf(\n            SlideItem(\"Slide 1\", \"Description 1\"),\n            SlideItem(\"Slide 2\", \"Description 2\"),\n            SlideItem(\"Slide 3\", \"Description 3\")\n        )\n        val sliderAdapter = SliderAdapter(slideItems)\n        sliderRecyclerView.adapter = sliderAdapter\n    }\n\n    class SliderAdapter(private val itemList: List<SlideItem>) :\n        RecyclerView.Adapter<SliderAdapter.ViewHolder>() {\n\n        inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n            val title: TextView = itemView.findViewById(R.id.titleTextView)\n            val description: TextView = itemView.findViewById(R.id.descriptionTextView)\n        }\n\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n            val view = LayoutInflater.from(parent.context)\n                .inflate(R.layout.slide_item, parent, false)\n            return ViewHolder(view)\n        }\n\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n            val item = itemList[position]\n            holder.title.text = item.title\n            holder.description.text = item.description\n        }\n\n        override fun getItemCount(): Int {\n            return itemList.size\n        }\n    }\n\n}",
    "filename": "bfebb2dc48592d77597ef8c3f98bde6f_6.kt"
  },
  {
    "conversation_hash": "bfebb2dc48592d77597ef8c3f98bde6f",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n\n    sliderRecyclerView = view.findViewById(R.id.sliderRecyclerView)\n    sliderRecyclerView.layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\n  \n    // Добавьте следующий код:\n    val snapHelper = LinearSnapHelper()\n    snapHelper.attachToRecyclerView(sliderRecyclerView)\n\n    val slideItems = listOf(\n        SlideItem(\"Slide 1\", \"Description 1\"),\n        SlideItem(\"Slide 2\", \"Description 2\"),\n        SlideItem(\"Slide 3\", \"Description 3\")\n    )\n    val sliderAdapter = SliderAdapter(slideItems)\n    sliderRecyclerView.adapter = sliderAdapter\n}",
    "filename": "bfebb2dc48592d77597ef8c3f98bde6f_7.kt"
  },
  {
    "conversation_hash": "bfebb2dc48592d77597ef8c3f98bde6f",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    // ...   \n    sliderRecyclerView.apply {\n        layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\n        adapter = sliderAdapter\n        addOnScrollListener(object : RecyclerView.OnScrollListener() {\n            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\n                super.onScrolled(recyclerView, dx, dy)\n                \n                val layoutManager = recyclerView.layoutManager as LinearLayoutManager\n                val currentPosition = layoutManager.findFirstVisibleItemPosition()\n                if (dx > 0 && layoutManager.findLastCompletelyVisibleItemPosition() == currentPosition + 1) {\n                    recyclerView.smoothScrollBy(dx, 0)\n                } else if (dx < 0 && layoutManager.findFirstCompletelyVisibleItemPosition() == currentPosition - 1) {\n                    recyclerView.smoothScrollBy(dx, 0)\n                }\n            }\n        })\n    }\n    // ...\n}",
    "filename": "bfebb2dc48592d77597ef8c3f98bde6f_9.kt"
  },
  {
    "conversation_hash": "bfebb2dc48592d77597ef8c3f98bde6f",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    // ...   \n    sliderRecyclerView.apply {\n        layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\n        adapter = sliderAdapter\n        addOnScrollListener(object : RecyclerView.OnScrollListener() {\n            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\n                super.onScrollStateChanged(recyclerView, newState)\n                \n                if (newState == RecyclerView.SCROLL_STATE_IDLE) {\n                    val layoutManager = recyclerView.layoutManager as LinearLayoutManager\n                    val snapPosition = layoutManager.findFirstVisibleItemPosition()\n                    val snapView = layoutManager.findViewByPosition(snapPosition)\n                    val snapDistance = snapView?.left ?: 0\n                    recyclerView.smoothScrollBy(snapDistance, 0)\n                }\n            }\n        })\n    }\n    // ...\n}",
    "filename": "bfebb2dc48592d77597ef8c3f98bde6f_10.kt"
  },
  {
    "conversation_hash": "bfebb2dc48592d77597ef8c3f98bde6f",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [
      "com.github.rubensousa.gravitysnaphelper.GravitySnapHelper"
    ],
    "code": "import com.github.rubensousa.gravitysnaphelper.GravitySnapHelper\n\n...\n\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    // ...\n\n    val snapHelper = GravitySnapHelper(Gravity.START)\n    snapHelper.attachToRecyclerView(sliderRecyclerView)\n    \n    // ...\n}",
    "filename": "bfebb2dc48592d77597ef8c3f98bde6f_12.kt"
  },
  {
    "conversation_hash": "bfebb2dc48592d77597ef8c3f98bde6f",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "class SliderFragment : Fragment() {\n\n    // ... (остальной код)\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        \n        // ...\n\n        val snapHelper = object : LinearSnapHelper() {\n            override fun findTargetSnapPosition(layoutManager: RecyclerView.LayoutManager, velocityX: Int, velocityY: Int): Int {\n                val centerView = findSnapView(layoutManager) ?: return RecyclerView.NO_POSITION\n                val position = layoutManager.getPosition(centerView)\n\n                return if (velocityX > 0) {\n                    if (position < layoutManager.itemCount - 1) {\n                        position + 1\n                    } else {\n                        RecyclerView.NO_POSITION\n                    }\n                } else {\n                    if (position > 0) {\n                        position - 1\n                    } else {\n                        RecyclerView.NO_POSITION\n                    }\n                }\n            }\n        }\n\n        snapHelper.attachToRecyclerView(sliderRecyclerView)\n\n        // ...\n    }\n\n    // ...\n}",
    "filename": "bfebb2dc48592d77597ef8c3f98bde6f_13.kt"
  },
  {
    "conversation_hash": "5700bcc54842f3ba6e15889ebd454316",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    val title: TextView = itemView.findViewById(R.id.titleTextView)\n    val description: TextView = itemView.findViewById(R.id.descriptionTextView)\n    val image: ImageView = itemView.findViewById(R.id.imageView)\n}",
    "filename": "5700bcc54842f3ba6e15889ebd454316_1.kt"
  },
  {
    "conversation_hash": "5700bcc54842f3ba6e15889ebd454316",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n    val item = itemList[position]\n    holder.title.text = item.title\n    holder.description.text = item.description\n    holder.image.setImageResource(item.image)\n}",
    "filename": "5700bcc54842f3ba6e15889ebd454316_3.kt"
  },
  {
    "conversation_hash": "5700bcc54842f3ba6e15889ebd454316",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "scrollRunnable = Runnable {\n    val layoutManager = sliderRecyclerView.layoutManager as LinearLayoutManager\n    val currentPosition = layoutManager.findFirstVisibleItemPosition()\n    val nextPosition = if (currentPosition < sliderAdapter.itemCount - 1) currentPosition + 1 else 0\n\n    sliderRecyclerView.smoothScrollToPosition(nextPosition)\n    scrollHandler.postDelayed(scrollRunnable, AUTO_SCROLL_DELAY)\n}\n\nscrollHandler.postDelayed(scrollRunnable, AUTO_SCROLL_DELAY)",
    "filename": "5700bcc54842f3ba6e15889ebd454316_6.kt"
  },
  {
    "conversation_hash": "5700bcc54842f3ba6e15889ebd454316",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "sliderRecyclerView.addOnScrollListener(object : RecyclerView.OnScrollListener() {\n    override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\n        super.onScrolled(recyclerView, dx, dy)\n        \n        // Проверка, была ли прокрутка инициирована пользователем\n        if (dx != 0 || dy != 0) {\n            isUserScrolling = true\n            lastScrollTime = System.currentTimeMillis()\n\n            // Очистка ожидающего обновления таймера\n            scrollHandler.removeCallbacks(scrollRunnable)\n        }\n    }\n\n    override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {\n        super.onScrollStateChanged(recyclerView, newState)\n        \n        // Проверка, закончилось ли прокрутка, и пользователь больше не скроллит\n        if (newState == RecyclerView.SCROLL_STATE_IDLE && isUserScrolling) {\n            isUserScrolling = false\n            \n            // Рассчитываем оставшуюся задержку для авто-прокрутки\n            val remainingDelay = AUTO_SCROLL_DELAY - (System.currentTimeMillis() - lastScrollTime)\n            \n            // Запуск авто-прокрутки с оставшейся задержкой\n            scrollHandler.postDelayed(scrollRunnable, remainingDelay)\n        }\n    }\n})",
    "filename": "5700bcc54842f3ba6e15889ebd454316_9.kt"
  },
  {
    "conversation_hash": "db50ca51e9d015b37106626552ecc20f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "inline fun calculateSum(a: Int, b: Int): Int {\n    return a + b\n}\n\nfun main() {\n    val result = calculateSum(5, 10)\n    println(\"Результат: $result\")\n}",
    "filename": "db50ca51e9d015b37106626552ecc20f_0.kt"
  },
  {
    "conversation_hash": "db50ca51e9d015b37106626552ecc20f",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "inline fun doOperation(a: Int, b: Int, crossinline operation: (Int, Int) -> Int): Int {\n    return operation(a, b)\n}\n\nfun main() {\n    val result = doOperation(5, 10) { x, y -> x + y }\n    println(\"Результат: $result\")\n}",
    "filename": "db50ca51e9d015b37106626552ecc20f_1.kt"
  },
  {
    "conversation_hash": "db50ca51e9d015b37106626552ecc20f",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "inline fun <reified T> printList(list: List<T>, printFunction: (T) -> Unit) {\n    for (item in list) {\n        printFunction(item)\n    }\n}\n\nfun main() {\n    val list = listOf(\"Привет\", \"Мир\", \"Kotlin\")\n    printList(list) { println(it) }\n}",
    "filename": "db50ca51e9d015b37106626552ecc20f_2.kt"
  },
  {
    "conversation_hash": "db50ca51e9d015b37106626552ecc20f",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "inline fun filterEvenNumbers(numbers: List<Int>, predicate: (Int) -> Boolean): List<Int> {\n    return numbers.filter(predicate)\n}\n\nfun main() {\n    val numbers = listOf(1, 2, 3, 4, 5, 6)\n    val evenNumbers = filterEvenNumbers(numbers) { it % 2 == 0 }\n    println(\"Чётные числа: $evenNumbers\")\n}",
    "filename": "db50ca51e9d015b37106626552ecc20f_3.kt"
  },
  {
    "conversation_hash": "7e2f5b70f96dccd349bad75791749092",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "androidx.recyclerview.widget.RecyclerView",
      "kotlinx.android.synthetic.main.item_layout.view."
    ],
    "code": "kotlin\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.RecyclerView\nimport kotlinx.android.synthetic.main.item_layout.view.*\n\nclass ItemAdapter(private val items: List<Item>) : RecyclerView.Adapter<ItemAdapter.ViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_layout, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = items[position]\n        holder.itemView.itemNameTextView.text = item.name\n    }\n\n    override fun getItemCount(): Int {\n        return items.size\n    }\n\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)\n}",
    "filename": "7e2f5b70f96dccd349bad75791749092_1.kt"
  },
  {
    "conversation_hash": "7e2f5b70f96dccd349bad75791749092",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "kotlin\nclass MainActivity : AppCompatActivity() {\n    private val items = listOf(\n        Item(1, \"Item 1\"),\n        Item(2, \"Item 2\"),\n        Item(3, \"Item 3\")\n    )\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val recyclerView = findViewById<RecyclerView>(R.id.recyclerView)\n        recyclerView.layoutManager = LinearLayoutManager(this)\n        recyclerView.adapter = ItemAdapter(items)\n    }\n}",
    "filename": "7e2f5b70f96dccd349bad75791749092_3.kt"
  },
  {
    "conversation_hash": "7e2f5b70f96dccd349bad75791749092",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "kotlin\nclass ItemAdapter(private val items: List<Item>) : RecyclerView.Adapter<ItemAdapter.ViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_layout, parent, false)\n        return ViewHolder(view)\n    }\n\n    // ...\n\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)\n}",
    "filename": "7e2f5b70f96dccd349bad75791749092_4.kt"
  },
  {
    "conversation_hash": "e593b85157c927c07ef8f102f41d83e0",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Adapter(private val dataList: List<Data>) : RecyclerView.Adapter<ViewHolder>() {\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val itemView = LayoutInflater.from(parent.context).inflate(R.layout.item_layout, parent, false)\n        return ViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val data = dataList[position]\n        // Задайте данные элемента списка для отображения\n        holder.imageView.setImageResource(data.imageResource)\n        holder.textView.text = data.text\n    }\n\n    override fun getItemCount(): Int {\n        return dataList.size\n    }\n}",
    "filename": "e593b85157c927c07ef8f102f41d83e0_2.kt"
  },
  {
    "conversation_hash": "6f79aeadb465a40332fec7af353c0b77",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    newRecyccleView = findViewById(R.id.MyRecycleView)\n    newRecyccleView.setHasFixedSize(true)\n    newRecyccleView.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\n    image = mutableListOf(R.drawable._54282_admin, R.drawable._54282_admin)\n    text = mutableListOf(\"Hello\", \"hi\")\n    getSmth(image, text)\n}",
    "filename": "6f79aeadb465a40332fec7af353c0b77_5.kt"
  },
  {
    "conversation_hash": "cd6eac61d17647857431e4646ff0ebd4",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "timer = Timer()\n   timer.scheduleAtFixedRate(object : TimerTask() {\n       override fun run() {\n           recyclerView.post {\n               recyclerView.smoothScrollToPosition((recyclerView.layoutManager as LinearLayoutManager).findLastVisibleItemPosition() + 1)\n           }\n       }\n   }, 0, 5000)",
    "filename": "cd6eac61d17647857431e4646ff0ebd4_0.kt"
  },
  {
    "conversation_hash": "cd6eac61d17647857431e4646ff0ebd4",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "private lateinit var recyclerView: RecyclerView\nprivate lateinit var Slider_List: List<SlideItem>\nprivate lateinit var timer: Timer\n\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    Slider_List = listOf(\n        SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n        SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n        SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n        SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n        SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n    )\n    recyclerView = requireView().findViewById(R.id.sliderRecyclerView)\n    recyclerView.setHasFixedSize(false)\n    recyclerView.layoutManager = LinearLayoutManager(requireContext(),LinearLayoutManager.HORIZONTAL,false)\n    recyclerView.adapter = SliderAdapter(Slider_List)\n\n    timer = Timer()\n    timer.scheduleAtFixedRate(object : TimerTask() {\n        override fun run() {\n            recyclerView.post {\n                recyclerView.smoothScrollToPosition((recyclerView.layoutManager as LinearLayoutManager).findLastVisibleItemPosition() + 1)\n            }\n        }\n    }, 0, 5000)\n}\n\noverride fun onDestroyView() {\n    super.onDestroyView()\n    timer.cancel()\n}",
    "filename": "cd6eac61d17647857431e4646ff0ebd4_2.kt"
  },
  {
    "conversation_hash": "cd6eac61d17647857431e4646ff0ebd4",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "timer.schedule(object : TimerTask() {\n    override fun run() {\n        // Код, который нужно выполнить\n    }\n}, delay)",
    "filename": "cd6eac61d17647857431e4646ff0ebd4_4.kt"
  },
  {
    "conversation_hash": "cd6eac61d17647857431e4646ff0ebd4",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "timer.scheduleAtFixedRate(object : TimerTask() {\n    override fun run() {\n        // Код, который нужно выполнить\n    }\n}, delay, period)",
    "filename": "cd6eac61d17647857431e4646ff0ebd4_5.kt"
  },
  {
    "conversation_hash": "53a51a8117b5770c3ec49d8cf32955ca",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class HomeFragment : Fragment() {\n    private lateinit var timer: Timer\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var Slider_List: List<SlideItem>\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        val view = inflater.inflate(R.layout.fragment_home, container, false)\n        return view\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        Slider_List = listOf(\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n        )\n        recyclerView = requireView().findViewById(R.id.sliderRecyclerView)\n\n        val snapHelper = LinearSnapHelper()\n        snapHelper.attachToRecyclerView(recyclerView)\n\n        recyclerView.setHasFixedSize(false)\n        recyclerView.layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\n        recyclerView.adapter = SliderAdapter(Slider_List)\n\n        timer = Timer()\n        timer.scheduleAtFixedRate(object : TimerTask() {\n            override fun run() {\n                recyclerView.post{\n                    val lastVisiblePosition = (recyclerView.layoutManager as LinearLayoutManager).findLastVisibleItemPosition()\n                    if (lastVisiblePosition == Slider_List.size - 1) {\n                        recyclerView.smoothScrollToPosition(0)\n                    } else {\n                        recyclerView.smoothScrollToPosition(lastVisiblePosition + 1)\n                    }\n                }\n            }\n        }, 0, 5000)\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        timer.cancel()\n    }\n\n    companion object {\n        @JvmStatic\n        fun newInstance() = HomeFragment()\n    }\n}",
    "filename": "53a51a8117b5770c3ec49d8cf32955ca_2.kt"
  },
  {
    "conversation_hash": "669d86decb9f8a7cc472d2dc563b0c80",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "recyclerView.post{\n    val lastVisiblePosition = (recyclerView.layoutManager as LinearLayoutManager).findLastVisibleItemPosition()\n    val lastVisiblePositionComlete = (recyclerView.layoutManager as LinearLayoutManager).findLastCompletelyVisibleItemPosition()\n    if (lastVisiblePositionComlete == -1) {\n        recyclerView.smoothScrollToPosition(lastVisiblePosition )\n    }\n    println(\"Последний полный элемент : $lastVisiblePositionComlete\")\n    println(\"Последний элемент : $lastVisiblePosition\")\n    \n    if (lastVisiblePositionComlete > lastVisiblePosition) {\n        println(\"Вторая переменная больше первой\")\n    } else if (lastVisiblePositionComlete < lastVisiblePosition) {\n        println(\"Первая переменная больше второй\")\n    } else {\n        println(\"Обе переменные равны\")\n    }\n}",
    "filename": "669d86decb9f8a7cc472d2dc563b0c80_0.kt"
  },
  {
    "conversation_hash": "0bf01f6f8e1b200eec57fdc46a108f4c",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class HomeFragment : Fragment() {\n    private lateinit var timer: Timer\n\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var Slider_List: List<SlideItem>\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        val view = inflater.inflate(R.layout.fragment_home, container, false)\n        return view\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        Slider_List = listOf(\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n        )\n        recyclerView = requireView().findViewById(R.id.sliderRecyclerView)\n        recyclerView.setHasFixedSize(false)\n        recyclerView.layoutManager =\n            LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\n        recyclerView.adapter = SliderAdapter(Slider_List)\n        \n        val snapHelper = LinearSnapHelper()\n        snapHelper.attachToRecyclerView(recyclerView)\n\n        timer = Timer()\n        timer.scheduleAtFixedRate(object : TimerTask() {\n            override fun run() {\n                recyclerView.post{\n                    val layoutManager = recyclerView.layoutManager as LinearLayoutManager\n                    val firstVisiblePosition = layoutManager.findFirstVisibleItemPosition()\n                    val lastVisiblePosition = layoutManager.findLastVisibleItemPosition()\n                    \n                    if (firstVisiblePosition > 0 && lastVisiblePosition < Slider_List.size - 1) {\n                        // Слайдер не находится в полном состоянии элемента\n                        val centerPosition = layoutManager.findLastCompletelyVisibleItemPosition()\n                        \n                        val centerX = recyclerView.width / 2\n                        val childView = recyclerView.findViewHolderForAdapterPosition(centerPosition)?.itemView\n                        val childCenterX = childView?.left?.plus(childView.width / 2)\n                        \n                        if (childCenterX != null && childCenterX < centerX) {\n                            // Слайдер смещен влево от центра\n                            recyclerView.smoothScrollToPositionWithOffset(centerPosition + 1, 0)\n                        } else {\n                            // Слайдер смещен вправо от центра\n                            recyclerView.smoothScrollToPositionWithOffset(centerPosition, 0)\n                        }\n                    } else {\n                        // Слайдер находится в полном состоянии элемента\n                        recyclerView.smoothScrollToPosition(firstVisiblePosition)\n                    }\n                }\n            }\n        }, 0, 10000)\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        timer.cancel()\n    }\n\n    companion object {\n        @JvmStatic\n        fun newInstance() = HomeFragment()\n    }\n}",
    "filename": "0bf01f6f8e1b200eec57fdc46a108f4c_0.kt"
  },
  {
    "conversation_hash": "9724a9f0cd0dd6f4e71560d6e3a41587",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.os.Handler",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "androidx.fragment.app.Fragment",
      "androidx.recyclerview.widget.LinearLayoutManager",
      "androidx.recyclerview.widget.RecyclerView",
      "com.example.cinema_provider_app.R",
      "com.example.cinema_provider_app.SlideItem",
      "com.example.cinema_provider_app.SliderAdapter"
    ],
    "code": "package com.example.cinema_provider_app.main_Fragments\n\nimport android.os.Bundle\nimport android.os.Handler\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.cinema_provider_app.R\nimport com.example.cinema_provider_app.SlideItem\nimport com.example.cinema_provider_app.SliderAdapter\n\nclass HomeFragment : Fragment() {\n    private lateinit var handler: Handler\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var sliderList: List<SlideItem>\n\n    private val autoScrollRunnable = object : Runnable {\n        override fun run() {\n            val lastVisiblePosition = (recyclerView.layoutManager as LinearLayoutManager).findLastVisibleItemPosition()\n            if (lastVisiblePosition == sliderList.size - 1) {\n                recyclerView.smoothScrollToPosition(0)\n            } else {\n                recyclerView.smoothScrollToPosition(lastVisiblePosition + 1)\n            }\n            handler.postDelayed(this, 10000)\n        }\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_home, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        sliderList = listOf(\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n        )\n        recyclerView = view.findViewById(R.id.sliderRecyclerView)\n        recyclerView.setHasFixedSize(false)\n        recyclerView.layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\n        recyclerView.adapter = SliderAdapter(sliderList)\n        recyclerView.smoothScrollToPosition(0)\n        handler = Handler()\n        handler.postDelayed(autoScrollRunnable, 10000)\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        handler.removeCallbacks(autoScrollRunnable)\n    }\n\n    companion object {\n        @JvmStatic\n        fun newInstance() = HomeFragment()\n    }\n}",
    "filename": "9724a9f0cd0dd6f4e71560d6e3a41587_0.kt"
  },
  {
    "conversation_hash": "ced482a67f42b6b1c8a67f8258898fb7",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Handler",
      "android.os.Looper",
      "android.os.SystemClock"
    ],
    "code": "import android.os.Handler\nimport android.os.Looper\nimport android.os.SystemClock\n\nclass Timer {\n\n    private var handler: Handler = Handler(Looper.getMainLooper())\n    private lateinit var runnable: Runnable\n    private var startTime: Long = 0\n\n    fun startTimer() {\n        startTime = SystemClock.elapsedRealtime()\n        handler.postDelayed(runnable, 1000) // запускаем таймер с интервалом 1 секунда\n    }\n\n    fun stopTimer() {\n        handler.removeCallbacks(runnable)\n    }\n\n    init {\n        runnable = object : Runnable {\n            override fun run() {\n                val currentTime = SystemClock.elapsedRealtime()\n                val elapsedTime = currentTime - startTime\n                val seconds = (elapsedTime / 1000).toInt()\n                val minutes = seconds / 60\n                val hours = minutes / 60\n                val timeString = String.format(\"%02d:%02d:%02d\", hours, minutes, seconds)\n                println(timeString)\n\n                handler.postDelayed(this, 1000) // выполняем задачу снова через 1 секунду\n            }\n        }\n    }\n}",
    "filename": "ced482a67f42b6b1c8a67f8258898fb7_0.kt"
  },
  {
    "conversation_hash": "033d21927b24af39f4d744b4e7a37095",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "% 遗传算法参数设置\npopSize = 50; % 种群大小\nmaxGeneration = 100; % 最大迭代次数\nmutationRate = 0.05; % 变异率\n\n% 变量范围设置\ndRange = [0.3, 0.6];\nrhoRange = [10, 26.656];\nthetaRange = [0, 90];\n\n% 适应度函数\nfitnessFunction = @(x) K(x(1), x(2), x(3), x(4), x(5), 0.0296, 0.0297);\n\n% 初始化种群\npopulation = zeros(popSize, 5);\npopulation(:, 1) = rand(popSize, 1) * (dRange(2) - dRange(1)) + dRange(1);\npopulation(:, 2) = rand(popSize, 1) * (rhoRange(2) - rhoRange(1)) + rhoRange(1);\npopulation(:, 3) = rand(popSize, 1) * (rhoRange(2) - rhoRange(1)) + rhoRange(1);\npopulation(:, 4) = rand(popSize, 1) * (thetaRange(2) - thetaRange(1)) + thetaRange(1);\npopulation(:, 5) = rand(popSize, 1) * (thetaRange(2) - thetaRange(1)) + thetaRange(1);\n\n% 迭代计算\nfor generation = 1:maxGeneration\n    % 计算适应度\n    fitness = arrayfun(fitnessFunction, population);\n    \n    % 选择\n    [~, sortedIndex] = sort(fitness, 'ascend');\n    population = population(sortedIndex, :);\n    \n    % 交叉\n    crossoverIndex = ceil(popSize/2);\n    for i = 1:crossoverIndex\n        parent1 = population(i, :);\n        parent2 = population(crossoverIndex + i, :);\n        crossoverPoint = randi([2, 4]);\n        population(crossoverIndex + i, :) = [parent2(1:crossoverPoint), parent1(crossoverPoint+1:end)];\n    end\n    \n    % 变异\n    mutationIndex = ceil(popSize * mutationRate);\n    for i = 1:mutationIndex\n        mutationPoint = randi([2, 5]);\n        mutationValue = rand(1) * (rhoRange(2) - rhoRange(1)) + rhoRange(1);\n        population(i, mutationPoint) = mutationValue;\n    end\n    \n    disp(['Generation: ', num2str(generation), ' Best k: ', num2str(fitness(1))]);\nend\n\n% 输出最优解\nbestIndividual = population(1, :);\nbestK = fitness(1);\ndisp('Best Solution:');\ndisp(['rho_s: ', num2str(bestIndividual(1))]);\ndisp(['rho_w: ', num2str(bestIndividual(2))]);\ndisp(['theta_s: ', num2str(bestIndividual(3))]);\ndisp(['theta_w: ', num2str(bestIndividual(4))]);\ndisp(['d: ', num2str(bestIndividual(5))]);\ndisp(['k: ', num2str(bestK)]);",
    "filename": "033d21927b24af39f4d744b4e7a37095_0.kt"
  },
  {
    "conversation_hash": "033d21927b24af39f4d744b4e7a37095",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "% 遗传算法参数设置\npopSize = 50; % 种群大小\nmaxGeneration = 100; % 最大迭代次数\nmutationRate = 0.05; % 变异率\n\n% 变量范围设置\ndRange = [0.3, 0.6];\nrhoRange = [10, 26.656];\nthetaRange = [0, 90];\n\n% 适应度函数\nfitnessFunction = @(x) K(x(1), x(2), x(3), x(4), x(5), 0.0296, 0.0297);\n\n% 初始化种群\npopulation = zeros(popSize, 5);\npopulation(:, 1) = rand(popSize, 1) .* (dRange(2) - dRange(1)) + dRange(1);\npopulation(:, 2) = rand(popSize, 1) .* (rhoRange(2) - rhoRange(1)) + rhoRange(1);\npopulation(:, 3) = rand(popSize, 1) .* (rhoRange(2) - rhoRange(1)) + rhoRange(1);\npopulation(:, 4) = rand(popSize, 1) .* (thetaRange(2) - thetaRange(1)) + thetaRange(1);\npopulation(:, 5) = rand(popSize, 1) .* (thetaRange(2) - thetaRange(1)) + thetaRange(1);\n\n% 迭代计算\nfor generation = 1:maxGeneration\n    % 计算适应度\n    fitness = arrayfun(fitnessFunction, population);\n    \n    % 选择\n    [~, sortedIndex] = sort(fitness, 'ascend');\n    population = population(sortedIndex, :);\n    \n    % 交叉\n    crossoverIndex = ceil(popSize/2);\n    for i = 1:crossoverIndex\n        parent1 = population(i, :);\n        parent2 = population(crossoverIndex + i, :);\n        crossoverPoint = randi([2, 4]);\n        population(crossoverIndex + i, :) = [parent2(1:crossoverPoint), parent1(crossoverPoint+1:end)];\n    end\n    \n    % 变异\n    mutationIndex = ceil(popSize * mutationRate);\n    for i = 1:mutationIndex\n        mutationPoint = randi([2, 5]);\n        mutationValue = rand(1) .* (rhoRange(2) - rhoRange(1)) + rhoRange(1);\n        population(i, mutationPoint) = mutationValue;\n    end\n    \n    disp(['Generation: ', num2str(generation), ' Best k: ', num2str(fitness(1))]);\nend\n\n% 输出最优解\nbestIndividual = population(1, :);\nbestK = fitness(1);\ndisp('Best Solution:');\ndisp(['rho_s: ', num2str(bestIndividual(1))]);\ndisp(['rho_w: ', num2str(bestIndividual(2))]);\ndisp(['theta_s: ', num2str(bestIndividual(3))]);\ndisp(['theta_w: ', num2str(bestIndividual(4))]);\ndisp(['d: ', num2str(bestIndividual(5))]);\ndisp(['k: ', num2str(bestK)]);",
    "filename": "033d21927b24af39f4d744b4e7a37095_1.kt"
  },
  {
    "conversation_hash": "f3e5cb4ce7922f79eb38c4cd9a6b4aed",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Функциональный интерфейс\nfun interface MyFunction {\n    fun invoke(a: Int, b: Int): Int\n}\n\nfun main() {\n    val sum: MyFunction = { a, b -> a + b } // Лямбда-выражение для сложения двух чисел\n    val result = sum.invoke(1, 2)\n    println(result) // Вывод: 3\n}",
    "filename": "f3e5cb4ce7922f79eb38c4cd9a6b4aed_0.kt"
  },
  {
    "conversation_hash": "4a75cf1e328bcb6dd8fcfc2da77ef881",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private val handler = Handler()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val delay = 2000\n        val runnable = {\n            for (i in 1..15) {\n                Toast.makeText(this, \"message - > $i\", Toast.LENGTH_SHORT).show()\n            }\n        }\n        handler.postDelayed(runnable, delay.toLong())\n    }\n}",
    "filename": "4a75cf1e328bcb6dd8fcfc2da77ef881_3.kt"
  },
  {
    "conversation_hash": "096078a28b12f2682e6cdbd010ae662e",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class HomeFragment : Fragment() {\n    private lateinit var timer: Timer\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var SliderList: List<SlideItem>\n    private var currentVisibleItem = 0\n    private var isForward = true\n    private val handler = Handler()\n    private val runnable = Runnable {\n        recyclerView.smoothScrollToPosition(currentVisibleItem)\n        currentVisibleItem += if (isForward) 1 else -1\n        if (currentVisibleItem >= SliderList.size || currentVisibleItem <= 0) {\n            isForward = !isForward\n        }\n        handler.postDelayed(runnable, 2000)\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        val view = inflater.inflate(R.layout.fragment_home, container, false)\n        return view\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        SliderList = listOf(\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n        )\n        recyclerView = requireView().findViewById(R.id.sliderRecyclerView)\n        recyclerView.setHasFixedSize(false)\n        recyclerView.layoutManager =\n            LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\n        recyclerView.adapter = SliderAdapter(SliderList)\n        handler.postDelayed(runnable, 2000)\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        handler.removeCallbacksAndMessages(null)\n    }\n\n    companion object {\n        @JvmStatic\n        fun newInstance() = HomeFragment()\n    }\n}",
    "filename": "096078a28b12f2682e6cdbd010ae662e_3.kt"
  },
  {
    "conversation_hash": "096078a28b12f2682e6cdbd010ae662e",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.os.Handler",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "androidx.fragment.app.Fragment",
      "androidx.recyclerview.widget.LinearLayoutManager",
      "androidx.recyclerview.widget.RecyclerView",
      "com.example.cinema_provider_app.R",
      "com.example.cinema_provider_app.SlideItem",
      "com.example.cinema_provider_app.SliderAdapter",
      "java.util."
    ],
    "code": "import android.os.Bundle\nimport android.os.Handler\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.cinema_provider_app.R\nimport com.example.cinema_provider_app.SlideItem\nimport com.example.cinema_provider_app.SliderAdapter\nimport java.util.*\n\nclass HomeFragment : Fragment() {\n\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var sliderList: List<SlideItem>\n    private var currentVisibleItem = 0\n    private var isForward = true\n    private val handler = Handler()\n\n    private val runnable: Runnable = object : Runnable {\n        override fun run() {\n            recyclerView.smoothScrollToPosition(currentVisibleItem)\n            currentVisibleItem += if (isForward) 1 else -1\n            if (currentVisibleItem >= sliderList.size || currentVisibleItem <= 0) {\n                isForward = !isForward\n            }\n            handler.postDelayed(this, 2000)\n        }\n    }\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_home, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        \n        sliderList = listOf(\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin),\n            SlideItem(\"hello\", \"hi\", R.drawable._54282_admin)\n        )\n        \n        recyclerView = view.findViewById(R.id.sliderRecyclerView)\n        recyclerView.layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)\n        recyclerView.adapter = SliderAdapter(sliderList)\n    }\n\n    override fun onResume() {\n        super.onResume()\n        handler.postDelayed(runnable, 2000)\n    }\n\n    override fun onPause() {\n        super.onPause()\n        handler.removeCallbacks(runnable)\n    }\n}",
    "filename": "096078a28b12f2682e6cdbd010ae662e_4.kt"
  },
  {
    "conversation_hash": "b8f56ab712ef6c1f9d7b08a45f4e97aa",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class MessageViewModel(\n    val context: Context? = null,\n) : ViewModel(), Receiver, ListAdapter<Message> {\n    ...\n}",
    "filename": "b8f56ab712ef6c1f9d7b08a45f4e97aa_2.kt"
  },
  {
    "conversation_hash": "b8f56ab712ef6c1f9d7b08a45f4e97aa",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "private suspend fun getData() {\n    val messageDao = db?.messageDao()\n    val messages = messageDao?.getMessages()\n    messages?.let { paginator.submitData(it) }\n    _uiState.update { currentState -> currentState.copy(messages = messages!!) }\n}",
    "filename": "b8f56ab712ef6c1f9d7b08a45f4e97aa_4.kt"
  },
  {
    "conversation_hash": "b8f56ab712ef6c1f9d7b08a45f4e97aa",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun receive(msg: org.jgroups.Message) {\n    ...\n    messages?.let { paginator.appendData(it) }\n    _uiState.update { newState -> newState.copy(messages = messages!!) }\n}",
    "filename": "b8f56ab712ef6c1f9d7b08a45f4e97aa_5.kt"
  },
  {
    "conversation_hash": "b8f56ab712ef6c1f9d7b08a45f4e97aa",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun setState(state: PaginatorState) {\n    paginator.setState(state)\n}\n\noverride fun getData(): MutableList<Message>? {\n    return paginator.getData()\n}\n\noverride fun loadNextPage() {\n    // Method for loading additional data if required\n    // Not needed for this implementation as the messages are loaded at once\n}\n\noverride fun isLoading(): Boolean {\n    return paginator.isLoading()\n}\n\noverride fun hasMorePages(): Boolean {\n    return false // Return true if there are more pages to load\n}",
    "filename": "b8f56ab712ef6c1f9d7b08a45f4e97aa_6.kt"
  },
  {
    "conversation_hash": "b8f56ab712ef6c1f9d7b08a45f4e97aa",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class MessageViewModel(\n    val context: Context? = null,\n) : ViewModel(), Receiver, ListAdapter<Message> {\n    ...\n}",
    "filename": "b8f56ab712ef6c1f9d7b08a45f4e97aa_10.kt"
  },
  {
    "conversation_hash": "b8f56ab712ef6c1f9d7b08a45f4e97aa",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "private suspend fun getData() {\n    val messageDao = db?.messageDao()\n    val messages = messageDao?.getMessages()\n    messages?.let { paginator.submitData(it) }\n}",
    "filename": "b8f56ab712ef6c1f9d7b08a45f4e97aa_12.kt"
  },
  {
    "conversation_hash": "b8f56ab712ef6c1f9d7b08a45f4e97aa",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun setState(state: PaginatorState) {\n    paginator.setState(state)\n}\n\noverride fun getData(): MutableList<Message>? {\n    return paginator.getData()\n}\n\noverride fun loadNextPage() {\n    paginator.loadNextPage()\n}\n\noverride fun isLoading(): Boolean {\n    return paginator.isLoading()\n}\n\noverride fun hasMorePages(): Boolean {\n    return paginator.hasMorePages()\n}",
    "filename": "b8f56ab712ef6c1f9d7b08a45f4e97aa_14.kt"
  },
  {
    "conversation_hash": "b8f56ab712ef6c1f9d7b08a45f4e97aa",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ListMessageStateHandler : PaginatorStateHandler<ListMessage> {\n    override fun newState(data: List<Message>): ListMessage {\n        return ListMessage(data)\n    }\n}\n\nprivate suspend fun fetchMessages(page: Int): List<Message> {\n    val messageDao = db?.messageDao()\n    val messages = messageDao?.getPagedMessages(page)\n    return messages ?: emptyList()\n}\n\nclass BoundaryCallback : Paginator.BoundaryCallback<Message>() {\n    override suspend fun onItemAtEndLoaded(itemAtEnd: Message) {\n        // Not needed for this implementation\n    }\n\n    override suspend fun onItemAtFrontLoaded(itemAtFront: Message) {\n        // Not needed for this implementation\n    }\n}",
    "filename": "b8f56ab712ef6c1f9d7b08a45f4e97aa_16.kt"
  },
  {
    "conversation_hash": "ab93aae02b8cc0662a277c8238162e44",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "androidx.recyclerview.widget.RecyclerView",
      "androidx.viewpager2.widget.ViewPager2"
    ],
    "code": "import android.content.Context\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.viewpager2.widget.ViewPager2\n\nclass ImageAdapter(private val context: Context, private val images: List<Int>) :\n    RecyclerView.Adapter<ImageAdapter.ImageViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ImageViewHolder {\n        val inflater = LayoutInflater.from(context)\n        val view = inflater.inflate(R.layout.item_image, parent, false)\n        return ImageViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ImageViewHolder, position: Int) {\n        val image = images[position % images.size]\n        holder.bind(image)\n    }\n\n    override fun getItemCount(): Int = Integer.MAX_VALUE\n\n    inner class ImageViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val imageView: ImageView = itemView.findViewById(R.id.image_view)\n\n        fun bind(resId: Int) {\n            imageView.setImageResource(resId)\n        }\n    }\n}\n\n// В активити или фрагменте\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var imageAdapter: ImageAdapter\n    private lateinit var images: List<Int>\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        images = listOf(R.drawable.image1, R.drawable.image2, R.drawable.image3)\n\n        recyclerView = findViewById(R.id.recycler_view)\n        recyclerView.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\n\n        imageAdapter = ImageAdapter(this, images)\n        recyclerView.adapter = imageAdapter\n\n        // Делаем прокрутку по кругу\n        recyclerView.scrollToPosition(Integer.MAX_VALUE / 2)\n    }\n}",
    "filename": "ab93aae02b8cc0662a277c8238162e44_4.kt"
  },
  {
    "conversation_hash": "86527ebccf1d3b93c4fe2663c54e723e",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MovieAdapter(private val movies: List<Movie>) :\n    RecyclerView.Adapter<MovieAdapter.MovieViewHolder>() {\n\n    inner class MovieViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val titleTextView: TextView = itemView.findViewById(R.id.movie_title)\n        val partsRecyclerView: RecyclerView = itemView.findViewById(R.id.movie_parts_list)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MovieViewHolder {\n        val itemView = LayoutInflater.from(parent.context).inflate(R.layout.item_movie, parent, false)\n        return MovieViewHolder(itemView)\n    }\n\n    override fun getItemCount(): Int = movies.size\n\n    override fun onBindViewHolder(holder: MovieViewHolder, position: Int) {\n        val movie = movies[position]\n        holder.titleTextView.text = movie.title\n\n        val partsAdapter = MoviePartAdapter(movie.parts)\n        holder.partsRecyclerView.apply {\n            adapter = partsAdapter\n            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)\n        }\n    }\n}",
    "filename": "86527ebccf1d3b93c4fe2663c54e723e_3.kt"
  },
  {
    "conversation_hash": "86527ebccf1d3b93c4fe2663c54e723e",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MoviePartAdapter(private val movieParts: List<MoviePart>) :\n    RecyclerView.Adapter<MoviePartAdapter.MoviePartViewHolder>() {\n\n    inner class MoviePartViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val imageView: ImageView = itemView.findViewById(R.id.movie_part_image)\n        val titleTextView: TextView = itemView.findViewById(R.id.movie_part_title)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MoviePartViewHolder {\n        val itemView = LayoutInflater.from(parent.context).inflate(R.layout.item_movie_part, parent, false)\n        return MoviePartViewHolder(itemView)\n    }\n\n    override fun getItemCount(): Int = movieParts.size\n\n    override fun onBindViewHolder(holder: MoviePartViewHolder, position: Int) {\n        val moviePart = movieParts[position]\n        holder.imageView.setImageResource(moviePart.image)\n        holder.titleTextView.text = moviePart.title\n    }\n}",
    "filename": "86527ebccf1d3b93c4fe2663c54e723e_4.kt"
  },
  {
    "conversation_hash": "80f4d0f74541d30d7c7587001caa908e",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.constraintlayout.motion.widget.MotionLayout",
      "androidx.core.view.MotionEventCompat"
    ],
    "code": "import androidx.appcompat.app.AppCompatActivity\nimport androidx.constraintlayout.motion.widget.MotionLayout\nimport androidx.core.view.MotionEventCompat\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var motionLayout: MotionLayout\n    private lateinit var rightCard: View\n    private lateinit var leftCard: View\n\n    private var startX = 0f\n    private var startY = 0f\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        motionLayout = findViewById(R.id.motionLayout)\n        rightCard = findViewById(R.id.rightCard)\n        leftCard = findViewById(R.id.leftCard)\n\n        motionLayout.setTransitionListener(object : MotionLayout.TransitionListener {\n            override fun onTransitionStarted(motionLayout: MotionLayout, startId: Int, endId: Int) {}\n            override fun onTransitionChange(motionLayout: MotionLayout, startId: Int, endId: Int, progress: Float) {}\n            override fun onTransitionCompleted(motionLayout: MotionLayout, currentId: Int) {\n                if (currentId == R.id.right_card_show) {\n                    rightCard.visibility = View.VISIBLE\n                    leftCard.visibility = View.GONE\n                } else if (currentId == R.id.left_card_show) {\n                    rightCard.visibility = View.GONE\n                    leftCard.visibility = View.VISIBLE\n                }\n            }\n            override fun onTransitionTrigger(motionLayout: MotionLayout, triggerId: Int, positive: Boolean, progress: Float) {}\n        })\n\n        motionLayout.setOnTouchListener { view, event ->\n            val action = MotionEventCompat.getActionMasked(event)\n\n            when (action) {\n                MotionEvent.ACTION_DOWN -> {\n                    startX = event.x\n                    startY = event.y\n                }\n                MotionEvent.ACTION_MOVE -> {\n                    val distanceX = event.x - startX\n                    val distanceY = event.y - startY\n                    val swipeThreshold = ViewConfiguration.get(this).scaledTouchSlop\n\n                    if (distanceX > swipeThreshold && Math.abs(distanceX) > Math.abs(distanceY)) {\n                        motionLayout.progress = 0f\n                        return@setOnTouchListener true\n                    } else if (distanceX < -swipeThreshold && Math.abs(distanceX) > Math.abs(distanceY)) {\n                        motionLayout.progress = 1f\n                        return@setOnTouchListener true\n                    }\n                }\n            }\n\n            return@setOnTouchListener false\n        }\n    }\n}",
    "filename": "80f4d0f74541d30d7c7587001caa908e_2.kt"
  },
  {
    "conversation_hash": "112c7a86bf125f6095a7b380ba1ce8b6",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n    val view = LayoutInflater.from(parent.context).inflate(R.layout.your_layout, parent, false)\n    val cardView = view.findViewById<androidx.cardview.widget.CardView>(R.id.card_view)\n\n    // Применить анимацию для появления и масштабирования\n    val scaleAnimation = AnimationUtils.loadAnimation(parent.context, R.anim.scale)\n    cardView.startAnimation(scaleAnimation)\n\n    return ViewHolder(view)\n}",
    "filename": "112c7a86bf125f6095a7b380ba1ce8b6_1.kt"
  },
  {
    "conversation_hash": "112c7a86bf125f6095a7b380ba1ce8b6",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class YourAdapter(private val itemList: List<Item>) : RecyclerView.Adapter<YourAdapter.ViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.your_layout, parent, false)\n        val cardView = view.findViewById<androidx.cardview.widget.CardView>(R.id.card_view)\n\n        // Применить анимацию для появления и масштабирования\n        val scaleAnimation = AnimationUtils.loadAnimation(parent.context, R.anim.scale)\n        cardView.startAnimation(scaleAnimation)\n\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = itemList[position]\n        // Настроить содержимое карточки, например:\n        // holder.textView.text = item.text\n    }\n\n    override fun getItemCount(): Int {\n        return itemList.size\n    }\n\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        // Добавьте ссылки на ваши элементы интерфейса, например:\n        // val textView: TextView = itemView.findViewById(R.id.text_view)\n    }\n}",
    "filename": "112c7a86bf125f6095a7b380ba1ce8b6_3.kt"
  },
  {
    "conversation_hash": "112c7a86bf125f6095a7b380ba1ce8b6",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class YourAdapter(private val itemList: List<Item>) : RecyclerView.Adapter<YourAdapter.ViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.your_layout, parent, false)\n        val cardView = view.findViewById<androidx.cardview.widget.CardView>(R.id.card_view)\n\n        // Применить анимацию для появления и масштабирования\n        val scaleAnimation = AnimationUtils.loadAnimation(parent.context, R.anim.scale)\n        cardView.startAnimation(scaleAnimation)\n\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = itemList[position]\n        // Настроить содержимое карточки, например:\n        // holder.textView.text = item.text\n    }\n\n    override fun getItemCount(): Int {\n        return itemList.size\n    }\n\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        // Добавьте ссылки на ваши элементы интерфейса, например:\n        // val textView: TextView = itemView.findViewById(R.id.text_view)\n    }\n}",
    "filename": "112c7a86bf125f6095a7b380ba1ce8b6_6.kt"
  },
  {
    "conversation_hash": "49adf743bd14fde873b01e1918f7e361",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class CustomAdapter(private val dataList: List<Data>) : RecyclerView.Adapter<CustomAdapter.ViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.card_layout, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = dataList[position]\n\n        // Установка фонового изображения\n        holder.cardBackgroundImage.setImageResource(R.drawable.card_background_image)\n\n        // Установка иконок\n        holder.icon1.setImageResource(item.icon1)\n        holder.icon2.setImageResource(item.icon2)\n    }\n\n    override fun getItemCount(): Int {\n        return dataList.size\n    }\n\n    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val cardBackgroundImage: ImageView = itemView.findViewById(R.id.cardBackgroundImage)\n        val icon1: ImageView = itemView.findViewById(R.id.icon1)\n        val icon2: ImageView = itemView.findViewById(R.id.icon2)\n    }\n}",
    "filename": "49adf743bd14fde873b01e1918f7e361_5.kt"
  },
  {
    "conversation_hash": "dda911523d64433594f2e2e40dcc25f0",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n  \n    // ...\n\n    val icon1 = view.findViewById<ImageView>(R.id.icon1)\n    val icon2 = view.findViewById<ImageView>(R.id.icon2)\n  \n    icon1.setOnClickListener {\n        placeHolder()\n    }\n  \n    icon2.setOnClickListener {\n        placeHolder()\n    }\n  \n    // ...\n}",
    "filename": "dda911523d64433594f2e2e40dcc25f0_0.kt"
  },
  {
    "conversation_hash": "143153466cf12663ff9b276c33dff52f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ViewHolder(item: View) : RecyclerView.ViewHolder(item) {\n    val bgImage: ImageView = item.findViewById(R.id.cardBackgroundImage)\n    val icon1: ImageView = item.findViewById(R.id.icon1)\n    val icon2: ImageView = item.findViewById(R.id.icon2)\n\n    init {\n        icon1.setOnClickListener {\n            // Действия при нажатии на иконку 1\n        }\n\n        icon2.setOnClickListener {\n            // Действия при нажатии на иконку 2\n        }\n    }\n}",
    "filename": "143153466cf12663ff9b276c33dff52f_0.kt"
  },
  {
    "conversation_hash": "143153466cf12663ff9b276c33dff52f",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n    val currentItem = list[position]\n    holder.bgImage.setImageResource(currentItem.bgImage)\n\n    holder.icon1.setOnClickListener {\n        // Действия при нажатии на иконку 1\n    }\n\n    holder.icon2.setOnClickListener {\n        // Действия при нажатии на иконку 2\n    }\n}",
    "filename": "143153466cf12663ff9b276c33dff52f_1.kt"
  },
  {
    "conversation_hash": "f17b23390544089bdb3d310c3ad152ea",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class CustomRecycleAdapter(private val context: Context, private val list: List<CustomDataClass>) :\n    RecyclerView.Adapter<CustomRecycleAdapter.ViewHolder>() {\n    \n    //...\n\n    private fun placeHolder() {\n        Toast.makeText(context, \"Text!\", Toast.LENGTH_SHORT).show()\n    }\n    \n    //...\n    \n    class ViewHolder(item: View) : RecyclerView.ViewHolder(item) {\n        //...\n        \n        init {\n            icon1.setOnClickListener {\n                placeHolder()\n            }\n\n            icon2.setOnClickListener {\n                placeHolder()\n            }\n        }\n\n        private fun placeHolder() {\n            Toast.makeText(itemView.context, \"Text!\", Toast.LENGTH_SHORT).show()\n        }\n    }\n}",
    "filename": "f17b23390544089bdb3d310c3ad152ea_0.kt"
  },
  {
    "conversation_hash": "f0f60945c0fb3148fb62d65e4c5c1ab4",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "modalContainer = view.findViewById(R.id.modalContainer)\n\nval icon1 = view.findViewById<ImageView>(R.id.icon1)\nicon1.setOnClickListener {\n    showModal()\n}",
    "filename": "f0f60945c0fb3148fb62d65e4c5c1ab4_2.kt"
  },
  {
    "conversation_hash": "f0f60945c0fb3148fb62d65e4c5c1ab4",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class HomeFragment : Fragment() {\n\n    private lateinit var modalContainer: FrameLayout\n    private lateinit var icon1: ImageView\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        val view = inflater.inflate(R.layout.fragment_home, container, false)\n        modalContainer = view.findViewById(R.id.modalContainer)\n        icon1 = view.findViewById(R.id.icon1)\n        return view\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        icon1.setOnClickListener {\n            showModal()\n        }\n    }\n\n    private fun showModal() {\n        modalContainer.visibility = View.VISIBLE\n    }\n}",
    "filename": "f0f60945c0fb3148fb62d65e4c5c1ab4_4.kt"
  },
  {
    "conversation_hash": "f0f60945c0fb3148fb62d65e4c5c1ab4",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class HomeFragment : Fragment() {\n\n    private lateinit var modalContainer: FrameLayout\n    private lateinit var icon1: ImageView\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        val view = inflater.inflate(R.layout.fragment_home, container, false)\n        modalContainer = view.findViewById(R.id.modalContainer)\n        icon1 = view.findViewById(R.id.icon1)\n        return view\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        icon1.setOnClickListener {\n            showModal()\n        }\n    }\n\n    private fun showModal() {\n        modalContainer.visibility = View.VISIBLE\n    }\n}",
    "filename": "f0f60945c0fb3148fb62d65e4c5c1ab4_6.kt"
  },
  {
    "conversation_hash": "8ed6756058e7447554b44435e8aefe41",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ModalDialogFragment: DialogFragment() {\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        // Создание разметки модального окна, заполняющей весь экран\n        val view = inflater.inflate(R.layout.modal_dialog, container, false)\n        // Настройка модального окна\n        ...\n        return view\n    }\n\n}\n\nclass CustomRecycleAdapter(private val list: List<CustomDataClass>, private val homeFragment: HomeFragment) :\n    RecyclerView.Adapter<CustomRecycleAdapter.ViewHolder>() {\n\n    private var isModalVisible = false\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        ...\n    }\n\n    override fun getItemCount(): Int {\n        return list.size\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val currentItem = list[position]\n        holder.bgImage.setImageResource(currentItem.bgImage)\n        holder.icon1.setOnClickListener {\n            isModalVisible = true\n            notifyDataSetChanged()\n        }\n        holder.icon2.setOnClickListener {\n            ...\n        }\n\n        if (isModalVisible) {\n            val modalDialogFragment = ModalDialogFragment()\n            val fragmentManager = homeFragment.requireActivity().supportFragmentManager\n            val transaction = fragmentManager.beginTransaction()\n            transaction.add(android.R.id.content, modalDialogFragment, \"modal_dialog\")\n            transaction.commit()\n        } else {\n            val modalDialogFragment = homeFragment.requireActivity().supportFragmentManager.findFragmentByTag(\"modal_dialog\") as? ModalDialogFragment\n            modalDialogFragment?.dismiss()\n        }\n    }\n\n    class ViewHolder(item: View) : RecyclerView.ViewHolder(item) {\n        ...\n    }\n}\n\nclass HomeFragment : Fragment() {\n\n    ...\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        ...\n        val customAdapter = CustomRecycleAdapter(customList, this)\n        customRecyclerView.adapter = customAdapter\n        ...\n    }\n\n    fun showModalDialog() {\n        val modalDialogFragment = ModalDialogFragment()\n        val fragmentManager = requireActivity().supportFragmentManager\n        val transaction = fragmentManager.beginTransaction()\n        transaction.add(android.R.id.content, modalDialogFragment, \"modal_dialog\")\n        transaction.commit()\n    }\n\n    ...\n}",
    "filename": "8ed6756058e7447554b44435e8aefe41_0.kt"
  },
  {
    "conversation_hash": "831aaad210fa71dbeb895d642e92fc26",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.graphics.Bitmap",
      "android.graphics.BitmapFactory",
      "android.os.Bundle",
      "android.renderscript.",
      "android.widget.ImageView",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.os.Bundle\nimport android.renderscript.*\nimport android.widget.ImageView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var renderScript: RenderScript\n    private lateinit var blurScript: ScriptC_blur\n    private lateinit var imageView: ImageView\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        renderScript = RenderScript.create(this)\n        blurScript = ScriptC_blur(renderScript)\n\n        imageView = findViewById(R.id.imageView)\n\n        val originalBitmap = BitmapFactory.decodeResource(resources, R.drawable.your_image)\n        val blurredBitmap = applyBlur(originalBitmap)\n\n        imageView.setImageBitmap(blurredBitmap)\n    }\n\n    private fun applyBlur(originalBitmap: Bitmap): Bitmap {\n        val blurredBitmap = Bitmap.createBitmap(originalBitmap.width, originalBitmap.height, Bitmap.Config.ARGB_8888)\n        val inAllocation = Allocation.createFromBitmap(renderScript, originalBitmap)\n        val outAllocation = Allocation.createFromBitmap(renderScript, blurredBitmap)\n\n        blurScript._inputImage = inAllocation\n        blurScript.forEach_root(inAllocation, outAllocation)\n\n        outAllocation.copyTo(blurredBitmap)\n\n        return blurredBitmap\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        renderScript.destroy()\n    }\n}",
    "filename": "831aaad210fa71dbeb895d642e92fc26_5.kt"
  },
  {
    "conversation_hash": "831aaad210fa71dbeb895d642e92fc26",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "android.graphics.Bitmap",
      "android.graphics.BitmapFactory",
      "android.os.Bundle",
      "android.renderscript.",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.widget.ImageView",
      "androidx.fragment.app.Fragment"
    ],
    "code": "import android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.os.Bundle\nimport android.renderscript.*\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.ImageView\nimport androidx.fragment.app.Fragment\n\nclass MyFragment : Fragment() {\n    private lateinit var renderScript: RenderScript\n    private lateinit var blurScript: ScriptC_blur\n    private lateinit var imageView: ImageView\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        val rootView = inflater.inflate(R.layout.fragment_my, container, false)\n        \n        renderScript = RenderScript.create(requireContext())\n        blurScript = ScriptC_blur(renderScript)\n\n        imageView = rootView.findViewById(R.id.imageView)\n\n        val originalBitmap = BitmapFactory.decodeResource(resources, R.drawable.your_image)\n        val blurredBitmap = applyBlur(originalBitmap)\n\n        imageView.setImageBitmap(blurredBitmap)\n\n        return rootView\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        renderScript.destroy()\n    }\n\n    private fun applyBlur(originalBitmap: Bitmap): Bitmap {\n        val blurredBitmap = Bitmap.createBitmap(originalBitmap.width, originalBitmap.height, Bitmap.Config.ARGB_8888)\n        val inAllocation = Allocation.createFromBitmap(renderScript, originalBitmap)\n        val outAllocation = Allocation.createFromBitmap(renderScript, blurredBitmap)\n\n        blurScript._inputImage = inAllocation\n        blurScript.forEach_root(inAllocation, outAllocation)\n\n        outAllocation.copyTo(blurredBitmap)\n\n        return blurredBitmap\n    }\n}",
    "filename": "831aaad210fa71dbeb895d642e92fc26_6.kt"
  },
  {
    "conversation_hash": "869bca4428339c0dc7a51858f402389b",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n    val item = itemList[position]\n    holder.title.text = item.title\n    holder.description.text = item.description\n    holder.image.setImageResource(item.imageResId)\n}",
    "filename": "869bca4428339c0dc7a51858f402389b_6.kt"
  },
  {
    "conversation_hash": "b23436e35d8d19877fbfee552550b75a",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.widget.TextView",
      "androidx.recyclerview.widget.RecyclerView",
      "com.bumptech.glide.Glide",
      "com.bumptech.glide.request.RequestOptions",
      "com.example.cinema_provider_app.R",
      "com.example.cinema_provider_app.main_Fragments.Home_Fragment.Data_Classes.SlideItem",
      "com.google.android.material.imageview.ShapeableImageView",
      "jp.wasabeef.glide.transformations.BlurTransformation"
    ],
    "code": "import android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.TextView\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.cinema_provider_app.R\nimport com.example.cinema_provider_app.main_Fragments.Home_Fragment.Data_Classes.SlideItem\nimport com.google.android.material.imageview.ShapeableImageView\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport jp.wasabeef.glide.transformations.BlurTransformation\n\nclass SliderAdapter(private val itemList: List<SlideItem>) :\n    RecyclerView.Adapter<SliderAdapter.ViewHolder>() {\n\n    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val title: TextView = itemView.findViewById(R.id.titleTextView)\n        val description: TextView = itemView.findViewById(R.id.descriptionTextView)\n        val image: ShapeableImageView = itemView.findViewById(R.id.imageView)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context)\n            .inflate(R.layout.slide_item, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = itemList[position]\n        holder.title.text = item.title\n        holder.description.text = item.description\n        Glide.with(holder.image)\n            .load(item.image)\n            .apply(RequestOptions().apply {\n                transform(BlurTransformation(25, 1))\n                centerCrop()\n            })\n            .into(holder.image)\n    }\n\n    override fun getItemCount(): Int {\n        return itemList.size\n    }\n}\n\nclass HomeFragment : Fragment() {\n\n    // остальной код...\n\n}",
    "filename": "b23436e35d8d19877fbfee552550b75a_3.kt"
  },
  {
    "conversation_hash": "2269aabc6cc056658638287d69f642e4",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.os.Bundle",
      "android.view.View",
      "androidx.appcompat.app.AppCompatActivity",
      "kotlinx.android.synthetic.main.activity_main.",
      "kotlinx.android.synthetic.main.activity_second."
    ],
    "code": "import android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport androidx.appcompat.app.AppCompatActivity\nimport kotlinx.android.synthetic.main.activity_main.*\nimport kotlinx.android.synthetic.main.activity_second.*\n\nclass MainActivity : AppCompatActivity() {\n    private var counter = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        incrementButton.setOnClickListener {\n            counter++\n            counterText.text = counter.toString()\n        }\n\n        showGraphButton.setOnClickListener {\n            val intent = Intent(this, SecondActivity::class.java)\n            intent.putExtra(\"counter\", counter)\n            startActivity(intent)\n        }\n    }\n}\n\nclass SecondActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_second)\n\n        val counter = intent.getIntExtra(\"counter\", 0)\n\n        val numbers = ArrayList<Entry>()\n        for (i in 1..counter) {\n            numbers.add(Entry(i.toFloat(), i.toFloat()))\n        }\n\n        val lineDataSet = LineDataSet(numbers, \"Numbers\")\n        val data = LineData(lineDataSet)\n\n        chart.data = data\n        chart.invalidate()\n    }\n}",
    "filename": "2269aabc6cc056658638287d69f642e4_0.kt"
  },
  {
    "conversation_hash": "2de2270373031dbaf0199bc3dd78a3da",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyAdapter(private val items: List<String>) : RecyclerView.Adapter<MyAdapter.ViewHolder>() {\n\n    inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        val textView: TextView by lazy { view.findViewById(R.id.textView) }\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context)\n            .inflate(R.layout.item_layout, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = items[position]\n        holder.textView.text = item\n    }\n\n    override fun getItemCount(): Int {\n        return items.size\n    }\n}",
    "filename": "2de2270373031dbaf0199bc3dd78a3da_0.kt"
  },
  {
    "conversation_hash": "2de2270373031dbaf0199bc3dd78a3da",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyListAdapter(private val items: List<String>, private val context: Context) : BaseAdapter() {\n\n    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n        val view: View = convertView ?: LayoutInflater.from(context)\n            .inflate(R.layout.item_layout, parent, false)\n        val textView: TextView = view.findViewById(R.id.textView)\n        val item = items[position]\n        textView.text = item\n        return view\n    }\n\n    override fun getItem(position: Int): Any {\n        return items[position]\n    }\n\n    override fun getItemId(position: Int): Long {\n        return position.toLong()\n    }\n\n    override fun getCount(): Int {\n        return items.size\n    }\n}",
    "filename": "2de2270373031dbaf0199bc3dd78a3da_1.kt"
  },
  {
    "conversation_hash": "64b532bbfd84f8e71570026036cae9d2",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onOptionsItemSelected(item: MenuItem): Boolean {\n    return when (item.itemId) {\n        R.id.action_item1 -> {\n            // Handle item 1 click\n            true\n        }\n        R.id.action_item2 -> {\n            // Handle item 2 click\n            true\n        }\n        else -> super.onOptionsItemSelected(item)\n    }\n}",
    "filename": "64b532bbfd84f8e71570026036cae9d2_4.kt"
  },
  {
    "conversation_hash": "a83f10b3a1b76f86e2f05d466865e10f",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreateOptionsMenu(menu: Menu): Boolean {\n    // Inflate the menu resource file\n    menuInflater.inflate(R.menu.main_menu, menu)\n    return true\n}",
    "filename": "a83f10b3a1b76f86e2f05d466865e10f_2.kt"
  },
  {
    "conversation_hash": "a83f10b3a1b76f86e2f05d466865e10f",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onOptionsItemSelected(item: MenuItem): Boolean {\n    return when (item.itemId) {\n        R.id.action_button -> {\n            // Handle button click here\n            true\n        }\n        else -> super.onOptionsItemSelected(item)\n    }\n}",
    "filename": "a83f10b3a1b76f86e2f05d466865e10f_3.kt"
  },
  {
    "conversation_hash": "a83f10b3a1b76f86e2f05d466865e10f",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n  \n    // Enable the back button in the toolbar\n    val toolbar = findViewById<Toolbar>(R.id.toolbar)\n    setSupportActionBar(toolbar)\n  \n    supportActionBar?.setDisplayHomeAsUpEnabled(true)\n}",
    "filename": "a83f10b3a1b76f86e2f05d466865e10f_4.kt"
  },
  {
    "conversation_hash": "a83f10b3a1b76f86e2f05d466865e10f",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onOptionsItemSelected(item: MenuItem): Boolean {\n    return when (item.itemId) {\n        android.R.id.home -> {\n            // Handle back button click here\n            onBackPressed()\n            true\n        }\n        else -> super.onOptionsItemSelected(item)\n    }\n}",
    "filename": "a83f10b3a1b76f86e2f05d466865e10f_5.kt"
  },
  {
    "conversation_hash": "4fc9d7e6303e4f05dba455a957f6c435",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.content.Intent\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Start a new activity\n        val intent = Intent(this, SecondActivity::class.java)\n        startActivity(intent)\n    }\n}\n\nclass SecondActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_second)\n    }\n}",
    "filename": "4fc9d7e6303e4f05dba455a957f6c435_0.kt"
  },
  {
    "conversation_hash": "96063076b8fcdb4b786b693a1daa7aaf",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "private const val AUTO_SCROLL_DELAY = 10000L // Задержка в миллисекундах (4 секунды)\n\ncompanion object {\n    @JvmStatic\n    fun newInstance() = HomeFragment()\n}\n\nfun placeHolder(context: Context, adapterPosition: Int) {\n    Toast.makeText(context, adapterPosition.toString(), Toast.LENGTH_SHORT).show()\n}",
    "filename": "96063076b8fcdb4b786b693a1daa7aaf_2.kt"
  },
  {
    "conversation_hash": "96063076b8fcdb4b786b693a1daa7aaf",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class YourAdapter(private val context: Context) : RecyclerView.Adapter<YourAdapter.ViewHolder>() {\n    \n    // Ваш код адаптера\n\n    fun placeHolder(adapterPosition: Int) {\n        Toast.makeText(context, adapterPosition.toString(), Toast.LENGTH_SHORT).show()\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        // Ваш код onBindViewHolder\n        holder.itemView.setOnClickListener {\n            placeHolder(holder.adapterPosition)\n        }\n    }\n\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n       // Ваш код ViewHolder\n    }\n}",
    "filename": "96063076b8fcdb4b786b693a1daa7aaf_4.kt"
  },
  {
    "conversation_hash": "96063076b8fcdb4b786b693a1daa7aaf",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyFragment : Fragment() {\n    companion object {\n        private const val ARG_PARAM1 = \"param1\"\n        private const val ARG_PARAM2 = \"param2\"\n\n        @JvmStatic\n        fun newInstance(param1: String, param2: String) = MyFragment().apply {\n            arguments = Bundle().apply {\n                putString(ARG_PARAM1, param1)\n                putString(ARG_PARAM2, param2)\n            }\n        }\n    }\n\n    // остальной код фрагмента\n}",
    "filename": "96063076b8fcdb4b786b693a1daa7aaf_5.kt"
  },
  {
    "conversation_hash": "96063076b8fcdb4b786b693a1daa7aaf",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyFragment : Fragment() {\n    companion object {\n        @JvmStatic\n        fun oldInstance(): MyFragment {\n            return MyFragment()\n        }\n    }\n\n    // остальной код фрагмента\n}",
    "filename": "96063076b8fcdb4b786b693a1daa7aaf_7.kt"
  },
  {
    "conversation_hash": "96063076b8fcdb4b786b693a1daa7aaf",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyFragment : Fragment() {\n    companion object {\n        @JvmStatic\n        fun oldInstance(currentInstance: MyFragment): MyFragment {\n            return currentInstance\n        }\n    }\n\n    // остальной код фрагмента\n}",
    "filename": "96063076b8fcdb4b786b693a1daa7aaf_9.kt"
  },
  {
    "conversation_hash": "96063076b8fcdb4b786b693a1daa7aaf",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "class YourAdapter(private val fragment: YourFragment, ...) : RecyclerView.Adapter<YourAdapter.ViewHolder>() {\n\n    // ...\n\n    fun callFragmentMethod() {\n        fragment.yourMethod()\n    }\n\n    // ...\n}",
    "filename": "96063076b8fcdb4b786b693a1daa7aaf_11.kt"
  },
  {
    "conversation_hash": "96063076b8fcdb4b786b693a1daa7aaf",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "class YourAdapter(...) : RecyclerView.Adapter<YourAdapter.ViewHolder>() {\n    private lateinit var fragment: YourFragment\n\n    fun setFragment(fragment: YourFragment) {\n        this.fragment = fragment\n    }\n\n    // ...\n\n    fun callFragmentMethod() {\n        fragment.yourMethod()\n    }\n\n    // ...\n}",
    "filename": "96063076b8fcdb4b786b693a1daa7aaf_12.kt"
  },
  {
    "conversation_hash": "15b044ca7d92ab6657ac4250a6a35e63",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "kotlin.random.Random"
    ],
    "code": "import kotlin.random.Random\n\nfun main() {\n    val random = Random(System.currentTimeMillis())\n    \n    val randomInt = random.nextInt() // Generate a random integer\n    println(\"Random integer: $randomInt\")\n    \n    val randomDouble = random.nextDouble() // Generate a random double between 0 and 1\n    println(\"Random double: $randomDouble\")\n    \n    val randomBoolean = random.nextBoolean() // Generate a random boolean\n    println(\"Random boolean: $randomBoolean\")\n    \n    val randomInRange = random.nextInt(100) // Generate a random integer between 0 and 100\n    println(\"Random integer in range [0, 100): $randomInRange\")\n}",
    "filename": "15b044ca7d92ab6657ac4250a6a35e63_0.kt"
  },
  {
    "conversation_hash": "1eaa68d60f3beaee8772065f8b49e8e8",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun showFragment() {\n    val fragment = Blank_home_fragment()\n    val fragmentManager = requireActivity().supportFragmentManager\n    val transaction = fragmentManager.beginTransaction()\n    transaction.add(R.id.fragment_container, fragment)\n    transaction.addToBackStack(null)\n    transaction.commit()\n}",
    "filename": "1eaa68d60f3beaee8772065f8b49e8e8_4.kt"
  },
  {
    "conversation_hash": "1eaa68d60f3beaee8772065f8b49e8e8",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class ViewPagerAdapter(fragmentManager: FragmentManager) :\n    FragmentPagerAdapter(fragmentManager, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) {\n\n    override fun getCount(): Int {\n        return fragmentList.size\n    }\n\n    override fun getItem(position: Int): Fragment {\n        return fragmentList[position]\n    }\n}",
    "filename": "1eaa68d60f3beaee8772065f8b49e8e8_7.kt"
  },
  {
    "conversation_hash": "f2a566e2ea7e7f714d9d1392cf464133",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    ...\n\n    companion object {\n        @JvmStatic\n        fun yourFunction() {\n            // ваш код функции\n        }\n    }\n}",
    "filename": "f2a566e2ea7e7f714d9d1392cf464133_3.kt"
  },
  {
    "conversation_hash": "f2a566e2ea7e7f714d9d1392cf464133",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class OtherClass {\n\n    ...\n\n    fun callFunction() {\n        MainActivity.yourFunction()\n    }\n}",
    "filename": "f2a566e2ea7e7f714d9d1392cf464133_5.kt"
  },
  {
    "conversation_hash": "f2a566e2ea7e7f714d9d1392cf464133",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    ...\n\n    companion object {\n        @JvmStatic\n        fun yourFunction() {\n            // ваш код функции\n        }\n    }\n\n    // Объявление функции public\n    public fun yourPublicFunction() {\n        // ваш код общедоступной функции\n    }\n}",
    "filename": "f2a566e2ea7e7f714d9d1392cf464133_6.kt"
  },
  {
    "conversation_hash": "f2a566e2ea7e7f714d9d1392cf464133",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    ...\n\n    // Объявление функции public\n    public fun changeFragment(fragment: Fragment) {\n        supportFragmentManager.beginTransaction().replace(R.id.Main_Space_To_Fragment, fragment)\n            .commit()\n    }\n}",
    "filename": "f2a566e2ea7e7f714d9d1392cf464133_8.kt"
  },
  {
    "conversation_hash": "f2a566e2ea7e7f714d9d1392cf464133",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun showFragment() {\n    val fragment: Blank_home_fragment = Blank_home_fragment()\n    val imageView = view.findViewById<ImageView>(R.id.blankImage)\n    imageView.setImageResource(R.drawable.historic_10)\n    MainActivity.changeFragment(fragment)\n}",
    "filename": "f2a566e2ea7e7f714d9d1392cf464133_10.kt"
  },
  {
    "conversation_hash": "c0201f54b04f3025912fc5ef440cf0e6",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    // ...\n\n    companion object {\n        @JvmStatic\n        fun replaceFragment(fragment: Fragment) {\n            val fragmentManager = supportFragmentManager\n            val fragmentTransaction = fragmentManager.beginTransaction()\n            fragmentTransaction.replace(R.id.Main_Space_To_Fragment, fragment)\n            fragmentTransaction.commit()\n        }\n    }\n\n    // ...\n}",
    "filename": "c0201f54b04f3025912fc5ef440cf0e6_1.kt"
  },
  {
    "conversation_hash": "c0201f54b04f3025912fc5ef440cf0e6",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "companion object {\n    @JvmStatic\n    fun replaceFragment(fragment: Fragment) {\n        val fragmentManager = fragment.requireActivity().supportFragmentManager\n        val fragmentTransaction = fragmentManager.beginTransaction()\n        fragmentTransaction.replace(R.id.Main_Space_To_Fragment, fragment)\n        fragmentTransaction.commit()\n    }\n}",
    "filename": "c0201f54b04f3025912fc5ef440cf0e6_3.kt"
  },
  {
    "conversation_hash": "c4c67b5dfedd0ff6949ab27f7c99f2d5",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun replaceFragment(fragment: Fragment) {\n    val transaction = supportFragmentManager.beginTransaction()\n    transaction.replace(R.id.fragment_container, fragment)\n    transaction.addToBackStack(null)\n    transaction.commit()\n}",
    "filename": "c4c67b5dfedd0ff6949ab27f7c99f2d5_0.kt"
  },
  {
    "conversation_hash": "a8e55261e7c205add77bbc59c4f1a5d7",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun showFragment() {\n    val fragment = Blank_home_fragment()\n    val blankImageId = fragment.getBlankImageId()\n    val imageView = requireView().findViewById<ImageView>(blankImageId)\n    imageView.setImageResource(R.drawable.historic_11)\n    changeFragment(fragment)\n}",
    "filename": "a8e55261e7c205add77bbc59c4f1a5d7_2.kt"
  },
  {
    "conversation_hash": "a8e55261e7c205add77bbc59c4f1a5d7",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun showFragment() {\n    val fragment = Blank_home_fragment()\n    changeFragment(fragment)\n\n    val blankImageId = fragment.getBlankImageId()\n    val imageView = requireView().findViewById<ImageView>(blankImageId)\n    imageView.setImageResource(R.drawable.historic_11)\n}\n\nprivate fun changeFragment(fragment: Fragment) {\n    requireActivity().supportFragmentManager.beginTransaction()\n        .replace(R.id.Main_Space_To_Fragment, fragment)\n        .commit()\n}",
    "filename": "a8e55261e7c205add77bbc59c4f1a5d7_4.kt"
  },
  {
    "conversation_hash": "3411dbb3e35914cb8713d458551e73b8",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreateView(\n    inflater: LayoutInflater, container: ViewGroup?,\n    savedInstanceState: Bundle?\n): View? {\n    return inflater.inflate(R.layout.fragment_blank_home, container, false)\n}",
    "filename": "3411dbb3e35914cb8713d458551e73b8_0.kt"
  },
  {
    "conversation_hash": "05cce8b6b3dabcb3e20bea843579111a",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Blank_home_fragment : Fragment() {\n    // TODO: Rename and change types of parameters\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n\n        return inflater.inflate(R.layout.fragment_blank_home, container, false)\n    }\n\n    fun getBlankImageId(): Int {\n        return R.id.blankImage\n    }\n    fun changeImages(image:Int) {\n        val ImageView = requireView().findViewById<ImageView>(R.id.blankImage)\n        ImageView.setImageResource(image)\n    }\n\n    companion object {\n\n        // TODO: Rename and change types and number of parameters\n        @JvmStatic\n        fun newInstance() = Blank_home_fragment()\n\n    }\n    \n    private fun showFragment() {\n        val fragment = Blank_home_fragment()\n        changeFragment(fragment)\n        fragment.changeImages(R.drawable.historic_10)\n    }\n\n    private fun changeFragment(fragment: Fragment) {\n        requireActivity().supportFragmentManager.beginTransaction()\n            .replace(R.id.Main_Space_To_Fragment, fragment)\n            .commit()\n    }\n}",
    "filename": "05cce8b6b3dabcb3e20bea843579111a_0.kt"
  },
  {
    "conversation_hash": "05cce8b6b3dabcb3e20bea843579111a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Blank_home_fragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_blank_home, container, false)\n    }\n\n    fun getBlankImageId(): Int {\n        return R.id.blankImage\n    }\n    \n    fun changeImages(image: Int) {\n        val ImageView = requireView().findViewById<ImageView>(R.id.blankImage)\n        ImageView.setImageResource(image)\n    }\n\n    companion object {\n        @JvmStatic\n        fun newInstance() = Blank_home_fragment()\n    }\n    \n    fun showFragment() {\n        val fragment = OtherFragment() // Замените OtherFragment на нужный вам фрагмент\n        changeFragment(fragment)\n        fragment.changeImages(R.drawable.historic_10)\n    }\n\n    private fun changeFragment(fragment: Fragment) {\n        requireActivity().supportFragmentManager.beginTransaction()\n            .replace(R.id.Main_Space_To_Fragment, fragment)\n            .commit()\n    }\n}\n\nclass OtherFragment : Fragment() {\n    // Код для OtherFragment\n}",
    "filename": "05cce8b6b3dabcb3e20bea843579111a_1.kt"
  },
  {
    "conversation_hash": "9477f3fb351c0df4a4ce40ff587dfdd4",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "companion object {\n    @JvmStatic\n    fun newInstance(imageResId: Int) = BlankHomeFragment().apply {\n        arguments = Bundle().apply {\n            putInt(\"imageResId\", imageResId)\n        }\n    }\n}",
    "filename": "9477f3fb351c0df4a4ce40ff587dfdd4_0.kt"
  },
  {
    "conversation_hash": "9477f3fb351c0df4a4ce40ff587dfdd4",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    arguments?.getInt(\"imageResId\")?.let { imageResId ->\n        changeImage(imageResId)\n    }\n}",
    "filename": "9477f3fb351c0df4a4ce40ff587dfdd4_1.kt"
  },
  {
    "conversation_hash": "9477f3fb351c0df4a4ce40ff587dfdd4",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class BlankHomeFragment : Fragment() {\n    private lateinit var imageView: ImageView\n    private var imageResId: Int = 0\n\n    // остальной код фрагмента...\n\n    fun updateImage(imageResId: Int) {\n        this.imageResId = imageResId\n        imageView.setImageResource(imageResId)\n    }\n}",
    "filename": "9477f3fb351c0df4a4ce40ff587dfdd4_3.kt"
  },
  {
    "conversation_hash": "9477f3fb351c0df4a4ce40ff587dfdd4",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun showFragment() {\n    val fragment = BlankHomeFragment.newInstance()\n    changeFragment(fragment)\n    \n    fragment.view?.let {\n        fragment.updateImage(R.drawable.historic_10)\n    }\n}",
    "filename": "9477f3fb351c0df4a4ce40ff587dfdd4_4.kt"
  },
  {
    "conversation_hash": "9477f3fb351c0df4a4ce40ff587dfdd4",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.widget.ImageView",
      "androidx.fragment.app.Fragment",
      "com.example.cinema_provider_app.R"
    ],
    "code": "package com.example.cinema_provider_app.main_Fragments\n\nimport android.os.Bundle\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.ImageView\nimport com.example.cinema_provider_app.R\n\nclass BlankHomeFragment : Fragment() {\n    private lateinit var imageView: ImageView\n    private var imageResId: Int = 0\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        val view = inflater.inflate(R.layout.fragment_blank_home, container, false)\n        imageView = view.findViewById(R.id.blankImage)\n        return view\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        imageView.setImageResource(imageResId)\n    }\n\n    fun updateImage(imageResId: Int) {\n        this.imageResId = imageResId\n        if (this::imageView.isInitialized) {\n            imageView.setImageResource(imageResId)\n        }\n    }\n\n    companion object {\n        @JvmStatic\n        fun newInstance() = BlankHomeFragment()\n    }\n}",
    "filename": "9477f3fb351c0df4a4ce40ff587dfdd4_5.kt"
  },
  {
    "conversation_hash": "9477f3fb351c0df4a4ce40ff587dfdd4",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun showFragment() {\n    val fragment = BlankHomeFragment.newInstance()\n    changeFragment(fragment)\n    \n    fragment.view?.let {\n        fragment.updateImage(R.drawable.historic_10)\n    }\n}",
    "filename": "9477f3fb351c0df4a4ce40ff587dfdd4_6.kt"
  },
  {
    "conversation_hash": "6c31719eeca5e954ae610242bb29fea6",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "syntax = \"proto3\";\n\nmessage FileRequest {\n  string fileName = 1;\n  bytes fileContent = 2;\n}\n\nservice FileService {\n  rpc uploadFile(stream FileRequest) returns (Empty) {}\n}",
    "filename": "6c31719eeca5e954ae610242bb29fea6_4.kt"
  },
  {
    "conversation_hash": "b9c4d5f945e3e8ff503d52e86239ac12",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    println(\"Hello, world!\")\n}\n\n// Функция верхнего уровня\n\nfun sayHello() {\n    println(\"Hello!\")\n}",
    "filename": "b9c4d5f945e3e8ff503d52e86239ac12_0.kt"
  },
  {
    "conversation_hash": "b9c4d5f945e3e8ff503d52e86239ac12",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Person {\n    // Метод класса\n    fun sayHello() {\n        println(\"Hello!\")\n    }\n}\n\nfun main() {\n    val person = Person()\n    person.sayHello()\n}",
    "filename": "b9c4d5f945e3e8ff503d52e86239ac12_1.kt"
  },
  {
    "conversation_hash": "b9c4d5f945e3e8ff503d52e86239ac12",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    fun sayHello() {\n        println(\"Hello!\")\n    }\n    \n    sayHello()\n}",
    "filename": "b9c4d5f945e3e8ff503d52e86239ac12_2.kt"
  },
  {
    "conversation_hash": "b9c4d5f945e3e8ff503d52e86239ac12",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun String.sayHello() {\n    println(\"Hello, $this!\")\n}\n\nfun main() {\n    val name = \"John\"\n    name.sayHello()\n}",
    "filename": "b9c4d5f945e3e8ff503d52e86239ac12_3.kt"
  },
  {
    "conversation_hash": "7276872e591cf146eb8d96c9129bcbe7",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "kotlin\nprivate lateinit var imageView: ImageView\n\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    imageView = view.findViewById(R.id.blankImage)\n}",
    "filename": "7276872e591cf146eb8d96c9129bcbe7_0.kt"
  },
  {
    "conversation_hash": "a8bd1af3a492e8e55fa6b5319a4491a6",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class BlankHomeFragment : Fragment() {\n    private var imageResId: Int = 0\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        val view = inflater.inflate(R.layout.fragment_blank_home, container, false)\n        return view\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        val imageView: ImageView = view.findViewById(R.id.blankImage)\n        imageView.setImageResource(imageResId)\n    }\n\n    companion object {\n        @JvmStatic\n        fun newInstance(imageResId: Int) = BlankHomeFragment().apply {\n            this.imageResId = imageResId\n        }\n    }\n}",
    "filename": "a8bd1af3a492e8e55fa6b5319a4491a6_0.kt"
  },
  {
    "conversation_hash": "d7b9ef9b94dd8a94b242685b49ec7acb",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun remove_str(str: String?, str_remove: String): String? {\n    if (str == null) return null\n    \n    return str.replace(str_remove, \"\")\n}",
    "filename": "d7b9ef9b94dd8a94b242685b49ec7acb_0.kt"
  },
  {
    "conversation_hash": "1b9e40fe82923d7a1fc28e6e71a84ec8",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "javafx.scene.control.TextArea"
    ],
    "code": "import javafx.scene.control.TextArea\n\nfun main() {\n    val textEditMultiLine = TextArea()\n    textEditMultiLine.isAutoComplete = false\n}",
    "filename": "1b9e40fe82923d7a1fc28e6e71a84ec8_0.kt"
  },
  {
    "conversation_hash": "31ec558d02a13057d3a80cd8be0f45a7",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.util.Date"
    ],
    "code": "import java.util.Date\n\nfun main() {\n    val currentDate = Date()\n    println(currentDate)\n}",
    "filename": "31ec558d02a13057d3a80cd8be0f45a7_0.kt"
  },
  {
    "conversation_hash": "31ec558d02a13057d3a80cd8be0f45a7",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "java.text.SimpleDateFormat",
      "java.util.Date"
    ],
    "code": "import java.text.SimpleDateFormat\nimport java.util.Date\n\nfun main() {\n    val currentDate = Date()\n    val dateFormat = SimpleDateFormat(\"dd/MM/yyyy\")\n    val formattedDate = dateFormat.format(currentDate)\n    println(formattedDate)\n}",
    "filename": "31ec558d02a13057d3a80cd8be0f45a7_1.kt"
  },
  {
    "conversation_hash": "2f2e1ff0c4bad1eaf7fae29f62085b59",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.time.LocalDate",
      "java.time.format.DateTimeFormatter"
    ],
    "code": "import java.time.LocalDate\nimport java.time.format.DateTimeFormatter\n\nfun main() {\n    val currentDate = LocalDate.now()\n    val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\") // Define the format you want\n    \n    val currentDateString = currentDate.format(formatter)\n    println(currentDateString)\n}",
    "filename": "2f2e1ff0c4bad1eaf7fae29f62085b59_0.kt"
  },
  {
    "conversation_hash": "b96eced66b0c9c80737e6da30732bb1e",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyClass private constructor(private val variable1: Int, private val variable2: Int) {\n\n    companion object Factory {\n        fun createInstance(variable1: Int, variable2: Int): MyClass {\n            return MyClass(variable1, variable2)\n        }\n    }\n\n    fun method() {\n        // Access variable1 or variable2 inside the method\n        println(variable1)\n    }\n}",
    "filename": "b96eced66b0c9c80737e6da30732bb1e_0.kt"
  },
  {
    "conversation_hash": "b96eced66b0c9c80737e6da30732bb1e",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyClass private constructor(private val A: Float, private val B: Boolean) {\n\n    companion object Factory {\n        fun createInstance(A: Float, B: Boolean): MyClass {\n            return MyClass(A, B)\n        }\n    }\n\n    fun getA(): Float {\n        return A\n    }\n}",
    "filename": "b96eced66b0c9c80737e6da30732bb1e_2.kt"
  },
  {
    "conversation_hash": "b96eced66b0c9c80737e6da30732bb1e",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyClass private constructor() {\n    private lateinit var variable1: String\n    private lateinit var variable2: Int\n\n    companion object Factory {\n        fun createInstance(): MyClass {\n            return MyClass()\n        }\n    }\n\n    fun method() {\n        // Access variable1 or variable2 inside the method\n        println(variable1)\n        println(variable2)\n    }\n}",
    "filename": "b96eced66b0c9c80737e6da30732bb1e_4.kt"
  },
  {
    "conversation_hash": "b96eced66b0c9c80737e6da30732bb1e",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyClass private constructor(private val A: Float) {\n\n    companion object Factory {\n        fun createInstance(A: Float): MyClass {\n            return MyClass(A)\n        }\n    }\n\n    fun returnValue(): Float {\n        return A\n    }\n}",
    "filename": "b96eced66b0c9c80737e6da30732bb1e_6.kt"
  },
  {
    "conversation_hash": "b96eced66b0c9c80737e6da30732bb1e",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "val list = arrayListOf(\"Apple\", \"Banana\", \"Orange\")\n\nfor (index in 0 until list.size) {\n    val item = list[index]\n    println(\"Element at index $index is $item\")\n}",
    "filename": "b96eced66b0c9c80737e6da30732bb1e_8.kt"
  },
  {
    "conversation_hash": "b96eced66b0c9c80737e6da30732bb1e",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "val list = arrayListOf(\"Apple\", \"Banana\", \"Orange\")\n\nfor (index in list.indices) {\n    val item = list[index]\n    println(\"Element at index $index is $item\")\n}",
    "filename": "b96eced66b0c9c80737e6da30732bb1e_10.kt"
  },
  {
    "conversation_hash": "b96eced66b0c9c80737e6da30732bb1e",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "val list = arrayListOf(\"Apple\", \"Banana\", \"Orange\")\nval indexToRemove = 1\n\nif (indexToRemove in 0 until list.size) {\n    list.removeAt(indexToRemove)\n    println(\"Element at index $indexToRemove removed successfully.\")\n} else {\n    println(\"Invalid index.\")\n}",
    "filename": "b96eced66b0c9c80737e6da30732bb1e_11.kt"
  },
  {
    "conversation_hash": "b96eced66b0c9c80737e6da30732bb1e",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "enum class Weekday(private val dayName: String, private val isWeekend: Boolean) {\n    MONDAY(\"Monday\", false),\n    TUESDAY(\"Tuesday\", false),\n    WEDNESDAY(\"Wednesday\", false),\n    THURSDAY(\"Thursday\", false),\n    FRIDAY(\"Friday\", false),\n    SATURDAY(\"Saturday\", true),\n    SUNDAY(\"Sunday\", true);\n\n    fun getDayName(): String {\n        return dayName\n    }\n\n    fun isWeekend(): Boolean {\n        return isWeekend\n    }\n}",
    "filename": "b96eced66b0c9c80737e6da30732bb1e_13.kt"
  },
  {
    "conversation_hash": "b96eced66b0c9c80737e6da30732bb1e",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [],
    "code": "enum class Weekday {\n    MONDAY {\n        override fun getDayName(): String {\n            return \"Monday\"\n        }\n\n        override fun isWeekend(): Boolean {\n            return false\n        }\n    },\n    TUESDAY {\n        override fun getDayName(): String {\n            return \"Tuesday\"\n        }\n\n        override fun isWeekend(): Boolean {\n            return false\n        }\n    },\n    WEDNESDAY {\n        override fun getDayName(): String {\n            return \"Wednesday\"\n        }\n\n        override fun isWeekend(): Boolean {\n            return false\n        }\n    },\n    THURSDAY {\n        override fun getDayName(): String {\n            return \"Thursday\"\n        }\n\n        override fun isWeekend(): Boolean {\n            return false\n        }\n    },\n    FRIDAY {\n        override fun getDayName(): String {\n            return \"Friday\"\n        }\n\n        override fun isWeekend(): Boolean {\n            return false\n        }\n    },\n    SATURDAY {\n        override fun getDayName(): String {\n            return \"Saturday\"\n        }\n\n        override fun isWeekend(): Boolean {\n            return true\n        }\n    },\n    SUNDAY {\n        override fun getDayName(): String {\n            return \"Sunday\"\n        }\n\n        override fun isWeekend(): Boolean {\n            return true\n        }\n    };\n\n    abstract fun getDayName(): String\n    abstract fun isWeekend(): Boolean\n}",
    "filename": "b96eced66b0c9c80737e6da30732bb1e_15.kt"
  },
  {
    "conversation_hash": "b96eced66b0c9c80737e6da30732bb1e",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [],
    "code": "enum class Weekday {\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\n\nfun main() {\n    for (day in Weekday.values()) {\n        println(\"$day - is a day of the week\")\n    }\n}",
    "filename": "b96eced66b0c9c80737e6da30732bb1e_17.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "enum class DayOfWeek {\n    Monday,\n    Tuesday,\n    Wednesday,\n    Thursday,\n    Friday,\n    Saturday,\n    Sunday\n}\n\nfun main() {\n    for (day in DayOfWeek.values()) {\n        println(\"$day is a day of the week\")\n    }\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_0.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface MyInterface {\n    fun myMethod()\n}\n\nopen class MyClass {\n    open fun myMethod() {\n        println(\"Base class method\")\n    }\n}\n\nfun main() {\n    val myObject = object : MyClass(), MyInterface {\n        override fun myMethod() {\n            super<MyClass>.myMethod() // Call the base class method\n            println(\"Anonymous class method\")\n        }\n    }\n\n    myObject.myMethod()\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_2.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyClass {\n    // class members and methods\n}\n\nfun main() {\n    val myObject = MyClass() // Creating an instance of MyClass\n\n    // Use myObject and perform operations\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_4.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyClass(val name: String) {\n    fun printName() {\n        println(\"Name: $name\")\n    }\n}\n\nfun main() {\n    val obj = MyClass(\"John\") // Initialization without explicit constructor\n\n    obj.printName() // Output: Name: John\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_5.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface MyInterface {\n    fun myMethod(parameter: String)\n}\n\nclass MyClass : MyInterface {\n    override fun myMethod(parameter: String) {\n        println(\"Method called with parameter: $parameter\")\n    }\n}\n\nfun main() {\n    val obj = object : MyClass(), MyInterface {\n        override fun myMethod(parameter: String) {\n            super<MyClass>.myMethod(parameter) // Call the base class method\n            println(\"Custom implementation with parameter: $parameter\")\n        }\n    }\n\n    obj.myMethod(\"Hello\")\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_6.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface MyInterface {\n    fun myMethod(parameter: String)\n}\n\nclass MyClass : MyInterface {\n    override fun myMethod(parameter: String) {\n        println(\"Method called with parameter: $parameter\")\n    }\n}\n\nfun main() {\n    val obj = object : MyClass(), MyInterface {\n        override fun myMethod(parameter: String) {\n            super<MyClass>.myMethod(parameter)\n            println(\"Custom implementation with parameter: $parameter\")\n        }\n    }\n\n    obj.myMethod(\"Hello\")\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_8.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface Interface1 {\n    fun method1()\n}\n\ninterface Interface2 {\n    fun method2()\n}\n\nopen class BaseClass {\n    fun commonMethod() {\n        println(\"Common method in base class\")\n    }\n}\n\nfun main() {\n    val obj = object : BaseClass(), Interface1, Interface2 {\n        override fun method1() {\n            println(\"Method 1 implementation\")\n        }\n\n        override fun method2() {\n            println(\"Method 2 implementation\")\n        }\n    }\n\n    obj.commonMethod()\n    obj.method1()\n    obj.method2()\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_10.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface Interface1 {\n    fun method1()\n}\n\ninterface Interface2 {\n    fun method2()\n}\n\nclass MyClass : Interface1, Interface2 {\n    override fun method1() {\n        println(\"Method 1 implementation\")\n    }\n\n    override fun method2() {\n        println(\"Method 2 implementation\")\n    }\n}\n\nfun main() {\n    val obj = MyClass()\n\n    val interface1Impl: Interface1 = obj::method1\n    val interface2Impl: Interface2 = obj::method2\n\n    interface1Impl.method1()\n    interface2Impl.method2()\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_12.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val sum: (Int, Int) -> Int = { a, b -> a + b }\n\n    val result = sum(3, 5)\n    println(\"Sum: $result\")\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_14.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 18,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface MyFunctionalInterface1 {\n    fun method1()\n}\n\ninterface MyFunctionalInterface2 {\n    fun method2()\n}\n\nfun main() {\n    val method1Impl: () -> Unit = { println(\"Functional Method 1\") }\n    val method2Impl: () -> Unit = { println(\"Functional Method 2\") }\n\n    val myObject = object : MyFunctionalInterface1, MyFunctionalInterface2 {\n        override fun method1() {\n            method1Impl.invoke()\n        }\n\n        override fun method2() {\n            method2Impl.invoke()\n        }\n    }\n\n    myObject.method1()\n    myObject.method2()\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_18.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 20,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface FunctionalInterface1 {\n    fun method1()\n}\n\ninterface FunctionalInterface2 {\n    fun method2()\n}\n\nopen class ClassA {\n    fun normalMethod() {\n        println(\"Normal method\")\n    }\n}\n\nclass ClassB : ClassA(), FunctionalInterface1, FunctionalInterface2 {\n    override fun method1() {\n        println(\"Functional Method 1\")\n    }\n\n    override fun method2() {\n        println(\"Functional Method 2\")\n    }\n}\n\nfun main() {\n    val instanceB = ClassB()\n    instanceB.normalMethod()\n    instanceB.method1()\n    instanceB.method2()\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_20.kt"
  },
  {
    "conversation_hash": "db0fc244f2242bcc39738aac3154ee0d",
    "code_index": 22,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface FunctionalInterface1 {\n    fun method1()\n}\n\ninterface FunctionalInterface2 {\n    fun method2()\n}\n\nopen class ClassA {\n    fun normalMethod() {\n        println(\"Normal method\")\n    }\n}\n\nfun main() {\n    val instanceB = object : ClassA(), FunctionalInterface1, FunctionalInterface2 {\n        override fun method1() {\n            println(\"Functional Method 1\")\n        }\n\n        override fun method2() {\n            println(\"Functional Method 2\")\n        }\n    }\n\n    instanceB.normalMethod()\n    instanceB.method1()\n    instanceB.method2()\n}",
    "filename": "db0fc244f2242bcc39738aac3154ee0d_22.kt"
  },
  {
    "conversation_hash": "66b3ef32be318125d19a041164215a50",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "com.google.android.youtube.player.YouTubeInitializationResult",
      "com.google.android.youtube.player.YouTubePlayer",
      "com.google.android.youtube.player.YouTubePlayerView"
    ],
    "code": "import com.google.android.youtube.player.YouTubeInitializationResult\nimport com.google.android.youtube.player.YouTubePlayer\nimport com.google.android.youtube.player.YouTubePlayerView\n\n//...\n\nval playerView = view.findViewById<YouTubePlayerView>(R.id.youtubePlayerView)\nplayerView.initialize(\"YOUR_API_KEY\", object : YouTubePlayer.OnInitializedListener {\n    override fun onInitializationSuccess(provider: YouTubePlayer.Provider, player: YouTubePlayer, wasRestored: Boolean) {\n        player.cueVideo(\"wFWqGCbGVdc\") // ID видео на YouTube\n    }\n\n    override fun onInitializationFailure(provider: YouTubePlayer.Provider, result: YouTubeInitializationResult) {\n        // Обработка ошибки инициализации\n    }\n})",
    "filename": "66b3ef32be318125d19a041164215a50_10.kt"
  },
  {
    "conversation_hash": "4cfc4a5dd1c082f4afb8e5e1e0584931",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other == null || other.javaClass != this.javaClass) return false\n\n    val obj = other as MyClass\n\n    // Сравниваем поля объектов на равенство\n    return this.field1 == obj.field1 && this.field2 == obj.field2\n}",
    "filename": "4cfc4a5dd1c082f4afb8e5e1e0584931_0.kt"
  },
  {
    "conversation_hash": "4cfc4a5dd1c082f4afb8e5e1e0584931",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun hashCode(): Int {\n    var result = field1.hashCode()\n    result = 31 * result + field2.hashCode()\n    return result\n}",
    "filename": "4cfc4a5dd1c082f4afb8e5e1e0584931_1.kt"
  },
  {
    "conversation_hash": "ac7a09d41d30a2815447450480da48ec",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "sealed class UiError {\n    object NetworkError : UiError() {\n        override fun toString(): String {\n            return \"Network Error\"\n        }\n    }\n\n    data class ValidationError(val errorMessage: String) : UiError()\n\n    data class ServerError(val errorCode: Int, val errorMessage: String) : UiError()\n}",
    "filename": "ac7a09d41d30a2815447450480da48ec_0.kt"
  },
  {
    "conversation_hash": "ac7a09d41d30a2815447450480da48ec",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun handleUiError(uiError: UiError) {\n    when (uiError) {\n        is UiError.NetworkError -> {\n            // Handle network error\n            println(uiError)\n        }\n        is UiError.ValidationError -> {\n            // Handle validation error\n            println(uiError.errorMessage)\n        }\n        is UiError.ServerError -> {\n            // Handle server error\n            println(\"Error Code: ${uiError.errorCode}, Message: ${uiError.errorMessage}\")\n        }\n    }\n}",
    "filename": "ac7a09d41d30a2815447450480da48ec_1.kt"
  },
  {
    "conversation_hash": "ac7a09d41d30a2815447450480da48ec",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "sealed class A {\n    object B : A() {\n        fun callAConstructor() {\n            val instanceOfA = this@A // Calling A's constructor\n            // Use `instanceOfA` as needed\n        }\n    }\n}",
    "filename": "ac7a09d41d30a2815447450480da48ec_3.kt"
  },
  {
    "conversation_hash": "ac7a09d41d30a2815447450480da48ec",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Superclass(val value: String) {\n    init {\n        println(\"Superclass init block with value: $value\")\n    }\n}\n\nclass Subclass(value: String) : Superclass(value) {\n    init {\n        println(\"Subclass init block\")\n    }\n}",
    "filename": "ac7a09d41d30a2815447450480da48ec_7.kt"
  },
  {
    "conversation_hash": "ac7a09d41d30a2815447450480da48ec",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Superclass(val value: String) {\n    init {\n        println(\"Superclass init block with value: $value\")\n    }\n}\n\nclass Subclass(value: String) : Superclass(value) {\n    init {\n        println(\"Subclass init block\")\n    }\n}",
    "filename": "ac7a09d41d30a2815447450480da48ec_10.kt"
  },
  {
    "conversation_hash": "ac7a09d41d30a2815447450480da48ec",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun doSomething(value: String) {\n    // Method that requires a non-null String parameter\n}\n\nval A: String? = \"Hello\"\ndoSomething(A!!) // Using the !! operator to assert that A is not null",
    "filename": "ac7a09d41d30a2815447450480da48ec_12.kt"
  },
  {
    "conversation_hash": "ac7a09d41d30a2815447450480da48ec",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun doSomething(value: String) {\n    // Method that requires a non-null String parameter\n}\n\nval A: String? = \"Hello\"\ndoSomething(A as? String ?: throw IllegalArgumentException(\"A cannot be null\"))",
    "filename": "ac7a09d41d30a2815447450480da48ec_13.kt"
  },
  {
    "conversation_hash": "ac7a09d41d30a2815447450480da48ec",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyClass(private val value: String) {\n    fun printValue() {\n        println(value)\n    }\n}",
    "filename": "ac7a09d41d30a2815447450480da48ec_14.kt"
  },
  {
    "conversation_hash": "ac7a09d41d30a2815447450480da48ec",
    "code_index": 23,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun findClosestNumber(x: Int, array: IntArray): Int? {\n    var closestNumber: Int? = null\n    var closestDiff = Int.MAX_VALUE\n\n    for (number in array) {\n        val diff = (number - x).absoluteValue\n        if (diff < closestDiff) {\n            closestDiff = diff\n            closestNumber = number\n        }\n    }\n\n    return closestNumber\n}",
    "filename": "ac7a09d41d30a2815447450480da48ec_23.kt"
  },
  {
    "conversation_hash": "e503c669fe2be7a4f916f433f29db8ee",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class RestrictedMap : MutableMap<Int, MutableSet<Int>> by mutableMapOf() {\n\n    override fun put(key: Int, value: MutableSet<Int>): MutableSet<Int>? {\n        require(key in 1..3) { \"Key must be between 1 and 3\" }\n        return super.put(key, value)\n    }\n\n    override fun putAll(from: Map<out Int, MutableSet<Int>>) {\n        require(from.keys.all { it in 1..3 }) { \"All keys must be between 1 and 3\" }\n        super.putAll(from)\n    }\n}",
    "filename": "e503c669fe2be7a4f916f433f29db8ee_2.kt"
  },
  {
    "conversation_hash": "e503c669fe2be7a4f916f433f29db8ee",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "kotlin.random.Random"
    ],
    "code": "import kotlin.random.Random\n\nfun main() {\n    val set: MutableSet<Int> = mutableSetOf()\n    val random = Random()\n\n    while (set.size < 15) {\n        val randomNumber = random.nextInt()\n        set.add(randomNumber)\n    }\n\n    println(set) // Output: [1626831447, 276096728, -407405207, -2147483646, ...]\n}",
    "filename": "e503c669fe2be7a4f916f433f29db8ee_6.kt"
  },
  {
    "conversation_hash": "e503c669fe2be7a4f916f433f29db8ee",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "kotlin.random.Random"
    ],
    "code": "import kotlin.random.Random\n\nfun main() {\n    val set: MutableSet<Int> = mutableSetOf()\n    val random = Random()\n\n    while (set.size < 15) {\n        val randomNumber = random.nextInt(1, 100) // Generates random numbers between 1 and 99\n        set.add(randomNumber)\n    }\n\n    println(set) // Output: [36, 85, 4, 60, 27, 19, 47, 64, 33, 52, 18, 50, 9, 57, 56]\n}",
    "filename": "e503c669fe2be7a4f916f433f29db8ee_8.kt"
  },
  {
    "conversation_hash": "e503c669fe2be7a4f916f433f29db8ee",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [
      "kotlin.random.Random"
    ],
    "code": "import kotlin.random.Random\n\nfun main() {\n    val map: MutableMap<Int, MutableSet<Int>> = mutableMapOf()\n    val random = Random(System.currentTimeMillis())\n\n    while (map.size < 3) {\n        val key = random.nextInt(1, 4)\n        if (key !in map) {\n            val set: MutableSet<Int> = mutableSetOf()\n            while (set.size < 5) {\n                val value = random.nextInt(1, 101)\n                set.add(value)\n            }\n            map[key] = set\n        }\n    }\n\n    println(map)\n}",
    "filename": "e503c669fe2be7a4f916f433f29db8ee_15.kt"
  },
  {
    "conversation_hash": "605a97dc444efb0e587e32b6b2829c97",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val map: MutableMap<Int, String> = mutableMapOf(\n        1 to \"apple\",\n        2 to \"banana\",\n        3 to \"orange\"\n    )\n    \n    println(map.containsValue(\"banana\")) // true\n    println(map.containsValue(\"grape\")) // false\n}",
    "filename": "605a97dc444efb0e587e32b6b2829c97_0.kt"
  },
  {
    "conversation_hash": "605a97dc444efb0e587e32b6b2829c97",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "kotlin.random.Random"
    ],
    "code": "import kotlin.random.Random\n\nfun main() {\n    val set: MutableSet<Int> = mutableSetOf()\n    \n    while (set.size < 15) {\n        val randomInt = Random.nextInt()\n        set.add(randomInt)\n    }\n    \n    println(set)\n}",
    "filename": "605a97dc444efb0e587e32b6b2829c97_1.kt"
  },
  {
    "conversation_hash": "605a97dc444efb0e587e32b6b2829c97",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val set: MutableSet<Int> = mutableSetOf(1, 2, 3, 4, 5)\n    \n    val randomElement = set.toList().random()\n    println(randomElement)\n}",
    "filename": "605a97dc444efb0e587e32b6b2829c97_5.kt"
  },
  {
    "conversation_hash": "605a97dc444efb0e587e32b6b2829c97",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "kotlin.random.Random"
    ],
    "code": "import kotlin.random.Random\n\nfun main() {\n    val set: MutableSet<Int> = mutableSetOf()\n    \n    while (set.size < 15) {\n        val randomInt = Random.nextInt()\n        set.add(randomInt)\n    }\n    \n    println(set)\n}",
    "filename": "605a97dc444efb0e587e32b6b2829c97_6.kt"
  },
  {
    "conversation_hash": "605a97dc444efb0e587e32b6b2829c97",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "kotlin.random.Random"
    ],
    "code": "import kotlin.random.Random\n\nfun main() {\n    val set: MutableSet<Int> = mutableSetOf()\n\n    while (set.size < 15) {\n        val randomInt = Random.nextInt()\n        set.add(randomInt)\n    }\n\n    val uniqueInts: List<Int> = set.toList()\n\n    println(uniqueInts)\n}",
    "filename": "605a97dc444efb0e587e32b6b2829c97_7.kt"
  },
  {
    "conversation_hash": "605a97dc444efb0e587e32b6b2829c97",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "kotlin.random.Random"
    ],
    "code": "import kotlin.random.Random\n\nfun main() {\n    val uniqueInts: List<Int> = (1..100).toList().shuffled(Random)\n\n    val randomInts = uniqueInts.take(15)\n\n    println(randomInts)\n}",
    "filename": "605a97dc444efb0e587e32b6b2829c97_8.kt"
  },
  {
    "conversation_hash": "605a97dc444efb0e587e32b6b2829c97",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Class {\n    var A: MutableMap<Int, MutableSet<Int>> = mutableMapOf()\n}\n\nfun main() {\n    val instance = Class()\n\n    // Access and modify the variable A\n    instance.A[1] = mutableSetOf(2, 3, 4)\n    instance.A[2] = mutableSetOf(1, 3, 4)\n\n    println(instance.A)\n}",
    "filename": "605a97dc444efb0e587e32b6b2829c97_9.kt"
  },
  {
    "conversation_hash": "605a97dc444efb0e587e32b6b2829c97",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "class A(private val parameter: String) {\n    // Class implementation\n}\n\nfun main() {\n    val instance = A(\"parameter value\")\n    // Use the instance of class A\n    // ...\n}",
    "filename": "605a97dc444efb0e587e32b6b2829c97_10.kt"
  },
  {
    "conversation_hash": "605a97dc444efb0e587e32b6b2829c97",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class Person(val name: String, val hobbies: List<String>)\n\nfun main() {\n    val persons = listOf(\n        Person(\"Alice\", listOf(\"Drawing\", \"Singing\")),\n        Person(\"Bob\", listOf(\"Reading\", \"Cooking\")),\n        Person(\"Charlie\", listOf(\"Gardening\", \"Writing\"))\n    )\n\n    val allHobbies = persons.flatMap { person -> person.hobbies }\n    println(allHobbies)\n}",
    "filename": "605a97dc444efb0e587e32b6b2829c97_11.kt"
  },
  {
    "conversation_hash": "5e51b6da2f50a24b304cc036412e3c92",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val list = (1..15).toList()\n    \n    val sets = list.chunked(5) { it.toMutableSet() }\n    \n    for ((index, set) in sets.withIndex()) {\n        println(\"Set ${index + 1}: $set\")\n    }\n}",
    "filename": "5e51b6da2f50a24b304cc036412e3c92_0.kt"
  },
  {
    "conversation_hash": "5e51b6da2f50a24b304cc036412e3c92",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val list = (1..15).toList()\n\n    val sets = list.chunked(5).withIndex().groupBy { it.index % 3 }\n        .mapValues { entry -> entry.value.flatMap { it -> it.value.toMutableSet() } }\n\n    for ((key, set) in sets) {\n        println(\"Key $key: $set\")\n    }\n}",
    "filename": "5e51b6da2f50a24b304cc036412e3c92_2.kt"
  },
  {
    "conversation_hash": "5e51b6da2f50a24b304cc036412e3c92",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val A = (1..15).toList()\n    val chunkedLists = A.chunked(5)\n\n    for (chunkedList in chunkedLists) {\n        println(chunkedList)\n    }\n}",
    "filename": "5e51b6da2f50a24b304cc036412e3c92_4.kt"
  },
  {
    "conversation_hash": "5e51b6da2f50a24b304cc036412e3c92",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val list = (1..15).toList()\n\n    val chunks = list.chunked(5)\n    val chunk1 = chunks[0]\n    val chunk2 = chunks[1]\n    val chunk3 = chunks[2]\n\n    println(\"Chunk 1: $chunk1\")\n    println(\"Chunk 2: $chunk2\")\n    println(\"Chunk 3: $chunk3\")\n}",
    "filename": "5e51b6da2f50a24b304cc036412e3c92_6.kt"
  },
  {
    "conversation_hash": "5e51b6da2f50a24b304cc036412e3c92",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val list = (1..15).toList()\n\n    val (chunk1, chunk2, chunk3) = list.chunked(5)\n\n    println(\"Chunk 1: $chunk1\")\n    println(\"Chunk 2: $chunk2\")\n    println(\"Chunk 3: $chunk3\")\n}",
    "filename": "5e51b6da2f50a24b304cc036412e3c92_8.kt"
  },
  {
    "conversation_hash": "5e51b6da2f50a24b304cc036412e3c92",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val list = (1..15).toList()\n\n    val chunks = list.chunked(5)\n\n    val map = mutableMapOf<Int, MutableSet<Int>>()\n\n    map[1] = chunks[0].toMutableSet()\n    map[2] = chunks[1].toMutableSet()\n    map[3] = chunks[2].toMutableSet()\n\n    for ((key, value) in map) {\n        println(\"Key $key: $value\")\n    }\n}",
    "filename": "5e51b6da2f50a24b304cc036412e3c92_10.kt"
  },
  {
    "conversation_hash": "5e51b6da2f50a24b304cc036412e3c92",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun someMethod() {\n    // Code before early termination\n\n    if (condition) {\n        // Terminate early\n        return\n    }\n\n    // Code after early termination (not executed if condition is true)\n}",
    "filename": "5e51b6da2f50a24b304cc036412e3c92_12.kt"
  },
  {
    "conversation_hash": "5e51b6da2f50a24b304cc036412e3c92",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val player1 = Player(1, \"Alice\", 5, 100)\n    val player2 = Player(2, \"Bob\", 3, 50)\n\n    println(player1)\n    println(player2)\n\n    val player3 = player1.copy(score = 200)\n\n    println(player3)\n    println(player1 == player3)\n}",
    "filename": "5e51b6da2f50a24b304cc036412e3c92_14.kt"
  },
  {
    "conversation_hash": "5e51b6da2f50a24b304cc036412e3c92",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val person1 = Person(\"Alice\", 25)\n    val person2 = Person(\"Bob\", 30)\n\n    println(person1) // Output: Person(name=Alice, age=25)\n    println(person2) // Output: Person(name=Bob, age=30)\n\n    val person3 = person1.copy(name = \"Charlie\")\n\n    println(person3) // Output: Person(name=Charlie, age=25)\n    println(person1 == person3) // Output: false\n}",
    "filename": "5e51b6da2f50a24b304cc036412e3c92_17.kt"
  },
  {
    "conversation_hash": "5e51b6da2f50a24b304cc036412e3c92",
    "code_index": 18,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val set = mutableSetOf(\"apple\", \"banana\", \"orange\")\n\n    println(\"Number of elements in the set: ${set.size}\")\n}",
    "filename": "5e51b6da2f50a24b304cc036412e3c92_18.kt"
  },
  {
    "conversation_hash": "04739983e23acbf97acf4e1258a08388",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    val binding = ActivityMainBinding.inflate(layoutInflater)\n    val view = binding.root\n    setContentView(view)\n}",
    "filename": "04739983e23acbf97acf4e1258a08388_0.kt"
  },
  {
    "conversation_hash": "a40783dd36eeb50aaedbae032a582c72",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class Student(val name: String, val grade: Int)\n\nval students = listOf(\n    Student(\"Alice\", 90),\n    Student(\"Bob\", 80),\n    Student(\"Chuck\", 80),\n    Student(\"Diana\", 95),\n    Student(\"Eve\", 85)\n)\n\nval sortedStudents = students.sortedWith(compareByDescending<Student> { it.grade }.thenBy { it.name })\nsortedStudents.forEach { println(\"${it.name}: ${it.grade}\") }",
    "filename": "a40783dd36eeb50aaedbae032a582c72_6.kt"
  },
  {
    "conversation_hash": "a40783dd36eeb50aaedbae032a582c72",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class Student(val name: String, val estimates: List<Int>)\n\nval students = listOf(\n    Student(\"Alice\", listOf(90, 85, 88)),\n    Student(\"Bob\", listOf(80, 82, 85)),\n    Student(\"Chuck\", listOf(80, 85, 80)),\n    Student(\"Diana\", listOf(95, 92, 96)),\n    Student(\"Eve\", listOf(85, 90, 87))\n)\n\nval sortedStudents = students.sortedWith(compareByDescending<Student> { it.estimates.average() }.thenBy { it.name })\nsortedStudents.forEach { println(\"${it.name}: ${it.estimates.average()}\") }",
    "filename": "a40783dd36eeb50aaedbae032a582c72_8.kt"
  },
  {
    "conversation_hash": "d1c91eceb8a0b9b6107de1a61f025194",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "okhttp3.OkHttpClient",
      "okhttp3.Request",
      "okhttp3.Response",
      "org.json.JSONObject"
    ],
    "code": "import okhttp3.OkHttpClient\nimport okhttp3.Request\nimport okhttp3.Response\nimport org.json.JSONObject\n\nclass IMDbApiService {\n    private val client = OkHttpClient()\n\n    fun getMovieDetails(movieId: String, apiKey: String): JSONObject {\n        val url = \"https://imdb-api.com/.../MovieById/$movieId/$apiKey\"\n\n        val request = Request.Builder()\n            .url(url)\n            .build()\n\n        val response: Response = client.newCall(request).execute()\n        val jsonData = response.body?.string()\n        return JSONObject(jsonData)\n    }\n}",
    "filename": "d1c91eceb8a0b9b6107de1a61f025194_5.kt"
  },
  {
    "conversation_hash": "c911a979e409510a3ca76c0369c23d92",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "response.use {\n    if (response.isSuccessful) {\n        val responseData = response.body()?.string()\n        runOnUiThread {\n            binding.textView.text = responseData\n        }\n    } else {\n        runOnUiThread {\n            binding.textView.text = \"Error: ${response.code()}\"\n        }\n    }\n}",
    "filename": "c911a979e409510a3ca76c0369c23d92_0.kt"
  },
  {
    "conversation_hash": "97dc13118cf678dbf124f72df55f52e1",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "val retrofit = Retrofit.Builder()\n        .baseUrl(\"https://online-movie-database.p.rapidapi.com/\")\n        .addConverterFactory(GsonConverterFactory.create())\n        .build()\n\n    val service = retrofit.create(MovieService::class.java)\n\n    val call = service.getMovies(\"game of thr\")\n\n    // Выполняем запрос асинхронно\n    call.enqueue(object : Callback<List<Movie>> {\n        override fun onResponse(call: Call<List<Movie>>, response: Response<List<Movie>>) {\n            if (response.isSuccessful) {\n                val movies = response.body()\n                if (movies != null) {\n                    // Преобразуем список объектов Movie в JSON строку\n                    val jsonString = Gson().toJson(movies)\n                    Log.d(\"TAG\", jsonString) // Выводим JSON строку в консоль\n                }\n            } else {\n                Log.d(\"TAG\", \"Ошибка запроса: \" + response.message())\n            }\n        }\n\n        override fun onFailure(call: Call<List<Movie>>, t: Throwable) {\n            Log.d(\"TAG\", \"Ошибка запроса: \" + t.message)\n        }\n    })",
    "filename": "97dc13118cf678dbf124f72df55f52e1_0.kt"
  },
  {
    "conversation_hash": "97dc13118cf678dbf124f72df55f52e1",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface MovieService {\n    @GET(\"auto-complete\")\n    fun getMovies(@Query(\"q\") query: String): Call<MovieResponse>\n}\n\ndata class MovieResponse(val results: List<Movie>)\n\ndata class Movie(\n    val d: List<DataItem>,\n    val q: String,\n    val v: Int\n)\n\ndata class DataItem(\n    val height: Int,\n    val imageUrl: String?,\n    val width: Int,\n    val id: String?,\n    val l: String?,\n    val s: String?,\n    val i: List<Item>?\n)\n\ndata class Item(\n    val height: Int,\n    val imageUrl: String?,\n    val width: Int,\n    val id: String?,\n    val l: String?,\n    val s: String?,\n    val y: Int,\n    val yr: String?\n)",
    "filename": "97dc13118cf678dbf124f72df55f52e1_7.kt"
  },
  {
    "conversation_hash": "ea4160999e9f4edb9c37bbaa8ea67165",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        val retrofit = Retrofit.Builder()\n            .baseUrl(\"https://online-movie-database.p.rapidapi.com/\")\n            .addConverterFactory(GsonConverterFactory.create())\n            .build()\n\n        val service = retrofit.create(ApiService::class.java)\n\n        val call = service.getMovies(\"game of thr\")\n\n        call.enqueue(object : Callback<List<Movie>> {\n            override fun onResponse(call: Call<List<Movie>>, response: Response<List<Movie>>) {\n                if (response.isSuccessful) {\n                    val movies = response.body()\n                    // Дополнительная обработка полученных данных, например, вывод на экран\n                    movies?.forEach {\n                        println(it.title)\n                    }\n                } else {\n                    // Обработка ошибки, например, вывод сообщения об ошибке на экран\n                    println(\"Ошибка: ${response.code()}\")\n                }\n            }\n\n            override fun onFailure(call: Call<List<Movie>>, t: Throwable) {\n                // Обработка ошибки, например, вывод сообщения об ошибке на экран\n                t.printStackTrace()\n            }\n        })\n    }\n}",
    "filename": "ea4160999e9f4edb9c37bbaa8ea67165_0.kt"
  },
  {
    "conversation_hash": "ea4160999e9f4edb9c37bbaa8ea67165",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        val retrofit = Retrofit.Builder()\n            .baseUrl(\"https://online-movie-database.p.rapidapi.com/\")\n            .addConverterFactory(GsonConverterFactory.create())\n            .build()\n\n        val service = retrofit.create(ApiService::class.java)\n\n        val call = service.getMovies(\"game of thr\")\n\n        call.enqueue(object : Callback<List<Movie>> {\n            override fun onResponse(call: Call<List<Movie>>, response: Response<List<Movie>>) {\n                if (response.isSuccessful) {\n                    val movies = response.body()\n                    // Дополнительная обработка полученных данных, например, вывод на экран\n                    movies?.forEach {\n                        println(it.title)\n                    }\n                } else {\n                    // Обработка ошибки, например, вывод сообщения об ошибке на экран\n                    println(\"Ошибка: ${response.code()}\")\n                }\n            }\n\n            override fun onFailure(call: Call<List<Movie>>, t: Throwable) {\n                // Обработка ошибки, например, вывод сообщения об ошибке на экран\n                t.printStackTrace()\n            }\n        })\n    }\n}\n\ninterface ApiService {\n    @GET(\"auto-complete\")\n    fun getMovies(@Query(\"q\") query: String): Call<List<Movie>>\n}\n\ndata class Movie(\n    val title: String,\n    val year: Int,\n    val rating: Float,\n    // и другие необходимые поля\n)",
    "filename": "ea4160999e9f4edb9c37bbaa8ea67165_1.kt"
  },
  {
    "conversation_hash": "ea4160999e9f4edb9c37bbaa8ea67165",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        val retrofit = Retrofit.Builder()\n            .baseUrl(\"https://moviesminidatabase.p.rapidapi.com/\") // Указываем базовый URL\n            .addConverterFactory(GsonConverterFactory.create()) // Указываем конвертер\n            .client(createOkHttpClient())\n            .build()\n\n        val service = retrofit.create(ApiService::class.java)\n\n        val call = service.getMovies(\"game of thr\")\n\n        call.enqueue(object : Callback<List<Movie>> {\n            override fun onResponse(call: Call<List<Movie>>, response: Response<List<Movie>>) {\n                if (response.isSuccessful) {\n                    val movies = response.body()\n                    // Выводим полученные данные на экран\n                    movies?.forEach {\n                        println(it.title)\n                    }\n                } else {\n                    // Обработка ошибки, например, вывод сообщения об ошибке на экран\n                    println(\"Ошибка: ${response.code()}\")\n                }\n            }\n\n            override fun onFailure(call: Call<List<Movie>>, t: Throwable) {\n                // Обработка ошибки, например, вывод сообщения об ошибке на экран\n                t.printStackTrace()\n            }\n        })\n    }\n\n    private fun createOkHttpClient(): OkHttpClient {\n        return OkHttpClient.Builder()\n            .addInterceptor { chain ->\n                val newRequest = chain.request().newBuilder()\n                    .addHeader(\"X-RapidAPI-Key\", \"f07b384df4msh0cb75ecf6213a0cp19d05ajsn1c71118107fb\")\n                    .addHeader(\"X-RapidAPI-Host\", \"moviesminidatabase.p.rapidapi.com\")\n                    .build()\n                chain.proceed(newRequest)\n            }\n            .build()\n    }\n}\n\ninterface ApiService {\n    @GET(\"auto-complete\")\n    fun getMovies(@Query(\"q\") query: String): Call<List<Movie>>\n}\n\ndata class Movie(\n    val title: String,\n    val year: Int,\n    val rating: Float,\n    // и другие необходимые поля\n)",
    "filename": "ea4160999e9f4edb9c37bbaa8ea67165_3.kt"
  },
  {
    "conversation_hash": "ea4160999e9f4edb9c37bbaa8ea67165",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.Call",
      "retrofit2.Callback",
      "retrofit2.Response",
      "retrofit2.Retrofit",
      "retrofit2.converter.gson.GsonConverterFactory"
    ],
    "code": "import retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\n...\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        val retrofit = Retrofit.Builder()\n            .baseUrl(\"https://moviesminidatabase.p.rapidapi.com/\") \n            .addConverterFactory(GsonConverterFactory.create()) \n            .client(createOkHttpClient())\n            .build()\n\n        val service = retrofit.create(ApiService::class.java)\n\n        val call = service.getMovies(\"game of thr\")\n\n        call.enqueue(object : Callback<List<Movie>> {\n            override fun onResponse(call: Call<List<Movie>>, response: Response<List<Movie>>) {\n                if (response.isSuccessful) {\n                    val movies = response.body()\n                    // Output the received data to the screen\n                    movies?.forEach {\n                        println(it.title)\n                    }\n                } else {\n                    // Handle error, such as displaying an error message on the screen\n                    println(\"Error: ${response.code()}\")\n                }\n            }\n\n            override fun onFailure(call: Call<List<Movie>>, t: Throwable) {\n                // Handle error, such as displaying an error message on the screen\n                t.printStackTrace()\n            }\n        })\n    }\n\n    private fun createOkHttpClient(): OkHttpClient {\n        return OkHttpClient.Builder()\n            .addInterceptor { chain ->\n                val newRequest = chain.request().newBuilder()\n                    .addHeader(\"X-RapidAPI-Key\", \"f07b384df4msh0cb75ecf6213a0cp19d05ajsn1c71118107fb\")\n                    .addHeader(\"X-RapidAPI-Host\", \"moviesminidatabase.p.rapidapi.com\")\n                    .build()\n                chain.proceed(newRequest)\n            }\n            .build()\n    }\n}\n\ninterface ApiService {\n    @GET(\"auto-complete\")\n    fun getMovies(@Query(\"q\") query: String): Call<List<Movie>>\n}\n\ndata class Movie(\n    val title: String,\n    val year: Int,\n    val rating: Float,\n    // other necessary fields\n)",
    "filename": "ea4160999e9f4edb9c37bbaa8ea67165_6.kt"
  },
  {
    "conversation_hash": "366eee8fc69a86f7dcd8664e01b582fe",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        val retrofit = Retrofit.Builder()\n            .baseUrl(\"https://moviesminidatabase.p.rapidapi.com/\") // Указываем базовый URL\n            .addConverterFactory(GsonConverterFactory.create()) // Указываем конвертер\n            .client(createOkHttpClient())\n            .build()\n\n        val service = retrofit.create(ApiService::class.java)\n\n        val call = service.getMovies(\"game of thrones\")\n\n        call.enqueue(object : Callback<List<Movie>> {\n            override fun onResponse(call: Call<List<Movie>>, response: Response<List<Movie>>) {\n                if (response.isSuccessful) {\n                    val movies = response.body()\n                    // Выводим полученные данные в консоль\n                    movies?.forEach {\n                        println(it.toString())\n                    }\n                } else {\n                    // Обработка ошибки, например, вывод сообщения об ошибке в консоль\n                    println(\"Ошибка: ${response.code()}\")\n                }\n            }\n\n            override fun onFailure(call: Call<List<Movie>>, t: Throwable) {\n                // Обработка ошибки, например, вывод сообщения об ошибке в консоль\n                t.printStackTrace()\n            }\n        })\n    }\n\n    private fun createOkHttpClient(): OkHttpClient {\n        return OkHttpClient.Builder()\n            .addInterceptor { chain ->\n                val newRequest = chain.request().newBuilder()\n                    .addHeader(\"X-RapidAPI-Key\", \"f07b384df4msh0cb75ecf6213a0cp19d05ajsn1c71118107fb\")\n                    .addHeader(\"X-RapidAPI-Host\", \"moviesminidatabase.p.rapidapi.com\")\n                    .build()\n                chain.proceed(newRequest)\n            }\n            .build()\n    }\n}",
    "filename": "366eee8fc69a86f7dcd8664e01b582fe_0.kt"
  },
  {
    "conversation_hash": "366eee8fc69a86f7dcd8664e01b582fe",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.widget.Toast"
    ],
    "code": "import android.widget.Toast\n\n// ...\n\ncall.enqueue(object : Callback<List<Movie>> {\n    override fun onResponse(call: Call<List<Movie>>, response: Response<List<Movie>>) {\n        if (response.isSuccessful) {\n            val movies = response.body()\n            // Выводим полученные данные в виде Toast\n            movies?.forEach { movie ->\n                val message = movie.toString()\n                Toast.makeText(this@MainActivity, message, Toast.LENGTH_SHORT).show()\n            }\n        } else {\n            // Обработка ошибки, вывод сообщения об ошибке в виде Toast\n            val message = \"Ошибка: ${response.code()}\"\n            Toast.makeText(this@MainActivity, message, Toast.LENGTH_SHORT).show()\n        }\n    }\n\n    override fun onFailure(call: Call<List<Movie>>, t: Throwable) {\n        // Обработка ошибки, вывод сообщения об ошибке в виде Toast\n        val message = \"Ошибка: ${t.message}\"\n        Toast.makeText(this@MainActivity, message, Toast.LENGTH_SHORT).show()\n    }\n})",
    "filename": "366eee8fc69a86f7dcd8664e01b582fe_1.kt"
  },
  {
    "conversation_hash": "cd033e766011f9ac93850ba461193b4b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun method(onSuccess: () -> Unit, onFailure: () -> String?): String {\n    onSuccess()\n    return onFailure() ?: \"Failure\"\n}\n\nfun main() {\n    val result = method(\n        {\n            println(\"Success\")\n        },\n        {\n            println(\"Failure\")\n            null // Return null if failure\n        }\n    )\n\n    println(result)\n}",
    "filename": "cd033e766011f9ac93850ba461193b4b_1.kt"
  },
  {
    "conversation_hash": "cd033e766011f9ac93850ba461193b4b",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun method(onSuccess: () -> Unit, onFailure: () -> Nothing?): String {\n    onSuccess()\n    return onFailure()?.toString() ?: \"Failure\"\n}\n\nfun main() {\n    val result = method(\n        {\n            println(\"Success\")\n        },\n        {\n            println(\"Failure\")\n            null // Always return null\n        }\n    )\n\n    println(result)\n}",
    "filename": "cd033e766011f9ac93850ba461193b4b_2.kt"
  },
  {
    "conversation_hash": "b072f03aded98217822bc70cb60a6e93",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "client.newCall(request).enqueue(object : Callback<ResponseBody> {\n    override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\n        // Обработка ошибки при выполнении запроса\n        Toast.makeText(applicationContext, \"Ошибка при выполнении запроса\", Toast.LENGTH_SHORT).show()\n    }\n\n    override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {\n        if (response.isSuccessful) {\n            val responseData = response.body()?.string()\n\n            // Вывод полученных данных в Logcat\n            Log.d(\"MainActivity\", \"Response: $responseData\")\n        } else {\n            // Обработка ошибки при получении ответа от сервера\n            Toast.makeText(applicationContext, \"Ошибка при получении ответа от сервера\", Toast.LENGTH_SHORT).show()\n        }\n    }\n})",
    "filename": "b072f03aded98217822bc70cb60a6e93_0.kt"
  },
  {
    "conversation_hash": "b072f03aded98217822bc70cb60a6e93",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.Callback"
    ],
    "code": "import retrofit2.Callback\n\n...\n\nclient.newCall(request).enqueue(object : Callback<ResponseBody> {\n    override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\n        // Обработка ошибки при выполнении запроса\n        Toast.makeText(applicationContext, \"Ошибка при выполнении запроса\", Toast.LENGTH_SHORT).show()\n    }\n\n    override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {\n        if (response.isSuccessful) {\n            val responseData = response.body()?.string()\n\n            // Вывод полученных данных в Logcat\n            Log.d(\"MainActivity\", \"Response: $responseData\")\n        } else {\n            // Обработка ошибки при получении ответа от сервера\n            Toast.makeText(applicationContext, \"Ошибка при получении ответа от сервера\", Toast.LENGTH_SHORT).show()\n        }\n    }\n})",
    "filename": "b072f03aded98217822bc70cb60a6e93_1.kt"
  },
  {
    "conversation_hash": "0f625cc598a893bee78994c0619913c2",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val successFunction: (Int) -> Unit = { value ->\n        // Handle success\n        println(\"Success: $value\")\n    }\n\n    val errorFunction: (String) -> Unit = { errorMessage ->\n        // Handle error\n        println(\"Error: $errorMessage\")\n    }\n\n    higherOrderMethod(10, \"example\", successFunction, errorFunction)\n}",
    "filename": "0f625cc598a893bee78994c0619913c2_5.kt"
  },
  {
    "conversation_hash": "0f625cc598a893bee78994c0619913c2",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val successFunction: (Int) -> Unit = ::handleSuccess\n    val errorFunction: (String) -> Unit = ::handleError\n\n    higherOrderMethod(10, \"example\", successFunction, errorFunction)\n}\n\nfun handleSuccess(value: Int) {\n    // Handle success\n    println(\"Success: $value\")\n}\n\nfun handleError(errorMessage: String) {\n    // Handle error\n    println(\"Error: $errorMessage\")\n}",
    "filename": "0f625cc598a893bee78994c0619913c2_7.kt"
  },
  {
    "conversation_hash": "0f625cc598a893bee78994c0619913c2",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [],
    "code": "val number = 123456\nvar biggestDigit: Int? = null // Temporary variable\n\nnumber.toString().forEach { char ->\n    val digit = char.toString().toInt()\n    if (biggestDigit == null || digit > biggestDigit!!) {\n        biggestDigit = digit\n    }\n}\n\nif (biggestDigit != null) {\n    // Here, biggestDigit can be safely smart cast to Int\n    println(biggestDigit)\n}",
    "filename": "0f625cc598a893bee78994c0619913c2_16.kt"
  },
  {
    "conversation_hash": "76138a3e93a2c94cae7838ebdb26a330",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Adder {\n    operator fun invoke(a: Int, b: Int): Int {\n        return a + b\n    }\n}\n\nfun main() {\n    val adder = Adder()\n    val result = adder(4, 5) // Equivalent to adder.invoke(4, 5)\n    println(result) // Output: 9\n}",
    "filename": "76138a3e93a2c94cae7838ebdb26a330_7.kt"
  },
  {
    "conversation_hash": "e6c4cd0b98bb129fbdc2cdde64daa773",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "Input:\nhello world;coding is fun;java programming.\n\nOutput:\nHllWrld\nCdngsFn\nJvPrgrmmng",
    "filename": "e6c4cd0b98bb129fbdc2cdde64daa773_1.kt"
  },
  {
    "conversation_hash": "70992c1bebb404fb965457721f0b751c",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.",
      "kotlinx.coroutines.flow.",
      "okhttp3.OkHttpClient",
      "okhttp3.Request",
      "org.jsoup.Jsoup"
    ],
    "code": "import kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.*\nimport okhttp3.OkHttpClient\nimport okhttp3.Request\nimport org.jsoup.Jsoup\n\nfun main() {\n    runBlocking {\n        val driveIndexLink = \"https://your-drive-index-url\"\n        val httpClient = OkHttpClient()\n        \n        val videoLinks = getVideoLinks(driveIndexLink, httpClient)\n        videoLinks.collect { videoLink ->\n            println(videoLink)\n        }\n    }\n}\n\nsuspend fun getVideoLinks(driveIndexLink: String, httpClient: OkHttpClient): Flow<String> = flow {\n    val driveIndexHtml = httpClient.executeHttpRequest(driveIndexLink)\n    val document = Jsoup.parse(driveIndexHtml)\n    val links = document.select(\"a[href]\")\n    \n    for (link in links) {\n        val href = link.attr(\"href\")\n        if (href.contains(\"your-domain.com\")) {\n            val videoLink = getVideoLink(href, httpClient)\n            emit(videoLink)\n        }\n    }\n}\n\nsuspend fun getVideoLink(href: String, httpClient: OkHttpClient): String {\n    // Make necessary HTTP requests and extraction logic to get video link\n    // Return the video link\n}\n\nsuspend fun OkHttpClient.executeHttpRequest(url: String): String {\n    val request = Request.Builder().url(url).build()\n    val response = newCall(request).execute()\n    return response.body?.string() ?: \"\"\n}",
    "filename": "70992c1bebb404fb965457721f0b751c_0.kt"
  },
  {
    "conversation_hash": "43e49b403cd031891d24edadd9e7805a",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val root = TreeNode(5)\n    root.left = TreeNode(3)\n    root.right = TreeNode(8)\n\n    println(root.value)           // Output: 5\n    println(root.left?.value)     // Output: 3\n    println(root.right?.value)    // Output: 8\n}",
    "filename": "43e49b403cd031891d24edadd9e7805a_3.kt"
  },
  {
    "conversation_hash": "43e49b403cd031891d24edadd9e7805a",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val pair1: Pair<String, Int> = \"apple\" to 5\n    val pair2: Pair<String, Int> = Pair(\"orange\", 10)\n\n    println(pair1.first)   // Output: apple\n    println(pair1.second)  // Output: 5\n    println(pair2.first)   // Output: orange\n    println(pair2.second)  // Output: 10\n}",
    "filename": "43e49b403cd031891d24edadd9e7805a_6.kt"
  },
  {
    "conversation_hash": "9bbc3bc2daa3854fd310156e763c498a",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Person(val name: String, val age: Int) {\n    // 主构造函数\n    init {\n        println(\"Name: $name\")\n        println(\"Age: $age\")\n    }\n    \n    // 次构造函数\n    constructor(name: String, age: Int, city: String) : this(name, age) {\n        println(\"City: $city\")\n    }\n}\n\nfun main() {\n    val person1 = Person(\"John\", 25)\n    val person2 = Person(\"Jane\", 30, \"New York\")\n}",
    "filename": "9bbc3bc2daa3854fd310156e763c498a_0.kt"
  },
  {
    "conversation_hash": "6d2f555851a5126e18042f3029ecdb3a",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.",
      "server"
    ],
    "code": "import kotlinx.coroutines.* \n\n// 创建一个挂起函数\nsuspend fun fetchData(): String {\n    delay(3000) // 模拟网络请求延迟\n    return \"Data from server\"\n}\n\nfun main() {\n    println(\"Main thread starts\")\n\n    // 启动一个新的协程\n    GlobalScope.launch {\n        println(\"Coroutine started\")\n        \n        // 挂起函数，协程会暂停并等待 fetchData() 执行完毕\n        val data = fetchData()\n        \n        // 执行完毕后，恢复并打印数据\n        println(\"Data received: $data\")\n    }\n\n    println(\"Main thread continues\") // 这一行会在协程的挂起函数执行期间立即被输出\n    Thread.sleep(5000) // 等待协程执行完毕\n    println(\"Main thread ends\")\n}",
    "filename": "6d2f555851a5126e18042f3029ecdb3a_0.kt"
  },
  {
    "conversation_hash": "6d2f555851a5126e18042f3029ecdb3a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.",
      "server"
    ],
    "code": "import kotlinx.coroutines.* // 导入 Kotlin 协程库\n\n// 创建一个挂起函数\nsuspend fun fetchData(): String {\n    delay(3000) // 模拟网络请求延迟\n    return \"Data from server\"\n}\n\nfun main() {\n    println(\"Main thread starts\")\n\n    // 启动一个新的协程\n    GlobalScope.launch {\n        println(\"Coroutine started\")\n        \n        // 挂起函数，协程会暂停并等待 fetchData() 执行完毕\n        val data = fetchData()\n        \n        // 执行完毕后，恢复并打印数据\n        println(\"Data received: $data\")\n    }\n\n    println(\"Main thread continues\") // 这一行会在协程的挂起函数执行期间立即被输出\n    Thread.sleep(5000) // 等待协程执行完毕\n    println(\"Main thread ends\")\n}",
    "filename": "6d2f555851a5126e18042f3029ecdb3a_1.kt"
  },
  {
    "conversation_hash": "19a0cd87dfc682c7f0b165d82ed9073d",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "com.google.cloud.storage.Blob",
      "com.google.cloud.storage.BlobId",
      "com.google.cloud.storage.StorageOptions"
    ],
    "code": "import com.google.cloud.storage.Blob\n   import com.google.cloud.storage.BlobId\n   import com.google.cloud.storage.StorageOptions\n\n   fun main() {\n       val bucketName = \"your_bucket_name\"\n       val blobName = \"your_blob_name\"\n       val storage = StorageOptions.getDefaultInstance().service\n       val blobId = BlobId.of(bucketName, blobName)\n       val blob = storage.get(blobId)\n       \n       // Now you have an instance of Blob and can perform various operations on it\n       // For example, you can read the blob's content, update its metadata, delete it, etc.\n   }",
    "filename": "19a0cd87dfc682c7f0b165d82ed9073d_4.kt"
  },
  {
    "conversation_hash": "19a0cd87dfc682c7f0b165d82ed9073d",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "com.google.cloud.storage.Blob",
      "com.google.cloud.storage.BlobId",
      "com.google.cloud.storage.StorageOptions"
    ],
    "code": "import com.google.cloud.storage.Blob\nimport com.google.cloud.storage.BlobId\nimport com.google.cloud.storage.StorageOptions\n\nfun main() {\n    val bucketName = \"your_bucket_name\"\n    val blobName = \"your_blob_name\"\n    val storage = StorageOptions.getDefaultInstance().service\n    val blobId = BlobId.of(bucketName, blobName)\n    val blob = storage.get(blobId)\n\n    val content: ByteArray = blob.getContent()\n    \n    // Do something with the content\n    println(String(content))\n}",
    "filename": "19a0cd87dfc682c7f0b165d82ed9073d_5.kt"
  },
  {
    "conversation_hash": "19a0cd87dfc682c7f0b165d82ed9073d",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class Commit(\n    val tree: Tree,\n    val previousCommit: Commit?\n)\n\ninterface SnapshotPart\n\ndata class Tree(\n    val tree: Map<String, SnapshotPart>\n) : SnapshotPart\n\ndata class Blob(\n    val content: List<Byte>\n) : SnapshotPart\n\nfun main() {\n    // Create Blob instance\n    val blobContent = listOf(1, 2, 3, 4)\n    val blob = Blob(blobContent)\n\n    // Create Tree instance\n    val treeMap = mapOf(\"blob1\" to blob)\n    val tree = Tree(treeMap)\n\n    // Create Commit instance\n    val previousCommit: Commit? = null\n    val commit = Commit(tree, previousCommit)\n\n    // Access the properties of the Commit instance\n    println(\"Commit Tree: ${commit.tree}\")\n    println(\"Previous Commit: ${commit.previousCommit}\")\n}",
    "filename": "19a0cd87dfc682c7f0b165d82ed9073d_6.kt"
  },
  {
    "conversation_hash": "f84fcef1f511f95f2fdc172ca985e46e",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.cinterop.",
      "ncurses."
    ],
    "code": "import kotlinx.cinterop.*\nimport ncurses.*\n\nfun main() {\n  initscr()\n\n  raw()\n  keypad(stdscr, true)\n  noecho()\n\n  var running = true\n  var choice: Int\n  while (running) {\n    printMenu()\n\n    choice = getch()\n    when (choice) {\n      '1'.toInt() -> {\n        println(\"Option 1 selected.\")\n      }\n      '2'.toInt() -> {\n        println(\"Option 2 selected.\")\n      }\n      '3'.toInt() -> {\n        println(\"Option 3 selected.\")\n      }\n      '4'.toInt() -> {\n        println(\"Exiting the program.\")\n        running = false\n      }\n      else -> {\n        println(\"Invalid choice. Please enter a valid option.\")\n      }\n    }\n  }\n\n  endwin()\n}\n\nprivate fun printMenu() {\n  clear()\n  addstr(\"1. Option 1\\n\")\n  addstr(\"2. Option 2\\n\")\n  addstr(\"3. Option 3\\n\")\n  addstr(\"4. Exit\\n\")\n  addstr(\"Enter your choice: \")\n  refresh()\n}",
    "filename": "f84fcef1f511f95f2fdc172ca985e46e_7.kt"
  },
  {
    "conversation_hash": "d577ef4b2d7eb1720c6f63bd4f3129ed",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Define the Document class that represents a document\ndata class Document(val name: String, val text: String)\n\n// Define the Archive class that represents an archive containing multiple documents\ndata class Archive(val name: String, val documents: List<Document>)\n\n// Define the Menu class that handles the menu logic and storage of archives\nclass Menu {\n    private val archives = mutableListOf<Archive>()\n\n    // Function to add a new archive with documents\n    fun addArchive(archive: Archive) {\n        archives.add(archive)\n    }\n\n    // Function to display the archives\n    fun showArchives() {\n        println(\"Archives:\")\n        archives.forEachIndexed { index, archive ->\n            println(\"${index + 1}. ${archive.name}\")\n        }\n    }\n\n    // Function to display the documents in a selected archive\n    fun showDocuments(archiveIndex: Int) {\n        if (archiveIndex >= 0 && archiveIndex < archives.size) {\n            val archive = archives[archiveIndex]\n            println(\"Documents in ${archive.name}:\")\n            archive.documents.forEachIndexed { index, document ->\n                println(\"${index + 1}. ${document.name}\")\n            }\n        } else {\n            println(\"Invalid archive index!\")\n        }\n    }\n\n    // Function to display the text of a selected document\n    fun showDocumentText(archiveIndex: Int, documentIndex: Int) {\n        if (archiveIndex >= 0 && archiveIndex < archives.size) {\n            val archive = archives[archiveIndex]\n            if (documentIndex >= 0 && documentIndex < archive.documents.size) {\n                val document = archive.documents[documentIndex]\n                println(\"Text of ${document.name}:\\n${document.text}\")\n            } else {\n                println(\"Invalid document index!\")\n            }\n        } else {\n            println(\"Invalid archive index!\")\n        }\n    }\n}\n\nfun main() {\n    val menu = Menu()\n\n    // Create and add some archives to the menu\n    val archive1 = Archive(\"Archive 1\", listOf(\n        Document(\"Document 1.1\", \"Text of Document 1.1\"),\n        Document(\"Document 1.2\", \"Text of Document 1.2\")\n    ))\n    menu.addArchive(archive1)\n\n    val archive2 = Archive(\"Archive 2\", listOf(\n        Document(\"Document 2.1\", \"Text of Document 2.1\"),\n        Document(\"Document 2.2\", \"Text of Document 2.2\"),\n        Document(\"Document 2.3\", \"Text of Document 2.3\")\n    ))\n    menu.addArchive(archive2)\n\n    // Display the menu and perform actions\n    menu.showArchives()\n    println(\"Select an archive:\")\n    val archiveIndex = readLine()?.toIntOrNull()?.minus(1) ?: -1\n    menu.showDocuments(archiveIndex)\n    println(\"Select a document:\")\n    val documentIndex = readLine()?.toIntOrNull()?.minus(1) ?: -1\n    menu.showDocumentText(archiveIndex, documentIndex)\n}",
    "filename": "d577ef4b2d7eb1720c6f63bd4f3129ed_0.kt"
  },
  {
    "conversation_hash": "d577ef4b2d7eb1720c6f63bd4f3129ed",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val numberedList = listOf(\n    \"Entry 1\" to \"Content 1\",\n    \"Entry 2\" to \"Content 2\",\n    \"Entry 3\" to \"Content 3\"\n)\n\n// Accessing individual entries\nval entry1 = numberedList[0]\nval entry2 = numberedList[1]\n\nprintln(\"Entry 1: ${entry1.first}, Content 1: ${entry1.second}\")\nprintln(\"Entry 2: ${entry2.first}, Content 2: ${entry2.second}\")\n\n// Iterating through the numbered list\nfor ((entry, content) in numberedList) {\n    println(\"$entry: $content\")\n}",
    "filename": "d577ef4b2d7eb1720c6f63bd4f3129ed_1.kt"
  },
  {
    "conversation_hash": "b100f07aaafd6f3fa2097448c21f0b47",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onConfigurationChanged(newConfig: Configuration) {\n    super.onConfigurationChanged(newConfig)\n    // Handle the configuration change\n    // Update the layout or perform any required operations\n    // without reloading the activity\n}",
    "filename": "b100f07aaafd6f3fa2097448c21f0b47_2.kt"
  },
  {
    "conversation_hash": "59e322ffade1e1f62c72706e6fef4549",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Create a MutableList containing a Pair of String and Int\nval pairList: MutableList<Pair<String, Int>> = mutableListOf()\n\n// Add elements to the list\npairList.add(Pair(\"First\", 1))\npairList.add(Pair(\"Second\", 2))\npairList.add(Pair(\"Third\", 3))\n\n// Access and print the elements\nfor (pair in pairList) {\n    val first: String = pair.first\n    val second: Int = pair.second\n    println(\"$first - $second\")\n}",
    "filename": "59e322ffade1e1f62c72706e6fef4549_0.kt"
  },
  {
    "conversation_hash": "59e322ffade1e1f62c72706e6fef4549",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Generic class\nclass MyObject(val value: String) {\n    // Additional properties or methods for the generic object\n}\n\n// Create a MutableList containing a Pair of String and generic object\nval pairList: MutableList<Pair<String, MyObject>> = mutableListOf()\n\n// Create instances of your generic object\nval obj1 = MyObject(\"Value 1\")\nval obj2 = MyObject(\"Value 2\")\n\n// Add elements to the pairList\npairList.add(Pair(\"First\", obj1))\npairList.add(Pair(\"Second\", obj2))\n\n// Access and print the elements\nfor (pair in pairList) {\n    val first: String = pair.first\n    val second: MyObject = pair.second\n    println(\"$first - ${second.value}\")\n}",
    "filename": "59e322ffade1e1f62c72706e6fef4549_1.kt"
  },
  {
    "conversation_hash": "59e322ffade1e1f62c72706e6fef4549",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun processInputs(input1: String?, input2: String?) {\n    // Check if either input is null\n    if (input1 == null || input2 == null) {\n        println(\"One or both inputs are null\")\n        return\n    }\n\n    // Process the non-null inputs\n    println(\"Input 1: $input1\")\n    println(\"Input 2: $input2\")\n}",
    "filename": "59e322ffade1e1f62c72706e6fef4549_2.kt"
  },
  {
    "conversation_hash": "59e322ffade1e1f62c72706e6fef4549",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "val myList = listOf(\"Apple\", \"Banana\", \"Orange\")\n\nfor (i in 1..myList.size) {\n    val element = myList[i-1]  // Subtract 1 to align index with list elements\n    println(\"Element $i: $element\")\n}",
    "filename": "59e322ffade1e1f62c72706e6fef4549_5.kt"
  },
  {
    "conversation_hash": "59e322ffade1e1f62c72706e6fef4549",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Menu(val name: String, val prevMenu: Menu?, val hasNextMenu: Boolean) {\n    fun printMenu() {\n        println(\"Menu: $name\")\n        println(\"Previous Menu: ${prevMenu?.name}\")\n        println(\"Has Next Menu: $hasNextMenu\")\n    }\n}",
    "filename": "59e322ffade1e1f62c72706e6fef4549_8.kt"
  },
  {
    "conversation_hash": "2cfb753640da206cc345f7237f570498",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Animal\nclass Dog : Animal()\nclass Cat : Animal()\n\nval dogs: List<Dog> = listOf(Dog(), Dog())\nval animals: List<Animal> = dogs // This is allowed because List is covariant\n\nval cats: List<Cat> = listOf(Cat(), Cat())\n\nfun printAnimals(animalList: List<Animal>) {\n    for (animal in animalList) {\n        println(animal)\n    }\n}\n\nprintAnimals(dogs) // This is allowed, as List<Dog> is a subtype of List<Animal>\nprintAnimals(cats) // This is also allowed, as List<Cat> is a subtype of List<Animal>",
    "filename": "2cfb753640da206cc345f7237f570498_1.kt"
  },
  {
    "conversation_hash": "8ef38b3eb0c361442178b04828668816",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val inputString = \"123.45\"\n\n    val number = inputString.toDoubleOrNull()\n\n    if (number != null) {\n        println(\"String is a number: $number\")\n    } else {\n        println(\"String is not a number\")\n    }\n}",
    "filename": "8ef38b3eb0c361442178b04828668816_0.kt"
  },
  {
    "conversation_hash": "8ef38b3eb0c361442178b04828668816",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class CustomList<E> {\n    private val elements = mutableListOf<E>()\n\n    fun add(element: E) {\n        elements.add(element)\n    }\n\n    fun get(index: Int): E? {\n        if (index >= 0 && index < elements.size) {\n            return elements[index]\n        }\n        return null\n    }\n\n    fun size(): Int {\n        return elements.size\n    }\n}",
    "filename": "8ef38b3eb0c361442178b04828668816_1.kt"
  },
  {
    "conversation_hash": "8ef38b3eb0c361442178b04828668816",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val list = CustomList<String>()\n    list.add(\"Hello\")\n    list.add(\"World\")\n\n    for (i in 0 until list.size()) {\n        val element = list.get(i)\n        if (element != null) {\n            println(element)\n        }\n    }\n}",
    "filename": "8ef38b3eb0c361442178b04828668816_2.kt"
  },
  {
    "conversation_hash": "cf052943e8bb9cc676e7150952a7bdda",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Menu(private val menuName: String, private val previousMenu: Menu?, private val nameOfElement: String, private val nextElementName: String?) {\n    \n    fun run() {\n        println(\"Menu Name: $menuName\")\n        println(\"Previous Menu: ${previousMenu?.menuName ?: \"No Previous Menu\"}\")\n        println(\"Name of Element: $nameOfElement\")\n        println(\"Next Element Name: ${nextElementName ?: \"No Next Element\"}\")\n    }\n}",
    "filename": "cf052943e8bb9cc676e7150952a7bdda_1.kt"
  },
  {
    "conversation_hash": "cf052943e8bb9cc676e7150952a7bdda",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "package com.example.menu\n\nopen class Menu(private val menuName: String, private val previousMenu: Menu?, private val nameOfElement: String, private val nextElementName: String?) {\n\n    fun run() {\n        println(\"Menu Name: $menuName\")\n        println(\"Previous Menu: ${previousMenu?.menuName ?: \"No Previous Menu\"}\")\n        println(\"Name of Element: $nameOfElement\")\n        println(\"Next Element Name: ${nextElementName?.let {\"No Next Element\"}}\")\n    }\n}",
    "filename": "cf052943e8bb9cc676e7150952a7bdda_4.kt"
  },
  {
    "conversation_hash": "cf052943e8bb9cc676e7150952a7bdda",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "com.example.menu.Menu",
      "com.example.submenu.SubMenu"
    ],
    "code": "import com.example.submenu.SubMenu\nimport com.example.menu.Menu\n\nfun main() {\n    val menu = Menu(\"Main Menu\", null, \"Element 1\", \"Element 2\")\n    menu.run()\n\n    val subMenu = SubMenu(\"Sub Menu\", menu, \"Sub Element 1\", \"Sub Element 2\")\n    subMenu.run()\n}",
    "filename": "cf052943e8bb9cc676e7150952a7bdda_6.kt"
  },
  {
    "conversation_hash": "cf052943e8bb9cc676e7150952a7bdda",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    var input: Int\n    var isValid = false\n\n    while (!isValid) {\n        println(\"Enter a number between 1 and 99:\")\n        input = readLine()?.toIntOrNull() ?: continue\n        isValid = input in 1..99\n    }\n\n    println(\"Valid number entered: $input\")\n}",
    "filename": "cf052943e8bb9cc676e7150952a7bdda_8.kt"
  },
  {
    "conversation_hash": "cf052943e8bb9cc676e7150952a7bdda",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val input = readLine()?.toIntOrNull() ?: 0\n\n    val message = when (input) {\n        in 1..99 -> \"Input is within the range of 1 to 99.\"\n        else -> \"Input is outside the range of 1 to 99.\"\n    }\n\n    println(message)\n}",
    "filename": "cf052943e8bb9cc676e7150952a7bdda_9.kt"
  },
  {
    "conversation_hash": "cf052943e8bb9cc676e7150952a7bdda",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyClass<E>(val name: String, val value: E?)\n\nfun main() {\n    val contents: List<MyClass<Any?>> = mutableListOf(MyClass(\"Имя элемента\", null))\n\n    for (item in contents) {\n        println(\"Name: ${item.name}, Value: ${item.value}\")\n    }\n}",
    "filename": "cf052943e8bb9cc676e7150952a7bdda_11.kt"
  },
  {
    "conversation_hash": "cf052943e8bb9cc676e7150952a7bdda",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Menu(\n    val menuName: String,\n    val top: Boolean,\n    val nameOfElement: String\n) {\n    var contents: List<Pair<String, Any?>> = mutableListOf(\"name\" to null)\n}\n\nclass ArchivesList : Menu(\"список архивов\", true, \"архив\") {\n    var contents: List<Pair<String, Archive?>> = mutableListOf(\"Имя элемента\" to null)\n}",
    "filename": "cf052943e8bb9cc676e7150952a7bdda_12.kt"
  },
  {
    "conversation_hash": "e7c4ec0232abe4013bfb455f20947bbc",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Menu<E>(\n    val menuName: String,\n    val top: Boolean,\n    val nameOfElement: String\n)\n\nclass ArchivesList : Menu<Pair<String, Archive?>>(\"список архивов\", true, \"архив\") {\n    var contents: List<Pair<String, Archive?>> = mutableListOf(Pair(\"Имя элемента\", null))\n}",
    "filename": "e7c4ec0232abe4013bfb455f20947bbc_0.kt"
  },
  {
    "conversation_hash": "e7c4ec0232abe4013bfb455f20947bbc",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Menu<out E>(\n    val menuName: String,\n    val top: Boolean,\n    val nameOfElement: String\n)\n\nclass ArchivesList : Menu<Pair<String, Archive?>>(\"список архивов\", true, \"архив\") {\n    override var contents: List<Pair<String, Archive?>> = mutableListOf(Pair(\"Имя элемента\", null))\n}",
    "filename": "e7c4ec0232abe4013bfb455f20947bbc_1.kt"
  },
  {
    "conversation_hash": "e7c4ec0232abe4013bfb455f20947bbc",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Menu<E>(\n    val menuName: String,\n    val top: Boolean,\n    val nameOfElement: String\n) {\n    open var contents: List<Pair<String, E?>> = mutableListOf(Pair(\"Имя элемента\", null))\n}\n\nclass ArchivesList : Menu<Archive?>(\"список архивов\", true, \"архив\") {\n    override var contents: List<Pair<String, Archive?>> = mutableListOf(Pair(\"Имя элемента\", null))\n}",
    "filename": "e7c4ec0232abe4013bfb455f20947bbc_2.kt"
  },
  {
    "conversation_hash": "08cc38b260e7cb3511449bed7fe7d08c",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun startUpdatingNews() {\n    viewModelScope.launch {\n        while (true) {\n            delay(5000)\n            replaceRandomNews()\n        }\n    }\n}",
    "filename": "08cc38b260e7cb3511449bed7fe7d08c_0.kt"
  },
  {
    "conversation_hash": "08cc38b260e7cb3511449bed7fe7d08c",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onLikeClick(news: News) {\n    val index = newsList.indexOf(news)\n    if (index != -1 && !newsList[index].likedByUser) {\n        newsList[index].likes++\n        newsList[index].likedByUser = true // Устанавливаем флаг, что пользователь поставил лайк\n        _newsState.value = _newsState.value\n    }\n}",
    "filename": "08cc38b260e7cb3511449bed7fe7d08c_5.kt"
  },
  {
    "conversation_hash": "08cc38b260e7cb3511449bed7fe7d08c",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onLikeClick(news: News) {\n    val index = newsList.indexOf(news)\n    if (index != -1 && !newsList[index].likedByUser) {\n        newsList[index].likes++\n        newsList[index].likedByUser = true // Устанавливаем флаг, что пользователь поставил лайк\n        _newsState.value = newsList\n    }\n}",
    "filename": "08cc38b260e7cb3511449bed7fe7d08c_7.kt"
  },
  {
    "conversation_hash": "08cc38b260e7cb3511449bed7fe7d08c",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onLikeClick(news: News) {\n    val index = newsList.indexOf(news)\n    if (index != -1 && !newsList[index].likedByUser) {\n        newsList[index].likes++\n        newsList[index].likedByUser = true // Устанавливаем флаг, что пользователь поставил лайк\n        _newsState.value = _newsState.value\n    }\n}",
    "filename": "08cc38b260e7cb3511449bed7fe7d08c_8.kt"
  },
  {
    "conversation_hash": "655cdc96aa11878a9840612348778f64",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class NewsViewModel : ViewModel() {\n    private val newsList = mutableListOf(\n        News(\"Новость 1\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 2\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 3\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 4\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 5\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 6\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 7\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 8\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 9\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 10\", \"Lorem ipsum\", 0,false),\n    )\n    private val _newsState = MutableStateFlow(getRandomNewsSubset())\n    val newsState: StateFlow<List<News>> = _newsState\n\n    fun onLikeClick(news: News) {\n        val index = newsList.indexOf(news)\n        if (index != -1 && !newsList[index].likedByUser) {\n            newsList[index].likes++\n            newsList[index].likedByUser = true // Устанавливаем флаг, что пользователь поставил лайк\n            val news_ = _newsState.value.toMutableList()\n            news_[news_.indexOf(news)] = newsList[newsList.indexOf(news)]\n            _newsState.value = news_\n            replaceRandomNews() // Вызываем метод обновления новостей\n        }\n    }\n\n    private fun replaceRandomNews() {\n        val visibleNews = _newsState.value\n        val remainingNews = newsList.filterNot { it in visibleNews }\n\n        if (remainingNews.isNotEmpty()) {\n            val randomVisibleIndex = Random.nextInt(visibleNews.size)\n            val randomRemainingIndex = Random.nextInt(remainingNews.size)\n\n            val updatedVisibleList = visibleNews.toMutableList()\n            updatedVisibleList[randomVisibleIndex] = remainingNews[randomRemainingIndex]\n\n            _newsState.value = updatedVisibleList\n        }\n    }\n\n    private fun getRandomNewsSubset(): List<News> {\n        return newsList.shuffled().take(4) // Выбираем случайные 4 новости из списка\n    }\n}",
    "filename": "655cdc96aa11878a9840612348778f64_0.kt"
  },
  {
    "conversation_hash": "655cdc96aa11878a9840612348778f64",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class NewsViewModel : ViewModel() {\n    private val newsList = mutableListOf(\n        News(\"Новость 1\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 2\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 3\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 4\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 5\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 6\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 7\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 8\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 9\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 10\", \"Lorem ipsum\", 0,false),\n    )\n    private val _newsState = MutableStateFlow(getRandomNewsSubset())\n    val newsState: StateFlow<List<News>> = _newsState\n    private var randomVisibleNews: News? = null // Случайная новость\n\n    fun onLikeClick(news: News) {\n        val index = newsList.indexOf(news)\n        if (index != -1 && !newsList[index].likedByUser) {\n            newsList[index].likes++\n            newsList[index].likedByUser = true // Устанавливаем флаг, что пользователь поставил лайк\n            val news_ = _newsState.value.toMutableList()\n            news_[news_.indexOf(news)] = newsList[newsList.indexOf(news)]\n            _newsState.value = news_\n            randomVisibleNews = newsList[newsList.indexOf(news)] // Сохраняем случайную новость\n        }\n    }\n\n    private fun replaceRandomNews() {\n        val visibleNews = _newsState.value\n        val updatedVisibleList = visibleNews.toMutableList()\n\n        randomVisibleNews?.let { randNews ->\n            val index = visibleNews.indexOf(randNews)\n            if (index != -1) {\n                updatedVisibleList[index].likes = randNews.likes\n            }\n        }\n\n        _newsState.value = updatedVisibleList\n    }\n\n    private fun getRandomNewsSubset(): List<News> {\n        return newsList.shuffled().take(4) // Выбираем случайные 4 новости из списка\n    }\n}",
    "filename": "655cdc96aa11878a9840612348778f64_1.kt"
  },
  {
    "conversation_hash": "907d21ad8d61ddee7b71ff27f613f718",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onLikeClick(news: News) {\n    val index = newsList.indexOfFirst { it.id == news.id }\n    if (index != -1 && !newsList[index].likedByUser) {\n        newsList[index].likes++\n        newsList[index].likedByUser = true\n\n        val updatedNewsList = _newsState.value.toMutableList()\n        val updatedIndex = updatedNewsList.indexOfFirst { it.id == news.id }\n        updatedNewsList[updatedIndex] = newsList[index]\n\n        _newsState.value = updatedNewsList\n    }\n}",
    "filename": "907d21ad8d61ddee7b71ff27f613f718_0.kt"
  },
  {
    "conversation_hash": "907d21ad8d61ddee7b71ff27f613f718",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onLikeClick(news: News) {\n    val index = newsList.indexOfFirst { it.id == news.id }\n    if (index != -1 && !newsList[index].likedByUser) {\n        newsList[index].likes++\n        newsList[index].likedByUser = true\n\n        val updatedNewsList = newsState.value.toMutableList()\n        val updatedIndex = updatedNewsList.indexOfFirst { it.id == news.id }\n        updatedNewsList[updatedIndex] = newsList[index]\n\n        newsState.value = updatedNewsList\n    }\n}",
    "filename": "907d21ad8d61ddee7b71ff27f613f718_1.kt"
  },
  {
    "conversation_hash": "f8cf500c7f0f12fe24e6007aebcefb30",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onLikeClick(news: News) {\n    val index = newsList.indexOf(news)\n    if (index != -1 && !newsList[index].likedByUser) {\n        newsList[index].likes++\n        newsList[index].likedByUser = true // Устанавливаем флаг, что пользователь поставил лайк\n        \n        replaceCurrentNews(_newsState.value.indexOf(news), newsList.indexOf(news))\n    }\n    \n    // Обновляем состояние непосредственно здесь\n    _newsState.value = _newsState.value\n}",
    "filename": "f8cf500c7f0f12fe24e6007aebcefb30_0.kt"
  },
  {
    "conversation_hash": "f8cf500c7f0f12fe24e6007aebcefb30",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun onLikeClick(news: News) {\n    val index = newsList.indexOf(news)\n    if (index != -1 && !newsList[index].likedByUser) {\n        newsList[index].likes++\n        newsList[index].likedByUser = true // Устанавливаем флаг, что пользователь поставил лайк\n        \n        val updatedVisibleList = _newsState.value.toMutableList()\n        updatedVisibleList[_newsState.value.indexOf(news)] = newsList[index]\n        _newsState.value = updatedVisibleList.toList()\n    }\n}",
    "filename": "f8cf500c7f0f12fe24e6007aebcefb30_1.kt"
  },
  {
    "conversation_hash": "f8cf500c7f0f12fe24e6007aebcefb30",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class NewsViewModel : ViewModel() {\n    private val newsList = mutableListOf(\n        News(\"Новость 1\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 2\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 3\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 4\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 5\", \"Lorem ipsum\", 0, false),\n        News(\"Новость 6\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 7\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 8\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 9\", \"Lorem ipsum\", 0,false),\n        News(\"Новость 10\", \"Lorem ipsum\", 0,false),\n    )\n    private val _likedNews = MutableStateFlow<List<News>>(emptyList())\n    val likedNews: StateFlow<List<News>> = _likedNews\n    \n    fun onLikeClick(news: News) {\n        val index = newsList.indexOf(news)\n        if (index != -1 && !newsList[index].likedByUser) {\n            newsList[index].likes++\n            newsList[index].likedByUser = true // Устанавливаем флаг, что пользователь поставил лайк\n\n            val updatedLikedList = _likedNews.value.toMutableList()\n            updatedLikedList.add(newsList[index])\n            _likedNews.value = updatedLikedList\n        }\n    }\n    \n    // Метод можно опционально добавить, чтобы отобразить все новости вместе с лайкнутыми.\n    fun getAllNews(): List<News> {\n        return newsList\n    }\n    \n    private fun startUpdatingNews() {\n        GlobalScope.launch {\n            while (true) {\n                delay(5000)\n                replaceRandomNews()\n            }\n        }\n    }\n\n    private fun replaceRandomNews() {\n        // Обновляем только не лайкнутые новости\n        val remainingNews = newsList.filterNot { it in _likedNews.value }\n\n        if (remainingNews.isNotEmpty()) {\n            val randomRemainingIndex = Random.nextInt(remainingNews.size)\n            replaceCurrentNews(newsList.indexOf(remainingNews[randomRemainingIndex]))\n        }\n    }\n\n    private fun replaceCurrentNews(newsListIndex: Int) {\n        val updatedLikedList = _likedNews.value.toMutableList()\n        updatedLikedList.add(newsList[newsListIndex])\n        _likedNews.value = updatedLikedList\n    }\n\n    private fun getRandomNewsSubset(): List<News> {\n        return newsList.shuffled().take(4) // Выбираем случайные 4 новости из списка\n    }\n}",
    "filename": "f8cf500c7f0f12fe24e6007aebcefb30_2.kt"
  },
  {
    "conversation_hash": "605a0ec3b712098aba2c8f0e128805d8",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Menu<E>(\n    val menuName: String,\n    val top: Boolean,\n    val nameOfElement: String\n) {\n    open var contents: List<Pair<String, E?>> =\n        mutableListOf(Pair(\"element name\", null))\n\n    // Add a method to create new elements\n    open fun createElement(elementName: String): E {\n        // Implementation to create a new element\n        // ...\n        return TODO()\n    }\n}",
    "filename": "605a0ec3b712098aba2c8f0e128805d8_0.kt"
  },
  {
    "conversation_hash": "605a0ec3b712098aba2c8f0e128805d8",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "class Menu<E>(\n    val menuName: String,\n    val top: Boolean,\n    val nameOfElement: String\n) {\n    private val stack: Stack<Menu<*>> = Stack()\n    open var contents: List<Pair<String, E?>> =\n        mutableListOf(Pair(\"element name\", null))\n\n    open fun createElement(elementName: String): E {\n        // Implementation to create a new element\n        // ...\n        return TODO()\n    }\n\n    open fun showMenu() {\n        // Display the current menu\n        // ...\n    }\n\n    fun navigateBack() {\n        if (stack.isNotEmpty()) {\n            val previousMenu = stack.pop() // Pop the previous menu from the stack\n            previousMenu.showMenu() // Show the previous menu\n        } else {\n            // No previous menu, handle this case as needed (e.g., exit the program)\n        }\n    }\n}",
    "filename": "605a0ec3b712098aba2c8f0e128805d8_1.kt"
  },
  {
    "conversation_hash": "605a0ec3b712098aba2c8f0e128805d8",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "java.util.Stack",
      "the"
    ],
    "code": "import java.util.Stack\n\nclass Menu<E>(\n    val menuName: String,\n    val top: Boolean,\n    val nameOfElement: String\n) {\n    private val stack: Stack<Menu<*>> = Stack()\n    open var contents: List<Pair<String, E?>> =\n        mutableListOf(Pair(\"element name\", null))\n\n    open fun createElement(elementName: String): E {\n        // Implementation to create a new element\n        // ...\n        return TODO()\n    }\n\n    open fun showMenu() {\n        // Display the current menu\n        // ...\n    }\n\n    fun navigateBack() {\n        if (stack.isNotEmpty()) {\n            val previousMenu = stack.pop() // Pop the previous menu from the stack\n            previousMenu.showMenu() // Show the previous menu\n        } else {\n            // No previous menu, handle this case as needed (e.g., exit the program)\n        }\n    }\n}",
    "filename": "605a0ec3b712098aba2c8f0e128805d8_2.kt"
  },
  {
    "conversation_hash": "605a0ec3b712098aba2c8f0e128805d8",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "java.util.Stack",
      "the"
    ],
    "code": "import java.util.Stack\n\nopen class Menu<E>(\n    val menuName: String,\n    val top: Boolean,\n    val nameOfElement: String\n) {\n    private val stack: Stack<Menu<*>> = Stack()\n    open var contents: List<Pair<String, E?>> =\n        mutableListOf(Pair(\"element name\", null))\n\n    open fun createElement(elementName: String): E {\n        // Implementation to create a new element\n        // ...\n        return TODO()\n    }\n\n    open fun showMenu() {\n        // Display the current menu\n        println(\"Menu Name: $menuName\")\n        for ((index, content) in contents.withIndex()) {\n            println(\"${index + 1}. ${content.first}\")\n        }\n    }\n\n    fun navigateToElement(index: Int) {\n        if (index >= 0 && index < contents.size) {\n            val selectedElement = contents[index].first\n            println(\"Selected Element: $selectedElement\")\n\n            if (index == contents.lastIndex) {\n                // Requested to exit or go back up a menu level\n                if (stack.isNotEmpty()) {\n                    val previousMenu = stack.pop() // Pop the previous menu from the stack\n                    previousMenu.showMenu() // Show the previous menu\n                } else {\n                    // No previous menu, handle this case as needed (e.g., exit the program)\n                    println(\"Exiting the program\")\n                }\n            } else {\n                // Navigating to a new sub-menu\n                val subMenu = createSubMenu(selectedElement)\n                stack.push(this) // Push the current menu onto the stack\n                subMenu.showMenu() // Show the sub-menu\n            }\n        } else {\n            println(\"Invalid index selected\")\n        }\n    }\n\n    open fun createSubMenu(selectedElement: String): Menu<E> {\n        // Create and return a new sub-menu\n        println(\"Creating sub-menu for: $selectedElement\")\n        return Menu(selectedElement, false)\n    }\n}\n\nfun main() {\n    val topLevelMenu = Menu<String>(\"Top Menu\", true, \"Archive\")\n    topLevelMenu.contents = mutableListOf(\n        Pair(\"Element 1\", null),\n        Pair(\"Element 2\", null),\n        Pair(\"Element 3\", null),\n        Pair(\"Exit/Go Back\", null)\n    )\n\n    topLevelMenu.showMenu()\n    topLevelMenu.navigateToElement(2) // Example navigation to \"Element 3\"\n    topLevelMenu.navigateToElement(topLevelMenu.contents.lastIndex) // Navigate back\n}",
    "filename": "605a0ec3b712098aba2c8f0e128805d8_4.kt"
  },
  {
    "conversation_hash": "605a0ec3b712098aba2c8f0e128805d8",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Menu<E>(\n    val menuName: String,\n    val top: Boolean,\n    val nameOfElement: String,\n    val previousMenu: Menu<E>? = null\n) {\n    open var contents: List<Pair<String, E?>> =\n        mutableListOf(Pair(\"element name\", null))\n\n    open fun createElement(elementName: String): E {\n        // Implementation to create a new element\n        // ...\n        return TODO()\n    }\n\n    open fun showMenu() {\n        // Display the current menu\n        println(\"Menu Name: $menuName\")\n        for ((index, content) in contents.withIndex()) {\n            println(\"${index + 1}. ${content.first}\")\n        }\n    }\n\n    fun navigateToElement(index: Int) {\n        if (index >= 0 && index < contents.size) {\n            val selectedElement = contents[index].first\n            println(\"Selected Element: $selectedElement\")\n\n            if (index == contents.lastIndex) {\n                // Requested to exit or go back up a menu level\n                previousMenu?.showMenu() // Show the previous menu\n                \n                // Alternatively, you can directly call the navigateToElement method of the previousMenu:\n                // previousMenu?.navigateToElement(previousMenu.contents.lastIndex)\n            } else {\n                // Navigating to a new sub-menu\n                val subMenu = createSubMenu(selectedElement, this) // Pass the current menu as the previousMenu parameter\n                subMenu.showMenu() // Show the sub-menu\n            }\n        } else {\n            println(\"Invalid index selected\")\n        }\n    }\n\n    open fun createSubMenu(selectedElement: String, previousMenu: Menu<E>): Menu<E> {\n        // Create and return a new sub-menu\n        println(\"Creating sub-menu for: $selectedElement\")\n        return Menu(selectedElement, false, selectedElement, previousMenu)\n    }\n}\n\nfun main() {\n    val topLevelMenu = Menu<String>(\"Top Menu\", true, \"Archive\")\n    topLevelMenu.contents = mutableListOf(\n        Pair(\"Element 1\", null),\n        Pair(\"Element 2\", null),\n        Pair(\"Element 3\", null),\n        Pair(\"Exit/Go Back\", null)\n    )\n\n    topLevelMenu.showMenu()\n    topLevelMenu.navigateToElement(2) // Example navigation to \"Element 3\"\n    topLevelMenu.navigateToElement(topLevelMenu.contents.lastIndex) // Navigate back\n}",
    "filename": "605a0ec3b712098aba2c8f0e128805d8_5.kt"
  },
  {
    "conversation_hash": "605a0ec3b712098aba2c8f0e128805d8",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Menu(\n    val menuName: String,\n    val top: Boolean,\n    val nameOfElement: String,\n    val previousMenu: Menu? = null\n) {\n    open var contents: List<Pair<String, Menu?>> = mutableListOf(Pair(\"element name\", null))\n\n  // ...\n}",
    "filename": "605a0ec3b712098aba2c8f0e128805d8_6.kt"
  },
  {
    "conversation_hash": "605a0ec3b712098aba2c8f0e128805d8",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Menu<E>(\n    val menuName: String,\n    val top: Boolean,\n    val nameOfElement: String,\n    val previousMenu: Menu<E>? = null\n) {\n    open var contents: List<Pair<String, E>> = mutableListOf(Pair(\"element name\", null))\n\n    open fun createElement(elementName: String): E {\n        // Implementation to create a new element\n        // ...\n        return TODO()\n    }\n\n    open fun showMenu() {\n        // Display the current menu\n        println(\"Menu Name: $menuName\")\n        for ((index, content) in contents.withIndex()) {\n            println(\"${index + 1}. ${content.first}\")\n        }\n    }\n\n    fun navigateToElement(index: Int) {\n        if (index >= 0 && index < contents.size) {\n            val selectedElement = contents[index].second\n            println(\"Selected Element: $selectedElement\")\n\n            if (selectedElement is Menu) {\n                // Navigating to a sub-menu\n                val subMenu = createSubMenu(selectedElement.menuName, selectedElement) // Use the selected Menu as the previousMenu parameter\n                subMenu.showMenu() // Show the sub-menu\n            } else if (selectedElement is String) {\n                // Handling the selected note (String)\n                handleSelectedNote(selectedElement)\n            }\n        } else {\n            println(\"Invalid index selected\")\n        }\n    }\n\n    open fun createSubMenu(selectedElementName: String, previousMenu: Menu<E>): Menu<E> {\n        // Create and return a new sub-menu\n        println(\"Creating sub-menu for: $selectedElementName\")\n        return Menu(selectedElementName, false, selectedElementName, previousMenu)\n    }\n\n    open fun handleSelectedNote(note: String) {\n        // Handle the selected note (String)\n        println(\"Selected note: $note\")\n    }\n}",
    "filename": "605a0ec3b712098aba2c8f0e128805d8_8.kt"
  },
  {
    "conversation_hash": "f94f91d5318b15ff453fdfc02e259a83",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "FROM python:3.9\n\n# Установка зависимостей проекта\nCOPY requirements.txt /app/requirements.txt\nRUN pip install -r /app/requirements.txt\n\n# Копирование исходного кода проекта\nCOPY . /app\n\n# Установка рабочей директории\nWORKDIR /app\n\n# Команда, которая будет выполнена при запуске контейнера\nCMD [\"python\", \"your_script.py\"]",
    "filename": "f94f91d5318b15ff453fdfc02e259a83_0.kt"
  },
  {
    "conversation_hash": "f39e2c40420fcf7ab9f86d6224ed61e9",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.io."
    ],
    "code": "import java.io.*\n\nclass MaxSizeLogFile(private val fileName: String, private val maxFileSizeBytes: Long) {\n    private var outputStreamWriter: OutputStreamWriter? = null\n    \n    init {\n        val file = File(fileName)\n        if (!file.exists()) {\n            file.createNewFile()\n        }\n        val fileWriter = FileWriter(file, true)\n        val bufferedWriter = BufferedWriter(fileWriter)\n        outputStreamWriter = OutputStreamWriter(bufferedWriter)\n    }\n    \n    fun writeLogMessage(message: String, callback: () -> Unit) {\n        outputStreamWriter?.let { writer ->\n            writer.write(message)\n            writer.flush()\n            \n            if (writer.flushedBytesCount >= maxFileSizeBytes) {\n                writer.close()\n                callback.invoke()\n                outputStreamWriter = createOutputStreamWriter()\n            }\n        }\n    }\n    \n    private fun createOutputStreamWriter(): OutputStreamWriter {\n        val file = File(fileName)\n        val fileWriter = FileWriter(file, true)\n        val bufferedWriter = BufferedWriter(fileWriter)\n        return OutputStreamWriter(bufferedWriter)\n    }\n    \n    private val Writer.flushedBytesCount: Long\n        get() {\n            if (this is BufferedWriter) {\n                val bufferedWriter = this\n                return bufferedWriter.bufferSize - bufferedWriter.remaining()\n            }\n            return -1\n        }\n}",
    "filename": "f39e2c40420fcf7ab9f86d6224ed61e9_0.kt"
  },
  {
    "conversation_hash": "f39e2c40420fcf7ab9f86d6224ed61e9",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val logFile = MaxSizeLogFile(\"logfile.txt\", 1024) // Создаем лог-файл с максимальным размером 1024 байта\n    \n    // Пример записи сообщений в лог-файл\n    logFile.writeLogMessage(\"Первое сообщение\\n\") {\n        println(\"Файл переполнен. Часть файла будет стерта.\")\n    }\n    \n    logFile.writeLogMessage(\"Второе сообщение\\n\") {\n        println(\"Файл переполнен. Часть файла будет стерта.\")\n    }\n    \n    logFile.writeLogMessage(\"Третье сообщение\\n\") {\n        println(\"Файл переполнен. Часть файла будет стерта.\")\n    }\n}",
    "filename": "f39e2c40420fcf7ab9f86d6224ed61e9_1.kt"
  },
  {
    "conversation_hash": "d919ae557d74db2ceb530cd71b3dcc10",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.content.Intent\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Проверяем, запущено ли приложение из Shortcut\n        if(intent.action == Intent.ACTION_VIEW && intent.data != null){\n            val shortcutData = intent.data // Получаем даные из Shortcut deeplink\n            // Обрабатываем полученные данные из Shortcut\n            // Например, открываем соответствующий экран в приложении\n            handleShortcutData(shortcutData)\n        }\n    }\n\n    private fun handleShortcutData(data: Uri){\n        // Разбираем данные Shortcut deeplink и выполняем соответствующие операции\n        // Например, получаем данные из дополнительных параметров deeplink:\n        val itemId = data.getQueryParameter(\"id\")\n        \n        // Открываем соответствующий экран или выполняем нужные действия\n        // ... \n    }\n}",
    "filename": "d919ae557d74db2ceb530cd71b3dcc10_0.kt"
  },
  {
    "conversation_hash": "d919ae557d74db2ceb530cd71b3dcc10",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.net.Uri",
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Проверяем, запущено ли приложение из Shortcut\n        if(intent.action == Intent.ACTION_VIEW && intent.data != null){\n            val shortcutData = intent.data // Получаем данные из Shortcut deeplink\n            // Обрабатываем полученные данные из Shortcut\n            // Например, извлекаем URL из deeplink:\n            val url = shortcutData.toString()\n\n            // Открываем URL в браузере или выполняем другие действия\n            openUrlInBrowser(url)\n        }\n    }\n\n    private fun openUrlInBrowser(url: String){\n        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))\n        startActivity(intent)\n    }\n}",
    "filename": "d919ae557d74db2ceb530cd71b3dcc10_1.kt"
  },
  {
    "conversation_hash": "d919ae557d74db2ceb530cd71b3dcc10",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "java.io.File",
      "java.io.FileWriter",
      "java.io.IOException"
    ],
    "code": "import java.io.File\nimport java.io.FileWriter\nimport java.io.IOException\n\nclass LogFile(private val maxFileSize: Long) {\n\n    private val logFile = File(\"path/to/log.txt\")\n\n    init {\n        // Проверяем, если файл превышает максимальный размер,\n        // удаляем начало файла для освобождения места\n        if (logFile.exists() && logFile.length() >= maxFileSize) {\n            removeExcessLog()\n        }\n    }\n\n    fun writeLog(message: String) {\n        try {\n            val fileWriter = FileWriter(logFile, true) // Открываем файл на запись (append = true)\n            \n            // Дописываем сообщение в конец файла\n            fileWriter.appendln(message)\n            \n            fileWriter.close() // Закрываем файл\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n    }\n\n    private fun removeExcessLog() {\n        try {\n            // Считываем содержимое файла\n            val logContent = logFile.readText() \n            \n            // Удаляем первую половину содержимого файла\n            val newContent = logContent.substring(logContent.length / 2)\n            \n            // Записываем обновленное содержимое обратно в файл\n            logFile.writeText(newContent)\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n    }\n}",
    "filename": "d919ae557d74db2ceb530cd71b3dcc10_2.kt"
  },
  {
    "conversation_hash": "caa1b352146afcb2f743701114cdb531",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Menu<E>(val previousElement: Menu<E>?) {\n    val levels: LinkedList<Menu<E>> \n\n    init {\n        levels = previousElement?.levels?.clone() ?: LinkedList()\n        levels.add(this)\n    }\n}",
    "filename": "caa1b352146afcb2f743701114cdb531_0.kt"
  },
  {
    "conversation_hash": "caa1b352146afcb2f743701114cdb531",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val menu1 = Menu<String>(null)\n    val menu2 = Menu<String>(menu1)\n    val menu3 = Menu<String>(menu2)\n\n    for (menu in menu3.levels) {\n        println(menu)\n    }\n}",
    "filename": "caa1b352146afcb2f743701114cdb531_1.kt"
  },
  {
    "conversation_hash": "caa1b352146afcb2f743701114cdb531",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "java.util.LinkedList",
      "the"
    ],
    "code": "import java.util.LinkedList\n\nfun main() {\n    // Creating an empty LinkedList\n    val list1 = LinkedList<String>()\n\n    // Adding elements to the LinkedList\n    list1.add(\"Apple\")\n    list1.add(\"Banana\")\n    list1.add(\"Orange\")\n\n    // Retrieving elements from the LinkedList\n    println(list1)  // [Apple, Banana, Orange]\n\n    // Adding elements at specific positions\n    list1.add(1, \"Mango\")\n    println(list1)  // [Apple, Mango, Banana, Orange]\n\n    // Iterating over elements in the LinkedList\n    for (fruit in list1) {\n        println(fruit)\n    }\n    /* Output:\n       Apple\n       Mango\n       Banana\n       Orange\n    */\n\n    // Accessing elements using index\n    val firstFruit = list1[0]\n    println(firstFruit)  // Apple\n\n    // Removing elements from the LinkedList\n    list1.remove(\"Banana\")\n    println(list1)  // [Apple, Mango, Orange]\n\n    // Removing elements at specific positions\n    list1.removeAt(1)\n    println(list1)  // [Apple, Orange]\n\n    // Checking if the LinkedList contains an element\n    val containsApple = list1.contains(\"Apple\")\n    println(containsApple)  // true\n\n    // Checking the size of the LinkedList\n    val size = list1.size\n    println(size)  // 2\n\n    // Clearing all elements from the LinkedList\n    list1.clear()\n    println(list1)  // []\n}",
    "filename": "caa1b352146afcb2f743701114cdb531_3.kt"
  },
  {
    "conversation_hash": "caa1b352146afcb2f743701114cdb531",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "java.util.LinkedList"
    ],
    "code": "import java.util.LinkedList\n\nfun main() {\n    // Create a LinkedList using a Collection\n    val fruits = listOf(\"Apple\", \"Banana\", \"Orange\")\n    val list1 = LinkedList(fruits)\n\n    println(list1)  // [Apple, Banana, Orange]\n\n    // Create a LinkedList using an Array\n    val numbers = arrayOf(1, 2, 3, 4, 5)\n    val list2 = LinkedList(numbers.toList())\n\n    println(list2)  // [1, 2, 3, 4, 5]\n}",
    "filename": "caa1b352146afcb2f743701114cdb531_4.kt"
  },
  {
    "conversation_hash": "caa1b352146afcb2f743701114cdb531",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "java.util.LinkedList"
    ],
    "code": "import java.util.LinkedList\n\nfun main() {\n    val list = LinkedList<String>()\n    list.add(\"First\")\n    list.add(\"Second\")\n    list.add(\"Third\")\n\n    // Find the target element\n    val targetElement = \"Second\"\n\n    // Iterate over the list\n    val iterator = list.listIterator()\n    while (iterator.hasNext()) {\n        val currentElement = iterator.next()\n        if (currentElement == targetElement) {\n            // Check if there is a previous element\n            if (iterator.hasPrevious()) {\n                val previousElement = iterator.previous()\n                println(\"Previous element of $targetElement is $previousElement\")\n            } else {\n                println(\"$targetElement is the first element in the list.\")\n            }\n            break\n        }\n    }\n}",
    "filename": "caa1b352146afcb2f743701114cdb531_6.kt"
  },
  {
    "conversation_hash": "caa1b352146afcb2f743701114cdb531",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Menu<E>(\n    val menuLevelList: List<String>,\n    val level: Int,\n    val previousElement: Menu<E>?\n) {\n    fun run() {\n        val lastElement = menuLevelList.last()\n        println(lastElement)\n    }\n}\n\nfun main() {\n    val menu = Menu(listOf(\"список архивов\", \"архив\", \"список заметок\", \"заметка\"), 1, null)\n    menu.run()\n}",
    "filename": "caa1b352146afcb2f743701114cdb531_9.kt"
  },
  {
    "conversation_hash": "caa1b352146afcb2f743701114cdb531",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Menu(val menuLevelList: List<String>) {\n    val menuLevelList = \"Some other value\"\n\n    fun printMenuLevelList() {\n        val menuLevelList = \"Local value\"\n        println(this.menuLevelList)  // Referring to the class-level property\n        println(menuLevelList)  // Referring to the local variable\n    }\n}\n\nfun main() {\n    val menu = Menu(listOf(\"Item 1\", \"Item 2\", \"Item 3\"))\n    menu.printMenuLevelList()\n}",
    "filename": "caa1b352146afcb2f743701114cdb531_11.kt"
  },
  {
    "conversation_hash": "caa1b352146afcb2f743701114cdb531",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "val list = listOf(1, 2, 3, 4, 5)\nval index = 2\n\nif (index + 1 < list.size) {\n    val nextElement = list[index + 1]\n    println(\"Next element: $nextElement\")\n}\nelse {\n    println(\"The next element is out of bounds.\")\n}",
    "filename": "caa1b352146afcb2f743701114cdb531_13.kt"
  },
  {
    "conversation_hash": "c8e7ccce56d6dbbb2ab202f7b770188d",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun myMethod(a: Any?) {\n    if (a is Int) {\n        // Do something specific for Int types\n        val result = a * 2\n        println(result)\n    } else {\n        // Handle other cases or provide an error message\n        println(\"Error: 'a' is not an Int\")\n    }\n}",
    "filename": "c8e7ccce56d6dbbb2ab202f7b770188d_4.kt"
  },
  {
    "conversation_hash": "c8e7ccce56d6dbbb2ab202f7b770188d",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun myMethod(a: Any?) {\n    if (a !is Int) {\n        // Do something when 'a' is not an Int\n        println(\"Error: 'a' is not an Int\")\n    } else {\n        // Handle the case when 'a' is an Int\n        val result = a * 2\n        println(result)\n    }\n}",
    "filename": "c8e7ccce56d6dbbb2ab202f7b770188d_6.kt"
  },
  {
    "conversation_hash": "c8e7ccce56d6dbbb2ab202f7b770188d",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class Menu<E>(\n    val name: String?,\n    val menuLevelList: List<String>,\n    val level: Int,\n    val previousElement: Menu<E>?\n) {\n    var contentList: MutableList<Any?> =\n        mutableListOf(null)\n    var textContent = \"\"\n\n    fun run() {\n        var command = -1\n        while (true) {\n            if (this.menuLevelList[level] != this.menuLevelList.last()) {\n                println(\"0. Создать элемент: ${menuLevelList[this.level + 1]}\")\n            }\n\n            for (i in 1 until contentList.size) {\n                println(\"$i. ${(this.contentList[i] as? Menu<*>)?.name}\")\n            }\n\n            // Rest of the code...",
    "filename": "c8e7ccce56d6dbbb2ab202f7b770188d_8.kt"
  },
  {
    "conversation_hash": "c8e7ccce56d6dbbb2ab202f7b770188d",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun select(number: Int) {\n    when (number) {\n        0 -> createNew()\n\n        in 1..contentList.size - 1 -> {\n            if (menuLevelList[level + 1] == menuLevelList.last()) {\n                val currentItem = contentList[number] \n                if (currentItem is Menu<*>) {\n                    println(\"Название: \\\"${currentItem.name}\\\"\")\n                    println(\"${currentItem.contentList}\")\n                }\n            } else {\n                (contentList[number] as? Menu<*>)?.run()\n            }\n        }\n\n        contentList.size -> back()\n    }\n}",
    "filename": "c8e7ccce56d6dbbb2ab202f7b770188d_9.kt"
  },
  {
    "conversation_hash": "e201deeccab085238207a8149478865e",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "matrix = [1 2 3; 4 5 6; 7 8 9]\nscalar = 10\nvector = [1, 2, 3, 4, 5]\n\nrepeated_matrix = repeat_signal(matrix, 3)\nrepeated_scalar = repeat_signal(scalar, 5)\nrepeated_vector = repeat_signal(vector, 2)\n\nprintln(\"Repeated Matrix:\")\nprintln(repeated_matrix)\n\nprintln(\"\\nRepeated Scalar:\")\nprintln(repeated_scalar)\n\nprintln(\"\\nRepeated Vector:\")\nprintln(repeated_vector)",
    "filename": "e201deeccab085238207a8149478865e_1.kt"
  },
  {
    "conversation_hash": "e201deeccab085238207a8149478865e",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "variable1 = 5\nvariable2 = -2\nvariable3 = \"Hello\"\n\nchecked_variable1 = check_variable(variable1)\nchecked_variable2 = check_variable(variable2)\nchecked_variable3 = check_variable(variable3)\n\nprintln(\"Checked Variable 1: \", checked_variable1)\nprintln(\"Checked Variable 2: \", checked_variable2)\nprintln(\"Checked Variable 3: \", checked_variable3)",
    "filename": "e201deeccab085238207a8149478865e_5.kt"
  },
  {
    "conversation_hash": "e201deeccab085238207a8149478865e",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "variable1 = 5\nvariable2 = -2\nvariable3 = \"Hello\"\nvariable4 = [1 2 3; 4 5 6]\nvariable5 = [1, 2, 3, 4, 5]\n\nchecked_variable1 = check_variable(variable1)\nchecked_variable2 = check_variable(variable2)\nchecked_variable3 = check_variable(variable3)\nchecked_variable4 = check_variable(variable4)\nchecked_variable5 = check_variable(variable5)\n\nprintln(\"Checked Variable 1: \", checked_variable1)\nprintln(\"Checked Variable 2: \", checked_variable2)\nprintln(\"Checked Variable 3: \", checked_variable3)\nprintln(\"Checked Variable 4: \", checked_variable4)\nprintln(\"Checked Variable 5: \", checked_variable5)",
    "filename": "e201deeccab085238207a8149478865e_8.kt"
  },
  {
    "conversation_hash": "e201deeccab085238207a8149478865e",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "# Код файла file1.jl\n\nprintln(\"File 1\")\n\ninclude(\"file2.jl\")  # включаем содержимое файла file2.jl\n\nprintln(\"End of File 1\")",
    "filename": "e201deeccab085238207a8149478865e_13.kt"
  },
  {
    "conversation_hash": "e201deeccab085238207a8149478865e",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [
      "file2"
    ],
    "code": "# Код файла file1.jl\n\ninclude(\"file2.jl\")  # включаем содержимое файла file2.jl\n\n# Используем функции и переменные из file2.jl\nresult = add_numbers(5, 10)\nprintln(\"Result: \", result)\nprintln(\"Variable from file2: \", my_variable)",
    "filename": "e201deeccab085238207a8149478865e_16.kt"
  },
  {
    "conversation_hash": "b2fe9d0712e091cd236c81e96ac9bc25",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "# пример с матрицей\ninput_matrix = [1 2; 3 4]\nrepeat_count = 3\noutput_matrix = repeat_input(input_matrix, repeat_count)\nprintln(\"Результирующая матрица:\")\ndisplay(output_matrix)\n\n# пример со скаляром\ninput_scalar = 5\noutput_vector = repeat_input(input_scalar, repeat_count)\nprintln(\"Результирующий вектор:\")\ndisplay(output_vector)\n\n# пример с вектором\ninput_vector = [1, 2, 3]\noutput_matrix = repeat_input(input_vector, repeat_count)\nprintln(\"Результирующая матрица:\")\ndisplay(output_matrix)",
    "filename": "b2fe9d0712e091cd236c81e96ac9bc25_1.kt"
  },
  {
    "conversation_hash": "b2fe9d0712e091cd236c81e96ac9bc25",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "# пример с матрицей\ninput_matrix = [1 2; 3 4]\noutput_matrix = process_input(input_matrix)\nprintln(\"Результирующая матрица:\")\ndisplay(output_matrix)\n\n# пример со скаляром\ninput_scalar = 5\noutput_vector = process_input(input_scalar)\nprintln(\"Результирующий вектор:\")\ndisplay(output_vector)\n\n# пример с вектором\ninput_vector = [1, 2, 3]\noutput_matrix = process_input(input_vector)\nprintln(\"Результирующая матрица:\")\ndisplay(output_matrix)",
    "filename": "b2fe9d0712e091cd236c81e96ac9bc25_4.kt"
  },
  {
    "conversation_hash": "0627511c08190bdceced9d5f252dcd54",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "# Режим \"Столбцы как каналы (на основе кадров)\"\ninput = [1 2 3; 4 5 6; 7 8 9]\nmode = \"односкоростная\"\nL = 2\noutput = process_columns(input, mode, L)\nprintln(output)\n# вывод: [1 1 2 2 3 3; 4 4 5 5 6 6; 7 7 8 8 9 9]\n\nmode = \"многоскоростная\"\noutput = process_columns(input, mode, L)\nprintln(output)\n# вывод: [1 2 3 1 2 3; 4 5 6 4 5 6; 7 8 9 7 8 9]\n\n# Режим \"Элементы как каналы (на основе выборки)\"\ninput = [1, 2, 3]\nL = 3\noutput = process_elements(input, L)\nprintln(output)\n# вывод: [1, 1, 1, 2, 2, 2, 3, 3, 3]",
    "filename": "0627511c08190bdceced9d5f252dcd54_4.kt"
  },
  {
    "conversation_hash": "bc100e1179dfc71108e2d61c03b15bce",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Call your audio provider service method here\n    }\n}",
    "filename": "bc100e1179dfc71108e2d61c03b15bce_1.kt"
  },
  {
    "conversation_hash": "bc100e1179dfc71108e2d61c03b15bce",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun provideAudioService() {\n    val sampleRate = AudioTrack.getNativeOutputSampleRate(AudioManager.STREAM_MUSIC)\n    val bufferSize = AudioTrack.getMinBufferSize(sampleRate, AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT)\n    val audioTrack = AudioTrack(\n        AudioManager.STREAM_MUSIC, sampleRate, AudioFormat.CHANNEL_OUT_MONO,\n        AudioFormat.ENCODING_PCM_16BIT, bufferSize, AudioTrack.MODE_STREAM\n    )\n    audioTrack.play()\n\n    // Generate or receive audio data here, and write it to the audio track\n    val audioData: ByteArray = generateAudioData()\n    audioTrack.write(audioData, 0, audioData.size)\n\n    // Release the audio track when done\n    audioTrack.stop()\n    audioTrack.release()\n}",
    "filename": "bc100e1179dfc71108e2d61c03b15bce_2.kt"
  },
  {
    "conversation_hash": "bc100e1179dfc71108e2d61c03b15bce",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    provideAudioService()\n}",
    "filename": "bc100e1179dfc71108e2d61c03b15bce_3.kt"
  },
  {
    "conversation_hash": "19d90a7d9c2b19c20e0de3d5d122d330",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "array1 = [[1, 2, 3], [4, 5, 6]]\narray2 = [[7, 8, 9], [10, 11, 12]]\n\ntry\n    compare_dimensions(array1, array2)\ncatch err\n    println(err)\nend",
    "filename": "19d90a7d9c2b19c20e0de3d5d122d330_3.kt"
  },
  {
    "conversation_hash": "19d90a7d9c2b19c20e0de3d5d122d330",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "array1 = [[1, 2, 3], [4, 5, 6]]\narray2 = [[7, 8, 9], [10, 11, 12]]\n\ntry\n    compare_dimensions(array1, array2)\ncatch err\n    println(err)\nend",
    "filename": "19d90a7d9c2b19c20e0de3d5d122d330_5.kt"
  },
  {
    "conversation_hash": "0cb125d67ee5f5fa627aacf90fd151b3",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = 1.0\nf = 1.0\nϕ = 0.0\nTs = 0.001\nt = 0.1\n\nresult = calculate_sine_wave(A, f, ϕ, Ts, t)\nprintln(result)",
    "filename": "0cb125d67ee5f5fa627aacf90fd151b3_1.kt"
  },
  {
    "conversation_hash": "0cb125d67ee5f5fa627aacf90fd151b3",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1.0, 2.0, 0.5]\nf = [1.0, 2.0, 0.5]\nϕ = [0.0, π/4, π/2]\nTs = 0.001\nt = 0.1\n\nresult = calculate_sine_wave(2, A, f, ϕ, Ts, t)\nprintln(result)",
    "filename": "0cb125d67ee5f5fa627aacf90fd151b3_3.kt"
  },
  {
    "conversation_hash": "0cb125d67ee5f5fa627aacf90fd151b3",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = 1.0\nf = [1.0, 2.0, 0.5]\nϕ = [0.0, π/4, π/2]\nTs = 0.001\nt = 0.1\n\nresult = calculate_sine_wave_real(2, A, f, ϕ, Ts, t)\nprintln(result)",
    "filename": "0cb125d67ee5f5fa627aacf90fd151b3_5.kt"
  },
  {
    "conversation_hash": "0cb125d67ee5f5fa627aacf90fd151b3",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = 1.0\nf = [1.0, 2.0, 0.5]\nϕ = [0.0, π/4, π/2]\nTs = 0.001\nt = 0.1\n\nresult = calculate_sine_wave_real(2, A, f, ϕ, Ts, t)\nprintln(result)",
    "filename": "0cb125d67ee5f5fa627aacf90fd151b3_7.kt"
  },
  {
    "conversation_hash": "0cb125d67ee5f5fa627aacf90fd151b3",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = 1.0\nf = [1.0, 2.0, 0.5]\nϕ = [0.0, π/4, π/2]\nTs = 0.001\nt = 0.1\n\nresult = calculate_sine_wave_real(2, A, f, ϕ, Ts, t)\nprintln(result)",
    "filename": "0cb125d67ee5f5fa627aacf90fd151b3_9.kt"
  },
  {
    "conversation_hash": "0cb125d67ee5f5fa627aacf90fd151b3",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1.0, 2.0, 0.5]\nf = [1.0, 2.0, 0.5]\nϕ = [0.0, π/4, π/2]\nTs = 0.001\nt = 0.1\n\nresult = calculate_sine_wave_real(2, A, f, ϕ, Ts, t)\nprintln(result)",
    "filename": "0cb125d67ee5f5fa627aacf90fd151b3_11.kt"
  },
  {
    "conversation_hash": "0cb125d67ee5f5fa627aacf90fd151b3",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1.0 2.0 0.5; 0.5 1.0 1.5]\nf = [1.0, 2.0, 0.5]\nϕ = [0.0, π/4, π/2]\nTs = 0.001\nt = 0.1\n\nresult = calculate_sine_wave_real(2, A, f, ϕ, Ts, t)\nprintln(result)",
    "filename": "0cb125d67ee5f5fa627aacf90fd151b3_13.kt"
  },
  {
    "conversation_hash": "0cb125d67ee5f5fa627aacf90fd151b3",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1.0, 2.0, 0.5]\nf = [1.0, 2.0, 0.5]\nϕ = [0.0, π/4, π/2]\nTs = 0.001\nt = 0.1\n\nresult = calculate_sine_wave_real(2, A, f, ϕ, Ts, t)\nprintln(result)",
    "filename": "0cb125d67ee5f5fa627aacf90fd151b3_15.kt"
  },
  {
    "conversation_hash": "a8259f775f20a7b276b6fb85e1db1987",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1.0, 2.0, 0.5]\nf = [1.0, 2.0, 0.5]\nϕ = [0.0, π/4, π/2]\nTs = 0.001\nt = 0.1\n\nresult = calculate_sine_wave_real(2, A, f, ϕ, Ts, t)\nprintln(result)",
    "filename": "a8259f775f20a7b276b6fb85e1db1987_1.kt"
  },
  {
    "conversation_hash": "a8259f775f20a7b276b6fb85e1db1987",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1.0, 2.0, 0.5]\nf = [1.0, 2.0, 0.5]\nϕ = [0.0, π/4, π/2]\nTs = 0.001\nt = 0.1\n\nresult = calculate_sine_wave_real(2, A, f, ϕ, Ts, t)\nprintln(result)",
    "filename": "a8259f775f20a7b276b6fb85e1db1987_3.kt"
  },
  {
    "conversation_hash": "a8259f775f20a7b276b6fb85e1db1987",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1.0, 2.0, 0.5]\nf = [1.0, 2.0, 0.5]\nϕ = [0.0, π/4, π/2]\nTs = 0.001\nt = 0.1\n\nresult = [calculate_sine_wave_real(channel, A, f, ϕ, Ts, t) for channel in 1:length(A)]\nprintln(result)",
    "filename": "a8259f775f20a7b276b6fb85e1db1987_5.kt"
  },
  {
    "conversation_hash": "a8259f775f20a7b276b6fb85e1db1987",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1.0, 2.0, 0.5]\nf = [1.0, 2.0, 0.5]\nϕ = [0.0, π/4, π/2]\nTs = 0.001\nt = 0.1\n\nresult = [calculate_sine_wave_real(channel, A, f, ϕ, Ts, t) for channel in 1:length(A)]\nprintln(result)",
    "filename": "a8259f775f20a7b276b6fb85e1db1987_10.kt"
  },
  {
    "conversation_hash": "0926a4f31ef8d1f9bd01281ffe3744b1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "main_matrix1 = [1 2; 3 4]\nrepetitions1 = 2\nadditional_matrix1 = zeros(3, 4)\n\nresult1 = repeat_matrix(main_matrix1, repetitions1, additional_matrix1)\nprintln(result1)\n# Output: \n# [1.0 2.0 0.0; \n#  1.0 2.0 0.0; \n#  3.0 4.0 0.0; \n#  3.0 4.0 0.0]\n\nmain_matrix2 = [1 2; 3 4]\nrepetitions2 = 2\nadditional_matrix2 = zeros(2, 2)\n\nresult2 = repeat_matrix(main_matrix2, repetitions2, additional_matrix2)\nprintln(result2)\n# Output: \n# [1.0 2.0; \n#  1.0 2.0]",
    "filename": "0926a4f31ef8d1f9bd01281ffe3744b1_1.kt"
  },
  {
    "conversation_hash": "d5f399d11172e1e7133b14b1a5c00e25",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "using LinearAlgebra\n\ninput = [1, 2, 3]\nrepeat_count = 3\ninitial_condition = zeros(5, 5)\n\noutput = repeat(input, outer = (repeat_count,), init = initial_condition)\n\nfor i in 1:repeat_count\n    println(\"Итерация \", i, \": \", output[:, i], \"; \", input)\nend",
    "filename": "d5f399d11172e1e7133b14b1a5c00e25_0.kt"
  },
  {
    "conversation_hash": "dfdfbe54f4443a274f36f9f210e5bc26",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface MyInterface {\n    val url: String\n    val messageInputSelector: String\n    val sendButtonSelector: String\n    val replacements: Array<Replacement>\n    \n    fun getReadyState(state: (Boolean) -> Unit)\n    \n    fun sendRequest(text: String, listener: RequestListener)\n}",
    "filename": "dfdfbe54f4443a274f36f9f210e5bc26_1.kt"
  },
  {
    "conversation_hash": "dfdfbe54f4443a274f36f9f210e5bc26",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface MyInterface {\n    // остальные методы и свойства интерфейса...\n    \n    fun onLanguageChange(language: String)\n}",
    "filename": "dfdfbe54f4443a274f36f9f210e5bc26_3.kt"
  },
  {
    "conversation_hash": "dfdfbe54f4443a274f36f9f210e5bc26",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "/**\n * Интерфейс, представляющий функционал чата.\n *\n * @property url URL-адрес чата.\n * @property messageInputSelector Селектор поля ввода сообщений.\n * @property sendButtonSelector Селектор кнопки отправки сообщений.\n * @property replacements Массив заменяемых совпадений в сообщениях.\n */\ninterface Chat {\n    val url: String\n    val messageInputSelector: String\n    val sendButtonSelector: String\n    val replacements: Array<Replacement>\n\n    /**\n     * Проверяет готовность чата.\n     *\n     * @param complete Функция обратного вызова, вызываемая при завершении проверки.\n     */\n    fun getReadyState(complete: (Boolean) -> Unit)\n\n    /**\n     * Отправляет запрос с указанным текстом.\n     *\n     * @param text Текст запроса.\n     * @param listener Слушатель ответа на запрос.\n     */\n    fun sendRequest(text: String, listener: RequestListener)\n}",
    "filename": "dfdfbe54f4443a274f36f9f210e5bc26_4.kt"
  },
  {
    "conversation_hash": "dfdfbe54f4443a274f36f9f210e5bc26",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "/**\n * Интерфейс, определяющий методы обработки ответа на запрос.\n */\ninterface RequestListener {\n    \n    /**\n     * Вызывается при успешном выполнении запроса.\n     *\n     * @param result Результат выполнения запроса в виде строки.\n     * @param time Время выполнения запроса в миллисекундах.\n     */\n    fun onSuccess(result: String, time: Int)\n    \n    /**\n     * Вызывается при возникновении ошибки при выполнении запроса.\n     *\n     * @param code Код ошибки, указывающий тип ошибки.\n     */\n    fun onError(code: Int)\n}",
    "filename": "dfdfbe54f4443a274f36f9f210e5bc26_5.kt"
  },
  {
    "conversation_hash": "990329db1e6354d040c4fbc846653cee",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "matrix = [1 2; 3 4]\nrepetitions = 3\n\nrepeated_matrix = repeat_rows(matrix, repetitions)\nprintln(repeated_matrix)",
    "filename": "990329db1e6354d040c4fbc846653cee_7.kt"
  },
  {
    "conversation_hash": "990329db1e6354d040c4fbc846653cee",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "matrix = [1 2; 3 4]\nrepetitions = 3\n\nrepeated_rows = repeat_rows(matrix, repetitions)\nprintln(repeated_rows)",
    "filename": "990329db1e6354d040c4fbc846653cee_10.kt"
  },
  {
    "conversation_hash": "4452073aa49eaed76d6b1b19e60922ef",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class OpenVpnService : VpnService() {\n       override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n           // Обработайте команды подключения и отключения VPN\n           return super.onStartCommand(intent, flags, startId)\n       }\n       \n       override fun onEstablish(captureInterface: VpnService.Builder) {\n           // Обработайте успешное установление VPN-соединения\n       }\n       \n       override fun onRevoke() {\n           // Обработайте отзыв VPN-соединения\n       }\n   }",
    "filename": "4452073aa49eaed76d6b1b19e60922ef_2.kt"
  },
  {
    "conversation_hash": "4452073aa49eaed76d6b1b19e60922ef",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n       if (requestCode == REQUEST_VPN && resultCode == Activity.RESULT_OK) {\n           val intent = Intent(this, OpenVpnService::class.java)\n           startService(intent)\n       }\n       super.onActivityResult(requestCode, resultCode, data)\n   }",
    "filename": "4452073aa49eaed76d6b1b19e60922ef_5.kt"
  },
  {
    "conversation_hash": "4452073aa49eaed76d6b1b19e60922ef",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "class OpenVpnService : VpnService() {\n    private lateinit var builder: VpnService.Builder\n    \n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n        if (intent?.action == ACTION_CONNECT_VPN) {\n            // Здесь вы можете прочитать параметры подключения из Intent\n            val serverAddress = intent.getStringExtra(EXTRA_SERVER_ADDRESS)\n            val serverPort = intent.getIntExtra(EXTRA_SERVER_PORT, 0)\n            val username = intent.getStringExtra(EXTRA_USERNAME)\n            val password = intent.getStringExtra(EXTRA_PASSWORD)\n\n            // Создайте конфигурацию VPN-соединения\n            builder = Builder()\n                .addAddress(\"10.0.0.2\", 24)\n                .addRoute(\"0.0.0.0\", 0) // Маршрутизация трафика через VPN\n                .setSession(getString(R.string.app_name))\n            \n            // Установите соединение VPN\n            val vpnInterface = builder.establish()\n\n            if (vpnInterface != null) {\n                onEstablish(vpnInterface)\n            } else {\n                // Обработайте ошибку подключения\n            }\n        } else if (intent?.action == ACTION_DISCONNECT_VPN) {\n            // Отключите VPN\n            disconnectVpn()\n        }\n        return START_STICKY\n    }\n    \n    private fun disconnectVpn() {\n        if (builder != null) {\n            builder.stop()\n        }\n        // Выполните необходимые действия после отключения VPN\n    }\n    \n    private fun onEstablish(vpnInterface: ParcelFileDescriptor) {\n        // Выполните необходимые действия после успешного подключения к VPN\n    }\n}",
    "filename": "4452073aa49eaed76d6b1b19e60922ef_8.kt"
  },
  {
    "conversation_hash": "4452073aa49eaed76d6b1b19e60922ef",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "de.blinkt.openvpn.core.",
      "de.blinkt.openvpn.core.OpenVPNService.Status"
    ],
    "code": "import android.content.Context\nimport de.blinkt.openvpn.core.*\nimport de.blinkt.openvpn.core.OpenVPNService.Status\n\nclass OpenVpnManager(private val context: Context) : VPNThreadListener {\n    private val openVPNService = OpenVPNService()\n\n    fun configureVpn(configFile: String) {\n        val profile = ProfileManager.getInstance(context).getProfileByName(\"<PROFILE_NAME>\") // Подставьте имя профиля\n        if (profile == null) {\n            val builder = ProfileBuilder()\n                .setKey(getString(R.string.openvpn_key))\n                .setCert(getString(R.string.openvpn_cert))\n                .setCa(getString(R.string.openvpn_ca))\n                .setProfileName(\"<PROFILE_NAME>\")\n                .setServerHost(\"<SERVER_HOST>\")\n                .setServerPort(443) // Подставьте данные вашего сервера VPN\n            ProfileManager.getInstance(context).addProfile(builder.create())\n        }\n\n        val connection = createConnectionFromProfile(profile!!)\n        openVPNService.connectVPN(connection)\n    }\n\n    fun disconnectVpn() {\n        openVPNService.disconnectVPN()\n    }\n    \n    override fun updateState(newState: Status?) {\n        // Обработка нового состояния подключения к VPN\n    }\n\n    private fun createConnectionFromProfile(profile: Profile): Connection {\n        return Connection.Builder()\n            .setProfile(profile)\n            .setConnectionStatusListener(this)\n            .build()\n    }\n}",
    "filename": "4452073aa49eaed76d6b1b19e60922ef_10.kt"
  },
  {
    "conversation_hash": "4452073aa49eaed76d6b1b19e60922ef",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private lateinit var openVpnManager: OpenVpnManager\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        \n        openVpnManager = OpenVpnManager(this)\n        \n        // Настройка VPN-соединения\n        openVpnManager.configureVpn(\"<YOUR_CONFIG_FILE_PATH>\")\n        \n        // Настройте кнопки или другие элементы управления для подключения и отключения VPN\n        val connectButton: Button = findViewById(R.id.btn_connect)\n        val disconnectButton: Button = findViewById(R.id.btn_disconnect)\n        \n        connectButton.setOnClickListener { openVpnManager.configureVpn(\"<YOUR_CONFIG_FILE_PATH>\") }\n        \n        disconnectButton.setOnClickListener { openVpnManager.disconnectVpn() }\n    }\n}",
    "filename": "4452073aa49eaed76d6b1b19e60922ef_11.kt"
  },
  {
    "conversation_hash": "ba074b2f52e2abfd8e294b071ce0c276",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "input = [1.5 2.5 3.5 4.5; 1.5 2.5 3.5 4.5; 1.5 2.5 3.5 4.5]\nobj = Repeat(3, \"Elements as channels\", \"Allow multirate processing\", ones(3,4))\n\noutput1 = step(obj, input)\noutput2 = step(obj, input)\noutput3 = step(obj, input)\n\nprintln(\"Output 1:\")\nprintln(output1)\nprintln(\"Output 2:\")\nprintln(output2)\nprintln(\"Output 3:\")\nprintln(output3)",
    "filename": "ba074b2f52e2abfd8e294b071ce0c276_4.kt"
  },
  {
    "conversation_hash": "ba074b2f52e2abfd8e294b071ce0c276",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "input = [1.5 2.5 3.5 4.5; 1.5 2.5 3.5 4.5; 1.5 2.5 3.5 4.5]\nobj = Repeat(3, \"Elements as channels\", \"Allow multirate processing\", ones(3,4))\n\noutput1 = step(obj, input)\noutput2 = step(obj, input)\noutput3 = step(obj, input)\n\nprintln(\"Output 1:\")\nprintln(output1)\nprintln(\"Output 2:\")\nprintln(output2)\nprintln(\"Output 3:\")\nprintln(output3)",
    "filename": "ba074b2f52e2abfd8e294b071ce0c276_7.kt"
  },
  {
    "conversation_hash": "ba074b2f52e2abfd8e294b071ce0c276",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "input = [1.5 2.5 3.5 4.5; 1.5 2.5 3.5 4.5; 1.5 2.5 3.5 4.5]\nobj = Repeat(3, \"Elements as channels\", \"Allow multirate processing\", ones(3,4))\n\noutput1 = step(obj, input)\noutput2 = step(obj, input)\noutput3 = step(obj, input)\n\nprintln(\"Output 1:\")\nprintln(output1)\nprintln(\"Output 2:\")\nprintln(output2)\nprintln(\"Output 3:\")\nprintln(output3)",
    "filename": "ba074b2f52e2abfd8e294b071ce0c276_10.kt"
  },
  {
    "conversation_hash": "ba074b2f52e2abfd8e294b071ce0c276",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "input = [1.5 2.5 3.5 4.5; 1.5 2.5 3.5 4.5; 1.5 2.5 3.5 4.5]\nobj = Repeat(3, \"Elements as channels\", \"Allow multirate processing\", ones(3,4))\n\noutput1 = step(obj, input)\noutput2 = step(obj, input)\noutput3 = step(obj, input)\n\nprintln(\"Output 1:\")\nprintln(output1)\nprintln(\"Output 2:\")\nprintln(output2)\nprintln(\"Output 3:\")\nprintln(output3)",
    "filename": "ba074b2f52e2abfd8e294b071ce0c276_13.kt"
  },
  {
    "conversation_hash": "e77b456c9560696e873584b791ba405a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1 2 3; 4 5 6; 7 8 9; 10 11 12]\nn = 2\n\nsplits = split_matrix(A, n)\n\nfor split in splits\n    println(split)\n    println()  # пустая строка для разделения матрицы\nend",
    "filename": "e77b456c9560696e873584b791ba405a_1.kt"
  },
  {
    "conversation_hash": "e77b456c9560696e873584b791ba405a",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1 2 3; 4 5 6; 7 8 9; 10 11 12]\nn = 4\n\nsplits = split_matrix(A, n)\n\nfor split in splits\n    println(split)\n    println()  # пустая строка для разделения матрицы\nend",
    "filename": "e77b456c9560696e873584b791ba405a_4.kt"
  },
  {
    "conversation_hash": "e77b456c9560696e873584b791ba405a",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1 2 3; 4 5 6; 7 8 9; 10 11 12; 13 14 15; 16 17 18; 19 20 21]\nn = 3\n\nsplits = split_matrix(A, n)\n\nfor split in splits\n    println(split)\n    println()  # пустая строка для разделения матрицы\nend",
    "filename": "e77b456c9560696e873584b791ba405a_7.kt"
  },
  {
    "conversation_hash": "a399760667b6ba86ded16145cdd40ebb",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "# Создаем входную матрицу\nmatrix = [1 2 3; 4 5 6; 7 8 9; 10 11 12]\n\n# Вызываем функцию для деления матрицы на 2 строки\nsub_matrices = divide_matrix(matrix, 2)\n\n# Выводим результаты\nfor sub_matrix in sub_matrices\n    println(sub_matrix)\n    println(\"-----------------\")\nend",
    "filename": "a399760667b6ba86ded16145cdd40ebb_1.kt"
  },
  {
    "conversation_hash": "4103ee31513c9002c0163d3f280e421b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "matrix = [1 2 3;\n          4 5 6;\n          7 8 9]\n\nnum_repeats = 3\nresult = repeat_rows(matrix, num_repeats)\n\nprintln(result)",
    "filename": "4103ee31513c9002c0163d3f280e421b_1.kt"
  },
  {
    "conversation_hash": "4103ee31513c9002c0163d3f280e421b",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "matrix = [1 2 3;\n          4 5 6;\n          7 8 9]\n\nnum_repeats = 3\nresult = repeat_rows(matrix, num_repeats)\n\nprintln(result)",
    "filename": "4103ee31513c9002c0163d3f280e421b_9.kt"
  },
  {
    "conversation_hash": "4103ee31513c9002c0163d3f280e421b",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "matrix = [1 2 3;\n          4 5 6;\n          7 8 9]\n\nnum_repeats = 3\nresult = repeat_rows(matrix, num_repeats)\n\nprintln(result)",
    "filename": "4103ee31513c9002c0163d3f280e421b_11.kt"
  },
  {
    "conversation_hash": "b8149b0a3b96e4a3f320f16178c8b9f4",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "# Входная матрица\nmatrix = [1 2 3; 4 5 6]\n# Количество повторений\nrepetitions = 3\n\n# Вызываем функцию\nnew_matrix = repeat_rows(matrix, repetitions)\n\n# Выводим результат\nprintln(new_matrix)",
    "filename": "b8149b0a3b96e4a3f320f16178c8b9f4_1.kt"
  },
  {
    "conversation_hash": "feafa4b432003be7f30762737ac98ad4",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "# Пример входной матрицы\nmatrix = [1 2 3; 4 5 6; 7 8 9; 10 11 12]\n\n# Вызов функции\nresult = divide_matrix(matrix, 2)\n\n# Вывод полученных матриц\nfor mat in result\n    println(mat)\n    println()\nend",
    "filename": "feafa4b432003be7f30762737ac98ad4_1.kt"
  },
  {
    "conversation_hash": "920a9580cee03023104c374ae1bf9fd8",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.os.Bundle",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "androidx.fragment.app.Fragment",
      "me.dm7.barcodescanner.zxing.ZXingScannerView"
    ],
    "code": "import android.content.Intent\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport me.dm7.barcodescanner.zxing.ZXingScannerView\n\nclass BarcodeScannerFragment : Fragment(), ZXingScannerView.ResultHandler {\n\n    private lateinit var scannerView: ZXingScannerView\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        scannerView = ZXingScannerView(activity)\n        return scannerView\n    }\n\n    override fun onResume() {\n        super.onResume()\n        scannerView.setResultHandler(this)\n        scannerView.startCamera()\n    }\n\n    override fun onPause() {\n        super.onPause()\n        scannerView.stopCamera()\n    }\n\n    override fun handleResult(result: com.google.zxing.Result) {\n        val scannedText = result.text\n        // Далее будет код для получения информации о продукте по штрих-коду\n    }\n}",
    "filename": "920a9580cee03023104c374ae1bf9fd8_1.kt"
  },
  {
    "conversation_hash": "920a9580cee03023104c374ae1bf9fd8",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.Call",
      "retrofit2.Retrofit",
      "retrofit2.converter.gson.GsonConverterFactory",
      "retrofit2.http.GET",
      "retrofit2.http.Path"
    ],
    "code": "import retrofit2.Call\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.GET\nimport retrofit2.http.Path\n\n\ninterface OpenFoodFactsApi {\n\n    @GET(\"product/{barcode}.json\")\n    fun getProductInfo(@Path(\"barcode\") barcode: String): Call<OpenFoodFactsApiResponse>\n\n    companion object {\n        fun create(): OpenFoodFactsApi {\n            val retrofit = Retrofit.Builder()\n                    .baseUrl(\"https://world.openfoodfacts.org/api/v0/\")\n                    .addConverterFactory(GsonConverterFactory.create())\n                    .build()\n\n            return retrofit.create(OpenFoodFactsApi::class.java)\n        }\n    }\n}\n\ndata class OpenFoodFactsApiResponse(val status: Long, val product: Product)\n\ndata class Product(val additives: List<String>)",
    "filename": "920a9580cee03023104c374ae1bf9fd8_2.kt"
  },
  {
    "conversation_hash": "920a9580cee03023104c374ae1bf9fd8",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "android.Manifest",
      "android.content.Intent",
      "android.content.pm.PackageManager",
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.core.app.ActivityCompat",
      "androidx.core.content.ContextCompat",
      "androidx.fragment.app.FragmentTransaction"
    ],
    "code": "import android.Manifest\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.fragment.app.FragmentTransaction\n\nclass MainActivity : AppCompatActivity() {\n\n    private val scannerFragment = BarcodeScannerFragment()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\n            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.CAMERA), 123)\n        }\n    }\n\n    fun scanBarcode(view: View) {\n        supportFragmentManager.beginTransaction()\n                .replace(R.id.fragmentContainer, scannerFragment)\n                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)\n                .addToBackStack(null)\n                .commit()\n    }\n\n    fun showProductInfo(barcode: String) {\n        // Получение информации о продукте с использованием OpenFoodFacts API\n        val api = OpenFoodFactsApi.create()\n        val call = api.getProductInfo(barcode)\n        call.enqueue(object: Callback<OpenFoodFactsApiResponse> {\n          override fun onResponse(call: Call<OpenFoodFactsApiResponse>, response: Response<OpenFoodFactsApiResponse>) {\n            val productInfo = response.body()?.product\n            if (productInfo != null) {\n              // Открытие страницы с информацией о продукте\n              // Можно использовать Intent или другой способ для отображения информации о продукте\n            } else {\n              // Сообщение об ошибке, если информация о продукте не найдена\n            }\n          }\n\n          override fun onFailure(call: Call<OpenFoodFactsApiResponse>, t: Throwable) {\n            // Обработка ошибки при получении информации о продукте\n          }\n        })\n    }\n}",
    "filename": "920a9580cee03023104c374ae1bf9fd8_3.kt"
  },
  {
    "conversation_hash": "920a9580cee03023104c374ae1bf9fd8",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.os.Bundle",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "androidx.fragment.app.Fragment",
      "com.google.zxing.Result",
      "me.dm7.barcodescanner.zxing.ZXingScannerView"
    ],
    "code": "import android.content.Intent\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport com.google.zxing.Result\nimport me.dm7.barcodescanner.zxing.ZXingScannerView\n\nclass BarcodeScannerFragment : Fragment(), ZXingScannerView.ResultHandler {\n\n    private lateinit var scannerView: ZXingScannerView\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        scannerView = ZXingScannerView(activity)\n        return scannerView\n    }\n\n    override fun onResume() {\n        super.onResume()\n        scannerView.setResultHandler(this)\n        scannerView.startCamera()\n    }\n\n    override fun onPause() {\n        super.onPause()\n        scannerView.stopCamera()\n    }\n\n    override fun handleResult(result: Result?) {\n        val scannedText = result?.text\n        // Далее будет код для получения информации о продукте по штрих-коду\n    }\n}",
    "filename": "920a9580cee03023104c374ae1bf9fd8_5.kt"
  },
  {
    "conversation_hash": "920a9580cee03023104c374ae1bf9fd8",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "android.Manifest",
      "android.content.Intent",
      "android.content.pm.PackageManager",
      "android.os.Bundle",
      "android.view.View",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.core.app.ActivityCompat",
      "androidx.core.content.ContextCompat",
      "androidx.fragment.app.FragmentTransaction",
      "me.dm7.barcodescanner.zxing.ZXingScannerView",
      "retrofit2.Call",
      "retrofit2.Callback",
      "retrofit2.Response"
    ],
    "code": "import android.Manifest\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.os.Bundle\nimport android.view.View\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.fragment.app.FragmentTransaction\nimport me.dm7.barcodescanner.zxing.ZXingScannerView\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\n\nclass MainActivity : AppCompatActivity() {\n\n    private val scannerFragment = BarcodeScannerFragment()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\n            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.CAMERA), 123)\n        }\n    }\n\n    fun scanBarcode(view: View) {\n        supportFragmentManager.beginTransaction()\n            .replace(R.id.fragmentContainer, scannerFragment)\n            .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)\n            .addToBackStack(null)\n            .commit()\n    }\n\n    fun showProductInfo(barcode: String) {\n        // Получение информации о продукте с использованием OpenFoodFacts API\n        val api = OpenFoodFactsApi.create()\n        val call: Call<OpenFoodFactsApiResponse> = api.getProductInfo(barcode)\n        call.enqueue(object: Callback<OpenFoodFactsApiResponse> {\n            override fun onResponse(call: Call<OpenFoodFactsApiResponse>, response: Response<OpenFoodFactsApiResponse>) {\n                val productInfo = response.body()?.product\n                if (productInfo != null) {\n                    // Открытие страницы с информацией о продукте\n                    // Можно использовать Intent или другой способ для отображения информации о продукте\n                } else {\n                    // Сообщение об ошибке, если информация о продукте не найдена\n                }\n            }\n\n            override fun onFailure(call: Call<OpenFoodFactsApiResponse>, t: Throwable) {\n                // Обработка ошибки при получении информации о продукте\n            }\n        })\n    }\n}",
    "filename": "920a9580cee03023104c374ae1bf9fd8_6.kt"
  },
  {
    "conversation_hash": "6030376c233e2e2585bf6763fe9a3164",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "input_signal = [5]  # матрица 1x1\nrep = 3  # объект с свойством repetition_count равным 3\n\noutput_signal = transform_input(input_signal, rep)\n\nprintln(output_signal)",
    "filename": "6030376c233e2e2585bf6763fe9a3164_1.kt"
  },
  {
    "conversation_hash": "51fd7f68e83250a7341b45c31167866e",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "# Использование функции со входными данными [1 2 3]\ninput_signal = [1 2 3] # или input_signal = [1 2 3;]\nrep = 3\noutput_signal = repeat_matrix(input_signal, rep)\nprintln(output_signal)",
    "filename": "51fd7f68e83250a7341b45c31167866e_3.kt"
  },
  {
    "conversation_hash": "51fd7f68e83250a7341b45c31167866e",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "# Использование функции со входными данными [1; 2; 3]\ninput_signal = [1; 2; 3] # или input_signal = [1 2 3;]'\nrep = 4\noutput_signal = repeat_matrix(input_signal, rep)\nprintln(output_signal)",
    "filename": "51fd7f68e83250a7341b45c31167866e_5.kt"
  },
  {
    "conversation_hash": "4aebe49a0b3021bc6f5b310b42bc06ce",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "matrix = [1 2 3 4]\nrepetitions = 3\n\nrepeated_matrix = repeat_rows(matrix, repetitions)\nprintln(repeated_matrix)",
    "filename": "4aebe49a0b3021bc6f5b310b42bc06ce_1.kt"
  },
  {
    "conversation_hash": "4aebe49a0b3021bc6f5b310b42bc06ce",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "matrix = [1; 2]\nrepetitions = 2\n\nreshaped_matrix = reshape_matrix(matrix)\nrepeated_matrix = repeat_rows(reshaped_matrix, repetitions)\n\nprintln(repeated_matrix)",
    "filename": "4aebe49a0b3021bc6f5b310b42bc06ce_4.kt"
  },
  {
    "conversation_hash": "4aebe49a0b3021bc6f5b310b42bc06ce",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "matrix = [1 2 3 4]\nrepetitions = 3\n\nrepeated_matrix = repeat_rows(matrix, repetitions)\nprintln(repeated_matrix)",
    "filename": "4aebe49a0b3021bc6f5b310b42bc06ce_7.kt"
  },
  {
    "conversation_hash": "4aebe49a0b3021bc6f5b310b42bc06ce",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "matrix = [1; 2]\nrepetitions = 2\n\nreshaped_matrix = reshape_matrix(matrix)\nrepeated_matrix = repeat_rows(reshaped_matrix, repetitions)\n\nprintln(repeated_matrix)",
    "filename": "4aebe49a0b3021bc6f5b310b42bc06ce_10.kt"
  },
  {
    "conversation_hash": "351ab507a42b3318de0ccc243e04868a",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1, 2, 3, 4, 5, 6]\nA_reshaped = reshape(A, (6, 1))\nprintln(join(A_reshaped', \"; \"))\n\n# Вывод:\n# 1; 2; 3; 4; 5; 6",
    "filename": "351ab507a42b3318de0ccc243e04868a_3.kt"
  },
  {
    "conversation_hash": "351ab507a42b3318de0ccc243e04868a",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1, 2, 3, 4, 5, 6]\nA_reshaped = reshape(A, (6, 1))\n\nprintln(A_reshaped)\n\n# Вывод:\n# 6×1 Matrix{Int64}:\n#  1\n#  2\n#  3\n#  4\n#  5\n#  6",
    "filename": "351ab507a42b3318de0ccc243e04868a_5.kt"
  },
  {
    "conversation_hash": "165865b56da94e85e3ea18675badc088",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "a = [1, 2, 3]\nb = 4\nc = convert_to_matrix(a)  # Преобразует вектор [1, 2, 3] в матрицу размером 3x1\nd = convert_to_matrix(b)  # Преобразует скаляр 4 в матрицу размером 1x1\n\nprintln(a)\nprintln(b)\nprintln(c)\nprintln(d)",
    "filename": "165865b56da94e85e3ea18675badc088_1.kt"
  },
  {
    "conversation_hash": "165865b56da94e85e3ea18675badc088",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "a = [1, 2, 3]\nb = 4\nc = convert_to_matrix(a)  # Преобразует вектор [1, 2, 3] в матрицу размером 3x1\nd = convert_to_matrix(b)  # Преобразует скаляр 4 в матрицу размером 1x1\n\nprintln(a)\nprintln(b)\nprintln(c)\nprintln(d)",
    "filename": "165865b56da94e85e3ea18675badc088_4.kt"
  },
  {
    "conversation_hash": "7988446f9bdb4fb7c1b91aee5c7c578a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "signal = [1 2 3; 4 5 6]\nresult = check_signal_dimension(signal)\nprintln(result)  # true\n\nsignal = [1, 2, 3]\nresult = check_signal_dimension(signal)\nprintln(result)  # false",
    "filename": "7988446f9bdb4fb7c1b91aee5c7c578a_1.kt"
  },
  {
    "conversation_hash": "ffd8a747376fae927a573d0ff4e5d4a5",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1 2 3]  # пример матрицы размерностью 1x3\nB = [4; 5; 6]  # пример матрицы размерностью 3x1\n\nresult1 = matrix_to_vector(A)\nresult2 = matrix_to_vector(B)\n\nprintln(result1)  # выводит [1, 2, 3]\nprintln(result2)  # выводит [4, 5, 6]",
    "filename": "ffd8a747376fae927a573d0ff4e5d4a5_1.kt"
  },
  {
    "conversation_hash": "ffd8a747376fae927a573d0ff4e5d4a5",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "x = 5  # пример скаляра\n\nresult = scalar_to_vector(x)\n\nprintln(result)  # выводит [5]",
    "filename": "ffd8a747376fae927a573d0ff4e5d4a5_3.kt"
  },
  {
    "conversation_hash": "ffd8a747376fae927a573d0ff4e5d4a5",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "A = [1 2 3]  # пример матрицы размерностью 1x3\nB = [4; 5; 6]  # пример матрицы размерностью 3x1\nx = 5  # пример скаляра\n\nresult1 = to_vector(A)\nresult2 = to_vector(B)\nresult3 = to_vector(x)\n\nprintln(result1)  # выводит [1, 2, 3]\nprintln(result2)  # выводит [4, 5, 6]\nprintln(result3)  # выводит [5]",
    "filename": "ffd8a747376fae927a573d0ff4e5d4a5_5.kt"
  },
  {
    "conversation_hash": "ffd8a747376fae927a573d0ff4e5d4a5",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "x = 5  # пример скаляра\nv = [1, 2, 3, 4, 5, 6]  # пример вектора\n\nresult1 = to_matrix(x, 1, 1)  # преобразование скаляра в матрицу 1x1\nresult2 = to_matrix(v, 2, 3)  # преобразование вектора в матрицу 2x3\n\nprintln(result1)  # выводит [5]\nprintln(result2)\n# выводит:\n# [1 3 5;\n#  2 4 6]",
    "filename": "ffd8a747376fae927a573d0ff4e5d4a5_7.kt"
  },
  {
    "conversation_hash": "5ecb8aaa029a8c1e5af8f1afc5e57313",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "# примеры вызова функции\nsignal_1 = 5 # скаляр\nsignal_2 = [1, 2, 3, 4] # вектор\nsignal_3 = [1 2; 3 4] # матрица\n\ntransformed_signal_1 = transform_signal(signal_1, false)\ntransformed_signal_2 = transform_signal(signal_2, true)\ntransformed_signal_3 = transform_signal(signal_3, true)\n\nprintln(transformed_signal_1) # матрица 1x1\nprintln(transformed_signal_2) # вектор\nprintln(transformed_signal_3) # матрица 2x2",
    "filename": "5ecb8aaa029a8c1e5af8f1afc5e57313_1.kt"
  },
  {
    "conversation_hash": "9fadf1f19ebc28bc551ccbe2cd3923fe",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "android.hardware.camera2.CameraAccessException",
      "android.hardware.camera2.CameraManager",
      "android.os.Bundle",
      "android.widget.Button",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.content.Context\nimport android.hardware.camera2.CameraAccessException\nimport android.hardware.camera2.CameraManager\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.Button\n\nclass FlashlightActivity : AppCompatActivity() {\n    private var isFlashlightOn: Boolean = false\n    private lateinit var cameraManager: CameraManager\n    private lateinit var cameraId: String\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_flashlight)\n\n        cameraManager = getSystemService(Context.CAMERA_SERVICE) as CameraManager\n        cameraId = cameraManager.cameraIdList[0]\n\n        val flashlightButton: Button = findViewById(R.id.flashlightButton)\n        flashlightButton.setOnClickListener {\n            toggleFlashlight()\n        }\n    }\n\n    private fun toggleFlashlight() {\n        try {\n            if (isFlashlightOn) {\n                turnOffFlashlight()\n            } else {\n                turnOnFlashlight()\n            }\n        } catch (e: CameraAccessException) {\n            e.printStackTrace()\n        }\n    }\n\n    private fun turnOnFlashlight() {\n        try {\n            cameraManager.setTorchMode(cameraId, true)\n            isFlashlightOn = true\n        } catch (e: CameraAccessException) {\n            e.printStackTrace()\n        }\n    }\n\n    private fun turnOffFlashlight() {\n        try {\n            cameraManager.setTorchMode(cameraId, false)\n            isFlashlightOn = false\n        } catch (e: CameraAccessException) {\n            e.printStackTrace()\n        }\n    }\n}",
    "filename": "9fadf1f19ebc28bc551ccbe2cd3923fe_1.kt"
  },
  {
    "conversation_hash": "554cd0ff91417405dfb3614e2c97074f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "val buttonClickListener: View.OnClickListener = object : View.OnClickListener {\n    override fun onClick(v: View?) {\n        Toast.makeText(this@MainActivity, \"Нажали на кнопку!\", Toast.LENGTH_SHORT).show()\n    }\n}",
    "filename": "554cd0ff91417405dfb3614e2c97074f_0.kt"
  },
  {
    "conversation_hash": "554cd0ff91417405dfb3614e2c97074f",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    val button = findViewById<Button>(R.id.button)\n\n    val buttonClickListener: View.OnClickListener = object : View.OnClickListener {\n        override fun onClick(v: View?) {\n            Toast.makeText(this@MainActivity, \"Нажали на кнопку!\", Toast.LENGTH_SHORT).show()\n        }\n    }\n\n    button.setOnClickListener(buttonClickListener)\n}",
    "filename": "554cd0ff91417405dfb3614e2c97074f_2.kt"
  },
  {
    "conversation_hash": "554cd0ff91417405dfb3614e2c97074f",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    val button = findViewById<Button>(R.id.button)\n    val buttonText = button.text.toString()  // Get the text of the button\n\n    val buttonClickListener: View.OnClickListener = object : View.OnClickListener {\n        override fun onClick(v: View?) {\n            Toast.makeText(this@MainActivity, \"Button text is: $buttonText\", Toast.LENGTH_SHORT).show()\n        }\n    }\n\n    button.setOnClickListener(buttonClickListener)\n}",
    "filename": "554cd0ff91417405dfb3614e2c97074f_4.kt"
  },
  {
    "conversation_hash": "08a55f4c6ba605d80f0da1057ca477a9",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "using LinearAlgebra\n\nA = [1 2; 2 1]  # Матрица A\n\nexpA = expm(A)  # matrix exponential\n\nprintln(expA)",
    "filename": "08a55f4c6ba605d80f0da1057ca477a9_0.kt"
  },
  {
    "conversation_hash": "5ff7b1ecd8798215a8e75576362539e3",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onConfigurationChanged(newConfig: Configuration) {\n        super.onConfigurationChanged(newConfig)\n    \n        // Обработка поворота экрана\n        val rotation = windowManager.defaultDisplay.rotation\n        myRender.setRotation(rotation.toFloat())\n    }",
    "filename": "5ff7b1ecd8798215a8e75576362539e3_1.kt"
  },
  {
    "conversation_hash": "5ff7b1ecd8798215a8e75576362539e3",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onSurfaceChanged(unused: GL10, width: Int, height: Int) {\n        GLES20.glViewport(0, 0, width, height)\n        \n        // Обновление параметра поворота\n        setRotation(rotation)\n    }",
    "filename": "5ff7b1ecd8798215a8e75576362539e3_2.kt"
  },
  {
    "conversation_hash": "75d73e0e54c29d3c958e5ec519125b43",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.widget.ImageButton",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "package com.example.playlistmaker\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.ImageButton\n\nclass SettingsActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_settings)\n\n        val backButton = findViewById<ImageButton>(R.id.Back_button)\n\n        backButton.setOnClickListener {\n            // Call finish() to close the current activity and return to the previous screen\n            finish()\n        }\n    }\n}",
    "filename": "75d73e0e54c29d3c958e5ec519125b43_2.kt"
  },
  {
    "conversation_hash": "5bb7edf5eba0e6e19b12346a0e50c485",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val argAx: EditText? = null\nval argAy: EditText? = null\nval argAz: EditText? = null\n\nvar count0 = 0.0\nvar count1 = 0.0\nvar count2 = 0.0\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    val result0TextView = findViewById<TextView>(R.id.result0)\n    val result1TextView = findViewById<TextView>(R.id.result1)\n    val result2TextView = findViewById<TextView>(R.id.result2)\n\n    argAx = findViewById(R.id.argAx);\n    argAy = findViewById(R.id.argAy);\n    argAz = findViewById(R.id.argAz);\n\n    val argAxEditText = findViewById<EditText>(R.id.argAx)\n    val argAyEditText = findViewById<EditText>(R.id.argAy)\n    val argAzEditText = findViewById<EditText>(R.id.argAz)\n\n    // Rest of your code...\n}",
    "filename": "5bb7edf5eba0e6e19b12346a0e50c485_1.kt"
  },
  {
    "conversation_hash": "d0e95f46f26eae4d6788ca99dbbbe9d7",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private var argAx: EditText? = null\n    private var argAy: EditText? = null\n    private var argAz: EditText? = null\n\n    private lateinit var result0TextView: TextView\n    private lateinit var result1TextView: TextView\n    private lateinit var result2TextView: TextView\n\n    private var count0 = 0.0\n    private var count1 = 0.0\n    private var count2 = 0.0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        result0TextView = findViewById(R.id.result0)\n        result1TextView = findViewById(R.id.result1)\n        result2TextView = findViewById(R.id.result2)\n\n        argAx = findViewById(R.id.argAx)\n        argAy = findViewById(R.id.argAy)\n        argAz = findViewById(R.id.argAz)\n\n        // Rest of your code...\n    }\n\n    // Rest of your code...\n}",
    "filename": "d0e95f46f26eae4d6788ca99dbbbe9d7_1.kt"
  },
  {
    "conversation_hash": "d0e95f46f26eae4d6788ca99dbbbe9d7",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private var argAx: EditText? = null\n    private var argAy: EditText? = null\n    private var argAz: EditText? = null\n\n    private lateinit var result0TextView: TextView\n    private lateinit var result1TextView: TextView\n    private lateinit var result2TextView: TextView\n\n    private var count0 = 0.0\n    private var count1 = 0.0\n    private var count2 = 0.0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        argAx = findViewById(R.id.argAx)\n        argAy = findViewById(R.id.argAy)\n        argAz = findViewById(R.id.argAz)\n\n        result0TextView = findViewById(R.id.result0)\n        result1TextView = findViewById(R.id.result1)\n        result2TextView = findViewById(R.id.result2)\n\n        // Rest of your code...\n    }\n\n    // Rest of your code...\n}",
    "filename": "d0e95f46f26eae4d6788ca99dbbbe9d7_3.kt"
  },
  {
    "conversation_hash": "ac896ef7244a49538a3711fa34bd923e",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@PostMapping(consumes = [APPLICATION_JSON_VALUE])\nfun createPerson(@Valid @RequestBody request: PersonRequest): ResponseEntity<Void> {\n    val id = personService.createPerson(request)\n    return ResponseEntity.created(\n        ServletUriComponentsBuilder\n            .fromCurrentRequest()\n            .path(\"/{id}\")\n            .buildAndExpand(id)\n            .toUri()\n    ).build()\n}",
    "filename": "ac896ef7244a49538a3711fa34bd923e_2.kt"
  },
  {
    "conversation_hash": "3e6ae72f477d86239d119dd27ac4a4d5",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "val squareCoords = floatArrayOf(\n    -0.5f,  0.5f, 0.0f,  // Верхний левый вершинный координат\n    -0.5f, -0.5f, 0.0f,  // Нижний левый вершинный координат\n    0.5f, -0.5f, 0.0f,  // Нижний правый вершинный координат\n    0.5f,  0.5f, 0.0f   // Верхний правый вершинный координат\n)\n\nval triangleCoords = floatArrayOf(\n    0.0f,  0.5f, 0.0f,  // Верхняя вершина\n    -0.5f, -0.5f, 0.0f,  // Левая нижняя вершина\n    0.5f, -0.5f, 0.0f   // Правая нижняя вершина\n)\n\nval indices = shortArrayOf(0, 1, 2) // Индексы для рисования треугольника\n\nval vertexBuffer: FloatBuffer =\n    ByteBuffer.allocateDirect(squareCoords.size * 4)\n        .order(ByteOrder.nativeOrder()).asFloatBuffer()\nvertexBuffer.put(squareCoords)\nvertexBuffer.position(0)\n\nval vertexBufferTriangle: FloatBuffer =\n    ByteBuffer.allocateDirect(triangleCoords.size * 4)\n        .order(ByteOrder.nativeOrder()).asFloatBuffer()\nvertexBufferTriangle.put(triangleCoords)\nvertexBufferTriangle.position(0)\n\nval indexBuffer: ShortBuffer =\n    ByteBuffer.allocateDirect(indices.size * 2)\n        .order(ByteOrder.nativeOrder()).asShortBuffer()\nindexBuffer.put(indices)\nindexBuffer.position(0)",
    "filename": "3e6ae72f477d86239d119dd27ac4a4d5_9.kt"
  },
  {
    "conversation_hash": "3e6ae72f477d86239d119dd27ac4a4d5",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [],
    "code": "val textureCoords = floatArrayOf(\n    0.0f, 0.0f, // Левый верхний угол\n    1.0f, 0.0f, // Правый верхний угол\n    0.0f, 1.0f, // Левый нижний угол\n    1.0f, 1.0f  // Правый нижний угол\n)\nval textureCoordHandle = shaderProgram.getAttribute(\"a_texCoord\")\nval textureCoordBuffer = vertexBuffer(\n    textureCoordHandle,\n    textureCoords,\n    2, // Размерность текстурных координат\n    GLES20.GL_FLOAT,\n    false\n)",
    "filename": "3e6ae72f477d86239d119dd27ac4a4d5_16.kt"
  },
  {
    "conversation_hash": "3e6ae72f477d86239d119dd27ac4a4d5",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [],
    "code": "GLES20.glActiveTexture(GLES20.GL_TEXTURE0)\nGLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId)\nGLES20.glUniform1i(shaderProgram.getUniform(\"u_texture\"), 0)\n\nval textureHandle = shaderProgram.getAttribute(\"a_texCoord\")\nGLES20.glEnableVertexAttribArray(textureHandle)\nGLES20.glVertexAttribPointer(\n    textureHandle,\n    2, // Размерность текстурных координат\n    GLES20.GL_FLOAT,\n    false,\n    0,\n    textureCoordBuffer\n)",
    "filename": "3e6ae72f477d86239d119dd27ac4a4d5_17.kt"
  },
  {
    "conversation_hash": "11d2e1697a9c0a6bb239f285457a74c9",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val input = readLine() // чтение ввода в виде строки\n    val times = input?.split(\" \") // разделение строки на отдельные числа по пробелу\n    val thirdPlaceCount = times?.count { time -> time.toIntOrNull() != null } // подсчет чисел, которые успешно преобразовались в целое число (3-е место)\n    println(thirdPlaceCount) // вывод результата\n}",
    "filename": "11d2e1697a9c0a6bb239f285457a74c9_0.kt"
  },
  {
    "conversation_hash": "11d2e1697a9c0a6bb239f285457a74c9",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val input = readLine() // чтение ввода в виде строки\n    val times = input?.split(\" \") // разделение строки на отдельные числа по пробелу\n    val thirdPlaceCount = times?.count { time -> time.toIntOrNull() != null && time.toIntOrNull() != times.minOrNull()?.toIntOrNull() } // подсчет чисел, которые успешно преобразовались в целое число и отличаются от наименьшего числа (3-е место)\n    println(thirdPlaceCount) // вывод результата\n}",
    "filename": "11d2e1697a9c0a6bb239f285457a74c9_1.kt"
  },
  {
    "conversation_hash": "11d2e1697a9c0a6bb239f285457a74c9",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val input = readLine() // чтение ввода в виде строки\n    val times = input?.split(\" \") // разделение строки на отдельные числа по пробелу\n    val sortedTimes = times?.map { it.toInt() }?.sorted() // сортировка времен в порядке возрастания\n    val thirdPlaceCount = sortedTimes?.count { it != sortedTimes[0] && it != sortedTimes[1] } ?: 0 // подсчет чисел, которые занимают 3-е место\n    println(thirdPlaceCount) // вывод результата\n}",
    "filename": "11d2e1697a9c0a6bb239f285457a74c9_2.kt"
  },
  {
    "conversation_hash": "11d2e1697a9c0a6bb239f285457a74c9",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val input = readLine() // чтение ввода в виде строки\n    val times = input?.split(\" \") // разделение строки на отдельные числа по пробелу\n    val sortedTimes = times?.map { it.toInt() }?.sorted() // сортировка времен в порядке возрастания\n    val thirdPlaceCount = sortedTimes?.count { it != sortedTimes[0] && it != sortedTimes[1] } ?: 0 // подсчет чисел, которые занимают 3-е место\n    println(thirdPlaceCount) // вывод результата\n}",
    "filename": "11d2e1697a9c0a6bb239f285457a74c9_3.kt"
  },
  {
    "conversation_hash": "11d2e1697a9c0a6bb239f285457a74c9",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val input = readLine() // чтение ввода в виде строки\n    val times = input?.split(\" \") // разделение строки на отдельные числа по пробелу\n    val sortedTimes = times?.map { it.toInt() }?.sorted() // сортировка времен в порядке возрастания\n    val firstPlaceTime = sortedTimes?.get(0) // время для первого места\n    val secondPlaceTime = sortedTimes?.get(1) // время для второго места\n    val thirdPlaceCount = sortedTimes?.count { it > secondPlaceTime && it < firstPlaceTime } ?: 0 // подсчет чисел, которые занимают 3-е место\n    println(thirdPlaceCount) // вывод результата\n}",
    "filename": "11d2e1697a9c0a6bb239f285457a74c9_4.kt"
  },
  {
    "conversation_hash": "11d2e1697a9c0a6bb239f285457a74c9",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val input = readLine() // чтение ввода в виде строки\n    val times = input?.split(\" \") // разделение строки на отдельные числа по пробелу\n    val sortedTimes = times?.map { it.toInt() }?.sorted() // сортировка времен в порядке возрастания\n    val firstPlaceTime = sortedTimes?.distinct()?.get(0) // время для первого места\n    val secondPlaceTime = sortedTimes?.distinct()?.get(1) // время для второго места\n    val thirdPlaceCount = sortedTimes?.count { it > secondPlaceTime!! && it < firstPlaceTime!! } ?: 0 // подсчет чисел, которые занимают 3-е место\n    println(thirdPlaceCount) // вывод результата\n}",
    "filename": "11d2e1697a9c0a6bb239f285457a74c9_5.kt"
  },
  {
    "conversation_hash": "2025b369775320988610cba2471eda00",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.bluetooth.BluetoothAdapter",
      "android.content.Intent",
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.bluetooth.BluetoothAdapter\nimport android.content.Intent\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    companion object {\n        private const val REQUEST_ENABLE_BT = 1\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()\n        if (!bluetoothAdapter.isEnabled) {\n            val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)\n            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT)\n        }\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (requestCode == REQUEST_ENABLE_BT && resultCode == RESULT_OK) {\n            // Bluetooth has been successfully enabled\n        }\n    }\n}",
    "filename": "2025b369775320988610cba2471eda00_0.kt"
  },
  {
    "conversation_hash": "01e48f475f07d147f108ee3734b2ffdf",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\n    val itemView = convertView ?: LayoutInflater.from(context).inflate(R.layout.list_item_outer, parent, false)\n    val innerListView = itemView.findViewById<ListView>(R.id.innerListView)\n\n    val innerAdapter = ArrayAdapter<String>(context, R.layout.list_item_inner, innerItems)\n    innerListView.adapter = innerAdapter\n\n    return itemView\n}",
    "filename": "01e48f475f07d147f108ee3734b2ffdf_1.kt"
  },
  {
    "conversation_hash": "7bd2ad1852fb191540a92caad34f2a53",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Создание шейдерной программы\nval shaderProgram = glCreateProgram().also {\n    // Компиляция вершинного шейдера\n    val vertexShaderID = glCreateShader(GL_VERTEX_SHADER)\n    glShaderSource(vertexShaderID, vertexShader)\n    glCompileShader(vertexShaderID)\n    glAttachShader(it, vertexShaderID)\n    \n    // Компиляция фрагментного шейдера\n    val fragmentShaderID = glCreateShader(GL_FRAGMENT_SHADER)\n    glShaderSource(fragmentShaderID, fragmentShader)\n    glCompileShader(fragmentShaderID)\n    glAttachShader(it, fragmentShaderID)\n    \n    // Привязка шейдерных атрибутов\n    glBindAttribLocation(it, 0, \"vPosition\")\n    \n    // Связывание исходной шейдерной программы\n    glLinkProgram(it)\n}",
    "filename": "7bd2ad1852fb191540a92caad34f2a53_2.kt"
  },
  {
    "conversation_hash": "7bd2ad1852fb191540a92caad34f2a53",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "val squareCoords = floatArrayOf(\n    -0.5f, 0.5f, 0.0f,  // Вершина 1\n    -0.5f, -0.5f, 0.0f, // Вершина 2\n    0.5f, -0.5f, 0.0f,  // Вершина 3\n    0.5f, 0.5f, 0.0f    // Вершина 4\n)",
    "filename": "7bd2ad1852fb191540a92caad34f2a53_3.kt"
  },
  {
    "conversation_hash": "7bd2ad1852fb191540a92caad34f2a53",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "val squareCoords = floatArrayOf(\n    -0.5f, 0.5f, 0.0f,  // Вершина 1\n    -0.5f, -0.5f, 0.0f, // Вершина 2\n    0.5f, -0.5f, 0.0f,  // Вершина 3\n    0.5f, 0.5f, 0.0f    // Вершина 4\n)",
    "filename": "7bd2ad1852fb191540a92caad34f2a53_6.kt"
  },
  {
    "conversation_hash": "4ec395ce149048a38c8e76d423127260",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "GLES20.glUseProgram(squareShaderProgram)\n\nval squareColorLocation = GLES20.glGetUniformLocation(squareShaderProgram, \"u_color\")\nGLES20.glUniform4f(squareColorLocation, 1.0f, 0.0f, 0.0f, 1.0f)\n\nval squareVertexBuffer = ByteBuffer.allocateDirect(squareVertexCoords.size * 4)\n    .order(ByteOrder.nativeOrder())\n    .asFloatBuffer()\n    .put(squareVertexCoords)\nsquareVertexBuffer.position(0)\n\nval squarePosHandle = GLES20.glGetAttribLocation(squareShaderProgram, \"a_vertex\")\nGLES20.glEnableVertexAttribArray(squarePosHandle)\nGLES20.glVertexAttribPointer(\n    squarePosHandle, 3, GLES20.GL_FLOAT, false,\n    0, squareVertexBuffer\n)\n\nGLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4)\n\nGLES20.glDisableVertexAttribArray(squarePosHandle)",
    "filename": "4ec395ce149048a38c8e76d423127260_6.kt"
  },
  {
    "conversation_hash": "4ec395ce149048a38c8e76d423127260",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun loadShader(type: Int, shaderCode: String): Int {\n    val shader = GLES20.glCreateShader(type)\n    GLES20.glShaderSource(shader, shaderCode)\n    GLES20.glCompileShader(shader)\n    return shader\n}",
    "filename": "4ec395ce149048a38c8e76d423127260_8.kt"
  },
  {
    "conversation_hash": "665a860a75ed92f669a9e143b14da7ef",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun loadShaderFile(filename: String): String {\n    return this::class.java.getResource(\"/$filename\").readText()\n}\n\nval vertexShaderSource = loadShaderFile(\"vertexShader.glsl\")\nval fragmentShaderSource = loadShaderFile(\"fragmentShader.glsl\")\n\nval vertexShader = glCreateShader(GL_VERTEX_SHADER)\nglShaderSource(vertexShader, vertexShaderSource)\nglCompileShader(vertexShader)\n\nval fragmentShader = glCreateShader(GL_FRAGMENT_SHADER)\nglShaderSource(fragmentShader, fragmentShaderSource)\nglCompileShader(fragmentShader)\n\nval shaderProgram = glCreateProgram()\nglAttachShader(shaderProgram, vertexShader)\nglAttachShader(shaderProgram, fragmentShader)\nglLinkProgram(shaderProgram)\n\nglDeleteShader(vertexShader)\nglDeleteShader(fragmentShader)",
    "filename": "665a860a75ed92f669a9e143b14da7ef_2.kt"
  },
  {
    "conversation_hash": "665a860a75ed92f669a9e143b14da7ef",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "val vertices = floatArrayOf(\n    -0.5f,  0.5f, 0.0f,  // верхний левый угол\n     0.5f,  0.5f, 0.0f,  // верхний правый угол\n     0.5f, -0.5f, 0.0f,  // нижний правый угол\n    -0.5f, -0.5f, 0.0f   // нижний левый угол\n)\n\nval indices = intArrayOf(\n    0, 1, 2,  // первый треугольник\n    2, 3, 0   // второй треугольник\n)\n\nval vao = glGenVertexArrays()\nglBindVertexArray(vao)\n\nval vbo = glGenBuffers()\nglBindBuffer(GL_ARRAY_BUFFER, vbo)\nglBufferData(GL_ARRAY_BUFFER, vertices, GL_STATIC_DRAW)\n\nval ebo = glGenBuffers()\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo)\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, indices, GL_STATIC_DRAW)\n\nval vertexPositionLocation = glGetAttribLocation(shaderProgram, \"position\")\nglVertexAttribPointer(vertexPositionLocation, 3, GL_FLOAT, false, 0, 0)\nglEnableVertexAttribArray(vertexPositionLocation)\n\nglBindBuffer(GL_ARRAY_BUFFER, 0)\nglBindVertexArray(0)",
    "filename": "665a860a75ed92f669a9e143b14da7ef_3.kt"
  },
  {
    "conversation_hash": "665a860a75ed92f669a9e143b14da7ef",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f)\n   GLES20.glEnable(GLES20.GL_DEPTH_TEST) // Включение буфера глубины\n   \n   // Проверка настройки контекста OpenGL\n   val version = GLES20.glGetString(GLES20.GL_VERSION)\n   Log.i(\"OpenGL Version\", version)",
    "filename": "665a860a75ed92f669a9e143b14da7ef_5.kt"
  },
  {
    "conversation_hash": "59107af863a7a7e000653e3e7100bc03",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "kotlin\noverride fun onSurfaceChanged(p0: GL10?, width: Int, height: Int) {\n    GLES20.glViewport(0, 0, width, height)\n\n    val ratio = width.toFloat() / height.toFloat()\n    Matrix.perspectiveM(projectionMatrix, 0, 45f, ratio, 0.1f, 100f)\n    Matrix.setLookAtM(viewMatrix, 0, viewPos[0], viewPos[1], viewPos[2], 0f, 0f, 0f, 0f, 1f, 0f)\n    Matrix.multiplyMM(vpMatrix, 0, projectionMatrix, 0, viewMatrix, 0)\n\n    waterFrame = Rect(0f, 0f, width.toFloat(), height.toFloat(), waterShader, waterTexture)\n    underwaterFrame = Rect(0f, 0f, width.toFloat(), height.toFloat(), underwaterShader, underwaterTexture)\n}",
    "filename": "59107af863a7a7e000653e3e7100bc03_0.kt"
  },
  {
    "conversation_hash": "3131eb9d171be9dd4d2fc460c03d7c44",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "#lang racket\n\n(struct rectangle (length width)) ; Define a rectangle struct with length and width fields\n\n(define (area rectangle)\n  (* (rectangle-length rectangle) (rectangle-width rectangle))) ; Function to calculate the area of a rectangle\n\n(define (create-rectangle length width)\n  (rectangle length width)) ; Function to create a new rectangle\n\n(define rect1 (create-rectangle 4 6)) ; Creating a rectangle with length 4 and width 6\n(define rect2 (create-rectangle 3 5)) ; Creating another rectangle with length 3 and width 5\n\n(println \"Area of rect1:\" (area rect1)) ; Printing the area of rect1\n(println \"Area of rect2:\" (area rect2)) ; Printing the area of rect2",
    "filename": "3131eb9d171be9dd4d2fc460c03d7c44_1.kt"
  },
  {
    "conversation_hash": "2d303f7fc17ba059b1400d8788360ec2",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "newFormat"
    ],
    "code": "class SoundWaveformBuilder {\n       fun buildWaveform(audioFileUri: Uri) {\n           val audioFile = File(audioFileUri.path)\n\n           // 1. Load the audio file and decode it to PCM format\n           val extractor = MediaExtractor()\n           extractor.setDataSource(audioFile.path)\n           val audioFormat: MediaFormat? = null\n           for (i in 0 until extractor.trackCount) {\n               val format = extractor.getTrackFormat(i)\n               val mime = format.getString(MediaFormat.KEY_MIME)\n               if (mime?.startsWith(\"audio/\") == true) {\n                   audioFormat = format\n                   extractor.selectTrack(i)\n                   break\n               }\n           }\n           val audioDecoder = MediaCodec.createDecoderByType(audioFormat!!.getString(MediaFormat.KEY_MIME))\n           audioDecoder.configure(audioFormat, null, null, 0)\n           audioDecoder.start()\n\n           // 2. Read the audio samples and build the waveform\n           val bufferInfo = MediaCodec.BufferInfo()\n           val buffer = ByteBuffer.allocateDirect(audioFormat.getInteger(MediaFormat.KEY_MAX_INPUT_SIZE))\n           val audioWaveform: MutableList<Short> = ArrayList()\n\n           while (true) {\n               val inputIndex = audioDecoder.dequeueInputBuffer(100)\n               if (inputIndex >= 0) {\n                   buffer.clear()\n                   val sampleSize = extractor.readSampleData(buffer, 0)\n                   if (sampleSize < 0) {\n                       break\n                   }\n                   val presentationTimeUs = extractor.sampleTime\n                   audioDecoder.queueInputBuffer(inputIndex, 0, sampleSize, presentationTimeUs, extractor.sampleFlags)\n                   extractor.advance()\n               }\n\n               val outputIndex = audioDecoder.dequeueOutputBuffer(bufferInfo, 100)\n               if (outputIndex >= 0) {\n                   val chunkSize = bufferInfo.size / 2\n                   for (i in 0 until chunkSize) {\n                       audioWaveform.add(buffer.getShort((i * 2).toInt()))\n                   }\n                   audioDecoder.releaseOutputBuffer(outputIndex, false)\n               } else if (outputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n                   val newFormat = audioDecoder.outputFormat\n                   // Extract relevant information from newFormat if required\n               }\n           }\n\n           // 3. Visualize the waveform using the audioWaveform data\n           // Implement your visualization logic here\n           // You can use a custom view or a library like MPAndroidChart to draw the waveform\n\n           // 4. Release resources\n           extractor.release()\n           audioDecoder.stop()\n           audioDecoder.release()\n       }\n   }",
    "filename": "2d303f7fc17ba059b1400d8788360ec2_2.kt"
  },
  {
    "conversation_hash": "2d303f7fc17ba059b1400d8788360ec2",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n       private lateinit var soundWaveformBuilder: SoundWaveformBuilder\n\n       override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           setContentView(R.layout.activity_main)\n\n           val audioFileUri: Uri = \"path_to_audio_file\" // Replace with the actual audio file URI\n\n           soundWaveformBuilder = SoundWaveformBuilder()\n           soundWaveformBuilder.buildWaveform(audioFileUri)\n       }\n   }",
    "filename": "2d303f7fc17ba059b1400d8788360ec2_3.kt"
  },
  {
    "conversation_hash": "14c7364c03b0adb3e8f6bf487ed880ef",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class IconPagerAdapter(private val iconList: List<Int>): RecyclerView.Adapter<IconPagerAdapter.IconViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): IconViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_icon, parent, false)\n        return IconViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: IconViewHolder, position: Int) {\n        val iconId = iconList[position]\n        holder.iconImageView.setImageResource(iconId)\n    }\n\n    override fun getItemCount(): Int {\n        return iconList.size\n    }\n\n    inner class IconViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val iconImageView: ImageView = itemView.findViewById(R.id.iconImageView)\n    }\n}",
    "filename": "14c7364c03b0adb3e8f6bf487ed880ef_0.kt"
  },
  {
    "conversation_hash": "14c7364c03b0adb3e8f6bf487ed880ef",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class IconPagerAdapter(private val iconSetList: List<Int>, private val context: Context) : RecyclerView.Adapter<IconPagerAdapter.IconViewHolder>() {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): IconViewHolder {\n        val view =\n            LayoutInflater.from(parent.context).inflate(R.layout.item_icon, parent, false)\n        return IconViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: IconViewHolder, position: Int) {\n        val iconSetId = iconSetList[position]\n        val iconArray = context.resources.obtainTypedArray(iconSetId)\n        val iconId = iconArray.getResourceId(0, 0)\n        iconArray.recycle()\n        holder.iconImageView.setImageResource(iconId)\n    }\n\n    override fun getItemCount(): Int {\n        return iconSetList.size\n    }\n\n    inner class IconViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        val iconImageView: ImageView = itemView.findViewById(R.id.iconImageView)\n    }\n}",
    "filename": "14c7364c03b0adb3e8f6bf487ed880ef_5.kt"
  },
  {
    "conversation_hash": "d51e7afef18ec45eda86ad34b586e07d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun from(tagIdx: Int, value: BigDecimal) {\n    // Метод для обновления значения длины в зависимости от выбранной единицы измерения\n    /*\n    length =\n    lengthContainer.value =\n     */\n    if (value != BigDecimal.ZERO) {\n        length = value.divide(metrics[tagIdx], 6, RoundingMode.HALF_UP)\n    } else {\n        length = BigDecimal.ZERO\n    }\n    lengthContainer.value = round(length)\n}",
    "filename": "d51e7afef18ec45eda86ad34b586e07d_0.kt"
  },
  {
    "conversation_hash": "7329513b8c4b2fb120d6a7d81e380d10",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun from(tagIdx: Int, value: BigDecimal) {\n    // Метод для обновления значения длины в зависимости от выбранной единицы измерения\n\n    if (value.compareTo(BigDecimal.ZERO) == 0) {\n        // Длина равна нулю, просто обновить значение в lengthContainer\n        length = BigDecimal.ZERO\n        lengthContainer.value = length\n    } else {\n        // Длина не равна нулю, выполнить деление и обновить значения\n        length = value.divide(metrics[tagIdx], 6, RoundingMode.HALF_UP)\n        lengthContainer.value = round(length)\n    }\n}",
    "filename": "7329513b8c4b2fb120d6a7d81e380d10_0.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n   \n       private lateinit var webView: WebView\n       private var lastTimeBackPressed: Long = 0\n       private val urlMap = hashMapOf(\n           R.id.btnLoans to \"https://app2.zaimbotmanager.ru/?scrollTo=Займы\",\n           R.id.btnCredits to \"https://app2.zaimbotmanager.ru/?scrollTo=Кредиты\",\n           R.id.btnCards to \"https://app2.zaimbotmanager.ru/?scrollTo=Карты\"\n       )\n       private val webViews = hashMapOf<Int, WebView>()\n   \n       override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           setContentView(R.layout.activity_main)\n   \n           setupWebView()\n   \n           // Настройка обработчиков нажатия кнопок\n           findViewById<Button>(R.id.btnLoans).setOnClickListener { loadWebViewById(R.id.btnLoans) }\n           findViewById<Button>(R.id.btnCredits).setOnClickListener { loadWebViewById(R.id.btnCredits) }\n           findViewById<Button>(R.id.btnCards).setOnClickListener { loadWebViewById(R.id.btnCards) }\n   \n           // Загружаем первоначальный URL\n           loadWebViewById(R.id.btnLoans)\n       }\n   \n       private fun setupWebView() {\n           WebView(applicationContext).apply {\n               settings.javaScriptEnabled = true\n           \n               // Создаем отдельный экземпляр WebView для каждой кнопки\n               urlMap.keys.forEach { id ->\n                   val webView = WebView(applicationContext).apply {\n                       settings.javaScriptEnabled = true\n                       loadUrl(urlMap[id]!!)\n                   }\n                   webViews[id] = webView\n               }\n           }\n       }\n   \n       private fun loadWebViewById(id: Int) {\n           webView.removeAllViews()\n           webView.addView(webViews[id])\n       }\n   \n       override fun onBackPressed() {\n           val currentWebView = webViews.values.firstOrNull { it.parent == webView }\n           if (currentWebView != null && currentWebView.canGoBack()) {\n               currentWebView.goBack()\n           } else {\n               val currentTime = System.currentTimeMillis()\n               if (currentTime - lastTimeBackPressed < 2000) {\n                   super.onBackPressed()\n               } else {\n                   lastTimeBackPressed = currentTime\n                   Toast.makeText(this, \"Нажмите еще раз для выхода\", Toast.LENGTH_SHORT).show()\n               }\n           }\n       }\n   }",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_2.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "private lateinit var webViewContainer: FrameLayout\n\n// ... Ваши остальные переменные и методы ...\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    webViewContainer = findViewById(R.id.webviewContainer)\n    setupWebView()\n\n    // Настройка обработчиков нажатия кнопок\n    findViewById<Button>(R.id.btnLoans).setOnClickListener { showWebView(R.id.btnLoans) }\n    findViewById<Button>(R.id.btnCredits).setOnClickListener { showWebView(R.id.btnCredits) }\n    findViewById<Button>(R.id.btnCards).setOnClickListener { showWebView(R.id.btnCards) }\n\n    // Загружаем первоначальный URL\n    showWebView(R.id.btnLoans)\n}\n\n// ... Ваши остальные методы ...\n\nprivate fun showWebView(id: Int) {\n    webViewContainer.removeAllViews()\n    val webViewToShow = webViews[id]\n    webViewToShow?.let {\n        webViewContainer.addView(it, FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT))\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_4.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.annotation.SuppressLint",
      "android.os.Bundle",
      "android.webkit.WebView",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.annotation.SuppressLint\nimport android.os.Bundle\nimport android.webkit.WebView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    private val webViewMap = hashMapOf<Int, WebView>()\n    private val urls = hashMapOf(\n        R.id.btnLoans to \"https://app2.zaimbotmanager.ru/?scrollTo=Займы\",\n        R.id.btnCredits to \"https://app2.zaimbotmanager.ru/?scrollTo=Кредиты\",\n        R.id.btnCards to \"https://app2.zaimbotmanager.ru/?scrollTo=Карты\"\n    )\n    private var lastTimeBackPressed = 0L\n\n    @SuppressLint(\"SetJavaScriptEnabled\")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        urls.keys.forEach { id ->\n            webViewMap[id] = createWebView(urls[id]!!)\n        }\n\n        findViewById<Button>(R.id.btnLoans).setOnClickListener { showWebView(R.id.btnLoans) }\n        findViewById<Button>(R.id.btnCredits).setOnClickListener { showWebView(R.id.btnCredits) }\n        findViewById<Button>(R.id.btnCards).setOnClickListener { showWebView(R.id.btnCards) }\n\n        showWebView(R.id.btnLoans) // Загружаем первоначальный URL\n    }\n\n    private fun createWebView(url: String): WebView {\n        return WebView(this).apply {\n            settings.javaScriptEnabled = true\n            settings.domStorageEnabled = true // Если нужно хранение DOM Storage\n            settings.allowContentAccess = true\n            settings.allowFileAccess = true\n            // Некоторые уязвимости могут быть связаны с этими настройками\n            loadUrl(url)\n        }\n    }\n\n    private fun showWebView(id: Int) {\n        val webViewContainer = findViewById<FrameLayout>(R.id.webviewContainer)\n        webViewContainer.removeAllViews()\n        webViewMap[id]?.let { webViewContainer.addView(it) }\n    }\n\n    override fun onBackPressed() {\n        webViewMap.values.firstOrNull { it.parent != null }?.apply {\n            if (canGoBack()) {\n                goBack()\n            } else {\n                handleBackPress()\n            }\n        } ?: handleBackPress()\n    }\n\n    private fun handleBackPress() {\n        val currentTime = System.currentTimeMillis()\n        if (currentTime - lastTimeBackPressed < 2000) {\n            finish() // Завершаем приложение\n        } else {\n            lastTimeBackPressed = currentTime\n            Toast.makeText(this, \"Нажмите еще раз для выхода\", Toast.LENGTH_SHORT).show()\n        }\n    }\n\n    override fun onDestroy() {\n        webViewMap.values.forEach { webView ->\n            webView.removeAllViews()\n            webView.destroy() // Чистка перед уничтожением Activity\n        }\n        super.onDestroy()\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_5.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onBackPressed() {\n    webViewMap.values.firstOrNull { it.parent != null }?.let { webView ->\n        if (webView.canGoBack()) {\n            webView.goBack()\n        } else {\n            confirmExit()\n        }\n    } ?: confirmExit()  // Когда WebView уже не показывается, подтверждаем выход.\n}\n\nprivate fun confirmExit() {\n    val currentTime = System.currentTimeMillis()\n    if (currentTime - lastTimeBackPressed < 2000) {\n        super.onBackPressed()  // Вызов метода родительского класса для закрытия Activity\n    } else {\n        lastTimeBackPressed = currentTime\n        Toast.makeText(this, \"Нажмите еще раз для выхода\", Toast.LENGTH_SHORT).show()\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_6.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.webkit.WebView",
      "android.widget.FrameLayout",
      "android.widget.Toast",
      "androidx.activity.OnBackPressedCallback",
      "androidx.activity.addCallback",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.os.Bundle\nimport android.widget.Toast\nimport android.widget.FrameLayout\nimport android.webkit.WebView\nimport androidx.activity.OnBackPressedCallback\nimport androidx.activity.addCallback\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    private val webViewMap = hashMapOf<Int, WebView>()\n    // ... оставшийся код определения переменных ...\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // ... настройка webView и обработчиков нажатий ...\n\n        // Обработчик нажатий на кнопку \"назад\"\n        onBackPressedDispatcher.addCallback(this) {\n            val webView = webViewMap.values.firstOrNull { it.parent != null }\n            if (webView != null && webView.canGoBack()) {\n                webView.goBack()\n            } else {\n                confirmExit()\n            }\n        }\n    }\n\n    // ... оставшийся код методов ...\n\n    private fun confirmExit() {\n        val currentTime = System.currentTimeMillis()\n        if (currentTime - lastTimeBackPressed < 2000) {\n            finish()\n        } else {\n            lastTimeBackPressed = currentTime\n            Toast.makeText(this, \"Нажмите еще раз для выхода\", Toast.LENGTH_SHORT).show()\n        }\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_7.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "@SuppressLint(\"SetJavaScriptEnabled\")\nprivate fun createWebView(url: String): WebView {\n    return WebView(this).apply {\n        settings.javaScriptEnabled = true\n        settings.domStorageEnabled = true\n        settings.allowContentAccess = true\n        settings.allowFileAccess = true\n        \n        // Устанавливаем собственный WebViewClient\n        webViewClient = object : WebViewClient() {\n            override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {\n                // Загружаем URL в текущем WebView, а не в браузере\n                view.loadUrl(url)\n                return true // Индицирует, что мы обработали событие\n            }\n        }\n        \n        loadUrl(url) // Загрузим URL после настройки WebViewClient\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_8.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun showWebView(id: Int) {\n    val webViewContainer = findViewById<FrameLayout>(R.id.webviewContainer)\n    webViewMap[id]?.let { webView ->\n        if (webView.url != urls[id]) {\n            webView.loadUrl(urls[id]!!)\n        }\n        if (webViewContainer.childCount > 0) {\n            webViewContainer.removeAllViews()\n        }\n        webViewContainer.addView(webView)\n    }\n}\n\n@SuppressLint(\"SetJavaScriptEnabled\")\nprivate fun createWebView(initialUrl: String): WebView {\n    return WebView(this).apply {\n        settings.javaScriptEnabled = true\n        settings.domStorageEnabled = true\n        settings.allowContentAccess = true\n        settings.allowFileAccess = true\n\n        webViewClient = object : WebViewClient() {\n            @Deprecated(\"Deprecated in Java\")\n            override fun shouldOverrideUrlLoading(view: WebView, request: WebResourceRequest): Boolean {\n                // Обрабатываем загрузку URL в текущем WebView\n                val url: String = request.url.toString()\n                view.loadUrl(url)\n                return true // Индицируем, что мы обработали событие\n            }\n           \n            // Этот метод нужен для загрузки ссылки внутри нашего WebView, а не в браузере\n            override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {\n                view.loadUrl(url)\n                return true  // Индицируем, что мы обработали событие\n            }\n\n            // Обрабатываем завершение загрузки страницы\n            override fun onPageFinished(view: WebView, url: String) {\n                super.onPageFinished(view, url)\n                // Здесь можно выполнить действие после загрузки страницы, если это необходимо\n            }\n        }\n\n        loadUrl(initialUrl)\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_10.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun showWebView(id: Int) {\n    val webViewContainer = findViewById<FrameLayout>(R.id.webviewContainer)\n    \n    // Получаем текущий WebView или создаем новый, если он еще не был загружен\n    var webView = webViewMap[id]\n    if (webView == null || webView.url != urls[id]) {\n        // Если URL изменился, создаем новый экземпляр WebView\n        webViewMap[id]?.removeAllViews()\n        webViewMap[id]?.destroy() // Уничтожаем старую версию WebView для очистки памяти\n        webView = createWebView(urls[id]!!)\n        webViewMap[id] = webView\n    }\n    \n    // Устанавливаем новый WebView в контейнер\n    webViewContainer.removeAllViews()\n    webViewContainer.addView(webView)\n    webView.loadUrl(urls[id]!!) // Загружаем URL\n}\n\n@SuppressLint(\"SetJavaScriptEnabled\")\nprivate fun createWebView(initialUrl: String): WebView {\n    return WebView(this).apply {\n        // Настроить WebView здесь (включая webViewClient, как показано выше)\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_11.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "@SuppressLint(\"SetJavaScriptEnabled\")\nprivate fun createWebView(initialUrl: String): WebView {\n    return WebView(this).apply {\n        settings.javaScriptEnabled = true\n        settings.domStorageEnabled = true\n        settings.allowContentAccess = true\n        settings.allowFileAccess = true\n\n        // Настройка User-Agent для имитации мобильного браузера\n        settings.userAgentString = \"Mozilla/5.0 (Linux; Android 10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36\"\n        \n        webViewClient = object : WebViewClient() {\n            override fun shouldOverrideUrlLoading(view: WebView, request: WebResourceRequest): Boolean {\n                view.loadUrl(request.url.toString())\n                return true\n            }\n        }\n\n        loadUrl(initialUrl)\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_12.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "@SuppressLint(\"SetJavaScriptEnabled\")\nprivate fun createWebView(initialUrl: String): WebView {\n    return WebView(this).apply {\n        settings.javaScriptEnabled = true\n\n        webChromeClient = object : WebChromeClient() {\n            override fun onJsConfirm(view: WebView, url: String, message: String, result: JsResult): Boolean {\n                AlertDialog.Builder(this@MainActivity)\n                    .setMessage(message)\n                    .setPositiveButton(android.R.string.ok) { _, _ -> \n                        result.confirm()\n                    }\n                    .setNegativeButton(android.R.string.cancel) { _, _ ->\n                        result.cancel()\n                    }\n                    .create()\n                    .show()\n                return true // Отмечаем, что мы обработали событие\n            }\n\n            // аналогично можно обработать onJsAlert и onJsPrompt при необходимости\n        }\n\n        webViewClient = object : WebViewClient() {\n            override fun shouldOverrideUrlLoading(view: WebView, request: WebResourceRequest): Boolean {\n                view.loadUrl(request.url.toString())\n                return true\n            }\n        }\n\n        // Дополнительная конфигурация WebView ...\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_13.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [],
    "code": "val myWebView: WebView = findViewById(R.id.webview)\nmyWebView.settings.javaScriptEnabled = true\n\n// Установка WebViewClient для обработки событий загрузки\nmyWebView.webViewClient = object : WebViewClient() {\n    override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {\n        // Ваш код здесь...\n        return false\n    }\n}\n\n// Установка WebChromeClient для обработки JavaScript и других событий\nmyWebView.webChromeClient = object : WebChromeClient() {\n    override fun onJsAlert(view: WebView, url: String, message: String, result: JsResult): Boolean {\n        // Ваш код здесь...\n        return true\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_15.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [],
    "code": "webView.webChromeClient = object : WebChromeClient() {\n    override fun onJsConfirm(\n        view: WebView?,\n        url: String?,\n        message: String?,\n        result: JsResult\n    ): Boolean {\n        // Проверяем, соответствует ли сообщение нашему критерию\n        if (message != null && message.contains(\"Changes you made may not be saved\")) {\n            result.confirm() // Автоматически подтверждаем, что хотим покинуть страницу\n            return true // Возвращаем true, показывая, что мы обработали событие\n        }\n        return super.onJsConfirm(view, url, message, result) // Используем стандартное поведение во всех остальных случаях\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_16.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 21,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Обработчик нажатий на кнопку “назад”\nonBackPressedDispatcher.addCallback(this) {\n    val webView = webViewMap.values.firstOrNull { it.parent != null }\n    if (webView != null && webView.canGoBack()) {\n        // Проверяем, не будет ли следующая страница, на которую мы возвращаемся,\n        // страницей, которой не было в истории (не соответствует кнопке).\n        // Здесь используем webView.copyBackForwardList() для получения истории и проверяем URL.\n        val backForwardList = webView.copyBackForwardList()\n        val currentItemIndex = backForwardList.currentIndex\n        val previousItem = if (currentItemIndex > 0) backForwardList.getItemAtIndex(currentItemIndex - 1) else null\n\n        if (previousItem != null && urls.values.any { it == previousItem.url }) {\n            // URL предыдущей страницы соответсвует одному из URL в наших кнопках, возвращаемся на нее.\n            webView.goBack()\n        } else {\n            // Предыдущей страницы нет в истории наших кнопок, возвращаемся к странице по умолчанию.\n            loadInitialPageForCurrentButton(webView)\n        }\n    } else {\n        confirmExit()\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_21.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 22,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun loadInitialPageForCurrentButton(webView: WebView) {\n    // Предполагаем, что у вас есть переменная currentActiveButtonId, которая отслеживает активную кнопку.\n    val initialUrl = urls[currentActiveButtonId]\n    if (initialUrl != null) {\n        webView.loadUrl(initialUrl)\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_22.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 23,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Обработчик нажатий на кнопку “назад”\nonBackPressedDispatcher.addCallback(this) {\n    val webView = webViewMap.values.firstOrNull { it.parent != null }\n    if (webView != null && webView.canGoBack()) {\n        // Проверяем, не будет ли следующая страница по истории навигации новой\n        // (не относится к первоначально загруженным страницам).\n        val backForwardList = webView.copyBackForwardList()\n        val currentItemIndex = backForwardList.currentIndex\n        val previousItem = if (currentItemIndex > 0) backForwardList.getItemAtIndex(currentItemIndex - 1) else null\n\n        if (urls.containsValue(previousItem?.url)) {\n            // Страница в истории соответствует одному из первоначальных URL-адресов кнопок.\n            // Просто выполняем шаг назад в истории.\n            webView.goBack()\n        } else {\n            // Предыдущая страница в истории навигации не является новой,\n            // не соответствует первоначальным URL-адресам кнопок.\n            // Производим дополнительный шаг назад в истории.\n            webView.goBack()\n        }\n    } else {\n        confirmExit()\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_23.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 24,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : ComponentActivity() {\n    // ... Остальные переменные ...\n    private val backStack = ArrayDeque<String>() // Стек для истории переходов\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // ... Остальная часть метода onCreate ...\n\n        // Установим слушатель для WebViewClient\n        webView.webViewClient = object : WebViewClient() {\n            override fun doUpdateVisitedHistory(view: WebView?, url: String?, isReload: Boolean) {\n                super.doUpdateVisitedHistory(view, url, isReload)\n                if (!isReload) {\n                    backStack.push(url) // Запоминаем переход в стеке\n                }\n            }\n        }\n    }\n\n    // Обработчик нажатий на кнопку “назад”\n    onBackPressedDispatcher.addCallback(this) {\n        val webView = webViewMap.values.firstOrNull { it.parent != null }\n        if (webView != null && webView.canGoBack()) {\n            if (backStack.size > 1) {\n                backStack.pop() // Убираем текущую страницу\n                val previousUrl = backStack.peek() // Смотрим предыдущую страницу в стеке\n                if (urls.containsValue(previousUrl)) {\n                    // Если предыдущая страница соответствует одному из URL кнопок, вернемся к ней\n                    webView.goBack()\n                } else {\n                    // Пропустим редирект и вернемся к предыдущему сохраненному адресу\n                    webView.loadUrl(previousUrl ?: \"\")\n                }\n            } else if (backStack.size == 1) {\n                confirmExit() // У нас нет истории, выходим из приложения\n            }\n        } else {\n            confirmExit()\n        }\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_24.kt"
  },
  {
    "conversation_hash": "48b3a2e6c4fb998be9d9d280cff73b0a",
    "code_index": 25,
    "language": "Kotlin",
    "libraries": [],
    "code": "onBackPressedDispatcher.addCallback(this) {\n    val webView = webViewMap.values.firstOrNull { it.parent != null }\n    if (webView?.canGoBack() == true) { // Добавлено условие проверки webView на null\n        if (backStack.isNotEmpty()) {\n            val currentUrl = backStack.pop() // Убираем текущую страницу\n\n            // Проверяем, что в стеке еще остались элементы после pop\n            if (backStack.isNotEmpty()) {\n                val previousUrl = backStack.peek() // Смотрим предыдущую страницу в стеке\n                if (previousUrl != null && urls.containsValue(previousUrl)) {\n                    // Если предыдущая страница соответствует одному из апретированных URL, вернемся к ней\n                    webView.goBack()\n                } else {\n                    // Если предыдущий URL не соответствует апретированному, загружаем его\n                    webView.loadUrl(previousUrl ?: \"\")\n                }\n            } else {\n                confirmExit()\n            }\n        } else {\n            confirmExit()\n        }\n    } else {\n        confirmExit()\n    }\n}",
    "filename": "48b3a2e6c4fb998be9d9d280cff73b0a_25.kt"
  },
  {
    "conversation_hash": "5fe41032bee874c59c562f3833745dfb",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "kotlin.math.roundToInt"
    ],
    "code": "import kotlin.math.roundToInt\n\nfun main() {\n    val monthlyIncome = 50000.0 // Example monthly income\n    val monthlyExpense = 20000.0 // Example monthly expense\n    val savings = 100000.0 // Example savings\n\n    val loanAmount = calculateLoanAmount(monthlyIncome, monthlyExpense, savings)\n    val interestRate = 5.0 // Example annual interest rate in percentage\n    val emi = calculateEmi(loanAmount, interestRate)\n    val repaymentAmount = calculateRepaymentAmount(emi, loanAmount)\n\n    println(\"Loan amount: $loanAmount\")\n    println(\"Monthly EMI: $emi\")\n    println(\"Repayment amount: $repaymentAmount\")\n}\n\nfun calculateLoanAmount(monthlyIncome: Double, monthlyExpense: Double, savings: Double): Double {\n    val availableFunds = monthlyIncome - monthlyExpense\n    val loanAmount = savings + (availableFunds * 12)\n    return loanAmount\n}\n\nfun calculateEmi(loanAmount: Double, interestRate: Double): Double {\n    val monthlyInterestRate = interestRate / 12 / 100\n    val emi = (loanAmount * monthlyInterestRate * (1 + monthlyInterestRate).pow(12)) / ((1 + monthlyInterestRate).pow(12) - 1)\n    return emi\n}\n\nfun calculateRepaymentAmount(emi: Double, loanAmount: Double): Double {\n    val repaymentAmount = emi * 12\n    return repaymentAmount\n}",
    "filename": "5fe41032bee874c59c562f3833745dfb_0.kt"
  },
  {
    "conversation_hash": "04b2aa3f32181de335e4d259c3e7b892",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.util."
    ],
    "code": "import java.util.*\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n\n    println(\"Enter your monthly income:\")\n    val income = scanner.nextDouble()\n\n    println(\"Enter your monthly expenses:\")\n    val expenses = scanner.nextDouble()\n\n    println(\"Enter your savings:\")\n    val savings = scanner.nextDouble()\n\n    println(\"Enter the loan interest rate (%):\")\n    val interestRate = scanner.nextDouble()\n\n    val availableAmount = income - expenses + savings\n\n    println(\"Available amount for loan: $availableAmount\")\n\n    println(\"Enter the loan duration (in months):\")\n    val loanDuration = scanner.nextInt()\n\n    val loanAmount = availableAmount\n\n    val monthlyInterestRate = interestRate / 100 / 12\n    val emi = calculateEMI(loanAmount, monthlyInterestRate, loanDuration)\n\n    println(\"Loan amount: $loanAmount\")\n    println(\"Monthly EMI: $emi\")\n    println(\"Total repayment amount: ${emi * loanDuration}\")\n}\n\nfun calculateEMI(loanAmount: Double, monthlyInterestRate: Double, loanDuration: Int): Double {\n    val emiNumerator = loanAmount * monthlyInterestRate * Math.pow((1 + monthlyInterestRate), loanDuration.toDouble())\n    val emiDenominator = Math.pow((1 + monthlyInterestRate), loanDuration.toDouble()) - 1\n    return emiNumerator / emiDenominator\n}",
    "filename": "04b2aa3f32181de335e4d259c3e7b892_0.kt"
  },
  {
    "conversation_hash": "43559309d5280a8cf283ba4bff7d4aa4",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n\n    private lateinit var webView: WebView\n    private val urlZaimy = \"https://app2.zaimbotmanager.ru/?scrollTo=Займы\"\n    private val urlKredity = \"https://app2.zaimbotmanager.ru/?scrollTo=Кредиты\"\n    private val urlKarty = \"https://app2.zaimbotmanager.ru/?scrollTo=Карты\"\n    private val privacyPolicyUrl = \"https://docs.google.com/document/d/10t5HYlu4S2Jp5gxANvKwaw7RmZqwnis8rU_4Ni0Ldkk/edit?usp=sharing\"\n    \n    private var lastPress: Long = 0\n    private val doublePressInterval: Long = 2000 // 2 seconds\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        // Setup WebView and other logic related to bottom navigation and menu item setup\n    }\n    \n    private fun setupWebView(webView: WebView, url: String) {\n        webView.settings.javaScriptEnabled = true\n        webView.loadUrl(url)\n        \n        webView.webViewClient = object : WebViewClient() {\n            override fun shouldOverrideUrlLoading(view: WebView?, request: WebResourceRequest?): Boolean {\n                val url = request?.url.toString()\n                \n                // Check if we need to open url in WebView or external browser using JavaScript\n                view?.evaluateJavascript(\"checkOpenBrowser();\", ValueCallback { value ->\n                    if (value.equals(\"true\", ignoreCase = true)) {\n                        val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(url))\n                        startActivity(browserIntent)\n                    } else {\n                        view?.loadUrl(url)\n                    }\n                })\n                \n                return true // Prevent default behavior\n            }\n            \n            override fun onPageFinished(view: WebView?, url: String?) {\n                // Handle page loaded events, like stopping Lottie animation\n            }\n        }\n        \n        webView.webChromeClient = WebChromeClient()\n    }\n\n    override fun onBackPressed() {\n        // Handle back press to clear WebView history or handle double back press to exit\n        if (webView.canGoBack()) {\n            webView.goBack()\n        } else {\n            val currentTime = System.currentTimeMillis()\n            if (currentTime - lastPress > doublePressInterval) {\n                Toast.makeText(this, \"Press back again to exit\", Toast.LENGTH_SHORT).show()\n                lastPress = currentTime\n            } else {\n                super.onBackPressed()\n            }\n        }\n    }\n\n    // TODO: Implement bottom navigation view listener to handle tab switches\n    // TODO: Implement options menu for privacy policy URL\n}",
    "filename": "43559309d5280a8cf283ba4bff7d4aa4_1.kt"
  },
  {
    "conversation_hash": "43559309d5280a8cf283ba4bff7d4aa4",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class WebViewFragment : Fragment() {\n\n    private lateinit var webView: WebView\n    private lateinit var currentUrl: String\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        // Инициализируем View через fragment_web_view.xml\n        val view = inflater.inflate(R.layout.fragment_web_view, container, false)\n        webView = view.findViewById(R.id.webview)\n        setupWebView(webView)\n        if (savedInstanceState == null) { // Проверка для предотвращения перезагрузки при пересоздании фрагмента\n            webView.loadUrl(currentUrl)\n        }\n        return view\n    }\n\n    fun setupWebView(webView: WebView) {\n        val webSettings = webView.settings\n        webSettings.javaScriptEnabled = true // Разрешаем выполнение JavaScript\n\n        webView.webChromeClient = WebChromeClient() // Устанавливаем WebChromeClient для обработки JavaScript\n\n        webView.webViewClient = object : WebViewClient() {\n            // Перехватываем загрузку URL для проверки необходимости открытия в браузере\n            override fun shouldOverrideUrlLoading(view: WebView, request: WebResourceRequest): Boolean {\n                webView.evaluateJavascript(\"checkOpenBrowser();\") { value ->\n                    // Обработка результата работы JavaScript\n\n                    // Логика определения необходимости открытия ссылки внутри WebView или во внешнем браузере\n                }\n                return true // Очищаем историю после перехода\n            }\n        }\n\n        // Пример начала анимации (псевдокод, реальную реализацию смотрите в документации Lottie)\n        webView.webChromeClient = object : WebChromeClient() {\n            override fun onProgressChanged(view: WebView, newProgress: Int) {\n                // Контроль за процессом загрузки страницы\n                // Начало и остановка анимации Lottie\n            }\n        }\n    }\n\n    companion object {\n        // Фабричный метод для создания экземпляров WebViewFragment с нужным URL\n        fun newInstance(url: String): WebViewFragment {\n            val fragment = WebViewFragment()\n            fragment.currentUrl = url\n            return fragment\n        }\n    }\n}",
    "filename": "43559309d5280a8cf283ba4bff7d4aa4_6.kt"
  },
  {
    "conversation_hash": "43559309d5280a8cf283ba4bff7d4aa4",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "private var lastBackPressTime: Long = 0\n\noverride fun onBackPressed() {\n    if (isMainFragmentDisplayed() && System.currentTimeMillis() - lastBackPressTime < doublePressInterval) {\n        super.onBackPressed() // может вызывать finish для завершения активности\n    } else {\n        if (isMainFragmentDisplayed()) {\n            Toast.makeText(this, \"Press back again to exit\", Toast.LENGTH_SHORT).show()\n            lastBackPressTime = System.currentTimeMillis()\n        } else {\n            // Показать основной фрагмент (например, с Zaimy)\n        }\n    }\n}\n\n// Функция проверки, что отображается основной фрагмент (например, Zaimy)\nprivate fun isMainFragmentDisplayed(): Boolean { \n    // Реализуйте логику проверки того, какой фрагмент отображается currently\n}",
    "filename": "43559309d5280a8cf283ba4bff7d4aa4_8.kt"
  },
  {
    "conversation_hash": "43559309d5280a8cf283ba4bff7d4aa4",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreateOptionsMenu(menu: Menu): Boolean {\n    menuInflater.inflate(R.menu.menu_main, menu)\n    return true\n}\n\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n    when (item.itemId) {\n        R.id.action_privacy_policy -> {\n            // Открытие пункта меню \"Политика конфиденциальности\"\n            val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(privacyPolicyUrl))\n            startActivity(browserIntent)\n            return true\n        }\n    }\n    return super.onOptionsItemSelected(item)\n}",
    "filename": "43559309d5280a8cf283ba4bff7d4aa4_9.kt"
  },
  {
    "conversation_hash": "43559309d5280a8cf283ba4bff7d4aa4",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "android.annotation.SuppressLint",
      "android.content.Intent",
      "android.graphics.Bitmap",
      "android.net.Uri",
      "android.os.Bundle",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.webkit.",
      "androidx.fragment.app.Fragment"
    ],
    "code": "import android.annotation.SuppressLint\nimport android.content.Intent\nimport android.graphics.Bitmap\nimport android.net.Uri\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.webkit.*\nimport androidx.fragment.app.Fragment\n\nclass WebViewFragment : Fragment() {\n    private lateinit var webView: WebView\n    private var myUrl: String? = null\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\n        val view = inflater.inflate(R.layout.fragment_web_view, container, false)\n        webView = view.findViewById(R.id.webview)\n        initWebView()\n        loadUrl(myUrl)\n        return view\n    }\n\n    @SuppressLint(\"SetJavaScriptEnabled\")\n    private fun initWebView() {\n        webView.settings.javaScriptEnabled = true\n        webView.webChromeClient = WebChromeClient()\n        \n        webView.webViewClient = object : WebViewClient() {\n            override fun shouldOverrideUrlLoading(view: WebView, request: WebResourceRequest): Boolean {\n                val url = request.url.toString()\n\n                // Проверка на условия необходимости загрузки URL внутри WebView\n                webView.evaluateJavascript(\"javascript:checkOpenBrowser()\",\n                    ValueCallback { value ->\n                        if (value.equals(\"true\", ignoreCase = true)) {\n                            // Открытие ссылки в браузере\n                            val browserIntent = Intent(Intent.ACTION_VIEW, Uri.parse(url))\n                            startActivity(browserIntent)\n                        } else {\n                            // Загрузка внутри WebView\n                            view.loadUrl(url)\n                        }\n                    })\n\n                return true // Указываем, что мы перехватили загрузку\n            }\n\n            override fun onPageStarted(view: WebView, url: String, favicon: Bitmap?) {\n                // Запуск анимации загрузки, например, Lottie\n            }\n\n            override fun onPageFinished(view: WebView, url: String) {\n                // Остановка анимации загрузки\n            }\n        }\n    }\n    \n    fun loadUrl(url: String?) {\n        myUrl = url\n        webView.loadUrl(url ?: \"\")\n    }\n    \n    companion object {\n        fun newInstance(url: String): WebViewFragment {\n            val fragment = WebViewFragment()\n            val args = Bundle()\n            args.putString(\"url\", url)\n            fragment.arguments = args\n            fragment.loadUrl(url)\n            return fragment\n        }\n    }\n}",
    "filename": "43559309d5280a8cf283ba4bff7d4aa4_10.kt"
  },
  {
    "conversation_hash": "43559309d5280a8cf283ba4bff7d4aa4",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity",
      "com.example.webviewapp.databinding.ActivityMainBinding"
    ],
    "code": "import android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.webviewapp.databinding.ActivityMainBinding\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n    private val fragment1 = WebViewFragment.newInstance(\"<URL_1>\")\n    private val fragment2 = WebViewFragment.newInstance(\"<URL_2>\")\n    private val fragment3 = WebViewFragment.newInstance(\"<URL_3>\")\n    \n    // Переменные для обработки двойного нажатия для выхода\n    private var backPressedOnce = false\n    private val backPressHandler = Handler()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        // Настройка BottomNavigationView\n        setupBottomNavigation()\n    }\n\n    private fun setupBottomNavigation() {\n        // Добавьте логику для переключения фрагментов при нажатии на элементы BottomNavigationView\n    }\n\n    override fun onBackPressed() {\n        if (backPressedOnce) {\n            super.onBackPressed()\n            return\n        }\n\n        this.backPressedOnce = true\n        Toast.makeText(this, \"Please click BACK again to exit\", Toast.LENGTH_SHORT).show()\n        \n        // Задержка сброса флага нажатия\n        backPressHandler.postDelayed({ backPressedOnce = false }, 2000)\n    }\n}",
    "filename": "43559309d5280a8cf283ba4bff7d4aa4_11.kt"
  },
  {
    "conversation_hash": "43559309d5280a8cf283ba4bff7d4aa4",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreateOptionsMenu(menu: Menu): Boolean {\n    menuInflater.inflate(R.menu.my_menu, menu)\n    return true\n}\n\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n    return when (item.itemId) {\n        R.id.itemPrivacyPolicy -> {\n            startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(PRIVACY_POLICY_URL)))\n            true\n        }\n        else -> super.onOptionsItemSelected(item)\n    }\n}",
    "filename": "43559309d5280a8cf283ba4bff7d4aa4_12.kt"
  },
  {
    "conversation_hash": "db1e2da5f77432f494bc9d7d452826df",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "webView.settings.javaScriptEnabled = true // Включаем поддержку JavaScript\n   \n   // Устанавливаем кастомный клиент для WebView\n   webView.webViewClient = object : WebViewClient() {\n       override fun shouldOverrideUrlLoading(view: WebView?, request: WebResourceRequest?): Boolean {\n           // Обработка нажатий на ссылки внутри WebView\n           // ...\n       }\n   }\n   \n   webView.webChromeClient = WebChromeClient() // Чтобы нормально работал JavaScript",
    "filename": "db1e2da5f77432f494bc9d7d452826df_1.kt"
  },
  {
    "conversation_hash": "db1e2da5f77432f494bc9d7d452826df",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "webView.addJavascriptInterface(object {\n       @JavascriptInterface\n       fun checkOpenBrowser(url: String): Boolean {\n           // Ваша логика проверки\n           return true // Или false в зависимости от логики\n       }\n   }, \"AndroidInterface\")",
    "filename": "db1e2da5f77432f494bc9d7d452826df_3.kt"
  },
  {
    "conversation_hash": "db1e2da5f77432f494bc9d7d452826df",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "private var lastClickTime = 0L\n   \n   override fun onBackPressed() {\n       if (System.currentTimeMillis() - lastClickTime < 2000) {\n           finish() // Закрыть приложение\n       } else {\n           Toast.makeText(this, \"Нажмите еще раз для выхода\", Toast.LENGTH_SHORT).show()\n           lastClickTime = System.currentTimeMillis()\n       }\n   }",
    "filename": "db1e2da5f77432f494bc9d7d452826df_4.kt"
  },
  {
    "conversation_hash": "db1e2da5f77432f494bc9d7d452826df",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onOptionsItemSelected(item: MenuItem): Boolean {\n       when (item.itemId) {\n           R.id.menu_privacy_policy -> {\n               // Открыть WebView с политикой конфиденциальности\n               return true\n           }\n       }\n       return super.onOptionsItemSelected(item)\n   }",
    "filename": "db1e2da5f77432f494bc9d7d452826df_5.kt"
  },
  {
    "conversation_hash": "71840d4389df0d23950a2730d784d2ad",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// MainActivity.kt\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var webView: WebView\n    private var currentUrl: String? = null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        webView = findViewById(R.id.webview)\n        setupWebView()\n\n        val navigation = findViewById<BottomNavigationView>(R.id.nav_view)\n        navigation.setOnItemSelectedListener { item ->\n            when (item.itemId) {\n                R.id.navigation_zaimy -> loadUrl(\"https://app2.zaimbotmanager.ru/?scrollTo=Займы\")\n                R.id.navigation_kredity -> loadUrl(\"https://app2.zaimbotmanager.ru/?scrollTo=Кредиты\")\n                R.id.navigation_karty -> loadUrl(\"https://app2.zaimbotmanager.ru/?scrollTo=Карты\")\n            }\n            true\n        }\n\n        // По умолчанию загружаем первый URL\n        navigation.selectedItemId = R.id.navigation_zaimy\n    }\n\n    private fun setupWebView() {\n        // Настройка WebView\n    }\n\n    private fun loadUrl(url: String) {\n        if (url != currentUrl) {\n            currentUrl = url\n            webView.loadUrl(url)\n        }\n    }\n}",
    "filename": "71840d4389df0d23950a2730d784d2ad_0.kt"
  },
  {
    "conversation_hash": "71840d4389df0d23950a2730d784d2ad",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "private var backPressedTime = 0L\n\noverride fun onBackPressed() {\n    if (backPressedTime + 2000 > System.currentTimeMillis()) {\n        super.onBackPressed()\n        return\n    } else {\n        Toast.makeText(this, \"Press back again to exit\", Toast.LENGTH_SHORT).show()\n    }\n    backPressedTime = System.currentTimeMillis()\n}",
    "filename": "71840d4389df0d23950a2730d784d2ad_1.kt"
  },
  {
    "conversation_hash": "71840d4389df0d23950a2730d784d2ad",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun setupWebView() {\n    webView.settings.javaScriptEnabled = true\n    \n    webView.webChromeClient = WebChromeClient()\n    \n    webView.webViewClient = object : WebViewClient() {\n        // переопределить shouldOverrideUrlLoading для контроля над ссылками\n        // переопределить onPageFinished для сигналов о завершении загрузки\n    }\n    \n    // Задачи по обновлению и анимации загрузки\n}",
    "filename": "71840d4389df0d23950a2730d784d2ad_2.kt"
  },
  {
    "conversation_hash": "71840d4389df0d23950a2730d784d2ad",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onBackPressed() {\n    if (webView.canGoBack()) {\n        webView.goBack() // Navigate back if we're not at the \"home\" page\n    } else {\n        if (backPressedTime + 2000 > System.currentTimeMillis()) {\n            super.onBackPressed()\n            return\n        } else {\n            Toast.makeText(this, \"Press back again to exit\", Toast.LENGTH_SHORT).show()\n        }\n        backPressedTime = System.currentTimeMillis()\n    }\n}\n\nfun showErrorView() {\n    // Display an error view or a message to the user\n}",
    "filename": "71840d4389df0d23950a2730d784d2ad_4.kt"
  },
  {
    "conversation_hash": "71840d4389df0d23950a2730d784d2ad",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "// MainActivity.kt\n\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\n    menuInflater.inflate(R.menu.menu_main, menu)\n    return true\n}\n\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n    return when (item.itemId) {\n        R.id.action_policy -> {\n            webView.loadUrl(\"https://docs.google.com/document/d/10t5HYlu4S2Jp5gxANvKwaw7RmZqwnis8rU_4Ni0Ldkk/edit?usp=sharing\")\n            true\n        }\n        else -> super.onOptionsItemSelected(item)\n    }\n}",
    "filename": "71840d4389df0d23950a2730d784d2ad_6.kt"
  },
  {
    "conversation_hash": "71840d4389df0d23950a2730d784d2ad",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "// MainActivity.kt\n\nprivate lateinit var swipeRefreshLayout: SwipeRefreshLayout\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    // ...\n\n    swipeRefreshLayout = findViewById(R.id.swipe_refresh_layout)\n    swipeRefreshLayout.setOnRefreshListener {\n        webView.reload()\n    }\n\n    // ...\n}\n\nwebView.webViewClient = object : WebViewClient() {\n    override fun onPageFinished(view: WebView?, url: String?) {\n        swipeRefreshLayout.isRefreshing = false\n        super.onPageFinished(view, url)\n    }\n    // ... другие переопределения ...\n}",
    "filename": "71840d4389df0d23950a2730d784d2ad_8.kt"
  },
  {
    "conversation_hash": "dda174911cce72b6b4897943ee5b0ad2",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.annotation.SuppressLint",
      "android.graphics.Bitmap",
      "android.os.Bundle",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "android.webkit.WebChromeClient",
      "android.webkit.WebResourceRequest",
      "android.webkit.WebView",
      "android.webkit.WebViewClient",
      "androidx.fragment.app.Fragment",
      "androidx.swiperefreshlayout.widget.SwipeRefreshLayout",
      "com.example.mywebviewapplication.databinding.FragmentWebViewBinding"
    ],
    "code": "import android.annotation.SuppressLint\nimport android.graphics.Bitmap\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.webkit.WebChromeClient\nimport android.webkit.WebResourceRequest\nimport android.webkit.WebView\nimport android.webkit.WebViewClient\nimport androidx.fragment.app.Fragment\nimport com.example.mywebviewapplication.databinding.FragmentWebViewBinding\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n\nclass WebViewFragment : Fragment() {\n    \n    private var _binding: FragmentWebViewBinding? = null\n    private val binding get() = _binding!!\n    private lateinit var webView: WebView\n    private var currentUrl: String = \"https://app2.zaimbotmanager.ru/?scrollTo=Займы\"\n    \n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        _binding = FragmentWebViewBinding.inflate(inflater, container, false)\n        setupWebView()\n        return binding.root\n    }\n    \n    @SuppressLint(\"SetJavaScriptEnabled\")\n    private fun setupWebView() {\n        webView = binding.webViewFragment\n        webView.webChromeClient = WebChromeClient()\n        webView.settings.javaScriptEnabled = true\n        webView.loadUrl(currentUrl)\n        \n        // Добавляем кастомный WebViewClient\n        webView.webViewClient = object : WebViewClient() {\n            override fun shouldOverrideUrlLoading(\n                view: WebView?,\n                request: WebResourceRequest?\n            ): Boolean {\n                // Логика обработки клика по ссылкам\n                return false\n            }\n\n            override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {\n                // Показываем индикатор загрузки\n                super.onPageStarted(view, url, favicon)\n            }\n\n            override fun onPageFinished(view: WebView?, url: String?) {\n                // Скрываем индикатор загрузки\n                super.onPageFinished(view, url)\n                binding.swipeRefreshLayout.isRefreshing = false\n            }\n        }\n\n        // Обработка свайпа вниз для обновления\n        binding.swipeRefreshLayout.setOnRefreshListener {\n            webView.reload()\n        }\n    }\n    \n    override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }\n    \n    companion object {\n        fun newInstance(url: String): WebViewFragment {\n            val fragment = WebViewFragment()\n            val args = Bundle()\n            args.putString(\"url\", url)\n            fragment.arguments = args\n            return fragment\n        }\n    }\n}",
    "filename": "dda174911cce72b6b4897943ee5b0ad2_1.kt"
  },
  {
    "conversation_hash": "3ec7d4b340f0a6720e9d85e68b8e283b",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    // ...\n    override fun onCreate(savedInstanceState: Bundle?) {\n        // ...\n        // Инициализировать навигацию и WebView\n        // Пример может выглядеть так: под кажной кнопкой будет фрагмент с WebView, который инстанцируется с нужным URL.\n    }\n\n    // Обработать нажатие на элементы меню\n    // Обработать двойное нажатие, используя переменные для сохранения времени первого нажатия\n    // ...\n}",
    "filename": "3ec7d4b340f0a6720e9d85e68b8e283b_4.kt"
  },
  {
    "conversation_hash": "0a5183f2812093568ce11f9cdcc3ad7e",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun createSecretIntent(coords: Coords): Intent {\n    val intent = Intent()\n    intent.action = \"android.intent.action.MAY_THE_FORCE_BE_WITH_YOU\"\n    intent.putExtras(\"SECRET_COORDS\", coords)\n    intent.putExtras(\"NAME\", \"Han\")\n    intent.putExtras(\"SURNAME\", \"Solo\")\n    intent.putExtras(\"AGE\", 40)\n    return intent\n}",
    "filename": "0a5183f2812093568ce11f9cdcc3ad7e_11.kt"
  },
  {
    "conversation_hash": "4fadc0c6720c19bb1d7f05823f4ba885",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "val runtime = Runtime.getRuntime()\n   val usedMemInMB = (runtime.totalMemory() - runtime.freeMemory()) / 1048576L\n   val maxHeapSizeInMB = runtime.maxMemory() / 1048576L\n   val availHeapSizeInMB = maxHeapSizeInMB - usedMemInMB\n   println(\"Used memory: $usedMemInMB MB\")\n   println(\"Available heap size: $availHeapSizeInMB MB\")",
    "filename": "4fadc0c6720c19bb1d7f05823f4ba885_0.kt"
  },
  {
    "conversation_hash": "4fadc0c6720c19bb1d7f05823f4ba885",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyApplication : Application(), ComponentCallbacks2 {\n       override fun onTrimMemory(level: Int) {\n           super.onTrimMemory(level)\n           if (level == ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW) {\n               println(\"System is running low on memory.\")\n           }\n       }\n   }",
    "filename": "4fadc0c6720c19bb1d7f05823f4ba885_2.kt"
  },
  {
    "conversation_hash": "a24bb7b79ca1af577f89f5472761e2d7",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "val runtime = Runtime.getRuntime()\n   val usedMemInMB = (runtime.totalMemory() - runtime.freeMemory()) / 1048576L\n   val maxHeapSizeInMB = runtime.maxMemory() / 1048576L\n   val availableHeapSizeInMB = maxHeapSizeInMB - usedMemInMB\n\n   println(\"Used memory: $usedMemInMB MB\")\n   println(\"Max heap size: $maxHeapSizeInMB MB\")\n   println(\"Available heap size: $availableHeapSizeInMB MB\")",
    "filename": "a24bb7b79ca1af577f89f5472761e2d7_0.kt"
  },
  {
    "conversation_hash": "712e72f24b013b2ef2652eb272a07bde",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.net.Uri",
      "android.os.Bundle",
      "android.widget.Button",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport android.widget.Button\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val shareButton = findViewById<Button>(R.id.shareButton)\n        shareButton.setOnClickListener {\n            val shareBody = \"Content to be shared\"\n            val shareIntent = Intent(Intent.ACTION_SEND)\n            shareIntent.type = \"text/plain\"\n            shareIntent.putExtra(Intent.EXTRA_TEXT, shareBody)\n\n            val smsIntent = Intent(Intent.ACTION_VIEW)\n            smsIntent.data = Uri.parse(\"sms:\")\n            val chooserIntent = Intent.createChooser(shareIntent, \"Share via\")\n            chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, arrayOf(smsIntent))\n\n            startActivity(chooserIntent)\n        }\n    }\n}",
    "filename": "712e72f24b013b2ef2652eb272a07bde_10.kt"
  },
  {
    "conversation_hash": "712e72f24b013b2ef2652eb272a07bde",
    "code_index": 19,
    "language": "Kotlin",
    "libraries": [],
    "code": "val textWatcher = object : TextWatcher {\n    override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\n        // Executed before the text is changed\n    }\n\n    override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n        // Executed while the text is being changed\n\n        // Access the updated text using s.toString()\n        val updatedText = s.toString()\n\n        // Implement your desired logic here, based on the updated text\n    }\n\n    override fun afterTextChanged(s: Editable?) {\n        // Executed after the text has been changed\n    }\n}",
    "filename": "712e72f24b013b2ef2652eb272a07bde_19.kt"
  },
  {
    "conversation_hash": "6a63d6a18879efe73f8f910305e528e7",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.graphics.Paint",
      "android.graphics.Path"
    ],
    "code": "import android.graphics.Paint\nimport android.graphics.Path\n\ndata class DrawAction(\n    val path: Path,\n    val paint: Paint\n)\n\nclass DrawHistoryManager {\n    private val history: MutableList<DrawAction> = mutableListOf()\n    private val redoStack: MutableList<DrawAction> = mutableListOf()\n\n    fun addAction(drawAction: DrawAction) {\n        history.add(drawAction)\n        redoStack.clear()\n    }\n\n    fun undo(): DrawAction? {\n        if (history.isNotEmpty()) {\n            val action = history.removeAt(history.size - 1)\n            redoStack.add(action)\n            return action\n        }\n        return null\n    }\n\n    fun redo(): DrawAction? {\n        if (redoStack.isNotEmpty()) {\n            val action = redoStack.removeAt(redoStack.size - 1)\n            history.add(action)\n            return action\n        }\n        return null\n    }\n\n    fun canUndo(): Boolean = history.isNotEmpty()\n\n    fun canRedo(): Boolean = redoStack.isNotEmpty()\n\n    // 获取全部操作历史\n    fun getActions(): List<DrawAction> = history\n\n    // 清空所有历史记录\n    fun clear() {\n        history.clear()\n        redoStack.clear()\n    }\n}",
    "filename": "6a63d6a18879efe73f8f910305e528e7_1.kt"
  },
  {
    "conversation_hash": "6a63d6a18879efe73f8f910305e528e7",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onTouchEvent(event: MotionEvent): Boolean {\n    // ...\n    if (event.action == MotionEvent.ACTION_UP) {\n        // 当手指抬起时，将动作保存到历史记录中\n        drawHistoryManager.addAction(DrawAction(Path(currentPath), Paint(paint)))\n        currentPath = Path() // 重置当前路径以便新的绘制操作\n    }\n    // ...\n}",
    "filename": "6a63d6a18879efe73f8f910305e528e7_2.kt"
  },
  {
    "conversation_hash": "6a63d6a18879efe73f8f910305e528e7",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onDraw(canvas: Canvas) {\n    super.onDraw(canvas)\n    for (action in drawHistoryManager.getActions()) {\n        canvas.drawPath(action.path, action.paint)\n    }\n    // 如果有正在进行的路径也进行绘制\n    canvas.drawPath(currentPath, paint)\n}",
    "filename": "6a63d6a18879efe73f8f910305e528e7_3.kt"
  },
  {
    "conversation_hash": "6d567cc7fca589bc1ef41f026c80663e",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Assuming you have a button named \"sendEmailButton\" in your XML layout file\nval sendEmailButton = findViewById<Button>(R.id.sendEmailButton)\n\nsendEmailButton.setOnClickListener {\n    val recipient = \"example@example.com\"\n    val subject = \"Subject\"\n    val message = \"Hello! This is the content of the email.\"\n\n    // Create intent with necessary action and data\n    val intent = Intent(Intent.ACTION_SENDTO).apply {\n        data = Uri.parse(\"mailto:\") // Only email apps should handle this\n        putExtra(Intent.EXTRA_EMAIL, arrayOf(recipient))\n        putExtra(Intent.EXTRA_SUBJECT, subject)\n        putExtra(Intent.EXTRA_TEXT, message)\n    }\n\n    // Verify that the intent resolve to handle the email sending action\n    if (intent.resolveActivity(packageManager) != null) {\n        // Start the activity for sending an email\n        startActivity(intent)\n    } else {\n        Toast.makeText(this, \"No email clients found!\", Toast.LENGTH_SHORT).show()\n    }\n}",
    "filename": "6d567cc7fca589bc1ef41f026c80663e_0.kt"
  },
  {
    "conversation_hash": "6d567cc7fca589bc1ef41f026c80663e",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Assuming you have a button named \"sendEmailButton\" in your XML layout file\nval sendEmailButton = findViewById<Button>(R.id.sendEmailButton)\n\nsendEmailButton.setOnClickListener {\n    val recipient = \"example@example.com\"\n    val subject = \"Subject\"\n    val message = \"Hello! This is the content of the email.\"\n\n    // Create intent with necessary action and data\n    val intent = Intent(Intent.ACTION_SEND).apply {\n        type = \"text/plain\"\n        putExtra(Intent.EXTRA_EMAIL, arrayOf(recipient))\n        putExtra(Intent.EXTRA_SUBJECT, subject)\n        putExtra(Intent.EXTRA_TEXT, message)\n    }\n\n    // Verify that the intent resolve to handle the email sending action\n    if (intent.resolveActivity(packageManager) != null) {\n        // Start the activity for sending an email\n        startActivity(Intent.createChooser(intent, \"Send email\"))\n    } else {\n        Toast.makeText(this, \"No email clients found!\", Toast.LENGTH_SHORT).show()\n    }\n}",
    "filename": "6d567cc7fca589bc1ef41f026c80663e_1.kt"
  },
  {
    "conversation_hash": "6d567cc7fca589bc1ef41f026c80663e",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Assuming you have a button named \"sendEmailButton\" in your XML layout file\nval sendEmailButton = findViewById<Button>(R.id.sendEmailButton)\n\nsendEmailButton.setOnClickListener {\n    val recipient = \"example@example.com\"\n    val subject = \"Subject\"\n    val message = \"Hello! This is the content of the email.\"\n\n    // Create intent with necessary action and data\n    val intent = Intent(Intent.ACTION_SENDTO).apply {\n        data = Uri.parse(\"mailto:\") // Only email apps should handle this\n        putExtra(Intent.EXTRA_EMAIL, arrayOf(recipient))\n        putExtra(Intent.EXTRA_SUBJECT, subject)\n        putExtra(Intent.EXTRA_TEXT, message)\n\n        // Set the specific package to Gmail\n        setPackage(\"com.google.android.gm\")\n    }\n\n    // Verify that the intent resolves to handle the email sending action\n    if (intent.resolveActivity(packageManager) != null) {\n        // Start the activity for sending an email\n        startActivity(intent)\n    } else {\n        Toast.makeText(this, \"Gmail app not found!\", Toast.LENGTH_SHORT).show()\n    }\n}",
    "filename": "6d567cc7fca589bc1ef41f026c80663e_2.kt"
  },
  {
    "conversation_hash": "6d567cc7fca589bc1ef41f026c80663e",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Assuming you have a button named \"sendEmailButton\" in your XML layout file\nval sendEmailButton = findViewById<Button>(R.id.sendEmailButton)\n\nsendEmailButton.setOnClickListener {\n    val recipient = \"example@example.com\"\n    val subject = \"Subject\"\n    val message = \"Hello! This is the content of the email.\"\n\n    // Create intent with necessary action and data\n    val intent = Intent(Intent.ACTION_SENDTO).apply {\n        data = Uri.parse(\"mailto:\") // Only email apps should handle this\n        putExtra(Intent.EXTRA_EMAIL, arrayOf(recipient))\n        putExtra(Intent.EXTRA_SUBJECT, subject)\n        putExtra(Intent.EXTRA_TEXT, message)\n\n        // Set the specific package of the default email client\n        setPackage(intent.resolveActivity(packageManager)?.packageName)\n    }\n\n    // Verify that the intent resolves to handle the email sending action\n    if (intent.resolveActivity(packageManager) != null) {\n        // Start the activity for sending an email\n        startActivity(intent)\n    } else {\n        Toast.makeText(this, \"No email clients found!\", Toast.LENGTH_SHORT).show()\n    }\n}",
    "filename": "6d567cc7fca589bc1ef41f026c80663e_3.kt"
  },
  {
    "conversation_hash": "809ab529df386ac360ce1b74f2b9ae1c",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\n       override fun onQueryTextSubmit(query: String): Boolean {\n           // Perform search operation with query\n           return true\n       }\n\n       override fun onQueryTextChange(newText: String): Boolean {\n           // Perform search filtering with newText\n           return true\n       }\n   })",
    "filename": "809ab529df386ac360ce1b74f2b9ae1c_5.kt"
  },
  {
    "conversation_hash": "86c4e3f7fe418d1276ea0fbd2b040674",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.activity.ComponentActivity",
      "androidx.activity.compose.setContent",
      "androidx.compose.foundation.layout.Column",
      "androidx.compose.material.Button",
      "androidx.compose.material.Text",
      "androidx.compose.runtime.Composable",
      "androidx.compose.runtime.getValue",
      "androidx.compose.runtime.mutableStateOf",
      "androidx.compose.runtime.remember",
      "androidx.compose.runtime.setValue"
    ],
    "code": "import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.setValue\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyApp()\n        }\n    }\n}\n\n@Composable\nfun MyApp() {\n    // Remember a mutable state that represents the count\n    var count by remember { mutableStateOf(0) }\n\n    Column {\n        Text(text = \"You've pressed the button $count times.\")\n        Button(onClick = { count++ }) {\n            Text(\"Press me\")\n        }\n    }\n}",
    "filename": "86c4e3f7fe418d1276ea0fbd2b040674_0.kt"
  },
  {
    "conversation_hash": "9038d26b677ea65bb55c4ef216b69b30",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "val searchBar = findViewById<EditText>(R.id.searchBar)\nval clearButton = findViewById<Button>(R.id.clearButton)\n\nsearchBar.addTextChangedListener(object : TextWatcher {\n    override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\n\n    override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n        if (s?.isNotEmpty() == true) {\n            clearButton.visibility = View.VISIBLE\n        } else {\n            clearButton.visibility = View.GONE\n        }\n    }\n\n    override fun afterTextChanged(s: Editable?) {}\n})",
    "filename": "9038d26b677ea65bb55c4ef216b69b30_1.kt"
  },
  {
    "conversation_hash": "e0be0c35f4d25ed59e13aa4057760a7a",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean {\n    when (keyCode) {\n        KeyEvent.KEYCODE_VOLUME_UP, KeyEvent.KEYCODE_VOLUME_DOWN -> {\n            takePhoto()\n            return true\n        }\n    }\n    return super.onKeyDown(keyCode, event)\n}",
    "filename": "e0be0c35f4d25ed59e13aa4057760a7a_2.kt"
  },
  {
    "conversation_hash": "e0be0c35f4d25ed59e13aa4057760a7a",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface UploadAPI {\n    @Multipart\n    @POST(\"/upload\")\n    fun uploadImage(@Part image: MultipartBody.Part): Call<ResponseBody>\n}",
    "filename": "e0be0c35f4d25ed59e13aa4057760a7a_4.kt"
  },
  {
    "conversation_hash": "e0be0c35f4d25ed59e13aa4057760a7a",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "val retrofit = Retrofit.Builder()\n    .baseUrl(\"http://yourserver.com/\")\n    .build()\nval service = retrofit.create(UploadAPI::class.java)\nval call = service.uploadImage(body)\ncall.enqueue(object: Callback<ResponseBody> {\n    override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {\n        // Handle the successful response\n    }\n\n    override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\n        // Handle the error\n    }\n})",
    "filename": "e0be0c35f4d25ed59e13aa4057760a7a_5.kt"
  },
  {
    "conversation_hash": "e0be0c35f4d25ed59e13aa4057760a7a",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (requestCode == WRITE_REQUEST_CODE) {\n        if (resultCode == Activity.RESULT_OK) {\n            // The user granted write access to the specific URIs in the list.\n        } else {\n            // The user did not grant write access to the specific URIs in the list.\n        }\n    }\n}",
    "filename": "e0be0c35f4d25ed59e13aa4057760a7a_11.kt"
  },
  {
    "conversation_hash": "277bbea334a375e2c1c3007aba8ea36f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.Manifest",
      "android.content.Context",
      "android.content.pm.PackageManager",
      "android.graphics.ImageFormat",
      "android.hardware.camera2.",
      "android.media.ImageReader",
      "android.os.Bundle",
      "android.os.Handler",
      "android.os.HandlerThread",
      "android.util.SparseIntArray",
      "android.view.Surface",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.core.content.ContextCompat"
    ],
    "code": "package com.example.camera_scale\n\nimport android.Manifest\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.graphics.ImageFormat\nimport android.hardware.camera2.*\nimport android.media.ImageReader\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.HandlerThread\nimport android.util.SparseIntArray\nimport android.view.Surface\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.ContextCompat\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var cameraManager: CameraManager\n    private lateinit var cameraId: String\n    private lateinit var imageReader: ImageReader\n    private lateinit var cameraDevice: CameraDevice\n    private lateinit var cameraCaptureSession: CameraCaptureSession\n    private lateinit var backgroundHandler: Handler\n    private lateinit var backgroundThread: HandlerThread\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // Check camera permission\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\n            requestPermissions(arrayOf(Manifest.permission.CAMERA), CAMERA_PERMISSION_REQUEST_CODE)\n        } else {\n            setUpCamera()\n        }\n    }\n\n    private fun setUpCamera() {\n        cameraManager = getSystemService(Context.CAMERA_SERVICE) as CameraManager\n        cameraId = getCameraId()\n        imageReader = ImageReader.newInstance(640, 480, ImageFormat.JPEG, 1)\n        imageReader.setOnImageAvailableListener(onImageAvailableListener, backgroundHandler)\n\n        openCamera()\n    }\n\n    private fun openCamera() {\n        cameraManager.openCamera(cameraId, cameraStateCallback, backgroundHandler)\n    }\n\n    private fun getCameraId(): String {\n        val cameraIds = cameraManager.cameraIdList\n        for (id in cameraIds) {\n            val cameraCharacteristics = cameraManager.getCameraCharacteristics(id)\n            if (cameraCharacteristics.get(CameraCharacteristics.LENS_FACING) == CameraCharacteristics.LENS_FACING_BACK) {\n                return id\n            }\n        }\n        return \"\"\n    }\n\n    private val onImageAvailableListener = ImageReader.OnImageAvailableListener { reader ->\n        val image = reader.acquireLatestImage()\n        // Handle image data here\n        image.close()\n    }\n\n    private val cameraStateCallback = object : CameraDevice.StateCallback() {\n        override fun onOpened(camera: CameraDevice) {\n            cameraDevice = camera\n            startPreview()\n        }\n\n        override fun onDisconnected(camera: CameraDevice) {\n            cameraDevice.close()\n        }\n\n        override fun onError(camera: CameraDevice, error: Int) {\n            cameraDevice.close()\n        }\n    }\n\n    private val captureStateCallback = object : CameraCaptureSession.StateCallback() {\n        override fun onConfigureFailed(session: CameraCaptureSession) {}\n\n        override fun onConfigured(session: CameraCaptureSession) {\n            cameraCaptureSession = session\n            cameraCaptureSession.setRepeatingRequest(cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW).build(), null, backgroundHandler)\n        }\n    }\n\n    private fun startPreview() {\n        val captureRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW)\n        captureRequestBuilder.addTarget(imageReader.surface)\n        cameraDevice.createCaptureSession(listOf(imageReader.surface), captureStateCallback, backgroundHandler)\n    }\n\n    private fun takePhoto() {\n        val captureRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE)\n        captureRequestBuilder.addTarget(imageReader.surface)\n        val rotation = windowManager.defaultDisplay.rotation\n        captureRequestBuilder.set(CaptureRequest.JPEG_ORIENTATION, ORIENTATIONS.get(rotation))\n        cameraCaptureSession.capture(captureRequestBuilder.build(), null, backgroundHandler)\n    }\n\n    companion object {\n        private val ORIENTATIONS = SparseIntArray().apply {\n            append(Surface.ROTATION_0, 0)\n            append(Surface.ROTATION_90, 90)\n            append(Surface.ROTATION_180, 180)\n            append(Surface.ROTATION_270, 270)\n        }\n\n        private const val CAMERA_PERMISSION_REQUEST_CODE = 200\n    }\n\n    override fun onResume() {\n        super.onResume()\n        startBackgroundThread()\n    }\n\n    override fun onPause() {\n        stopBackgroundThread()\n        super.onPause()\n    }\n\n    private fun startBackgroundThread() {\n        backgroundThread = HandlerThread(\"CameraBackground\").also { it.start() }\n        backgroundHandler = Handler(backgroundThread.looper)\n    }\n\n    private fun stopBackgroundThread() {\n        backgroundThread.quitSafely()\n        try {\n            backgroundThread.join()\n            backgroundThread = null\n            backgroundHandler = null\n        } catch (e: InterruptedException) {\n            e.printStackTrace()\n        }\n    }\n}",
    "filename": "277bbea334a375e2c1c3007aba8ea36f_0.kt"
  },
  {
    "conversation_hash": "d487b82376c952b84f949c52405fef93",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.view.Surface",
      "is"
    ],
    "code": "import android.view.Surface  // Ensure this import is correct\n\n// ...\n\nval textureView: TextureView = //... initialize your TextureView here\nval previewRequestBuilder: CaptureRequest.Builder  //... initialize your CaptureRequest builder here\n\ncameraDevice.createCaptureSession(\n    listOf(Surface(textureView.surfaceTexture)), // Use android.view.Surface\n    object : CameraCaptureSession.StateCallback() {\n        override fun onConfigured(session: CameraCaptureSession) {\n            cameraCaptureSession = session\n            cameraCaptureSession.setRepeatingRequest(\n                previewRequestBuilder.build(),\n                null,\n                null\n            )\n        }\n\n        override fun onConfigureFailed(session: CameraCaptureSession) {\n            // Handle configuration failure\n        }\n    }\n)\n\n// ...",
    "filename": "d487b82376c952b84f949c52405fef93_1.kt"
  },
  {
    "conversation_hash": "681e38e209c9e9c5eedbd419bc0f2576",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "cameraManager.openCamera(cameraId, object : CameraDevice.StateCallback() {\n    override fun onOpened(camera: CameraDevice) {\n        cameraDevice = camera\n        createCameraPreviewSession()\n    }\n\n    override fun onDisconnected(cameraDevice: CameraDevice) {\n        cameraDevice.close()\n    }\n\n    override fun onError(cameraDevice: CameraDevice, error: Int) {\n        cameraDevice.close()\n        // handle error appropriately\n    }\n}, null)",
    "filename": "681e38e209c9e9c5eedbd419bc0f2576_0.kt"
  },
  {
    "conversation_hash": "681e38e209c9e9c5eedbd419bc0f2576",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onSurfaceTextureAvailable(surfaceTexture: SurfaceTexture, width: Int, height: Int) {\n    if (ContextCompat.checkSelfPermission(this@MainActivity, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {\n        openCamera()\n    }\n}",
    "filename": "681e38e209c9e9c5eedbd419bc0f2576_1.kt"
  },
  {
    "conversation_hash": "681e38e209c9e9c5eedbd419bc0f2576",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {\n    super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n    if (requestCode == CAMERA_PERMISSION_REQUEST_CODE) {\n        if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n            // Permission was granted, open the camera\n            if (textureView.isAvailable) {\n                openCamera()\n            }\n        } else {\n            // Permission was denied, show an error message\n            Toast.makeText(this, \"Camera permission is required\", Toast.LENGTH_SHORT).show()\n        }\n    }\n}",
    "filename": "681e38e209c9e9c5eedbd419bc0f2576_2.kt"
  },
  {
    "conversation_hash": "681e38e209c9e9c5eedbd419bc0f2576",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun openCamera() {\n    try {\n        cameraManager = getSystemService(Context.CAMERA_SERVICE) as CameraManager\n        cameraId = getCameraId()\n\n        // Ensure camera permissions are granted\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\n            // Permission is not granted\n            return\n        }\n\n        cameraManager.openCamera(cameraId, object : CameraDevice.StateCallback() {\n            override fun onOpened(camera: CameraDevice) {\n                cameraDevice = camera\n                createCameraPreviewSession()\n            }\n\n            override fun onDisconnected(cameraDevice: CameraDevice) {\n                cameraDevice.close()\n            }\n\n            override fun onError(cameraDevice: CameraDevice, error: Int) {\n                cameraDevice.close()\n                // Handle the error adequately in production code.\n            }\n        }, null)\n    } catch (e: CameraAccessException) {\n        // Handle the exception.\n    }\n}",
    "filename": "681e38e209c9e9c5eedbd419bc0f2576_3.kt"
  },
  {
    "conversation_hash": "681e38e209c9e9c5eedbd419bc0f2576",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun openCamera() {\n    try {\n        cameraManager = getSystemService(Context.CAMERA_SERVICE) as CameraManager\n        cameraId = getCameraId()\n\n        // Ensure camera permissions are granted\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {\n            // Permission is not granted\n            return\n        }\n\n        cameraManager.openCamera(cameraId, object : CameraDevice.StateCallback() {\n            override fun onOpened(camera: CameraDevice) {\n                cameraDevice = camera\n                createCameraPreviewSession()\n            }\n\n            override fun onDisconnected(camera: CameraDevice) {\n                cameraDevice.close()\n            }\n\n            override fun onError(camera: CameraDevice, error: Int) {\n                cameraDevice.close()\n                // Handle the error adequately in production code.\n            }\n        }, null)\n    } catch (e: CameraAccessException) {\n        // Handle the exception.\n    }\n}\n\nprivate fun createCameraPreviewSession() {\n    val texture = textureView.surfaceTexture\n    texture.setDefaultBufferSize(textureView.width, textureView.height)\n    val surface = Surface(texture)\n\n    try {\n        val previewRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW)\n        previewRequestBuilder.addTarget(surface)\n\n        cameraDevice.createCaptureSession(listOf(surface), object : CameraCaptureSession.StateCallback() {\n            override fun onConfigured(session: CameraCaptureSession) {\n                // The camera is already closed\n                if (!::cameraDevice.isInitialized) {\n                    return\n                }\n\n                cameraCaptureSession = session\n\n                try {\n                    // Auto focus should be continuous for camera preview.\n                    previewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE, CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE)\n                    // Flash is automatically enabled when necessary.\n                    // set appropriate controls for the flash if needed\n\n                    // Finally, we start displaying the camera preview.\n                    val previewRequest = previewRequestBuilder.build()\n                    cameraCaptureSession.setRepeatingRequest(previewRequest, null, null)\n                } catch (e: CameraAccessException) {\n                    // Handle the exception.\n                }\n            }\n\n            override fun onConfigureFailed(session: CameraCaptureSession) {\n                Toast.makeText(this@MainActivity, \"Failed to configure camera.\", Toast.LENGTH_SHORT).show()\n            }\n        }, null)\n    } catch (e: CameraAccessException) {\n        // Handle the exception.\n    }\n}",
    "filename": "681e38e209c9e9c5eedbd419bc0f2576_4.kt"
  },
  {
    "conversation_hash": "681e38e209c9e9c5eedbd419bc0f2576",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "@SuppressLint(\"RestrictedApi\")\noverride fun dispatchKeyEvent(event: KeyEvent): Boolean {\n    Log.d(\"MainActivity\", \"Key event dispatched: ${event.keyCode}\")\n    if (event.action == KeyEvent.ACTION_DOWN) {\n        when (event.keyCode) {\n            KeyEvent.KEYCODE_VOLUME_UP -> {\n                if (::cameraDevice.isInitialized) {\n                    takePicture()\n                }\n                return true\n            }\n            KeyEvent.KEYCODE_VOLUME_DOWN -> {\n                if (::cameraDevice.isInitialized) {\n                    takePicture()\n                }\n                return true\n            }\n        }\n    }\n    return super.dispatchKeyEvent(event)\n}",
    "filename": "681e38e209c9e9c5eedbd419bc0f2576_5.kt"
  },
  {
    "conversation_hash": "681e38e209c9e9c5eedbd419bc0f2576",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun takePicture() {\n    if (cameraDevice != null && cameraCaptureSession != null) {\n        val captureRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE)\n        captureRequestBuilder.addTarget(imageReader.surface) // imageReader is not initialized!\n        cameraCaptureSession.capture(captureRequestBuilder.build(), null, null)\n    } else {\n        Log.e(\"MainActivity\", \"Camera device or capture session is not initialized\")\n    }\n}",
    "filename": "681e38e209c9e9c5eedbd419bc0f2576_6.kt"
  },
  {
    "conversation_hash": "681e38e209c9e9c5eedbd419bc0f2576",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun setUpImageReader() {\n    // Assuming you've already got the desired width and height\n    val width = 640 // Replace with actual width\n    val height = 480 // Replace with actual height\n\n    imageReader = ImageReader.newInstance(width, height, ImageFormat.JPEG, 2)\n\n    imageReader.setOnImageAvailableListener(onImageAvailableListener, null)\n}",
    "filename": "681e38e209c9e9c5eedbd419bc0f2576_7.kt"
  },
  {
    "conversation_hash": "11d8c858f3a2ce27a8eeb64d3766d5fe",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun openCamera() {\n    // ... existing code\n\n    setUpImageReader() // Add this line\n}",
    "filename": "11d8c858f3a2ce27a8eeb64d3766d5fe_1.kt"
  },
  {
    "conversation_hash": "11d8c858f3a2ce27a8eeb64d3766d5fe",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun setUpImageReader() {\n    val width = 640 // Example width\n    val height = 480 // Example height\n    imageReader = ImageReader.newInstance(width, height, ImageFormat.JPEG, 2)\n    \n    imageReader.setOnImageAvailableListener(\n        {\n            val image = it.acquireNextImage()\n            val buffer = image.planes[0].buffer\n            val data = ByteArray(buffer.remaining())\n            buffer.get(data)\n            image.close()\n            sendImageToServer(data)\n        }, Executors.newSingleThreadExecutor()\n    )\n}",
    "filename": "11d8c858f3a2ce27a8eeb64d3766d5fe_2.kt"
  },
  {
    "conversation_hash": "11d8c858f3a2ce27a8eeb64d3766d5fe",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "private fun sendImageToServer(imageData: ByteArray) {\n    // Here I'm using OkHttp for the POST request\n    // You need to replace \"your_server_endpoint\" with your actual server URL\n    val client = OkHttpClient()\n\n    // Convert ByteArray to File\n    val tempFile = File.createTempFile(\"image\", \".jpg\", cacheDir).apply {\n        writeBytes(imageData)\n        deleteOnExit()\n    }\n\n    // Prepare the request body for multipart\n    val requestBody = MultipartBody.Builder().setType(MultipartBody.FORM)\n        .addFormDataPart(\"image\", tempFile.name, tempFile.asRequestBody(\"image/jpeg\".toMediaType()))\n        .build()\n\n    // Create the request\n    val request = Request.Builder()\n        .url(\"your_server_endpoint\")\n        .post(requestBody)\n        .build()\n\n    // Asynchronously execute the HTTP request\n    client.newCall(request).enqueue(object : Callback {\n        override fun onFailure(call: Call, e: IOException) {\n            // Handle the error\n            e.printStackTrace()\n        }\n        override fun onResponse(call: Call, response: Response) {\n            // Handle the response from the server\n            if (response.isSuccessful) {\n                // Do something with the successful response if needed\n            }\n        }\n    })\n}",
    "filename": "11d8c858f3a2ce27a8eeb64d3766d5fe_3.kt"
  },
  {
    "conversation_hash": "d490da7193d55e046cbcfb750c7a6da4",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun sendImageToServer(imageBitmap: Bitmap) {\n    val outputStream = ByteArrayOutputStream()\n    imageBitmap.compress(Bitmap.CompressFormat.JPEG, 90, outputStream)\n    val mediaType = MediaType.parse(\"image/jpeg\")\n    val requestBody = RequestBody.create(mediaType, outputStream.toByteArray())\n    val request = Request.Builder()\n            .url(\"http://yourserver.com/upload\")\n            .post(requestBody)\n            .build()\n\n    // Asynchronously send the request\n    OkHttpClient().newCall(request).enqueue(object : Callback {\n        override fun onFailure(call: Call, e: IOException) {\n            // Handle the error\n        }\n\n        override fun onResponse(call: Call, response: Response) {\n            if (response.isSuccessful) {\n                // Handle success\n            } else {\n                // Handle failure\n            }\n        }\n    })\n}",
    "filename": "d490da7193d55e046cbcfb750c7a6da4_1.kt"
  },
  {
    "conversation_hash": "69aa4e402a5feed605f48d61aadbccd4",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ChatScreen(viewModel: ChatViewModel) {\n    val messages by viewModel.messages.observeAsState(initial = emptyList())\n    \n    Column {\n        LazyColumn(modifier = Modifier.weight(1f)) {\n            items(messages) { message ->\n                Text(text = message.content)\n            }\n        }\n        Row {\n            var text by remember { mutableStateOf(\"\") }\n            \n            TextField(\n                value = text,\n                onValueChange = { newText -> text = newText },\n                modifier = Modifier.weight(1f)\n            )\n            Button(onClick = {\n                viewModel.sendMessage(text)\n                text = \"\"\n            }) {\n                Text(\"Send\")\n            }\n        }\n    }\n}",
    "filename": "69aa4e402a5feed605f48d61aadbccd4_4.kt"
  },
  {
    "conversation_hash": "3134a01f875c385e915863730fff0f86",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.Response",
      "retrofit2.http.Body",
      "retrofit2.http.Headers",
      "retrofit2.http.POST"
    ],
    "code": "// ApiService.kt\n\nimport retrofit2.http.POST\nimport retrofit2.http.Body\nimport retrofit2.Response\nimport retrofit2.http.Headers\n\ninterface ApiService {\n    @POST(\"message\")\n    @Headers(\"Accept: application/json\")\n    suspend fun sendMessage(@Body messageRequest: MessageRequest): Response<MessageResponse>\n}\n\ndata class MessageRequest(val message: String)\n\ndata class MessageResponse(val success: Boolean)",
    "filename": "3134a01f875c385e915863730fff0f86_2.kt"
  },
  {
    "conversation_hash": "3134a01f875c385e915863730fff0f86",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.material.Button",
      "androidx.compose.material.Text",
      "androidx.compose.material.TextField",
      "androidx.compose.runtime.",
      "androidx.compose.ui.platform.LocalContext",
      "kotlinx.coroutines.CoroutineScope",
      "kotlinx.coroutines.Dispatchers",
      "kotlinx.coroutines.launch"
    ],
    "code": "// MessageScreen.kt\n\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.material.TextField\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.platform.LocalContext\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\n\n@Composable\nfun MessageScreen() {\n    var messageText by remember { mutableStateOf(\"\") }\n    val context = LocalContext.current\n\n    TextField(\n        value = messageText,\n        onValueChange = { messageText = it },\n        label = { Text(\"Enter your message\") }\n    )\n\n    Button(onClick = {\n        CoroutineScope(Dispatchers.IO).launch {\n            try {\n                val response = RetrofitInstance.api.sendMessage(MessageRequest(messageText))\n                if (response.isSuccessful && response.body()?.success == true) {\n                    // Handle the successful response\n                } else {\n                    // Handle failure\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n                // Handle exceptions\n            }\n        }\n    }) {\n        Text(\"Send Message\")\n    }\n}",
    "filename": "3134a01f875c385e915863730fff0f86_5.kt"
  },
  {
    "conversation_hash": "06e1bba6824b7ecda4ac75172bc57dd7",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.Response",
      "retrofit2.http.Body",
      "retrofit2.http.POST"
    ],
    "code": "// ApiService.kt\n\nimport retrofit2.Response\nimport retrofit2.http.Body\nimport retrofit2.http.POST\n\ninterface ApiService {\n\n    @POST(\"/api/message\")\n    suspend fun sendMessage(@Body messageData: MessageData): Response<ApiResponse>\n}\n\ndata class MessageData(val message: String)\n\ndata class ApiResponse(val success: Boolean, val message: String)",
    "filename": "06e1bba6824b7ecda4ac75172bc57dd7_4.kt"
  },
  {
    "conversation_hash": "06e1bba6824b7ecda4ac75172bc57dd7",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "okhttp3.OkHttpClient",
      "okhttp3.logging.HttpLoggingInterceptor",
      "retrofit2.Retrofit",
      "retrofit2.converter.gson.GsonConverterFactory"
    ],
    "code": "// RetrofitInstance.kt\n\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport okhttp3.OkHttpClient\nimport okhttp3.logging.HttpLoggingInterceptor\n\nobject RetrofitInstance {\n    val apiService: ApiService by lazy {\n        Retrofit.Builder()\n            .baseUrl(\"http://your-api-url.com/\") // Replace with your API base URL\n            .addConverterFactory(GsonConverterFactory.create())\n            .client(okHttpClient())\n            .build()\n            .create(ApiService::class.java)\n    }\n\n    private fun okHttpClient() = OkHttpClient.Builder()\n        .addInterceptor(HttpLoggingInterceptor().apply {\n            level = HttpLoggingInterceptor.Level.BODY\n        })\n        .build()\n}",
    "filename": "06e1bba6824b7ecda4ac75172bc57dd7_5.kt"
  },
  {
    "conversation_hash": "06e1bba6824b7ecda4ac75172bc57dd7",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "android.widget.Toast",
      "androidx.compose.material.Button",
      "androidx.compose.material.Text",
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.platform.LocalContext",
      "kotlinx.coroutines.Dispatchers",
      "kotlinx.coroutines.withContext",
      "retrofit2.Response"
    ],
    "code": "import androidx.compose.runtime.Composable\nimport android.widget.Toast\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.ui.platform.LocalContext\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext\nimport retrofit2.Response\n\n@Composable\nfun SendMessageButton(message: String) {\n    val context = LocalContext.current\n    Button(onClick = {\n        // Call your API here\n        sendMessage(message) { response ->\n            if (response.isSuccessful) {\n                Toast.makeText(context, \"Message sent successfully!\", Toast.LENGTH_LONG).show()\n            } else {\n                Toast.makeText(context, \"Failed to send message\", Toast.LENGTH_LONG).show()\n            }\n        }\n    }) {\n        Text(text = \"Send Message\")\n    }\n}\n\nsuspend fun sendMessage(message: String, onResult: (Response<ApiResponse>) -> Unit) {\n    withContext(Dispatchers.IO) {\n        val response = RetrofitInstance.apiService.sendMessage(MessageData(message))\n        onResult(response)\n    }\n}",
    "filename": "06e1bba6824b7ecda4ac75172bc57dd7_6.kt"
  },
  {
    "conversation_hash": "cbb358f57711f22a32fd4af06edc723d",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.Response",
      "retrofit2.http.Body",
      "retrofit2.http.POST"
    ],
    "code": "import retrofit2.Response\nimport retrofit2.http.Body\nimport retrofit2.http.POST\n\ninterface ApiService {\n    @POST(\"send-message\")\n    suspend fun sendMessage(@Body messageData: MessageData): Response<Any>\n}\n\ndata class MessageData(val message: String)",
    "filename": "cbb358f57711f22a32fd4af06edc723d_4.kt"
  },
  {
    "conversation_hash": "cbb358f57711f22a32fd4af06edc723d",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "okhttp3.OkHttpClient",
      "retrofit2.Retrofit",
      "retrofit2.converter.gson.GsonConverterFactory"
    ],
    "code": "import okhttp3.OkHttpClient\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nobject NetworkModule {\n    private const val BASE_URL = \"https://your-laravel-api.com/api/\"\n\n    private fun provideOkHttpClient(): OkHttpClient {\n        val logging = HttpLoggingInterceptor().apply {\n            level = HttpLoggingInterceptor.Level.BODY\n        }\n        return OkHttpClient.Builder()\n            .addInterceptor(logging)\n            .build()\n    }\n\n    fun provideRetrofitService(): ApiService {\n        return Retrofit.Builder()\n            .baseUrl(BASE_URL)\n            .client(provideOkHttpClient())\n            .addConverterFactory(GsonConverterFactory.create())\n            .build()\n            .create(ApiService::class.java)\n    }\n}",
    "filename": "cbb358f57711f22a32fd4af06edc723d_5.kt"
  },
  {
    "conversation_hash": "cbb358f57711f22a32fd4af06edc723d",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun YourComposeScreen() {\n    val apiService = NetworkModule.provideRetrofitService()\n    val coroutineScope = rememberCoroutineScope()\n    val messageState = remember { mutableStateOf(\"Your initial message\") }\n\n    TextField(\n        value = messageState.value,\n        onValueChange = { messageState.value = it },\n        label = { Text(\"Enter your message\") }\n    )\n    Button(onClick = {\n        coroutineScope.launch {\n            try {\n                val response = apiService.sendMessage(MessageData(messageState.value))\n                if (response.isSuccessful) {\n                    // Handle successful response\n                } else {\n                    // Handle error\n                }\n            } catch (e: Exception) {\n                // Handle exception\n            }\n        }\n    }) {\n        Text(\"Send Message\")\n    }\n}",
    "filename": "cbb358f57711f22a32fd4af06edc723d_6.kt"
  },
  {
    "conversation_hash": "0d655c098076a313eed6386bb3a8d678",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.http.Body",
      "retrofit2.http.POST"
    ],
    "code": "// MessageService.kt\n\nimport retrofit2.http.Body\nimport retrofit2.http.POST\n\ninterface MessageService {\n    @POST(\"/api/message\")\n    suspend fun sendMessage(@Body message: Message): ApiResponse\n}\n\n// Data classes for the request and response\ndata class Message(val message: String)\ndata class ApiResponse(val message: String)",
    "filename": "0d655c098076a313eed6386bb3a8d678_3.kt"
  },
  {
    "conversation_hash": "0d655c098076a313eed6386bb3a8d678",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "Jetpack",
      "androidx.compose.material.Button",
      "androidx.compose.material.Text",
      "androidx.compose.runtime.Composable",
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewModelScope",
      "kotlinx.coroutines."
    ],
    "code": "import androidx.compose.runtime.Composable\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.*\n\nclass MessageViewModel : ViewModel() {\n    // Function to send the message\n    fun sendMessage(messageText: String) {\n        viewModelScope.launch(Dispatchers.IO) {\n            try {\n                val response = RetrofitClient.instance.sendMessage(Message(messageText))\n                if (response.message == \"Message received successfully.\") {\n                    // Handle the successful response\n                    println(\"Message sent successfully\")\n                } else {\n                    // Handle any error response\n                    println(\"Failed to send message\")\n                }\n            } catch (e: Exception) {\n                // Handle network or other unexpected errors\n                e.printStackTrace()\n            }\n        }\n    }\n}\n\n@Composable\nfun SendMessageScreen(viewModel: MessageViewModel) {\n    // Replace with your actual UI components and use the `viewModel` to send messages\n    Button(onClick = {\n        viewModel.sendMessage(\"Hello from Jetpack Compose!\")\n    }) {\n        Text(\"Send Message\")\n    }\n}",
    "filename": "0d655c098076a313eed6386bb3a8d678_5.kt"
  },
  {
    "conversation_hash": "a2bb6cab0aaa0ccc87cb51ef873f1ea6",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun ChatScreen(viewModel: ChatViewModel) {\n    val state = viewModel.messages.collectAsState()\n\n    Column {\n        LazyColumn {\n            items(state.value) { message ->\n                MessageRow(message)\n            }\n        }\n        MessageInputField(\n            onSend = { content ->\n                viewModel.sendMessage(content)\n            }\n        )\n    }\n}\n\n@Composable\nfun MessageRow(message: Message) {\n    // Layout for a single message row\n}\n\n@Composable\nfun MessageInputField(onSend: (String) -> Unit) {\n    var text by remember { mutableStateOf(\"\") }\n\n    Row(Modifier.fillMaxWidth()) {\n        TextField(\n            value = text,\n            onValueChange = { newText -> text = newText },\n            Modifier.weight(1f)\n        )\n        Button(\n            onClick = {\n                onSend(text)\n                text = \"\"\n            }\n        ) {\n            Text(\"Send\")\n        }\n    }\n}",
    "filename": "a2bb6cab0aaa0ccc87cb51ef873f1ea6_3.kt"
  },
  {
    "conversation_hash": "a2bb6cab0aaa0ccc87cb51ef873f1ea6",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.http."
    ],
    "code": "import retrofit2.http.*\n\ninterface ChatService {\n    @GET(\"messages\")\n    suspend fun getMessages(): List<Message>\n\n    @POST(\"messages\")\n    suspend fun postMessage(@Body message: Message): Message\n}\n\n// Assuming you have a Message data class\ndata class Message(\n    val id: Int,\n    val sender: String,\n    val content: String,\n    // ... other fields\n)",
    "filename": "a2bb6cab0aaa0ccc87cb51ef873f1ea6_5.kt"
  },
  {
    "conversation_hash": "a2bb6cab0aaa0ccc87cb51ef873f1ea6",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewModelScope",
      "kotlinx.coroutines.Dispatchers",
      "kotlinx.coroutines.flow.MutableStateFlow",
      "kotlinx.coroutines.flow.asStateFlow",
      "kotlinx.coroutines.launch"
    ],
    "code": "import androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.launch\n\nclass ChatViewModel : ViewModel() {\n    private val _messages = MutableStateFlow<List<Message>>(emptyList())\n    val messages = _messages.asStateFlow()\n\n    fun loadMessages() {\n        viewModelScope.launch(Dispatchers.IO) {\n            try {\n                val messagesFromApi = RetrofitClient.chatService.getMessages()\n                _messages.value = messagesFromApi\n            } catch (e: Exception) {\n                e.printStackTrace()\n                // Handle exceptions\n            }\n        }\n    }\n\n    fun sendMessage(content: String) {\n        viewModelScope.launch(Dispatchers.IO) {\n            try {\n                val message = Message(0, \"senderName\", content)\n                val response = RetrofitClient.chatService.postMessage(message)\n                // Update the message list with the response\n                _messages.value = listOf(response) + _messages.value\n            } catch (e: Exception) {\n                e.printStackTrace()\n                // Handle exceptions\n            }\n        }\n    }\n}",
    "filename": "a2bb6cab0aaa0ccc87cb51ef873f1ea6_7.kt"
  },
  {
    "conversation_hash": "a2bb6cab0aaa0ccc87cb51ef873f1ea6",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.",
      "androidx.compose.foundation.lazy.LazyColumn",
      "androidx.compose.material.",
      "androidx.compose.runtime.",
      "androidx.compose.ui.Modifier",
      "androidx.lifecycle.viewmodel.compose.viewModel"
    ],
    "code": "import androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.lifecycle.viewmodel.compose.viewModel\n\n@Composable\nfun ChatScreen(chatViewModel: ChatViewModel = viewModel()) {\n    // Initially load messages\n    LaunchedEffect(true) {\n        chatViewModel.loadMessages()\n    }\n\n    val messages by chatViewModel.messages.collectAsState()\n\n    Column {\n        // List of messages\n        LazyColumn(\n            modifier = Modifier.weight(1f),\n            reverseLayout = true // Latest messages at the bottom\n        ) {\n            items(messages.size) { index ->\n                MessageRow(messages[index])\n            }\n        }\n        // Input field to send messages\n        MessageInputField(\n            onSend = { content ->\n                chatViewModel.sendMessage(content)\n            }\n        )\n    }\n}\n\n@Composable\nfun MessageRow(message: Message) {\n    Text(text = message.content) // Simplified for clarity\n}\n\n@Composable\nfun MessageInputField(onSend: (String) -> Unit) {\n    var text by remember { mutableStateOf(\"\") }\n\n    Row(Modifier.fillMaxWidth()) {\n        TextField(\n            value = text,\n            onValueChange = { newText -> text = newText },\n            modifier = Modifier.weight(1f)\n        )\n        Button(\n            onClick = {\n                if (text.isNotBlank()) {\n                    onSend(text)\n                    text = \"\"\n                }\n            }\n        ) {\n            Text(\"Send\")\n        }\n    }\n}",
    "filename": "a2bb6cab0aaa0ccc87cb51ef873f1ea6_8.kt"
  },
  {
    "conversation_hash": "a2bb6cab0aaa0ccc87cb51ef873f1ea6",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.activity.ComponentActivity",
      "androidx.activity.compose.setContent",
      "androidx.compose.material.MaterialTheme",
      "androidx.compose.material.Surface"
    ],
    "code": "import android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Surface\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MaterialTheme {\n                Surface {\n                    ChatScreen()\n                }\n            }\n        }\n    }\n}",
    "filename": "a2bb6cab0aaa0ccc87cb51ef873f1ea6_9.kt"
  },
  {
    "conversation_hash": "df769e157b392b9a1b52c8f5029ccf76",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun TextInputAndSend() {\n    var text by remember { mutableStateOf(\"\") }\n\n    Column {\n        TextField(\n            value = text,\n            onValueChange = { text = it },\n            label = { Text(\"Enter your text\") }\n        )\n        Button(onClick = { sendTextToApi(text) }) {\n            Text(\"Send\")\n        }\n    }\n}",
    "filename": "df769e157b392b9a1b52c8f5029ccf76_0.kt"
  },
  {
    "conversation_hash": "df769e157b392b9a1b52c8f5029ccf76",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun sendTextToApi(text: String) {\n    CoroutineScope(Dispatchers.IO).launch {\n        val response = RetrofitInstance.apiService.sendText(text)\n        if (response.isSuccessful) {\n            // Handle success\n            Log.d(\"ApiSuccess\", \"Text sent successfully\")\n        } else {\n            // Handle error\n            Log.e(\"ApiError\", \"Failed to send text: ${response.errorBody()?.string()}\")\n        }\n    }\n}",
    "filename": "df769e157b392b9a1b52c8f5029ccf76_4.kt"
  },
  {
    "conversation_hash": "91fb7424ab9bbbb24a9d22816e1c281f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyActivity : AppCompatActivity() {\n    private lateinit var viewPager: ViewPager2\n    private var currentPage = 0\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_my)\n\n        viewPager = findViewById(R.id.viewPager)\n\n        if (savedInstanceState != null) {\n            currentPage = savedInstanceState.getInt(\"currentPage\", 0)\n        }\n\n        // Инициализация ViewPager2 и его адаптера\n\n        viewPager.setCurrentItem(currentPage, false)\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        outState.putInt(\"currentPage\", viewPager.currentItem)\n        super.onSaveInstanceState(outState)\n    }\n}",
    "filename": "91fb7424ab9bbbb24a9d22816e1c281f_0.kt"
  },
  {
    "conversation_hash": "b413ce9a880bee6e503f07ec71416507",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "androidx.fragment.app.Fragment",
      "androidx.recyclerview.widget.LinearLayoutManager",
      "androidx.recyclerview.widget.RecyclerView"
    ],
    "code": "import android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\n\nclass MyFragment : Fragment() {\n    private lateinit var recyclerView: RecyclerView\n    \n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        val view = inflater.inflate(R.layout.fragment_my, container, false)\n        \n        recyclerView = view.findViewById(R.id.recyclerView)\n        recyclerView.layoutManager = LinearLayoutManager(requireContext())\n        \n        // Добавьте код для настройки адаптера и передачи данных\n        \n        return view\n    }\n}",
    "filename": "b413ce9a880bee6e503f07ec71416507_0.kt"
  },
  {
    "conversation_hash": "2ee63e4d971416b3ad72f49caab2b09b",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "- HeadViewHolder (inner class)\n  - tvModified: TextView\n  - ivAlertIcon: ImageView\n  - tvAlertDate: TextView\n  - ibSetBgColor: ImageView\n- sBgSelectorBtnsMap: Map<Integer, Integer> (static final)\n- sBgSelectorSelectionMap: Map<Integer, Integer> (static final)\n- sFontSizeBtnsMap: Map<Integer, Integer> (static final)\n- sFontSelectorSelectionMap: Map<Integer, Integer> (static final)\n- TAG: String (static final)\n- mNoteHeaderHolder: HeadViewHolder\n- mHeadViewPanel: View\n- mNoteBgColorSelector: View\n- mFontSizeSelector: View\n- mNoteEditor: EditText\n- mNoteEditorPanel: View\n- mWorkingNote: WorkingNote\n- mSharedPrefs: SharedPreferences\n- mFontSizeId: int\n- PREFERENCE_FONT_SIZE: String (static final)\n- SHORTCUT_ICON_TITLE_MAX_LEN: int (static final)\n- TAG_CHECKED: String (static final)\n- TAG_UNCHECKED: String (static final)\n- mEditTextList: LinearLayout\n- mUserQuery: String\n- mPattern: Pattern\n\n...\n\n+ onCreate(savedInstanceState: Bundle): void\n+ onRestoreInstanceState(savedInstanceState: Bundle): void\n+ initActivityState(intent: Intent): boolean\n+ onResume(): void\n+ initNoteScreen(): void\n+ showAlertHeader(): void\n+ onNewIntent(intent: Intent): void\n+ onSaveInstanceState(outState: Bundle): void\n+ dispatchTouchEvent(ev: MotionEvent): boolean\n+ inRangeOfView(view: View, ev: MotionEvent): boolean\n+ initResources(): void\n+ onPause(): void\n+ updateWidget(): void\n+ onClick(v: View): void\n+ onBackPressed(): void\n+ clearSettingState(): boolean\n+ onBackgroundColorChanged(): void\n+ onPrepareOptionsMenu(menu: Menu): boolean\n+ onOptionsItemSelected(item: MenuItem): boolean\n+ setReminder(): void\n+ sendTo(context: Context, info: String): void\n+ createNewNote(): void\n+ deleteCurrentNote(): void\n+ isSyncMode(): boolean\n+ onClockAlertChanged(date: long, set: boolean): void\n+ onWidgetChanged(): void\n+ onEditTextDelete(index: int, text: String): void\n+ onEditTextEnter(index: int, text: String): void\n+ switchToListMode(text: String): void\n+ getHighlightQueryResult(fullText: String, userQuery: String): Spannable\n+ getListItem(item: String, index: int): View\n+ onTextChange(index: int, hasText: boolean): void\n+ onCheckListModeChanged(oldMode: int, newMode: int): void\n+ getWorkingText(): boolean\n+ saveNote(): boolean\n+ sendToDesktop(): void\n+ makeShortcutIconTitle(content: String): String\n+ showToast(resId: int): void\n+ showToast(resId: int, duration: int): void",
    "filename": "2ee63e4d971416b3ad72f49caab2b09b_6.kt"
  },
  {
    "conversation_hash": "8b22c7215802d1093d60d3c9454594e8",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "@startuml\n\nclass NotesListActivity {\n    - FOLDER_NOTE_LIST_QUERY_TOKEN: int\n    - FOLDER_LIST_QUERY_TOKEN: int\n    - MENU_FOLDER_DELETE: int\n    - MENU_FOLDER_VIEW: int\n    - MENU_FOLDER_CHANGE_NAME: int\n    - PREFERENCE_ADD_INTRODUCTION: String\n    - ListEditState: enum\n    - mState: ListEditState\n    - mBackgroundQueryHandler: BackgroundQueryHandler\n    - mNotesListAdapter: NotesListAdapter\n    - mNotesListView: ListView\n    - mAddNewNote: Button\n    - mDispatch: boolean\n    - mOriginY: int\n    - mDispatchY: int\n    - mTitleBar: TextView\n    - mCurrentFolderId: long\n    - mContentResolver: ContentResolver\n    - mModeCallBack: ModeCallback\n    - TAG: String\n    - NOTES_LISTVIEW_SCROLL_RATE: int\n    - mFocusNoteDataItem: NoteItemData\n    - NORMAL_SELECTION: String\n    - ROOT_FOLDER_SELECTION: String\n    - REQUEST_CODE_OPEN_NODE: int\n    - REQUEST_CODE_NEW_NODE: int\n\n    + onCreate(savedInstanceState: Bundle): void\n    + onActivityResult(requestCode: int, resultCode: int, data: Intent): void\n    - setAppInfoFromRawRes(): void\n    + onStart(): void\n    - initResources(): void\n    - ModeCallback()\n    - NewNoteOnTouchListener()\n    - startAsyncNotesListQuery(): void\n    - BackgroundQueryHandler(contentResolver: ContentResolver)\n    - showFolderListMenu(cursor: Cursor): void\n    - createNewNote(): void\n    - batchDelete(): void\n    - deleteFolder(folderId: long): void\n    - openNode(data: NoteItemData): void\n    - openFolder(data: NoteItemData): void\n    - showSoftInput(): void\n    - hideSoftInput(view: View): void\n    - showCreateOrModifyFolderDialog(create: boolean): void\n    + onBackPressed(): void\n    - updateWidget(appWidgetId: int, appWidgetType: int): void\n    + onContextMenuClosed(menu: Menu): void\n    + onContextItemSelected(item: MenuItem): boolean\n    + onPrepareOptionsMenu(menu: Menu): boolean\n    + onOptionsItemSelected(item: MenuItem): boolean\n    + onSearchRequested(): boolean\n    - exportNoteToText(): void\n    - isSyncMode(): boolean\n    - startPreferenceActivity(): void\n    - OnListItemClickListener()\n    - startQueryDestinationFolders(): void\n    + onItemLongClick(parent: AdapterView, view: View, position: int, id: long): boolean\n}\n\nclass ModeCallback {\n    - mDropDownMenu: DropdownMenu\n    - mActionMode: ActionMode\n    - mMoveMenu: MenuItem\n\n    + onCreateActionMode(mode: ActionMode, menu: Menu): boolean\n    - updateMenu(): void\n    + onPrepareActionMode(mode: ActionMode, menu: Menu): boolean\n    + onActionItemClicked(mode: ActionMode, item: MenuItem): boolean\n    + onDestroyActionMode(mode: ActionMode): void\n    + finishActionMode(): void\n    + onItemCheckedStateChanged(mode: ActionMode, position: int, id: long, checked: boolean): void\n    + onMenuItemClick(item: MenuItem): boolean\n}\n\nclass BackgroundQueryHandler {\n    + BackgroundQueryHandler(contentResolver: ContentResolver)\n    + onQueryComplete(token: int, cookie: Object, cursor: Cursor): void\n}\n\nclass OnListItemClickListener {\n    + onItemClick(parent: AdapterView, view: View, position: int, id: long): void\n}\n    \nNotesListActivity \"1\" *-- \"1\" ModeCallback : -mModeCallBack\nNotesListActivity \"1\" *-- \"1\" BackgroundQueryHandler : -mBackgroundQueryHandler\nNotesListActivity \"1\" *-- \"1\" OnListItemClickListener\n\n@enduml",
    "filename": "8b22c7215802d1093d60d3c9454594e8_2.kt"
  },
  {
    "conversation_hash": "e95850db69a2396cb2fc5027bb0f8529",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@startuml\n\nclass NotesListActivity {\n    - FOLDER_NOTE_LIST_QUERY_TOKEN: int\n    - FOLDER_LIST_QUERY_TOKEN: int\n    - MENU_FOLDER_DELETE: int\n    - MENU_FOLDER_VIEW: int\n    - MENU_FOLDER_CHANGE_NAME: int\n    - PREFERENCE_ADD_INTRODUCTION: String\n    - mState: ListEditState\n    - mBackgroundQueryHandler: BackgroundQueryHandler\n    - mNotesListAdapter: NotesListAdapter\n    - mNotesListView: ListView\n    - mAddNewNote: Button\n    - mDispatch: boolean\n    - mOriginY: int\n    - mDispatchY: int\n    - mTitleBar: TextView\n    - mCurrentFolderId: long\n    - mContentResolver: ContentResolver\n    - mModeCallBack: ModeCallback\n    - TAG: String\n    - NOTES_LISTVIEW_SCROLL_RATE: int\n    - mFocusNoteDataItem: NoteItemData\n    - NORMAL_SELECTION: String\n    - ROOT_FOLDER_SELECTION: String\n    - REQUEST_CODE_OPEN_NODE: int\n    - REQUEST_CODE_NEW_NODE: int\n\n    + onCreate(savedInstanceState: Bundle): void\n    + onActivityResult(requestCode: int, resultCode: int, data: Intent): void\n    + onStart(): void\n    + onClick(v: View): void\n    + onBackPressed(): void\n    + onSearchRequested(): boolean\n    + onPrepareOptionsMenu(menu: Menu): boolean\n    + onOptionsItemSelected(item: MenuItem): boolean\n    + onContextItemSelected(item: MenuItem): boolean\n    + onContextMenuClosed(menu: Menu): void\n    - initResources(): void\n    - setAppInfoFromRawRes(): void\n    - startAsyncNotesListQuery(): void\n    - showFolderListMenu(cursor: Cursor): void\n    - createNewNote(): void\n    - batchDelete(): void\n    - deleteFolder(folderId: long): void\n    - openNode(data: NoteItemData): void\n    - openFolder(data: NoteItemData): void\n    - showSoftInput(): void\n    - hideSoftInput(view: View): void\n    - showCreateOrModifyFolderDialog(create: boolean): void\n    - updateWidget(appWidgetId: int, appWidgetType: int): void\n    - exportNoteToText(): void\n    - isSyncMode(): boolean\n    - startPreferenceActivity(): void\n    - startQueryDestinationFolders(): void\n\n}\n\nclass NotesListAdapter {\n}\n\nclass BackgroundQueryHandler {\n}\n\nclass ModeCallback {\n}\n\nclass NoteItemData {\n}\n\nenum ListEditState {\n    NOTE_LIST\n    SUB_FOLDER\n    CALL_RECORD_FOLDER\n}\n\nNotesListActivity \"1\" *-- \"1\" NotesListAdapter : contains\nNotesListActivity \"1\" *-- \"1\" BackgroundQueryHandler : contains\nNotesListActivity \"1\" *-- \"1\" ModeCallback : contains\nNotesListActivity \"1\" *-- \"*\" NoteItemData : focusOn\nNotesListActivity \"1\" <-- ListEditState : state\n\n@enduml",
    "filename": "e95850db69a2396cb2fc5027bb0f8529_0.kt"
  },
  {
    "conversation_hash": "6d538f8705f3bbe3ad4fdfa12eb97110",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@startuml\n\nclass NotesListActivity {\n    - FOLDER_NOTE_LIST_QUERY_TOKEN: int\n    - FOLDER_LIST_QUERY_TOKEN: int\n    - MENU_FOLDER_DELETE: int\n    - MENU_FOLDER_VIEW: int\n    - MENU_FOLDER_CHANGE_NAME: int\n    - PREFERENCE_ADD_INTRODUCTION: String\n    - ListEditState: enum\n    - mState: ListEditState\n    - mBackgroundQueryHandler: BackgroundQueryHandler\n    - mNotesListAdapter: NotesListAdapter\n    - mNotesListView: ListView\n    - mAddNewNote: Button\n    - mDispatch: boolean\n    - mOriginY: int\n    - mDispatchY: int\n    - mTitleBar: TextView\n    - mCurrentFolderId: long\n    - mContentResolver: ContentResolver\n    - mModeCallBack: ModeCallback\n    - TAG: String\n    - NOTES_LISTVIEW_SCROLL_RATE: int\n    - mFocusNoteDataItem: NoteItemData\n    - NORMAL_SELECTION: String\n    - ROOT_FOLDER_SELECTION: String\n    - REQUEST_CODE_OPEN_NODE: int\n    - REQUEST_CODE_NEW_NODE: int\n    \n    + onCreate(savedInstanceState: Bundle): void\n    + onActivityResult(requestCode: int, resultCode: int, data: Intent): void\n    + onStart(): void\n    + onClick(v: View): void\n    + onSearchRequested(): boolean\n    + onContextMenuClosed(menu: Menu): void\n    + onContextItemSelected(item: MenuItem): boolean\n    + onPrepareOptionsMenu(menu: Menu): boolean\n    + onOptionsItemSelected(item: MenuItem): boolean\n    + onBackPressed(): void\n    + onItemLongClick(parent: AdapterView, view: View, position: int, id: long): boolean\n    \n    - setAppInfoFromRawRes(): void\n    - startAsyncNotesListQuery(): void\n    - initResources(): void\n    - showCreateOrModifyFolderDialog(create: boolean): void\n    - createNewNote(): void\n    - batchDelete(): void\n    - deleteFolder(folderId: long): void\n    - openNode(data: NoteItemData): void\n    - openFolder(data: NoteItemData): void\n    - showSoftInput(): void\n    - hideSoftInput(view: View): void\n    - exportNoteToText(): void\n    - isSyncMode(): boolean\n    - startPreferenceActivity(): void\n    - updateWidget(appWidgetId: int, appWidgetType: int): void\n    - showFolderListMenu(cursor: Cursor): void\n    - startQueryDestinationFolders(): void\n    \n    {static} + NOTES_LISTVIEW_SCROLL_RATE: int\n}\n\nclass BackgroundQueryHandler {\n    + onQueryComplete(token: int, cookie: Object, cursor: Cursor): void\n}\n\nclass ModeCallback {\n    - mDropDownMenu: DropdownMenu\n    - mActionMode: ActionMode\n    - mMoveMenu: MenuItem\n\n    + onCreateActionMode(mode: ActionMode, menu: Menu): boolean\n    + onPrepareActionMode(mode: ActionMode, menu: Menu): boolean\n    + onActionItemClicked(mode: ActionMode, item: MenuItem): boolean\n    + onDestroyActionMode(mode: ActionMode): void\n    + finishActionMode(): void\n    + onItemCheckedStateChanged(mode: ActionMode, position: int, id: long, checked: boolean): void\n    + onMenuItemClick(item: MenuItem): boolean\n    + updateMenu(): void\n}\n\nclass OnListItemClickListener {\n    + onItemClick(parent: AdapterView, view: View, position: int, id: long): void\n}\n\nclass NewNoteOnTouchListener {\n    + onTouch(v: View, event: MotionEvent): boolean\n}\n\nNotesListActivity *-- BackgroundQueryHandler\nNotesListActivity *-- ModeCallback\nNotesListActivity *-- OnListItemClickListener\nNotesListActivity *-- NewNoteOnTouchListener\n\n@enduml",
    "filename": "6d538f8705f3bbe3ad4fdfa12eb97110_0.kt"
  },
  {
    "conversation_hash": "564697c9bf6d750b68444a69ff216b77",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "task helloWorld {\n    doLast {\n        println 'Hello, World!'\n    }\n}",
    "filename": "564697c9bf6d750b68444a69ff216b77_4.kt"
  },
  {
    "conversation_hash": "5a19b6d27dc687a0cd752f60e0529df9",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "java.util.UUID",
      "net.fabricmc.api.ModInitializer",
      "net.minecraft.entity.EquipmentSlot",
      "net.minecraft.entity.attribute.EntityAttributeModifier",
      "net.minecraft.entity.attribute.EntityAttributes",
      "net.minecraft.item.Item",
      "net.minecraft.item.Items",
      "net.minecraft.util.Identifier",
      "net.minecraft.util.registry.Registry"
    ],
    "code": "package com.example.modid\n\nimport net.fabricmc.api.ModInitializer\nimport net.minecraft.entity.EquipmentSlot\nimport net.minecraft.entity.attribute.EntityAttributeModifier\nimport net.minecraft.entity.attribute.EntityAttributes\nimport net.minecraft.item.Item\nimport net.minecraft.item.Items\nimport net.minecraft.util.Identifier\nimport net.minecraft.util.registry.Registry\nimport java.util.UUID\n\nobject SwordSpeedMod : ModInitializer {\n    private val ATTACK_SPEED_MODIFIER_ID: UUID = UUID.fromString(\"FA233E1C-4180-4865-B01B-BCCE9785ACA3\")\n\n    override fun onInitialize() {\n        // Define the swords that should have the attack speed changed\n        val swords = listOf(\n            Items.WOODEN_SWORD, Items.STONE_SWORD,\n            Items.IRON_SWORD, Items.DIAMOND_SWORD,\n            Items.GOLDEN_SWORD, Items.NETHERITE_SWORD\n        )\n\n        // New attack speed value (4.0 is the default for swords, which has 0.6 sec delay)\n        // Here, we adjust it to correspond to 0.5 sec delay - higher is faster\n        val newAttackSpeed = 4.4\n\n        swords.forEach { sword ->\n            sword.addAttributeModifier(\n                EntityAttributes.GENERIC_ATTACK_SPEED,\n                EntityAttributeModifier(ATTACK_SPEED_MODIFIER_ID, \"Attack speed modifier\", newAttackSpeed - 4.0, EntityAttributeModifier.Operation.ADDITION),\n                EquipmentSlot.MAINHAND\n            )\n        }\n    }\n}",
    "filename": "5a19b6d27dc687a0cd752f60e0529df9_4.kt"
  },
  {
    "conversation_hash": "5a19b6d27dc687a0cd752f60e0529df9",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [
      "io.github.coolmineman.cheaterdeleter.events.PlayerMovementListener",
      "io.github.coolmineman.cheaterdeleter.modules.CDModule",
      "io.github.coolmineman.cheaterdeleter.objects.PlayerMoveC2SPacketView",
      "io.github.coolmineman.cheaterdeleter.objects.entity.CDPlayer",
      "io.github.coolmineman.cheaterdeleter.trackers.Trackers",
      "io.github.coolmineman.cheaterdeleter.util.BlockCollisionUtil",
      "io.github.coolmineman.cheaterdeleter.util.CollisionUtil"
    ],
    "code": "package io.github.coolmineman.cheaterdeleter.modules.movement\n\nimport io.github.coolmineman.cheaterdeleter.events.PlayerMovementListener\nimport io.github.coolmineman.cheaterdeleter.modules.CDModule\nimport io.github.coolmineman.cheaterdeleter.objects.PlayerMoveC2SPacketView\nimport io.github.coolmineman.cheaterdeleter.objects.entity.CDPlayer\nimport io.github.coolmineman.cheaterdeleter.trackers.Trackers\nimport io.github.coolmineman.cheaterdeleter.util.BlockCollisionUtil\nimport io.github.coolmineman.cheaterdeleter.util.CollisionUtil\n\nclass OnGroundVerticalCheck : CDModule(\"onground_vertical_check\"), PlayerMovementListener {\n\n    init {\n        PlayerMovementListener.EVENT.register(this)\n    }\n\n    override fun onMovement(player: CDPlayer, packet: PlayerMoveC2SPacketView, cause: PlayerMovementListener.MoveCause) {\n        val stepHeight = player.stepHeight\n        val currentTime = System.currentTimeMillis()\n\n        if (!enabledFor(player) || player.isSpectator() ||\n            !packet.isChangePosition || !packet.isOnGround ||\n            !player.isOnGround || currentTime - player.getTracked(Trackers.PLAYER_HIT_GROUND_TRACKER).lastInAir.get() <= 500 ||\n            BlockCollisionUtil.isNearby(player, 2.0, 4.0, BlockCollisionUtil.NON_SOLID_COLLISION) ||\n            (stepHeight <= 1f && CollisionUtil.isNearby(\n                player, packet.x.toDouble(), packet.y.toDouble(), packet.z.toDouble(),\n                0.2, 0.5, CollisionUtil.steppablePredicates(stepHeight)\n            ))\n        ) return\n\n        val ydelta = packet.y - player.packetY\n\n        when {\n            ydelta > if (stepHeight < 1f) 0.3 else stepHeight -> flagRollback(player, FlagSeverity.MAJOR, \"Player Moved Vertically While onGround $ydelta\")\n            ydelta < -0.9 -> flagRollback(player, FlagSeverity.MAJOR, \"Player Moved Vertically While onGround $ydelta\")\n        }\n    }\n\n    fun flagRollback(player: CDPlayer, severity: CDModule.FlagSeverity, message: String) {\n        if (flag(player, severity, message)) {\n            player.rollback()\n        }\n    }\n}",
    "filename": "5a19b6d27dc687a0cd752f60e0529df9_6.kt"
  },
  {
    "conversation_hash": "e0a2d509cb67e51cb9e24714b54bca67",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.",
      "androidx.compose.material.",
      "androidx.compose.runtime.",
      "androidx.compose.ui.Modifier",
      "androidx.compose.ui.unit.dp",
      "androidx.navigation.compose.rememberNavController"
    ],
    "code": "import androidx.compose.foundation.layout.*\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.compose.rememberNavController\n\n@Composable\nfun MyApp() {\n    val navController = rememberNavController()\n    Scaffold(\n        bottomBar = { MediaPlayerController() }\n    ) {\n        // Your navigation container goes here\n        NavHost(navController, startDestination = \"home\") {\n            composable(\"home\") { HomeScreen(navController) }\n            // ... other composable screens ...\n        }\n    }\n}\n\n@Composable\nfun MediaPlayerController() {\n    BottomAppBar( // You can customize this bar to make it look like a media player\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(intrinsicSize = IntrinsicSize.Min),\n        elevation = 8.dp\n    ) {\n        // For example a very simple media control with a play / pause button and a seek bar\n        Row(modifier = Modifier.padding(16.dp), horizontalArrangement = Arrangement.SpaceBetween) {\n            IconButton(onClick = { /* Handle play/pause */ }) {\n                Icon(Icons.Default.PlayArrow, contentDescription = \"Play/Pause\")\n            }\n            Slider(value = 0f, onValueChange = { /* Handle seek */ })\n        }\n    }\n}\n\n@Composable\nfun HomeScreen(navController: NavController) {\n    // Your home screen content goes here\n}",
    "filename": "e0a2d509cb67e51cb9e24714b54bca67_0.kt"
  },
  {
    "conversation_hash": "460084bfde1e8b47fb48c7577a7cd20e",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [],
    "code": "tasks.register<JavaExec>(\"runMyClass\") {\n    group = \"application\"\n    main = \"com.example.Main\"\n    classpath = sourceSets[\"main\"].runtimeClasspath\n    args(listOf(\"arg1\", \"arg2\")) // Optional: add arguments if needed\n}",
    "filename": "460084bfde1e8b47fb48c7577a7cd20e_17.kt"
  },
  {
    "conversation_hash": "d372839f5df9ecb65a619efbad6a9029",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface ExampleInterface {\n    fun doSomething()\n}\n\nenum class ExampleEnum : ExampleInterface {\n    FIRST {\n        override fun doSomething() {\n            println(\"Doing something for the first enum value.\")\n        }\n    },\n    SECOND {\n        override fun doSomething() {\n            println(\"Doing something for the second enum value.\")\n        }\n    }\n}\n\nfun main() {\n    val firstValue: ExampleEnum = ExampleEnum.FIRST\n    val secondValue: ExampleEnum = ExampleEnum.SECOND\n\n    firstValue.doSomething()   // Output: Doing something for the first enum value.\n    secondValue.doSomething()  // Output: Doing something for the second enum value.\n}",
    "filename": "d372839f5df9ecb65a619efbad6a9029_0.kt"
  },
  {
    "conversation_hash": "de3244d3a01d4981a05d87af20c7f941",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "for (ah in ab..ae) {\n    val ai = (ah + 0.5 - v) / u\n    if (ai * ai >= 1.0) continue\n\n    for (aj in ac..af) {\n        val ak = (aj + 0.5 - w) / u\n        if (ai * ai + ak * ak >= 1.0) continue\n\n        for (al in ad..ag) {\n            val am = (al + 0.5 - aa) / u\n            if (ai * ai + ak * ak + am * am >= 1.0) continue\n\n            val an = ah - x + (aj - y) * size + (al - z) * size * i\n            if (!bitSet.get(an)) {\n                bitSet.set(an)\n                mutable.set(ah, aj, al)\n                if (aj in -64 until 320 && (airCheck.get() == AirCheck.OFF || world.getBlockState(mutable).isOpaque()) && shouldPlace(world, mutable, discardOnAir, random)) {\n                    poses.add(Vec3d(ah.toDouble(), aj.toDouble(), al.toDouble()))\n                }\n            }\n        }\n    }\n}",
    "filename": "de3244d3a01d4981a05d87af20c7f941_4.kt"
  },
  {
    "conversation_hash": "de3244d3a01d4981a05d87af20c7f941",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Generating a sequence of all points in the specified range.\nval pointsSequence = sequence {\n    for (ah in ab..ae) {\n        val ai = (ah + 0.5 - v) / u\n        if (ai * ai >= 1.0) continue\n\n        for (aj in ac..af) {\n            val ak = (aj + 0.5 - w) / u\n            if (ai * ai + ak * ak >= 1.0) continue\n\n            for (al in ad..ag) {\n                val am = (al + 0.5 - aa) / u\n                if (ai * ai + ak * ak + am * am < 1.0) {\n                    yield(Triple(ah, aj, al))\n                }\n            }\n        }\n    }\n}\n\n// Processing each point in the sequence to filter and create Vec3d instances.\nval poses = pointsSequence\n    .mapNotNull { (ah, aj, al) ->\n        val an = ah - x + (aj - y) * size + (al - z) * size * i\n        if (!bitSet.get(an)) {\n            bitSet.set(an)\n            mutable.set(ah, aj, al)\n            if (aj in -64 until 320 && (airCheck.get() == AirCheck.OFF || world.getBlockState(mutable).isOpaque()) && shouldPlace(world, mutable, discardOnAir, random)) {\n                Vec3d(ah.toDouble(), aj.toDouble(), al.toDouble())\n            } else null\n        } else null\n    }\n    .toList()",
    "filename": "de3244d3a01d4981a05d87af20c7f941_5.kt"
  },
  {
    "conversation_hash": "de3244d3a01d4981a05d87af20c7f941",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun generatePoints(rangeA: IntRange, rangeB: IntRange, rangeC: IntRange, calcDist: (Int, Double, Double) -> Double): Sequence<Triple<Int, Int, Int>> {\n    return sequence {\n        rangeA.forEach { a ->\n            rangeB.forEach { b ->\n                rangeC.forEach { c ->\n                    yield(Triple(a, b, c))\n                }\n            }\n        }\n    }.filter { (a, b, c) -> calcDist(a, b, c) < 1.0 }\n}\n\nfun pointWithinSphere(ah: Int, aj: Int, al: Int, u: Double, v: Double, w: Double, aa: Double): Double {\n    val ai = (ah + 0.5 - v) / u\n    val ak = (aj + 0.5 - w) / u\n    val am = (al + 0.5 - aa) / u\n    return ai * ai + ak * ak + am * am\n}\n\nval validPoints = generatePoints(ab..ae, ac..af, ad..ag) { ah, aj, al ->\n    pointWithinSphere(ah, aj, al, u, v, w, aa)\n}.mapNotNull { (ah, aj, al) ->\n    val an = ah - x + (aj - y) * size + (al - z) * size * i\n    if (!bitSet.get(an)) {\n        bitSet.set(an)\n        mutable.set(ah, aj, al)\n        if (aj in -64 until 320 && (airCheck.get() == AirCheck.OFF || world.getBlockState(mutable).isOpaque()) && shouldPlace(world, mutable, discardOnAir, random)) {\n            Vec3d(ah.toDouble(), aj.toDouble(), al.toDouble())\n        } else null\n    } else null\n}.toList()",
    "filename": "de3244d3a01d4981a05d87af20c7f941_6.kt"
  },
  {
    "conversation_hash": "517925b80689f72b602fe42f70ae6aab",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class UserViewModel : ViewModel() {\n   \n       private val users = MutableLiveData<List<User>>()\n\n       fun fetchUsers() {\n           viewModelScope.launch(Dispatchers.IO) {\n               val fetchedUsers = userRepository.getUsers() // Предполагается, что это асинхронный вызов\n               withContext(Dispatchers.Main) {\n                   users.value = fetchedUsers\n               }\n           }\n       }\n       \n       fun getUsers(): LiveData<List<User>> = users\n   }\n\n   class UserActivity : AppCompatActivity() {\n       private val userViewModel: UserViewModel by viewModels()\n\n       override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           userViewModel.getUsers().observe(this, { users ->\n               // обновление UI с помощью адаптера RecyclerView\n           })\n           \n           userViewModel.fetchUsers()\n       }\n   }",
    "filename": "517925b80689f72b602fe42f70ae6aab_0.kt"
  },
  {
    "conversation_hash": "0ead39bd3e31775435c7c87f57d0ab50",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "address 0x1 {\nmodule MySimpleCoin {\n    // Declare a resource type with one field.\n    resource struct Coin {\n        value: u64,\n    }\n\n    // Publishes a Coin resource with the specified value under the signer's account.\n    public fun mint(account: &signer, value: u64) {\n        let coin = Coin { value: value };\n        move_to(account, coin);\n    }\n\n    // Transfers a Coin from the signer's account to the recipient's account.\n    public fun transfer(sender: &signer, recipient_addr: address, amount: u64) acquires Coin {\n        let sender_coin = borrow_global_mut<Coin>(Signer::address_of(sender));\n        \n        // Check if the sender has enough balance.\n        assert(sender_coin.value >= amount, 42);\n\n        sender_coin.value = sender_coin.value - amount;\n\n        // Add the specified amount to the recipient's Coin resource.\n        let recipient_coin = borrow_global_mut<Coin>(recipient_addr);\n        recipient_coin.value = recipient_coin.value + amount;\n    }\n\n    // Retrieves the value of the Coin resource under the account.\n    public fun balance_of(account_addr: address): u64 acquires Coin {\n        let coin = borrow_global<Coin>(account_addr);\n        coin.value\n    }\n}\n}",
    "filename": "0ead39bd3e31775435c7c87f57d0ab50_0.kt"
  },
  {
    "conversation_hash": "a8587dd9786e26371af6c6939fc0f72d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        // Инициализация интерфейса и другого кода\n    }\n\n    override fun onStart() {\n        super.onStart()\n        // Подготовка к отображению Activity\n    }\n\n    override fun onResume() {\n        super.onResume()\n        // Подготовка к взаимодействию с пользователем\n    }\n\n    // ... дополнительные методы жизненного цикла ...\n}",
    "filename": "a8587dd9786e26371af6c6939fc0f72d_0.kt"
  },
  {
    "conversation_hash": "a8587dd9786e26371af6c6939fc0f72d",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // Задаем layout для текущей Activity\n        setContentView(R.layout.activity_main)\n\n        // Тут можно инициализировать элементы UI и другие ресурсы\n        // Например:\n        // val textView: TextView = findViewById(R.id.textView)\n        // textView.text = \"Привет, Android!\"\n    }\n}",
    "filename": "a8587dd9786e26371af6c6939fc0f72d_1.kt"
  },
  {
    "conversation_hash": "a8587dd9786e26371af6c6939fc0f72d",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class LooperThread : Thread() {\n    lateinit var looper: Looper\n\n    override fun run() {\n        Looper.prepare() // инициализация Looper для текущего потока\n        looper = Looper.myLooper() // получение ссылки на Looper\n        Looper.loop() // запуск цикла обработки сообщений\n    }\n}",
    "filename": "a8587dd9786e26371af6c6939fc0f72d_3.kt"
  },
  {
    "conversation_hash": "ced9dcfe39b68693d30c95f422713205",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "java.util.",
      "net.fabricmc.api.ModInitializer",
      "net.fabricmc.fabric.api.command.v1.CommandRegistrationCallback",
      "net.minecraft.server.command.CommandManager.literal",
      "net.minecraft.server.network.ServerPlayerEntity",
      "net.minecraft.text.LiteralText"
    ],
    "code": "import net.fabricmc.api.ModInitializer\nimport net.fabricmc.fabric.api.command.v1.CommandRegistrationCallback\nimport net.minecraft.server.command.CommandManager.literal\nimport net.minecraft.server.network.ServerPlayerEntity\nimport net.minecraft.text.LiteralText\nimport java.util.*\n\nclass DupeMod : ModInitializer {\n    private val cooldownMap = hashMapOf<UUID, Long>()\n    private val immobilityMap = hashMapOf<UUID, PositionAndTime>()\n\n    override fun onInitialize() {\n        CommandRegistrationCallback.EVENT.register { dispatcher, _ ->\n            dispatcher.register(literal(\"dupe\")\n                .requires { source -> source.hasPermissionLevel(2) } // Requires OP permission\n                .executes { context ->\n                    val player = context.source.player\n                    val playerId = player.uuid\n                    val currentTime = System.currentTimeMillis()\n\n                    // Check cooldown\n                    if (cooldownMap[playerId]?.let { currentTime - it } ?: 0L < 30000L) {\n                        player.sendMessage(LiteralText(\"You must wait before using this command again.\"), false)\n                        return@executes 1\n                    }\n\n                    // Start immobility check\n                    immobilityMap.compute(playerId) { _, positionAndTime ->\n                        if (positionAndTime == null || currentTime - positionAndTime.time >= 10000L) {\n                            PositionAndTime(player.x, player.y, player.z, currentTime).also {\n                                player.sendMessage(LiteralText(\"Do not move for 10 seconds.\"), false)\n                            }\n                        } else {\n                            positionAndTime\n                        }\n                    }\n\n                    // Schedule check for immobility\n                    context.source.server.tickScheduler.schedule(currentTime + 10000L) { server ->\n                        if (immobilityMap[playerId]?.isPlayerImmobile(player) == true) {\n                            // Dupe items if immobile for 10 seconds\n                            player.inventory.main.forEach { stack ->\n                                if (!stack.isEmpty) {\n                                    val dupedStack = stack.copy()\n                                    dupedStack.count = Math.min(stack.maxCount, stack.count * 2)\n                                    player.inventory.insertStack(dupedStack)\n                                }\n                            }\n\n                            cooldownMap[playerId] = currentTime\n                            player.networkHandler.disconnect(LiteralText(\"Items have been duplicated, you have been kicked.\"))\n                        }\n                        immobilityMap.remove(playerId)\n                    }\n                    1\n                }\n            )\n        }\n    }\n\n    data class PositionAndTime(val x: Double, val y: Double, val z: Double, val time: Long) {\n        fun isPlayerImmobile(player: ServerPlayerEntity): Boolean {\n            return player.squaredDistanceTo(x, y, z) < 0.01 && System.currentTimeMillis() - time >= 10000L\n        }\n    }\n}",
    "filename": "ced9dcfe39b68693d30c95f422713205_2.kt"
  },
  {
    "conversation_hash": "cb372e7c858079c9d2646fdb15f2b5f5",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.util.HashMap",
      "java.util.UUID",
      "net.fabricmc.api.ModInitializer",
      "net.fabricmc.fabric.api.command.v1.CommandRegistrationCallback",
      "net.minecraft.item.ItemStack",
      "net.minecraft.server.command.CommandManager",
      "net.minecraft.server.command.ServerCommandSource",
      "net.minecraft.server.network.ServerPlayerEntity",
      "net.minecraft.text.Text"
    ],
    "code": "import net.fabricmc.api.ModInitializer\nimport net.fabricmc.fabric.api.command.v1.CommandRegistrationCallback\nimport net.minecraft.item.ItemStack\nimport net.minecraft.server.command.CommandManager\nimport net.minecraft.server.command.ServerCommandSource\nimport net.minecraft.server.network.ServerPlayerEntity\nimport net.minecraft.text.Text\nimport java.util.HashMap\nimport java.util.UUID\n\nclass DupeMod : ModInitializer {\n\n    private val cooldownMap = HashMap<UUID, Long>()\n    private val immobilityMap = HashMap<UUID, PositionAndTime>()\n\n    override fun onInitialize() {\n        CommandRegistrationCallback.EVENT.register { dispatcher, _ ->\n            dispatcher.register(\n                CommandManager.literal(\"dupe\")\n                    .requires { source: ServerCommandSource -> source.hasPermissionLevel(2) } // Requires OP permission\n                    .executes { context ->\n                        val player = context.source.player\n                        val playerId = player.uuid\n                        val currentTime = System.currentTimeMillis()\n                        val positionAndTime = immobilityMap[playerId]\n\n                        // Check cooldown\n                        if (cooldownMap.containsKey(playerId) && currentTime - cooldownMap[playerId]!! < 30000) {\n                            player.sendMessage(Text.literal(\"You must wait before using this command again.\"), false)\n                            return@executes 1\n                        }\n\n                        // Start immobility check\n                        if (positionAndTime == null || currentTime - positionAndTime.time >= 10000) {\n                            immobilityMap[playerId] = PositionAndTime(player.x, player.y, player.z, currentTime)\n                            player.sendMessage(Text.literal(\"Do not move for 10 seconds.\"), false)\n                            return@executes 1\n                        }\n\n                        // Check immobility\n                        if (!positionAndTime.isPlayerImmobile(player)) {\n                            immobilityMap.remove(playerId)\n                            player.sendMessage(Text.literal(\"You moved! Try the command again without moving.\"), false)\n                            return@executes 1\n                        }\n\n                        // Dupe items if immobile for 10 seconds\n                        for (i in 0 until player.inventory.size()) {\n                            val stack = player.inventory.getStack(i)\n                            if (!stack.isEmpty) {\n                                val dupedStack = stack.copy()\n                                dupedStack.count = Math.min(stack.maxCount, stack.count * 2)\n                                player.inventory.setStack(i, dupedStack)\n                            }\n                        }\n\n                        cooldownMap[playerId] = currentTime\n                        player.networkHandler.disconnect(Text.literal(\"Items have been duplicated; you have been kicked.\")) // Kick player\n\n                        1\n                    }\n            )\n        }\n    }\n\n    data class PositionAndTime(val x: Double, val y: Double, val z: Double, val time: Long) {\n        fun isPlayerImmobile(player: ServerPlayerEntity): Boolean {\n            return player.squaredDistanceTo(x, y, z) < 0.01 && System.currentTimeMillis() - time >= 10000\n        }\n    }\n}",
    "filename": "cb372e7c858079c9d2646fdb15f2b5f5_0.kt"
  },
  {
    "conversation_hash": "cb372e7c858079c9d2646fdb15f2b5f5",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "// ...\n.executes { context ->\n    val player = context.source.player ?: return@executes 0 // Return early if player is null\n    val playerId = player.uuid\n    val currentTime = System.currentTimeMillis()\n    val positionAndTime = immobilityMap[playerId]\n\n    // Check cooldown\n    if (cooldownMap.containsKey(playerId) && currentTime - (cooldownMap[playerId] ?: 0L) < 30000) {\n        player.sendMessage(Text.literal(\"You must wait before using this command again.\"), false)\n        return@executes 1\n    }\n\n    // Start immobility check\n    if (positionAndTime == null || currentTime - positionAndTime.time >= 10000) {\n        immobilityMap[playerId] = PositionAndTime(player.x, player.y, player.z, currentTime)\n        player.sendMessage(Text.literal(\"Do not move for 10 seconds.\"), false)\n        return@executes 1\n    }\n\n    // Check immobility\n    if (!positionAndTime.isPlayerImmobile(player)) {\n        immobilityMap.remove(playerId)\n        player.sendMessage(Text.literal(\"You moved! Try the command again without moving.\"), false)\n        return@executes 1\n    }\n\n    // Dupe items if immobile for 10 seconds\n    player.inventory?.let { inventory ->\n        for (i in 0 until inventory.size()) {\n            val stack = inventory.getStack(i)\n            if (!stack.isEmpty) {\n                val dupedStack = stack.copy()\n                dupedStack.count = kotlin.math.min(stack.maxCount, stack.count * 2)\n                inventory.setStack(i, dupedStack)\n            }\n        }\n    }\n\n    cooldownMap[playerId] = currentTime\n    player.networkHandler.disconnect(Text.literal(\"Items have been duplicated; you have been kicked.\")) // Kick player\n\n    1\n}\n// ...",
    "filename": "cb372e7c858079c9d2646fdb15f2b5f5_1.kt"
  },
  {
    "conversation_hash": "cb372e7c858079c9d2646fdb15f2b5f5",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "// ...\n.executes { context ->\n    val player = context.source.player ?: return@executes 0 // Return early if player is null\n    val playerId = player.uuid\n    val currentTime = System.currentTimeMillis()\n\n    // Check cooldown\n    val cooldown = cooldownMap[playerId]\n    if (cooldown != null && currentTime - cooldown < 30000) {\n        player.sendMessage(Text.literal(\"You must wait before using this command again.\"), false)\n        return@executes 1\n    }\n\n    // If not on cooldown, start immobility check\n    var positionAndTime = immobilityMap[playerId]\n    if (positionAndTime == null || currentTime - positionAndTime.time >= 10000) {\n        // Either not yet recorded or last attempt was more than 10 seconds ago\n        immobilityMap[playerId] = PositionAndTime(player.x, player.y, player.z, currentTime)\n        player.sendMessage(Text.literal(\"Do not move for 10 seconds.\"), false)\n    } else if (positionAndTime.isPlayerImmobile(player)) {\n        // Player is immobile, and 10 seconds have not passed since last command use\n        // Dupe items if immobile for 10 seconds\n        player.inventory?.let { inventory ->\n            for (i in 0 until inventory.size()) {\n                val stack = inventory.getStack(i)\n                if (!stack.isEmpty) {\n                    val dupedStack = stack.copy()\n                    dupedStack.count = kotlin.math.min(stack.maxCount, stack.count * 2)\n                    inventory.setStack(i, dupedStack)\n                }\n            }\n        }\n\n        cooldownMap[playerId] = currentTime\n        player.networkHandler.disconnect(Text.literal(\"Items have been duplicated; you have been kicked.\")) // Kick player\n    } else {\n        // Player moved, reset the positionAndTime\n        immobilityMap.remove(playerId)\n        player.sendMessage(Text.literal(\"You moved! Try the command again without moving.\"), false)\n    }\n\n    1\n}\n// ...",
    "filename": "cb372e7c858079c9d2646fdb15f2b5f5_2.kt"
  },
  {
    "conversation_hash": "cb372e7c858079c9d2646fdb15f2b5f5",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "// ...\n\nprivate fun scheduleTask(delay: Long, task: () -> Unit) {\n    // This is where you'd put the real scheduling code.\n    // For simplicity, I'm using a thread to simulate a delay. Caution: this is just for demonstration purposes!\n    Thread {\n        try {\n            Thread.sleep(delay)\n            task()\n        } catch (e: InterruptedException) {\n            // Handle interruption.\n        }\n    }.start()\n}\n\n// ...\n\n.executes { context ->\n    val player = context.source.player ?: return@executes 0 // Return early if player is null\n    val playerId = player.uuid\n    val currentTime = System.currentTimeMillis()\n\n    // Check cooldown\n    if (cooldownMap.containsKey(playerId) && currentTime - (cooldownMap[playerId] ?: 0L) < 30000) {\n        player.sendMessage(Text.literal(\"You must wait before using this command again.\"), false)\n        return@executes 1\n    }\n\n    // Start immobility check by recording the player's position and setting the timestamp\n    immobilityMap[playerId] = PositionAndTime(player.x, player.y, player.z, currentTime)\n    player.sendMessage(Text.literal(\"Do not move for 10 seconds.\"), false)\n\n    // Schedule the task to run after 10 seconds.\n    scheduleTask(10000) {\n        val updatedPositionAndTime = immobilityMap[playerId]\n\n        // Make sure the player is still online and the data is valid before proceeding\n        val onlinePlayer = player.server.playerManager.getPlayer(playerId)\n        if (onlinePlayer == null || updatedPositionAndTime == null) return@scheduleTask\n\n        // Check if player remained immobile\n        if (updatedPositionAndTime.isPlayerImmobile(onlinePlayer)) {\n            // Dupe the items\n            onlinePlayer.inventory?.let { inventory ->\n                for (i in 0 until inventory.size()) {\n                    val stack = inventory.getStack(i)\n                    if (!stack.isEmpty) {\n                        val dupedStack = stack.copy()\n                        dupedStack.count = kotlin.math.min(stack.maxCount, stack.count * 2)\n                        inventory.setStack(i, dupedStack)\n                    }\n                }\n            }\n\n            onlinePlayer.sendMessage(Text.literal(\"Items have been duplicated.\"), false)\n            cooldownMap[playerId] = System.currentTimeMillis()\n        } else {\n            onlinePlayer.sendMessage(Text.literal(\"You moved! Duplication canceled.\"), false)\n        }\n\n        // Cleanup whether successful or not\n        immobilityMap.remove(playerId)\n    }\n\n    1\n}\n// ...",
    "filename": "cb372e7c858079c9d2646fdb15f2b5f5_3.kt"
  },
  {
    "conversation_hash": "cb372e7c858079c9d2646fdb15f2b5f5",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "// ...\n// Schedule the task to run after 10 seconds.\nscheduleTask(10000) {\n    val updatedPositionAndTime = immobilityMap[playerId]\n\n    // Make sure the player is still online and the data is valid before proceeding\n    val onlinePlayer = player.server.playerManager.getPlayer(playerId)\n    if (onlinePlayer == null || updatedPositionAndTime == null) return@scheduleTask\n\n    // Check if player remained immobile\n    if (updatedPositionAndTime.isPlayerImmobile(onlinePlayer)) {\n        // Dupe the items by creating a new stack for each existing stack\n        val inventory = onlinePlayer.inventory\n        val itemsToDuplicate = mutableListOf<ItemStack>()\n\n        for (i in 0 until inventory.size()) {\n            val stack = inventory.getStack(i)\n            if (!stack.isEmpty && stack.count == stack.maxCount) {\n                // Add a new stack to be duplicated later if the current stack is at its max size\n                itemsToDuplicate.add(stack.copy())\n            } else if (!stack.isEmpty && stack.count < stack.maxCount) {\n                // Directly duplicate items in the existing stack if it's not full\n                stack.increment(stack.count)\n            }\n        }\n\n        // Now add the duplicated stacks into the inventory if there's space\n        for (dupedStack in itemsToDuplicate) {\n            // Try to add the stack into the inventory, if there's no space notify the player\n            if (!inventory.insertStack(dupedStack)) {\n                onlinePlayer.dropItem(dupedStack, false) // Drop the item near the player if no inventory space\n            }\n        }\n\n        onlinePlayer.sendMessage(Text.literal(\"Items have been duplicated.\"), false)\n        cooldownMap[playerId] = System.currentTimeMillis()\n    } else {\n        onlinePlayer.sendMessage(Text.literal(\"You moved! Duplication canceled.\"), false)\n    }\n\n    // Cleanup whether successful or not\n    immobilityMap.remove(playerId)\n}\n// ...",
    "filename": "cb372e7c858079c9d2646fdb15f2b5f5_4.kt"
  },
  {
    "conversation_hash": "cb372e7c858079c9d2646fdb15f2b5f5",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "// ...\n// Schedule the task to run after 10 seconds.\nscheduleTask(10000) {\n    val updatedPositionAndTime = immobilityMap[playerId]\n\n    // Make sure the player is still online and the data is valid before proceeding\n    val onlinePlayer = player.server.playerManager.getPlayer(playerId)\n    if (onlinePlayer == null || updatedPositionAndTime == null) return@scheduleTask\n\n    // Check if player remained immobile\n    if (updatedPositionAndTime.isPlayerImmobile(onlinePlayer)) {\n        // Dupe the items by creating a new stack for each existing stack\n        val inventory = onlinePlayer.inventory\n        val itemsToDuplicate = mutableListOf<ItemStack>()\n\n        for (i in 0 until inventory.size()) {\n            val stack = inventory.getStack(i)\n            if (!stack.isEmpty && stack.count == stack.maxCount) {\n                // Add a new stack to be duplicated later if the current stack is at its max size\n                itemsToDuplicate.add(stack.copy())\n            } else if (!stack.isEmpty && stack.count < stack.maxCount) {\n                // Directly duplicate items in the existing stack if it's not full\n                stack.increment(stack.count)\n            }\n        }\n\n        // Now add the duplicated stacks into the inventory if there's space\n        for (dupedStack in itemsToDuplicate) {\n            // Try to add the stack into the inventory, if there's no space notify the player and/or drop items\n            if (!inventory.insertStack(dupedStack)) {\n                onlinePlayer.dropItem(dupedStack, false) // Drop the item near the player if no inventory space\n            }\n        }\n\n        // Everyone, regardless of where they are, will know that the player has duplicated items, as a warning\n        onlinePlayer.server.playerManager.broadcastChatMessage(Text.literal(\"${onlinePlayer.entityName} has duplicated items and has been kicked.\"), MessageType.SYSTEM, UUID.randomUUID())\n\n        // Kick the player\n        onlinePlayer.networkHandler.disconnect(Text.literal(\"Items have been duplicated; you have been kicked.\"))\n\n        // Set the cooldown after kicking the player\n        cooldownMap[playerId] = System.currentTimeMillis()\n    } else {\n        // Notify the player about movement and cancellation\n        onlinePlayer.sendMessage(Text.literal(\"You moved! Duplication canceled.\"), false)\n    }\n\n    // Cleanup whether successful or not\n    immobilityMap.remove(playerId)\n}\n// ...",
    "filename": "cb372e7c858079c9d2646fdb15f2b5f5_5.kt"
  },
  {
    "conversation_hash": "b9fd96c3f8391e9e5ae0ad99f25ac703",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "% определение процедуры, которая будет запускаться при запуске программы\ndomains\n    main = public pred (string [] Args)\n    clauses\n    main(_) :-\n        write(\"Hello, World!\").",
    "filename": "b9fd96c3f8391e9e5ae0ad99f25ac703_3.kt"
  },
  {
    "conversation_hash": "d41a009aaef5bf797cefe3f8c978912b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onWindowFocusChanged(hasFocus: Boolean) {\n    super.onWindowFocusChanged(hasFocus)\n    if (hasFocus) {\n        val button = findViewById<Button>(R.id.button)\n        val editText = findViewById<EditText>(R.id.editText)\n        val height = editText.height // Obtenemos la altura del EditText\n\n        // Establecemos el ancho y la altura del botón para que sean iguales a la altura del EditText\n        val layoutParams = button.layoutParams\n        layoutParams.width = height\n        layoutParams.height = height\n        button.layoutParams = layoutParams\n    }\n}",
    "filename": "d41a009aaef5bf797cefe3f8c978912b_1.kt"
  },
  {
    "conversation_hash": "49528d63454b8263d0df7fc7b75b8696",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.widget.Button",
      "android.widget.TextView",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val textView: TextView = findViewById(R.id.textView)\n        val button: Button = findViewById(R.id.button)\n\n        button.setOnClickListener {\n            textView.text = \"Button Clicked\"\n        }\n    }\n}",
    "filename": "49528d63454b8263d0df7fc7b75b8696_2.kt"
  },
  {
    "conversation_hash": "49528d63454b8263d0df7fc7b75b8696",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Product data class\ndata class Product(val id: String, val name: String, val price: Double, val imageUrl: String)\n\n// Adapter for RecyclerView\nclass ProductsAdapter(private val products: List<Product>) : RecyclerView.Adapter<ProductsAdapter.ProductViewHolder>() {\n\n    class ProductViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        val productName: TextView = view.findViewById(R.id.productName)\n        val productPrice: TextView = view.findViewById(R.id.productPrice)\n        val productImage: ImageView = view.findViewById(R.id.productImage)\n        // More views (like buttons) can be added here\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ProductViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_product, parent, false)\n        return ProductViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ProductViewHolder, position: Int) {\n        val product = products[position]\n        holder.productName.text = product.name\n        holder.productPrice.text = \"$${product.price}\"\n        Glide.with(holder.productImage.context).load(product.imageUrl).into(holder.productImage)\n    }\n\n    override fun getItemCount(): Int = products.size\n}\n\n// Layout file (item_product.xml) would have ImageView for the product and TextViews for name and price.",
    "filename": "49528d63454b8263d0df7fc7b75b8696_3.kt"
  },
  {
    "conversation_hash": "d93a0d2c04e9b50a009cfac779bbd49f",
    "code_index": 21,
    "language": "Kotlin",
    "libraries": [
      "android.app.Activity",
      "android.os.Bundle",
      "android.widget.TextView"
    ],
    "code": "package com.example.myapp\n\nimport android.app.Activity\nimport android.os.Bundle\nimport android.widget.TextView\n\nclass MainActivity : Activity() {\n    external fun helloFromRust(): String\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(TextView(this).apply {\n            text = helloFromRust()\n        })\n    }\n\n    companion object {\n        init {\n            System.loadLibrary(\"rustlib\")\n        }\n    }\n}",
    "filename": "d93a0d2c04e9b50a009cfac779bbd49f_21.kt"
  },
  {
    "conversation_hash": "d93a0d2c04e9b50a009cfac779bbd49f",
    "code_index": 23,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n    ext.kotlin_version = '1.4.32'\n    repositories {\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.1.3'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\n// app/build.gradle\napply plugin: 'com.android.application'\napply plugin: 'kotlin-android'\n\nandroid {\n    compileSdkVersion 29\n    buildToolsVersion '29.0.3'\n\n    defaultConfig {\n        applicationId \"com.example.myapp\"\n        minSdkVersion 16\n        targetSdkVersion 29\n        versionCode 1\n        versionName \"1.0\"\n    }\n\n    sourceSets {\n        main.java.srcDirs += 'src/main/kotlin'\n        main.jniLibs.srcDirs = ['src/main/jniLibs']\n    }\n}\n\ndependencies {\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n}\n\n// Set this to the path to your Android SDK\nproject.setProperty(\"android.sdk.directory\", \"C:/path/to/android/sdk\")",
    "filename": "d93a0d2c04e9b50a009cfac779bbd49f_23.kt"
  },
  {
    "conversation_hash": "80782b2f4f797f3e03b2a5ea9ada0857",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "0    昨天、货运小车、全国、配对订单量\n1        8月、货运小车、日均配对订单量\n2       昨天、货运平台、分大区、配对订单量\n3                 前天、净毛利率\n4                 昨天、估转\nName: 提取的实体, dtype: object",
    "filename": "80782b2f4f797f3e03b2a5ea9ada0857_4.kt"
  },
  {
    "conversation_hash": "0ceee60b8d8ba9a93c68abbf5424d5a0",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "val MIGRATION_1_2 = object : Migration(1, 2) {\n    override fun migrate(database: SupportSQLiteDatabase) {\n        // Действия по обновлению схемы и переносу данных\n        database.execSQL(\"CREATE TABLE IF NOT EXISTS `NewTable` (`id` INTEGER, `name` TEXT, PRIMARY KEY(`id`))\")\n        // ... другие изменения\n        // Перенос данных, если это необходимо\n        // ...\n    }\n}\n\nval db = Room.databaseBuilder(\n    applicationContext,\n    AppDatabase::class.java, \"database-name\"\n)\n.addMigrations(MIGRATION_1_2)\n.build()",
    "filename": "0ceee60b8d8ba9a93c68abbf5424d5a0_3.kt"
  },
  {
    "conversation_hash": "0ceee60b8d8ba9a93c68abbf5424d5a0",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun exportDatabaseToJson(context: Context): String {\n    val database = Room.databaseBuilder(context, AppDatabase::class.java, \"database-name\").build()\n    val users = database.userDao().getAllUsers() // Пример для пользовательской таблицы\n    \n    return Gson().toJson(users)\n}",
    "filename": "0ceee60b8d8ba9a93c68abbf5424d5a0_4.kt"
  },
  {
    "conversation_hash": "0ceee60b8d8ba9a93c68abbf5424d5a0",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun importDatabaseFromJson(context: Context, json: String) {\n    val database = Room.databaseBuilder(context, AppDatabase::class.java, \"database-name\").build()\n    val userType = object : TypeToken<List<User>>() {}.type\n    val users: List<User> = Gson().fromJson(json, userType)\n    \n    database.userDao().insertAll(users)\n}",
    "filename": "0ceee60b8d8ba9a93c68abbf5424d5a0_5.kt"
  },
  {
    "conversation_hash": "87d2e60b8b641e5cc6ff079100287a23",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "# Define two complex numbers\ncomplex1 = Complex(3, 2) # Represents 3 + 2im\ncomplex2 = Complex(1, 7) # Represents 1 + 7im\n\n# Multiply the complex numbers\nresult = complex1 * complex2\n\n# Output the result\nprintln(\"The result of multiplication is: $(real(result)) + $(imag(result))i\")\n# The output should be: The result of multiplication is: -11 + 23i",
    "filename": "87d2e60b8b641e5cc6ff079100287a23_2.kt"
  },
  {
    "conversation_hash": "7a60ea2181b76ee7baba57043247920b",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.widget.Button",
      "android.widget.Toast",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "// MainActivity.kt\npackage com.example.myapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        \n        val button = findViewById<Button>(R.id.myButton)\n        button.setOnClickListener {\n            Toast.makeText(this, \"Button clicked!\", Toast.LENGTH_SHORT).show()\n        }\n    }\n}",
    "filename": "7a60ea2181b76ee7baba57043247920b_0.kt"
  },
  {
    "conversation_hash": "08e8d183dd53ad04a1e30ff6ee432b28",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun dumpCache() {\n    if (quadCount == 0) return\n    \n    val localLastTexture = lastTexture // Prefetch to avoid repeated field access\n    if (localLastTexture?.isLoaded == true) {\n        localLastTexture.bind(0)\n    } else {\n        clearState()\n        return\n    }\n    \n    currentDrawCount++\n    MpGl.glEnable(MpGl.GL_BLEND)\n    setupBlendFunction()\n    \n    val localLastClipRect = lastClipRect // Prefetch to avoid repeated field access\n    localLastClipRect?.let { clipRect ->\n        if (clipRect.area() > 0) {\n            enableScissorTest(clipRect)\n        }\n    }\n    \n    val pmaShader = lastIsPmaTexture\n    val shader = if (pmaShader) requestPmaShader() else requestDefaultShader()\n    shader.bind()\n    shader.uniformMat4(Shader.LOCATION_PROJECTION, renderer.projection, 1)\n\n    // Optimize the loop for bit operations and array structures\n    val vtxPos = verticesPos\n    val vtx = vertices\n    val vertexSizePos = VERTEX_SIZE_POS\n    val vertexSize = VERTEX_SIZE\n    for (i in quadCount * 6) {\n        val basePos = i * vertexSizePos\n        val x = vtxPos[basePos].toRawBits()\n        val y = vtxPos[basePos + 1].toRawBits()\n        val baseInd = i * vertexSize\n        vtx[baseInd] = (x and 0xFFFF).toShort()\n        vtx[baseInd + 1] = (x ushr 16).toShort()\n        vtx[baseInd + 2] = (y and 0xFFFF).toShort()\n        vtx[baseInd + 3] = (y ushr 16).toShort()\n    }\n\n    bufRenderer.renderIndexed(\n        vtx, null, MpGl.GL_TRIANGLES,\n        quadCount * 6, quadCount * vertexSize * 4\n    )\n    \n    localLastClipRect?.takeIf { it.area() > 0 }?.apply {\n        MpGl.glDisable(MpGl.GL_SCISSOR_TEST)\n    }\n    \n    clearState()\n}\n\nprivate fun clearState() {\n    quadCount = 0\n    lastTexture = null\n    lastClipRect = null\n    lastIsPmaTexture = false\n}\n\nprivate fun enableScissorTest(clipRect: ClipRect) {\n    MpGl.glEnable(MpGl.GL_SCISSOR_TEST)\n    val screenH = (-2.0 / renderer.projection[5]).roundToInt()\n    MpGl.glScissor(\n        clipRect.x.toInt(),\n        screenH - clipRect.y.toInt() - clipRect.height.toInt(),\n        clipRect.width.toInt(),\n        clipRect.height.toInt()\n    )\n}\n\nprivate fun setupBlendFunction() {\n    val blendMode = lastBlendMode\n    val blendFunc = if (renderer.isFboRendering) {\n        MpGl.glBlendFuncSeparate(\n            MpGl.GL_SRC_ALPHA,\n            MpGl.GL_ONE_MINUS_SRC_ALPHA,\n            MpGl.GL_ONE,\n            MpGl.GL_ONE_MINUS_SRC_ALPHA\n        )\n    } else {\n        val srcBlend = if (lastIsPmaTexture) MpGl.GL_ONE else MpGl.GL_SRC_ALPHA\n        MpGl.glBlendFunc(srcBlend, MpGl.GL_ONE_MINUS_SRC_ALPHA)\n    }\n}",
    "filename": "08e8d183dd53ad04a1e30ff6ee432b28_0.kt"
  },
  {
    "conversation_hash": "377dfaf4b1d23fc9e276e334dd51e592",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.widget.Button",
      "android.widget.TextView",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "package com.example.myandroidapp\n\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val textView = findViewById<TextView>(R.id.text_view)\n        val button = findViewById<Button>(R.id.button)\n\n        button.setOnClickListener {\n            textView.text = \"Hello, Android!\"\n        }\n    }\n}",
    "filename": "377dfaf4b1d23fc9e276e334dd51e592_0.kt"
  },
  {
    "conversation_hash": "450b3c8208a964e0cf03b9f756b824bf",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.widget.TextView",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "import android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport android.widget.TextView\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        \n        val textView: TextView = findViewById(R.id.text_view)\n        textView.text = \"¡Hola, mundo!\"\n    }\n}",
    "filename": "450b3c8208a964e0cf03b9f756b824bf_0.kt"
  },
  {
    "conversation_hash": "3cb1b7eba455da0ada9b98f431875b6c",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Build",
      "android.view.autofill.AutofillManager",
      "com.google.android.material.textfield.TextInputEditText"
    ],
    "code": "import android.os.Build\nimport android.view.autofill.AutofillManager\nimport com.google.android.material.textfield.TextInputEditText\n\n// Предположим, что у вас уже есть TextInputEditText в вашем Activity или Fragment.\nval textInputEditText: TextInputEditText = findViewById(R.id.your_text_input_edit_text)\n\n// Убедитесь, что версия Android поддерживает Autofill\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n    textInputEditText.setAutofillHints(View.AUTOFILL_HINT_USERNAME) // Пример хинта для автозаполнения\n\n    // Получите AutofillManager\n    val autofillManager = getSystemService(AUTOFILL_SERVICE) as AutofillManager\n\n    // Создайте и установите слушателя\n    val autofillListener = AutofillManager.AutofillCallback()\n    autofillManager.registerCallback(autofillListener)\n\n    // Обрабатывайте события автозаполнения\n    autofillManager.addAutofillCallback(object : AutofillManager.AutofillCallback() {\n        override fun onAutofillEvent(view: View, event: Int) {\n            when (event) {\n                AutofillManager.EVENT_INPUT_HIDDEN -> {\n                    // Событие когда элемент становится невидимым\n                }\n                AutofillManager.EVENT_INPUT_SHOWN -> {\n                    // Событие когда элемент становится видимым\n                }\n                AutofillManager.EVENT_INPUT_UNAVAILABLE -> {\n                    // Событие когда элемент становится недоступным для автозаполнения\n                }\n            }\n        }\n\n        override fun onAutofillEvent(view: View, virtualId: Int, event: Int) {\n            // Обработка событий для специфических детей виртуальной иерархии (если таковые имеются)\n        }\n    })\n}\n\n// Позже не забудьте отменить регистрацию слушателя, например, в методе onDestroy:\nautofillManager.removeAutofillCallback(autofillListener)",
    "filename": "3cb1b7eba455da0ada9b98f431875b6c_0.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerContext private constructor() {\n    \n    var playerState: PlayerState = PlayerState.IDLE\n    var currentPosition: Long = 0\n    // 可以持有其他播放器相关的状态和信息\n    \n    companion object {\n        private var instance: PlayerContext? = null\n        \n        fun getInstance(): PlayerContext {\n            if (instance == null) {\n                instance = PlayerContext()\n            }\n            return instance!!\n        }\n    }\n    \n    fun updatePlayerState(state: PlayerState) {\n        this.playerState = state\n        // 更新其他状态逻辑\n    }\n    \n    enum class PlayerState {\n        IDLE, PLAYING, PAUSED\n    }\n    \n    // 其他操作方法\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_0.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Card {\n    private val playerContext = PlayerContext.getInstance()\n    \n    fun initializePlayer() {\n        // 初始化播放器实例并设置初始状态\n        // 可能的代码示例\n        // player.state = playerContext.playerState\n        // player.seekTo(playerContext.currentPosition)\n    }\n    \n    fun onFullScreen() {\n        // 切换到全屏或详情页时，保存当前播放状态\n        playerContext.updatePlayerState(PlayerContext.PlayerState.PLAYING)\n        playerContext.currentPosition = 1000L //示例，从播放器获取实际值\n        // 进入全屏或详情页逻辑\n    }\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_1.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class DetailPage {\n    private val playerContext = PlayerContext.getInstance()\n    \n    fun setupPlayer() {\n        // 此处调用同样的初始化播放器逻辑\n    }\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_2.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class FullScreenPlayer {\n    private val playerContext = PlayerContext.getInstance()\n    \n    fun setupPlayer() {\n        // 和详情页类似地设置播放器\n    }\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_3.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "object PlayerContext {\n    var playerState: PlayerState = PlayerState.IDLE\n    var currentPosition: Long = 0\n    // 可添加您认为需要在PlayerContext中持有的其他播放器状态和信息\n\n    fun updatePlayerState(state: PlayerState, newPosition: Long? = null) {\n        playerState = state\n        newPosition?.let { currentPosition = it }\n        // 更新其他状态逻辑\n    }\n\n    enum class PlayerState {\n        IDLE, PLAYING, PAUSED\n    }\n\n    // 如果需要额外的操作方法，可以继续添加\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_4.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Card {\n    fun initializePlayer() {\n        // 使用PlayerContext直接初始化播放器状态\n        // 示例：模拟操作\n        // PlayerContext.updatePlayerState(PlayerContext.PlayerState.PLAYING, currentPosition)\n    }\n    \n    fun onFullScreen() {\n        // 保存当前播放状态\n        PlayerContext.updatePlayerState(PlayerContext.PlayerState.PLAYING, 1000L) // 示意\n        // 进入全屏或详情页逻辑\n    }\n}\n\nclass DetailPage {\n    fun setupPlayer() {\n        // 使用PlayerContext进行播放器设置\n        // 示例代码\n    }\n}\n\nclass FullScreenPlayer {\n    fun setupPlayer() {\n        // 同样的设置逻辑\n    }\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_5.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "class NormalPlayStrategy : PlayStrategy {\n    override fun playList(playList: List<String>) {\n        println(\"Playing in normal order: $playList\")\n    }\n}\n\nclass ShufflePlayStrategy : PlayStrategy {\n    override fun playList(playList: List<String>) {\n        println(\"Playing in shuffle order: ${playList.shuffled()}\")\n    }\n}\n\nclass LoopPlayStrategy : PlayStrategy {\n    override fun playList(playList: List<String>) {\n        println(\"Playing in loop: $playList\")\n    }\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_7.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Player(var playStrategy: PlayStrategy) {\n    fun play(playList: List<String>) {\n        playStrategy.playList(playList)\n    }\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_8.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val playList = listOf(\"Song1\", \"Song2\", \"Song3\")\n\n    val player = Player(NormalPlayStrategy())\n    player.play(playList)\n\n    player.playStrategy = ShufflePlayStrategy()\n    player.play(playList)\n\n    player.playStrategy = LoopPlayStrategy()\n    player.play(playList)\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_9.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface PlayerState {\n    fun play()\n    fun pause()\n    fun stop()\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_10.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayingState(private val player: Player) : PlayerState {\n    override fun play() {\n        println(\"Already playing.\")\n    }\n\n    override fun pause() {\n        println(\"Pausing the player.\")\n        player.state = PausedState(player)\n    }\n\n    override fun stop() {\n        println(\"Stopping the player.\")\n        player.state = StoppedState(player)\n    }\n}\n\nclass PausedState(private val player: Player) : PlayerState {\n    override fun play() {\n        println(\"Resuming play.\")\n        player.state = PlayingState(player)\n    }\n\n    override fun pause() {\n        println(\"Already paused.\")\n    }\n\n    override fun stop() {\n        println(\"Stopping the player.\")\n        player.state = StoppedState(player)\n    }\n}\n\nclass StoppedState(private val player: Player) : PlayerState {\n    override fun play() {\n        println(\"Starting play.\")\n        player.state = PlayingState(player)\n    }\n\n    override fun pause() {\n        println(\"Can't pause. The player is stopped.\")\n    }\n\n    override fun stop() {\n        println(\"Already stopped.\")\n    }\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_11.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Player {\n    lateinit var state: PlayerState\n\n    fun play() = state.play()\n    fun pause() = state.pause()\n    fun stop() = state.stop()\n\n    init {\n        state = StoppedState(this) // 初始状态为停止\n    }\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_12.kt"
  },
  {
    "conversation_hash": "e3fd844710c0a10ec6090b93c98dd76b",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val player = Player()\n\n    player.play()  // Starting play.\n    player.pause() // Pausing the player.\n    player.play()  // Resuming play.\n    player.stop()  // Stopping the player.\n}",
    "filename": "e3fd844710c0a10ec6090b93c98dd76b_13.kt"
  },
  {
    "conversation_hash": "202ee125c3f45bbd9b211a8040a93942",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface PlayerContext {\n    var currentPlayer: MediaPlayer?\n    fun enterFullScreen()\n    fun enterDetailPage()\n    var onContextUpdate: ((newPlayer: MediaPlayer?) -> Unit)?\n    \n    // 其他共享行为\n}",
    "filename": "202ee125c3f45bbd9b211a8040a93942_0.kt"
  },
  {
    "conversation_hash": "202ee125c3f45bbd9b211a8040a93942",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerContextImpl : PlayerContext {\n    override var currentPlayer: MediaPlayer? = null\n        set(value) {\n            field = value\n            onContextUpdate?.invoke(value)\n        }\n\n    override fun enterFullScreen() {\n        // 处理进入全屏逻辑\n    }\n\n    override fun enterDetailPage() {\n        // 处理进入详情页逻辑\n    }\n\n    override var onContextUpdate: ((newPlayer: MediaPlayer?) -> Unit)? = null\n}",
    "filename": "202ee125c3f45bbd9b211a8040a93942_1.kt"
  },
  {
    "conversation_hash": "202ee125c3f45bbd9b211a8040a93942",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class CardItem(val playerContext: PlayerContext) {\n    \n    init {\n        playerContext.onContextUpdate = { newPlayer ->\n            // 更新界面上的播放器实例显示，如更新封面、状态等\n        }\n    }\n    \n    fun replaceWithNewContext(newContext: PlayerContext) {\n        // 在这里处理当卡片被替换时的逻辑，可能需要更新监听器等\n        playerContext.onContextUpdate = null // 移除旧的监听器\n        newContext.currentPlayer = playerContext.currentPlayer // 保持播放器实例不变\n    }\n    \n    fun onDestroy() {\n        // 处理销毁逻辑，如移除监听器，清理资源等\n        playerContext.onContextUpdate = null\n    }\n    \n}",
    "filename": "202ee125c3f45bbd9b211a8040a93942_2.kt"
  },
  {
    "conversation_hash": "202ee125c3f45bbd9b211a8040a93942",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerContext {\n    private val observers = mutableListOf<MediaPlayerObserver>()\n\n    var sharedData: Any? = null\n        set(value) {\n            field = value\n            notifyObservers()\n        }\n\n    fun addObserver(observer: MediaPlayerObserver) {\n        observers.add(observer)\n    }\n\n    fun removeObserver(observer: MediaPlayerObserver) {\n        observers.remove(observer)\n    }\n\n    private fun notifyObservers() {\n        observers.forEach { it.update(sharedData) }\n    }\n}",
    "filename": "202ee125c3f45bbd9b211a8040a93942_4.kt"
  },
  {
    "conversation_hash": "202ee125c3f45bbd9b211a8040a93942",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MediaPlayerInstance(private val context: PlayerContext) : MediaPlayerObserver {\n    \n    init {\n        context.addObserver(this)\n    }\n    \n    override fun update(data: Any?) {\n        // 当PlayerContext的sharedData发生变化时，这个方法会被调用\n        // 在这里实现对该播放器实例的相关更新逻辑\n        println(\"Received data: $data\")\n    }\n\n    fun onDestroy() {\n        // 当这个播放器实例不再使用时，记得从PlayerContext中移除自己\n        context.removeObserver(this)\n    }\n}",
    "filename": "202ee125c3f45bbd9b211a8040a93942_6.kt"
  },
  {
    "conversation_hash": "202ee125c3f45bbd9b211a8040a93942",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "object AppGlobal {\n    val playerContext = PlayerContext()\n}\n\nfun main() {\n    // 创建播放器实例\n    val player1 = MediaPlayerInstance(AppGlobal.playerContext)\n    val player2 = MediaPlayerInstance(AppGlobal.playerContext)\n    \n    // 更新PlayerContext中的共享数据\n    AppGlobal.playerContext.sharedData = \"New shared data\"\n    \n    // 销毁一个播放器实例时\n    player1.onDestroy()\n}",
    "filename": "202ee125c3f45bbd9b211a8040a93942_7.kt"
  },
  {
    "conversation_hash": "202ee125c3f45bbd9b211a8040a93942",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "abstract class BasePlayerDataSource {\n    open fun initialize() {\n        println(\"DataSource initialized\")\n    }\n    \n    open fun destroy() {\n        println(\"DataSource destroyed\")\n    }\n}",
    "filename": "202ee125c3f45bbd9b211a8040a93942_8.kt"
  },
  {
    "conversation_hash": "202ee125c3f45bbd9b211a8040a93942",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerContext(val dataSource: BasePlayerDataSource) {\n    \n    init {\n        dataSource.initialize()\n    }\n    \n    var currentScene: String = \"card\"\n        private set\n    \n    fun switchToScene(scene: String) {\n        currentScene = scene\n        // 可以根据场景进行不同的逻辑处理，例如全屏或者详情页\n        println(\"Switched to scene: $scene\")\n    }\n    \n    fun onDestroy() {\n        dataSource.destroy()\n        println(\"PlayerContext destroyed\")\n    }\n}",
    "filename": "202ee125c3f45bbd9b211a8040a93942_9.kt"
  },
  {
    "conversation_hash": "202ee125c3f45bbd9b211a8040a93942",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MediaPlayerInstance(private val playerContext: PlayerContext) {\n    \n    fun play() {\n        // 播放逻辑\n        println(\"Playing with scene: ${playerContext.currentScene}\")\n    }\n    \n    fun switchScene(scene: String) {\n        playerContext.switchToScene(scene)\n    }\n}",
    "filename": "202ee125c3f45bbd9b211a8040a93942_10.kt"
  },
  {
    "conversation_hash": "202ee125c3f45bbd9b211a8040a93942",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    // 假设这个dataSource代表了特定视频的数据源\n    val dataSource = object : BasePlayerDataSource() {}\n    \n    // 对于一个特定的卡片，创建一个PlayerContext\n    val cardPlayerContext = PlayerContext(dataSource)\n    \n    // 用户点击卡片上的播放按钮，创建一个关联这个PlayerContext的播放器实例\n    val cardPlayerInstance = MediaPlayerInstance(cardPlayerContext)\n    cardPlayerInstance.play()\n    \n    // 现在用户想要全屏播放，我们切换场景但保持相同的PlayerContext\n    cardPlayerInstance.switchScene(\"fullscreen\")\n    cardPlayerInstance.play()\n    \n    // 当卡片被销毁或滑走时，我们销毁PlayerContext\n    cardPlayerContext.onDestroy()\n    \n    // 新的卡片将会创建一个新的PlayerContext\n}",
    "filename": "202ee125c3f45bbd9b211a8040a93942_11.kt"
  },
  {
    "conversation_hash": "9dc3c803e087ebc557cb336f85cc157b",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface BasePlayerDataSource {\n    fun prepare()\n    fun play()\n    fun pause()\n    fun release()\n}",
    "filename": "9dc3c803e087ebc557cb336f85cc157b_0.kt"
  },
  {
    "conversation_hash": "9dc3c803e087ebc557cb336f85cc157b",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerContext(private var dataSource: BasePlayerDataSource?) {\n\n    fun prepare() {\n        dataSource?.prepare()\n    }\n    \n    fun play() {\n        dataSource?.play()\n    }\n    \n    fun pause() {\n        dataSource?.pause()\n    }\n    \n    fun release() {\n        dataSource?.release()\n        dataSource = null\n    }\n    \n    // 可以添加更多管理dataSource状态的方法\n}",
    "filename": "9dc3c803e087ebc557cb336f85cc157b_1.kt"
  },
  {
    "conversation_hash": "9dc3c803e087ebc557cb336f85cc157b",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class SimplePlayerDataSource : BasePlayerDataSource {\n    override fun prepare() {\n        println(\"Preparing source...\")\n    }\n\n    override fun play() {\n        println(\"Playing...\")\n    }\n\n    override fun pause() {\n        println(\"Paused.\")\n    }\n\n    override fun release() {\n        println(\"Released.\")\n    }\n}",
    "filename": "9dc3c803e087ebc557cb336f85cc157b_2.kt"
  },
  {
    "conversation_hash": "9dc3c803e087ebc557cb336f85cc157b",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    // 假设这是一个卡片播放场景\n    val dataSource = SimplePlayerDataSource()\n    val playerContext = PlayerContext(dataSource)\n    \n    // 使用context进行播放控制\n    playerContext.prepare()\n    playerContext.play()\n    \n    // 假设用户跳转到了全屏或者详情页，我们仍然使用同一个playerContext\n    playerContext.pause()\n    \n    // 假设用户关闭了这个卡片/详情页\n    playerContext.release()\n    \n    // 注意：这里简化了实际场景，实际应用中playerContext的管理更复杂，\n    // 可能需要结合业务逻辑实现例如使用ViewModel或类似机制进行管理。\n}",
    "filename": "9dc3c803e087ebc557cb336f85cc157b_3.kt"
  },
  {
    "conversation_hash": "9dc3c803e087ebc557cb336f85cc157b",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.MutableLiveData",
      "androidx.lifecycle.ViewModel"
    ],
    "code": "import androidx.lifecycle.ViewModel\nimport androidx.lifecycle.MutableLiveData\n\nclass PlayerViewModel : ViewModel() {\n    // 使用 LiveData 来持有 PlayerContext\n    private val _playerContext = MutableLiveData<PlayerContext>()\n\n    val playerContext: LiveData<PlayerContext>\n        get() = _playerContext\n\n    init {\n        // 初始化 PlayerContext\n        _playerContext.value = PlayerContext(SimplePlayerDataSource())\n    }\n\n    // 提供对PlayerContext方法的包装，这样可以通过ViewModel调用\n    fun prepare() {\n        _playerContext.value?.prepare()\n    }\n\n    fun play() {\n        _playerContext.value?.play()\n    }\n\n    fun pause() {\n        _playerContext.value?.pause()\n    }\n\n    fun release() {\n        _playerContext.value?.release()\n        _playerContext.value = null // 清理资源并且通知观察者\n    }\n}",
    "filename": "9dc3c803e087ebc557cb336f85cc157b_4.kt"
  },
  {
    "conversation_hash": "9dc3c803e087ebc557cb336f85cc157b",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerActivity : AppCompatActivity() {\n    private lateinit var viewModel: PlayerViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_player)\n\n        // 初始化 ViewModel\n        viewModel = ViewModelProvider(this).get(PlayerViewModel::class.java)\n\n        // 观察 PlayerContext 的变化\n        viewModel.playerContext.observe(this, Observer { playerContext ->\n            // 当PlayerContext更新时，更新UI或执行其他逻辑\n        })\n        \n        // 可以直接控制播放\n        viewModel.prepare()\n        viewModel.play()\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        viewModel.release() // 释放资源\n    }\n}",
    "filename": "9dc3c803e087ebc557cb336f85cc157b_5.kt"
  },
  {
    "conversation_hash": "9dc3c803e087ebc557cb336f85cc157b",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "class CardAdapter(private val cards: List<CardData>) : RecyclerView.Adapter<CardViewHolder>() {\n    // 存储与卡片相关的PlayerContext实例\n    private val cardPlayerContexts = SparseArray<PlayerContext>()\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CardViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.card_layout, parent, false)\n        return CardViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: CardViewHolder, position: Int) {\n        val cardData = cards[position]\n        holder.bind(cardData)\n        \n        // 确保每个卡片有对应的PlayerContext\n        if (cardPlayerContexts.get(position) == null) { \n            val playerContext = PlayerContext(SimplePlayerDataSource())\n            cardPlayerContexts.put(position, playerContext)\n            // 准备PlayerContext，可能需要根据cardData来配置\n            playerContext.prepare()\n            // todo: 根据需要管理playerContext的其他生命周期方法\n        }\n    }\n\n    override fun onViewRecycled(holder: CardViewHolder) {\n        super.onViewRecycled(holder)\n        val position = holder.adapterPosition\n        // 当卡片不再可见时，释放对应的PlayerContext\n        cardPlayerContexts.get(position)?.release()\n        cardPlayerContexts.remove(position)\n    }\n\n    override fun getItemCount(): Int = cards.size\n\n    // 需要在数据集更新时调用此方法，销毁所有PlayerContext\n    fun clearPlayerContexts() {\n        for (i in 0 until cardPlayerContexts.size()) {\n            cardPlayerContexts.valueAt(i).release()\n        }\n        cardPlayerContexts.clear()\n    }\n\n    // 当卡片数据更新时，外部调用此方法来更新数据集并重置PlayerContexts\n    fun updateCards(newCards: List<CardData>) {\n        cards.clear()\n        cards.addAll(newCards)\n        clearPlayerContexts()\n        notifyDataSetChanged()\n    }\n}",
    "filename": "9dc3c803e087ebc557cb336f85cc157b_6.kt"
  },
  {
    "conversation_hash": "9dc3c803e087ebc557cb336f85cc157b",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface IPlayerContext {\n    fun prepare()\n    fun play()\n    fun pause()\n    fun release()\n    fun updateDataSource(dataSource: BasePlayerDataSource)\n}",
    "filename": "9dc3c803e087ebc557cb336f85cc157b_7.kt"
  },
  {
    "conversation_hash": "9dc3c803e087ebc557cb336f85cc157b",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerContext(private var dataSource: BasePlayerDataSource) : IPlayerContext {\n\n    override fun prepare() {\n        // 实现准备播放的逻辑，例如加载数据源\n        dataSource.load()\n        println(\"Player context prepared\")\n    }\n\n    override fun play() {\n        // 实现播放的逻辑\n        println(\"Playing\")\n    }\n\n    override fun pause() {\n        // 实现暂停播放的逻辑\n        println(\"Paused\")\n    }\n\n    override fun release() {\n        // 实现释放资源的逻辑\n        println(\"Player context released\")\n    }\n\n    override fun updateDataSource(dataSource: BasePlayerDataSource) {\n        // 实现更新数据源的逻辑\n        this.dataSource = dataSource\n        println(\"Data source updated\")\n    }\n}",
    "filename": "9dc3c803e087ebc557cb336f85cc157b_9.kt"
  },
  {
    "conversation_hash": "9dc3c803e087ebc557cb336f85cc157b",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "object PlayerContextManager {\n    private val playerContextMap = mutableMapOf<Any, PlayerContext>()\n\n    fun getPlayerContext(uniqueIdentifier: Any, dataSource: BasePlayerDataSource): PlayerContext {\n        return playerContextMap.getOrPut(uniqueIdentifier) { PlayerContext(dataSource) }\n    }\n\n    fun releasePlayerContext(uniqueIdentifier: Any) {\n        playerContextMap[uniqueIdentifier]?.release()\n        playerContextMap.remove(uniqueIdentifier)\n    }\n}",
    "filename": "9dc3c803e087ebc557cb336f85cc157b_10.kt"
  },
  {
    "conversation_hash": "5a485e027f95529e8d34207c492af428",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "object FeedPlayerContext {\n    private val observers = mutableListOf<(PlayerEvent) -> Unit>()\n    private var currentPlayerEvent: PlayerEvent? = null\n\n    fun subscribe(observer: (PlayerEvent) -> Unit) {\n        observers.add(observer)\n        currentPlayerEvent?.let { observer(it) } // 向新订阅者发送当前状态\n    }\n\n    fun unsubscribe(observer: (PlayerEvent) -> Unit) {\n        observers.remove(observer)\n    }\n\n    fun notifyPlayerEvent(event: PlayerEvent) {\n        currentPlayerEvent = event\n        observers.forEach { it(event) }\n    }\n}",
    "filename": "5a485e027f95529e8d34207c492af428_1.kt"
  },
  {
    "conversation_hash": "5a485e027f95529e8d34207c492af428",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "// 假设有一个横屏播放的函数\nfun enterFullScreen() {\n    // 其他逻辑...\n    // 通知播放器状态改变\n    FeedPlayerContext.notifyPlayerEvent(PlayerEvent.Play)\n}\n\n// 在初始化或适当的地方订阅播放器事件\nFeedPlayerContext.subscribe { event ->\n    when (event) {\n        is PlayerEvent.Play -> println(\"播放器播放\")\n        is PlayerEvent.Pause -> println(\"播放器暂停\")\n        is PlayerEvent.LoadContent -> println(\"加载内容 ID: ${event.contentId}\")\n        is PlayerEvent.UpdateProgress -> println(\"更新进度至 ${event.progress}%\")\n        // 处理其他事件\n    }\n}\n\n// 不要忘记在不再需要接收事件的地方取消订阅\nFeedPlayerContext.unsubscribe(/* 传入之前订阅时的 lambda 引用 */)",
    "filename": "5a485e027f95529e8d34207c492af428_2.kt"
  },
  {
    "conversation_hash": "aebd3877a2488ec84c39a0cff1652d5e",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class Episode(val id: String, val title: String, /* 其他字段 */)\n\nclass ContextHolder {\n    companion object {\n        private val episodePlayerMap = mutableMapOf<String, MediaPlayer>()\n\n        // Key生成策略\n        fun getKeyForEpisode(episode: Episode): String {\n            return \"episode_player_${episode.id}\"\n        }\n\n        // 获取或创建播放器实例\n        fun getOrCreateMediaPlayerForEpisode(episode: Episode): MediaPlayer {\n            val key = getKeyForEpisode(episode)\n            return episodePlayerMap.getOrPut(key) { MediaPlayer() }\n        }\n\n        // 清理不再使用的播放器资源\n        fun releaseMediaPlayerForEpisode(episode: Episode) {\n            val key = getKeyForEpisode(episode)\n            episodePlayerMap[key]?.release()  // 释放资源\n            episodePlayerMap.remove(key)  // 从Map中移除\n        }\n    }\n}\n\nclass MediaPlayer {\n    fun play() {\n        // 开始播放\n    }\n\n    fun release() {\n        // 释放播放器资源\n    }\n}\n\n// 在Activity或Holder中使用\nfun useMediaPlayer(episode: Episode) {\n    val mediaPlayer = ContextHolder.getOrCreateMediaPlayerForEpisode(episode)\n    mediaPlayer.play()\n    // ... 其他逻辑\n\n    // 不再需要时\n    ContextHolder.releaseMediaPlayerForEpisode(episode)\n}",
    "filename": "aebd3877a2488ec84c39a0cff1652d5e_0.kt"
  },
  {
    "conversation_hash": "aebd3877a2488ec84c39a0cff1652d5e",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "// 数据源类，可以初始化但不依赖具体episode信息\nclass PlayerDataSource {\n    fun configureWithEpisode(episode: Episode) {\n        // 根据具体的episode配置数据源\n    }\n    \n    fun fetchData() {\n        // 获取数据\n    }\n}\n\nobject SingletonPlayer {\n    private var dataSource: PlayerDataSource? = null\n\n    // 初始化数据源\n    fun initDataSource(): PlayerDataSource {\n        if (dataSource == null) {\n            dataSource = PlayerDataSource()\n            // 进行通用初始化等操作\n        }\n        return dataSource!!\n    }\n\n    // 当episode信息可用时配置数据源\n    fun configureDataSourceForEpisode(episode: Episode) {\n        dataSource?.configureWithEpisode(episode)\n        // 进一步操作，如加载数据等\n    }\n}\n\nclass MediaPlayer {\n    // 假设MediaPlayer需要PlayerDataSource\n    fun setDataSource(dataSource: PlayerDataSource) {\n        // 配置\n    }\n}",
    "filename": "aebd3877a2488ec84c39a0cff1652d5e_1.kt"
  },
  {
    "conversation_hash": "e89de656fbe2355d70e0efcadc9d2841",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Dentro de tu MainActivity\nval button = findViewById<Button>(R.id.button_open_second_activity)\nbutton.setOnClickListener {\n    // Crea el Intent para iniciar SecondActivity\n    val intent = Intent(this, SecondActivity::class.java)\n    startActivity(intent)\n}",
    "filename": "e89de656fbe2355d70e0efcadc9d2841_4.kt"
  },
  {
    "conversation_hash": "fd6df67d4266ac07a9acaf32fce08c19",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [],
    "code": "jojoException MaExceptionCustom {\n    message: chaîne,\n    code: entier,\n}\n\njojoEssaie {\n    lève MaExceptionCustom(\"Erreur critique\", 101);\n} jojoCapture (MaExceptionCustom e) {\n    println(\"Exception capturée: {}\", e.message);\n}",
    "filename": "fd6df67d4266ac07a9acaf32fce08c19_17.kt"
  },
  {
    "conversation_hash": "95d1344c6ce2413e48336cafce7bba8a",
    "code_index": 22,
    "language": "Kotlin",
    "libraries": [],
    "code": "monJardin = jojoJardin()\nplanteDans(monJardin, \"carotte\", 3)\njojoTantQue (soleilBrille) {\n    arrose(monJardin)\n}",
    "filename": "95d1344c6ce2413e48336cafce7bba8a_22.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface BasePlayerDataSource {\n    fun play()\n    fun pause()\n    fun stop()\n    // 其他基本操作...\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_0.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerContext(private var dataSource: BasePlayerDataSource) : BasePlayerDataSource by dataSource {\n\n    // 数据注册\n    fun registerDataFlow() {\n        // 实现数据流注册逻辑\n    }\n\n    // 数据解注册\n    fun unregisterDataFlow() {\n        // 实现数据流解注册逻辑\n    }\n\n    // 更新数据源根据业务场景\n    fun updateDataSource(newDataSource: BasePlayerDataSource) {\n        // 先解注册老数据流\n        unregisterDataFlow()\n        // 更新数据源\n        dataSource = newDataSource\n        // 重新注册新数据流\n        registerDataFlow()\n    }\n\n    // 销毁相关资源\n    fun destroy() {\n        // 解注册数据流\n        unregisterDataFlow()\n        // 调用dataSource的停止播放等方法，进行资源释放\n        dataSource.stop()\n        // 其他销毁逻辑\n    }\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_1.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyPlayerDataSource : BasePlayerDataSource {\n    override fun play() {\n        println(\"Playing...\")\n    }\n\n    override fun pause() {\n        println(\"Paused.\")\n    }\n\n    override fun stop() {\n        println(\"Stopped.\")\n    }\n    // 其他方法实现...\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_2.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val myDataSource = MyPlayerDataSource()\n    val playerContext = PlayerContext(myDataSource)\n\n    // 注册数据流\n    playerContext.registerDataFlow()\n    // 开始播放\n    playerContext.play()\n\n    // ... 根据业务需求调用其他方法\n\n    // 使用新的数据源\n    val newDataSource = MyPlayerDataSource() // 假设有一个新的数据源\n    playerContext.updateDataSource(newDataSource)\n\n    // 销毁资源\n    playerContext.destroy()\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_3.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface IPlayerContext {\n    fun onCardShow()\n    fun onCardHide()\n    // 可以添加更多的生命周期相关的方法...\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_4.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerContext(private var dataSource: BasePlayerDataSource) : BasePlayerDataSource by dataSource, IPlayerContext {\n\n    // 实现IPlayerContext接口中定义的方法\n    override fun onCardShow() {\n        // 当卡片显示时的逻辑处理\n        println(\"Card is shown\")\n    }\n\n    override fun onCardHide() {\n        // 当卡片隐藏时的逻辑处理\n        println(\"Card is hidden\")\n    }\n\n    // 数据注册\n    fun registerDataFlow() {\n        // 实现数据流注册逻辑\n    }\n\n    // 数据解注册\n    fun unregisterDataFlow() {\n        // 实现数据流解注册逻辑\n    }\n\n    // 更新数据源根据业务场景\n    fun updateDataSource(newDataSource: BasePlayerDataSource) {\n        unregisterDataFlow()\n        dataSource = newDataSource\n        registerDataFlow()\n    }\n\n    // 销毁相关资源\n    fun destroy() {\n        unregisterDataFlow()\n        dataSource.stop()\n        // 其他销毁逻辑\n    }\n    // 其他PlayerContext独有的方法...\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_5.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val myDataSource = MyPlayerDataSource() // 假设MyPlayerDataSource已实现BasePlayerDataSource接口\n    val playerContext = PlayerContext(myDataSource)\n\n    // 卡片显示\n    playerContext.onCardShow()\n\n    // 播放操作\n    playerContext.play()\n\n    // 卡片隐藏\n    playerContext.onCardHide()\n\n    // 更新数据源 或 其他操作...\n\n    // 销毁资源\n    playerContext.destroy()\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_6.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface IPlayerContext {\n    fun play()\n    fun pause()\n    // 添加其他播放器控制相关的方法\n}\n\ninterface IBlockDataSource {\n    fun fetchData()\n    // 定义数据源相关的其他方法\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_7.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerContext(private var dataSource: IBlockDataSource) : IPlayerContext {\n    private var isPlaying = false\n\n    init {\n        // 可以在此初始化需要的操作，如注册监听等\n    }\n\n    // 实现IPlayerContext接口方法\n    override fun play() {\n        if (!isPlaying) {\n            dataSource.fetchData()\n            // 执行播放操作\n            isPlaying = true\n            println(\"Data fetched and playing started.\")\n        }\n    }\n\n    override fun pause() {\n        if (isPlaying) {\n            // 执行暂停操作\n            isPlaying = false\n            println(\"Playback paused.\")\n        }\n    }\n\n    fun updateDataSource(newDataSource: IBlockDataSource) {\n        if (isPlaying) {\n            pause() // 根据需要处理当前播放状态\n        }\n        dataSource = newDataSource\n        // 可能需要基于新数据源做一些操作\n    }\n    \n    // 其他根据业务需求实现的方法...\n}\n\n// 如果有特殊的数据源处理逻辑，可以用扩展函数或者装饰者模式等来扩展\nfun IBlockDataSource.specialProcess() {\n    // 特殊的处理逻辑\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_8.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "class CommonDataSource {\n    // 使用Map来存储每种类型的Listener列表，KClass作为key\n    private val listenersMap: MutableMap<KClass<*>, MutableList<EventListener<*>>> = mutableMapOf()\n\n    // 注册监听数据流\n    fun <T : Any> registerListener(clazz: KClass<T>, listener: EventListener<T>) {\n        // 安全地将listener添加到对应类的listeners列表中\n        val listeners = listenersMap.getOrPut(clazz) { mutableListOf() } as MutableList<EventListener<T>>\n        listeners.add(listener)\n    }\n\n    // 更新数据并通知监听器\n    fun <T : Any> updateData(clazz: KClass<T>, data: T) {\n        // 找到与data对应类型的listeners列表并通知更新\n        val listeners = listenersMap[clazz] as? List<EventListener<T>>\n        listeners?.forEach { it.onDataUpdated(data) }\n    }\n\n    // ... 其他逻辑\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_10.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 11,
    "language": "Kotlin",
    "libraries": [],
    "code": "data class AudioData(val value: String)\n\nfun main() {\n    val dataSource = CommonDataSource()\n\n    // 注册监听AudioData的更新\n    dataSource.registerListener(AudioData::class, object : EventListener<AudioData> {\n        override fun onDataUpdated(data: AudioData) {\n            println(\"Received update for AudioData: $data\")\n        }\n    })\n\n    // 更新数据，所有AudioData的监听器将被通知\n    val newAudioData = AudioData(\"New Audio Data\")\n    dataSource.updateData(AudioData::class, newAudioData)\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_11.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.flow.MutableStateFlow",
      "kotlinx.coroutines.flow.StateFlow"
    ],
    "code": "import kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\n\nclass SharedDataFlow<T>(initialValue: T) {\n    private val _dataFlow = MutableStateFlow(initialValue)\n    val dataFlow: StateFlow<T> = _dataFlow\n\n    fun updateData(newValue: T) {\n        _dataFlow.value = newValue\n    }\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_13.kt"
  },
  {
    "conversation_hash": "5939de42aa9be4e1935affc3d41a17b1",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.flow.collect",
      "kotlinx.coroutines.runBlocking"
    ],
    "code": "import kotlinx.coroutines.flow.collect\nimport kotlinx.coroutines.runBlocking\n\nfun main() = runBlocking {\n    val sharedFlow = SharedDataFlow(\"Initial Value\")\n\n    // 模拟多个收集者\n    launch {\n        sharedFlow.dataFlow.collect { value ->\n            println(\"Collector 1 received: $value\")\n        }\n    }\n\n    launch {\n        sharedFlow.dataFlow.collect { value ->\n            println(\"Collector 2 received: $value\")\n        }\n    }\n\n    // 更新数据，所有收集者将会收到更新\n    sharedFlow.updateData(\"New Value\")\n}",
    "filename": "5939de42aa9be4e1935affc3d41a17b1_14.kt"
  },
  {
    "conversation_hash": "9c4d714b309ea0ebfb47581cb5f39482",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "open class BaseBlockDataSource : IBlockDataSource {\n\n    private val dataFlows = mutableMapOf<String, MutableStateFlow<*>>()\n\n    override fun init() {\n        // 初始化工作\n    }\n\n    override fun registerFlow(key: String, flow: MutableStateFlow<*>) {\n        if (!dataFlows.containsKey(key)) {\n            dataFlows[key] = flow\n        }\n    }\n\n    override fun destroy() {\n        // 取消所有数据流的订阅\n        dataFlows.values.forEach { flow ->\n            (flow as? MutableStateFlow<Any?>)?.let {\n                clearDataFlow(it) // 清空数据流的值\n            }\n        }\n        // 清空数据流集合\n        dataFlows.clear()\n    }\n\n    override fun <T> updateData(key: String, data: T) {\n        val flow = dataFlows[key]\n        (flow as? MutableStateFlow<T>)?.value = data\n    }\n\n    private fun clearDataFlow(flow: MutableStateFlow<Any?>) {\n        // 通过更新数据流的值为 null 来触发数据流的重新派发\n        flow.value = null\n    }\n\n    @Suppress(\"UNCHECKED_CAST\")\n    override fun <T> getDataFlow(key: String, initialValue: T?): Flow<T>? {\n        val flow = dataFlows[key]\n        if (flow == null && initialValue != null) {\n            val newFlow = MutableStateFlow(initialValue)\n            dataFlows[key] = newFlow as MutableStateFlow<*>\n            return newFlow\n        }\n        return flow as? Flow<T>\n    }\n\n    override fun <T> interceptDataFlow(interceptor: BlockDataInterceptor<T>) {\n        TODO(\"Not yet implemented\")\n    }\n}",
    "filename": "9c4d714b309ea0ebfb47581cb5f39482_3.kt"
  },
  {
    "conversation_hash": "9c4d714b309ea0ebfb47581cb5f39482",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "kotlin.reflect.KClass",
      "kotlinx.coroutines.flow.Flow",
      "kotlinx.coroutines.flow.MutableStateFlow"
    ],
    "code": "import kotlin.reflect.KClass\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.MutableStateFlow\n\n// 假设IBlockDataSource接口的定义，这里仅为上下文\ninterface IBlockDataSource {\n    fun init()\n    fun <T> registerFlow(klass: KClass<*>, flow: MutableStateFlow<T>)\n    fun destroy()\n    fun <T> updateData(klass: KClass<*>, data: T)\n    fun <T> getDataFlow(klass: KClass<*>, initialValue: T? = null): Flow<T>?\n    fun <T> interceptDataFlow(interceptor: BlockDataInterceptor<T>)\n}\n\n// BlockDataInterceptor的定义（示例），具体实现根据实际需求\ninterface BlockDataInterceptor<T> {\n    fun intercept(data: T)\n}\n\n// 修改使用KClass作为键值\nopen class BaseBlockDataSource : IBlockDataSource {\n\n    private val dataFlows = mutableMapOf<KClass<*>, MutableStateFlow<*>>()\n\n    override fun init() {\n        // 初始化工作\n    }\n\n    override fun <T> registerFlow(klass: KClass<*>, flow: MutableStateFlow<T>) {\n        if (!dataFlows.containsKey(klass)) {\n            dataFlows[klass] = flow\n        }\n    }\n\n    override fun destroy() {\n        // 取消所有数据流订阅等\n        dataFlows.values.forEach { flow ->\n            (flow as? MutableStateFlow<Any?>)?.value = null // 重置为null或其他清理工作\n        }\n        dataFlows.clear()\n    }\n\n    override fun <T> updateData(klass: KClass<*>, data: T) {\n        (dataFlows[klass] as? MutableStateFlow<T>)?.value = data\n    }\n\n    override fun <T> getDataFlow(klass: KClass<*>, initialValue: T?): Flow<T>? {\n        val flow = dataFlows[klass]\n        return if (flow != null) {\n            flow as? Flow<T>\n        } else {\n            if (initialValue != null) {\n                val newFlow = MutableStateFlow(initialValue)\n                dataFlows[klass] = newFlow\n                newFlow\n            } else {\n                null\n            }\n        }\n    }\n\n    override fun <T> interceptDataFlow(interceptor: BlockDataInterceptor<T>) {\n        TODO(\"Not yet implemented\")\n    }\n}",
    "filename": "9c4d714b309ea0ebfb47581cb5f39482_4.kt"
  },
  {
    "conversation_hash": "9c4d714b309ea0ebfb47581cb5f39482",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "kotlin.reflect.KClass",
      "kotlinx.coroutines.flow.Flow",
      "kotlinx.coroutines.flow.MutableStateFlow"
    ],
    "code": "import kotlin.reflect.KClass\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.MutableStateFlow\n\n// 假设IBlockDataSource接口的定义，这里简化展示\ninterface IBlockDataSource {\n    fun init()\n    fun <T : Any> registerFlow(klass: KClass<out T>, flow: MutableStateFlow<T>)\n    fun destroy()\n    fun <T : Any> updateData(klass: KClass<T>, data: T)\n    fun <T : Any> getDataFlow(klass: KClass<T>, initialValue: T? = null): Flow<T>?\n    fun <T> interceptDataFlow(interceptor: BlockDataInterceptor<T>)\n}\n\n// BlockDataInterceptor的示例定义，具体实现根据实际需求\ninterface BlockDataInterceptor<T> {\n    fun intercept(data: T)\n}\n\nopen class BaseBlockDataSource : IBlockDataSource {\n    private val dataFlows = mutableMapOf<KClass<out Any>, MutableStateFlow<*>>()\n\n    override fun init() {\n        // 初始化工作\n    }\n\n    override fun <T : Any> registerFlow(klass: KClass<out T>, flow: MutableStateFlow<T>) {\n        dataFlows.putIfAbsent(klass, flow)\n    }\n\n    override fun destroy() {\n        dataFlows.values.forEach { flow ->\n            (flow as? MutableStateFlow<Any?>)?.value = null // 重置为null或进行其他清理工作\n        }\n        dataFlows.clear()\n    }\n\n    override fun <T : Any> updateData(klass: KClass<T>, data: T) {\n        (dataFlows[klass] as? MutableStateFlow<T>)?.value = data\n    }\n\n    @Suppress(\"UNCHECKED_CAST\")\n    override fun <T : Any> getDataFlow(klass: KClass<T>, initialValue: T?): Flow<T>? {\n        return dataFlows[klass]?.let { flow ->\n            if (initialValue != null && flow.value == null) {\n                // 如果流不存在且有初始值，则创建并注册新的流\n                val newFlow = MutableStateFlow(initialValue)\n                dataFlows[klass] = newFlow\n                newFlow\n            } else {\n                flow as? Flow<T>\n            }\n        }\n    }\n\n    override fun <T> interceptDataFlow(interceptor: BlockDataInterceptor<T>) {\n        TODO(\"Not yet implemented\")\n    }\n}",
    "filename": "9c4d714b309ea0ebfb47581cb5f39482_5.kt"
  },
  {
    "conversation_hash": "9c4d714b309ea0ebfb47581cb5f39482",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [
      "kotlin.reflect.KClass",
      "kotlinx.coroutines.flow.MutableStateFlow",
      "kotlinx.coroutines.flow.asStateFlow"
    ],
    "code": "import kotlin.reflect.KClass\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asStateFlow\n\nclass FlowManager {\n    private val flowMap = mutableMapOf<KClass<*>, MutableStateFlow<Any?>>()\n\n    // 注册数据流\n    fun <T: Any> registerFlow(clazz: KClass<T>, initialState: T) {\n        flowMap[clazz] = MutableStateFlow(initialState as Any?)\n    }\n\n    // 更新数据\n    fun <T: Any> updateData(clazz: KClass<T>, data: T) {\n        val flow = flowMap[clazz] as? MutableStateFlow<T>\n        flow?.value = data\n    }\n\n    // 获取数据流\n    fun <T: Any> getFlow(clazz: KClass<T>): MutableStateFlow<T>? {\n        return flowMap[clazz] as? MutableStateFlow<T>\n    }\n}\n\n// 辅助函数，帮助简化流注册和更新的调用\ninline fun <reified T: Any> FlowManager.registerFlow(initialState: T) {\n    registerFlow(T::class, initialState)\n}\n\ninline fun <reified T: Any> FlowManager.updateData(data: T) {\n    updateData(T::class, data)\n}\n\ninline fun <reified T: Any> FlowManager.getFlow(): MutableStateFlow<T>? {\n    return getFlow(T::class)\n}",
    "filename": "9c4d714b309ea0ebfb47581cb5f39482_7.kt"
  },
  {
    "conversation_hash": "9c4d714b309ea0ebfb47581cb5f39482",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.GlobalScope",
      "kotlinx.coroutines.flow.collect",
      "kotlinx.coroutines.launch"
    ],
    "code": "import kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.flow.collect\nimport kotlinx.coroutines.launch\n\nfun main() {\n    val flowManager = FlowManager()\n\n    // 注册AudioData和EpisodeData的数据流\n    flowManager.registerFlow(AudioData(\"Initial Audio\"))\n    flowManager.registerFlow(EpisodeData(\"Initial Episode\"))\n\n    // 模拟业务方监听AudioData的更新\n    GlobalScope.launch {\n        flowManager.getFlow<AudioData>()?.collect {\n            println(\"AudioData updated: $it\")\n        }\n    }\n\n    // 模拟业务方监听EpisodeData的更新\n    GlobalScope.launch {\n        flowManager.getFlow<EpisodeData>()?.collect {\n            println(\"EpisodeData updated: $it\")\n        }\n    }\n\n    // 更新数据，触发数据流更新\n    flowManager.updateData(AudioData(\"New Audio\"))\n    flowManager.updateData(EpisodeData(\"New Episode\"))\n}",
    "filename": "9c4d714b309ea0ebfb47581cb5f39482_8.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewModel : ViewModel() {\n    init {\n        // 初始化数据源\n        val dataSource = BaseBlockDataSource()\n        dataSource.init()\n    }\n}",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_4.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    // 注册并监听数据流\n    viewModel.bindDataStreams()\n}\n\n// 在ViewModel或数据处理类内\nfun bindDataStreams() {\n    // 假设dataSource已经在ViewModel初始化时init\n    val audioDataFlow = MutableStateFlow<AudioData>(/* initial AudioData value */)\n    registerFlow(AudioData::class, audioDataFlow)\n    \n    launch {\n        dataSource.getDataFlow(AudioData::class)?.collect { audioData ->\n            // 适时更新UI\n        }\n    }\n}",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_5.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onDestroyView() {\n    super.onDestroyView()\n    // 解除数据流的注册或停止监听，避免内存泄漏\n    viewModel.cleanUp()\n}",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_6.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun bindData(data: Any?) {\n    super.bindData(data)\n    // 启动协程收集数据流\n    CoroutineScope(Dispatchers.Main).launch {\n        longTestDataFlow.collect {\n            // 更新UI或处理数据\n        }\n    }\n}",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_7.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onViewRecycled() {\n    super.onViewRecycled()\n    // 取消或清理协程，停止收集数据流\n    // 你可能需要保存协程的引用才能在这里取消它\n}",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_8.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 9,
    "language": "Kotlin",
    "libraries": [],
    "code": "private var collectJob: Job? = null\n\noverride fun bindData(data: Any?) {\n    super.bindData(data)\n    // 启动并保存协程引用\n    collectJob = CoroutineScope(Dispatchers.Main).launch {\n        longTestDataFlow.collect {\n            // 更新UI或处理数据\n        }\n    }\n}\n\noverride fun onViewRecycled() {\n    super.onViewRecycled()\n    // 取消协程\n    collectJob?.cancel()\n}",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_9.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "interface IBlockDataSource {\n    fun init()\n    fun <T : Any> registerFlow(klass: KClass<out T>, flow: MutableStateFlow<T>)\n    fun <T : Any> updateData(klass: KClass<T>, data: T)\n    fun destroy()\n    fun <T : Any> unregisterFlow(klass: KClass<out T>)\n}\n\nopen class BaseBlockDataSource : IBlockDataSource {\n\n    private val dataFlows = mutableMapOf<KClass<*>, MutableStateFlow<*>>()\n\n    // 省略其他方法的实现...\n\n    override fun <T : Any> unregisterFlow(klass: KClass<out T>) {\n        dataFlows.remove(klass)\n    }\n}",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_10.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun <T : Any> unregisterFlow(klass: KClass<out T>) {\n    // 取消所有与该flow关联的正在进行的收集作业\n    flowCollectJobs[klass]?.forEach { it.cancel() }\n    flowCollectJobs.remove(klass) // 清理作业跟踪记录\n    \n    // 从主映射中移除flow\n    dataFlows.remove(klass)\n}",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_13.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun <T> collectFlow(klass: KClass<T>, flow: Flow<T>, coroutineScope: CoroutineScope) {\n    val job = coroutineScope.launch {\n        flow.collect {\n            // 处理flow数据的逻辑\n        }\n    }\n    // 将作业保存到映射中，以后可以用来取消\n    val jobs = flowCollectJobs.getOrPut(klass) { mutableListOf() }\n    jobs.add(job)\n}",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_14.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun clear() {\n    // 取消所有收集作业并清理映射\n    flowCollectJobs.forEach { (_, jobs) -> jobs.forEach { it.cancel() } }\n    flowCollectJobs.clear()\n\n    dataFlows.clear()\n}",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_15.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [
      "kotlin.reflect.KClass",
      "kotlinx.coroutines.CoroutineScope",
      "kotlinx.coroutines.Dispatchers",
      "kotlinx.coroutines.Job",
      "kotlinx.coroutines.flow.MutableStateFlow",
      "kotlinx.coroutines.flow.StateFlow",
      "kotlinx.coroutines.launch"
    ],
    "code": "import kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlin.reflect.KClass\n\nabstract class BaseBlockDataSource {\n\n    private val dataFlows = mutableMapOf<KClass<*>, MutableStateFlow<*>>()\n    private val flowCollectJobs = mutableMapOf<KClass<*>, MutableList<Job>>()\n    private val coroutineScope = CoroutineScope(Dispatchers.Default) // 使用默认调度程序\n\n    fun <T : Any> registerFlow(klass: KClass<out T>, flow: MutableStateFlow<T>) {\n        dataFlows[klass] = flow\n    }\n\n    fun <T : Any> unregisterFlow(klass: KClass<out T>) {\n        // 取消与该flow相关联的所有收集作业\n        flowCollectJobs[klass]?.forEach { it.cancel() }\n        flowCollectJobs.remove(klass)\n\n        // 从主数据映射中移除flow\n        dataFlows.remove(klass)\n    }\n\n    fun <T> collectFlow(klass: KClass<T>, flow: StateFlow<T>, collector: suspend (T) -> Unit) {\n        val job = coroutineScope.launch {\n            flow.collect(collector)\n        }\n\n        // 将作业保存到映射中，以后可以用来取消\n        val jobs = flowCollectJobs.getOrPut(klass) { mutableListOf() }\n        jobs.add(job)\n    }\n\n    fun destroy() {\n        // 清理所有资源\n        flowCollectJobs.values.forEach { jobs -> jobs.forEach { it.cancel() } }\n        flowCollectJobs.clear()\n        dataFlows.clear()\n    }\n}",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_16.kt"
  },
  {
    "conversation_hash": "5eaad3eeb6bb2d5853c54af39f491fb5",
    "code_index": 17,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.ConcurrentHashMap",
      "kotlin.reflect.KClass",
      "kotlinx.coroutines.CoroutineScope",
      "kotlinx.coroutines.Dispatchers",
      "kotlinx.coroutines.Job",
      "kotlinx.coroutines.flow.MutableStateFlow",
      "kotlinx.coroutines.flow.StateFlow",
      "kotlinx.coroutines.launch"
    ],
    "code": "import kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.launch\nimport java.util.concurrent.ConcurrentHashMap\nimport kotlin.reflect.KClass\n\nopen class BaseBlockDataSource : IBlockDataSource {\n    private val dataFlows = ConcurrentHashMap<KClass<*>, MutableStateFlow<*>>()\n    // 新增映射，用于追踪与每个flow相关联的收集作业\n    private val flowCollectJobs = ConcurrentHashMap<KClass<*>, MutableList<Job>>()\n    private val coroutineScope = CoroutineScope(Dispatchers.Default) // 使用默认调度器，用于收集作业\n    \n    override fun init() {\n        // 初始化工作\n    }\n    \n    override fun <T : Any> registerFlow(klass: KClass<out T>, flow: MutableStateFlow<T>) {\n        if (!dataFlows.containsKey(klass)) {\n            dataFlows[klass] = flow\n        }\n    }\n    \n    override fun <T : Any> unRegisterFlow(klass: KClass<out T>) {\n        if (dataFlows.containsKey(klass)) {\n            // 取消与该flow相关联的所有收集作业\n            flowCollectJobs[klass]?.forEach { it.cancel() }\n            flowCollectJobs.remove(klass)\n            // 从流映射中移除\n            dataFlows.remove(klass)\n        }\n    }\n    \n    @Suppress(\"UNCHECKED_CAST\")\n    override fun <T : Any> updateData(klass: KClass<T>, data: T) {\n        (dataFlows[klass] as? MutableStateFlow<T>)?.updateValue(data)\n    }\n    \n    override fun destroy() {\n        dataFlows.values.forEach { flow ->\n            (flow as? MutableStateFlow<Any?>)?.value = null // 重置为null或进行其他清理工作\n        }\n        flowCollectJobs.values.forEach { jobs -> jobs.forEach { it.cancel() } } // 取消所有收集作业\n        dataFlows.clear()\n        flowCollectJobs.clear()\n    }\n    \n    override fun <T : Any> getDataFlow(klass: KClass<T>, initialValue: T?): StateFlow<T>? {\n        return dataFlows[klass]?.let { flow ->\n            if (initialValue != null && flow.value == null) {\n                // 如果流不存在且有初始值，则创建并注册新的流\n                val newFlow = MutableStateFlow(initialValue)\n                dataFlows[klass] = newFlow\n                newFlow\n            } else {\n                flow as? StateFlow<T>\n            }\n        }\n    }\n    \n    fun <T> collectFlow(klass: KClass<T>, flow: StateFlow<T>, collector: suspend (T) -> Unit) {\n        val job = coroutineScope.launch {\n            flow.collect(collector)\n        }\n        val jobs = flowCollectJobs.getOrPut(klass) { mutableListOf() }\n        jobs.add(job)\n    }\n    \n    private fun <T> MutableStateFlow<T>.updateValue(newValue: T) {\n        this.value = newValue\n    }\n}\n\n// 请确保 IBlockDataSource 接口有相应的方法定义，以及 BlockDataInterceptor 是有效地定义。",
    "filename": "5eaad3eeb6bb2d5853c54af39f491fb5_17.kt"
  },
  {
    "conversation_hash": "583c85a9879a69028fb7340a3b3f3ff8",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class BlockDataSourceProxy(private val baseBlockDataSource: BaseBlockDataSource) : IBlockDataSource {\n\n    init {\n        // 初始化时可以选择性进行数据源的初始化或其他准备工作\n        baseBlockDataSource.init()\n    }\n\n    // 注册数据流，通过代理类的方法暴露给业务方\n    override fun <T : Any> registerFlow(klass: KClass<out T>, flow: MutableStateFlow<T>) {\n        baseBlockDataSource.registerFlow(klass, flow)\n    }\n\n    // 取消注册数据流\n    override fun <T : Any> unRegisterFlow(klass: KClass<out T>) {\n        baseBlockDataSource.unRegisterFlow(klass)\n    }\n\n    // 更新数据\n    override fun <T : Any> updateData(klass: KClass<T>, data: T) {\n        baseBlockDataSource.updateData(klass, data)\n    }\n\n    // 销毁，清理资源\n    override fun destroy() {\n        baseBlockDataSource.destroy()\n    }\n\n    // 从基本数据源获取数据流\n    override fun <T : Any> getDataFlow(klass: KClass<T>, initialValue: T?): Flow<T>? {\n        return baseBlockDataSource.getDataFlow(klass, initialValue)\n    }\n\n    // 收集数据流，业务方可以通过代理类绑定数据收集\n    override fun <T : Any> collectFlow(klass: KClass<T>, flow: MutableStateFlow<T>, collector: suspend (T) -> Unit) {\n        baseBlockDataSource.collectFlow(klass, flow, collector)\n    }\n\n    // 此方法直接转发给基础数据源处理\n    override fun <T> interceptDataFlow(interceptor: BlockDataInterceptor<T>) {\n        baseBlockDataSource.interceptDataFlow(interceptor)\n    }\n\n    // 自定义方法，业务方可以通过这个方法触发数据源更新\n    fun <T : Any> processDataUpdate(klass: KClass<T>, data: T) {\n        updateData(klass, data)\n    }\n\n    // 可以在这里添加额外的方法以实现特定的请求或监听特定的事件\n\n}",
    "filename": "583c85a9879a69028fb7340a3b3f3ff8_0.kt"
  },
  {
    "conversation_hash": "c5e3b92c9cf17c673ef360d01626b9ce",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class PlayerDataSourceFactory : ISharedPlayerDataSourceFactory {\n    override fun create(id: Any): ISharedPlayerDataSource {\n        // 根据id的类型或值创建对应的ISharedPlayerDataSource子类实例\n        // 这里只是示例，实际情况你需要根据你的需求来实现\n        return when (id) {\n            is String -> MyPlayerDataSource()  // 假设的子类\n            else -> DefaultPlayerDataSource()  // 默认的实现\n        }\n    }\n}",
    "filename": "c5e3b92c9cf17c673ef360d01626b9ce_1.kt"
  },
  {
    "conversation_hash": "c5e3b92c9cf17c673ef360d01626b9ce",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "private val playerContextMap = ConcurrentHashMap<Any, WeakReference<ISharedPlayerDataSource>>()\nprivate val dataSourceFactory = PlayerDataSourceFactory()\n\nfun checkAndCreatePlayerDataSource(id: Any): ISharedPlayerDataSource? {\n    val reference = playerContextMap[id]\n    var dataSource: ISharedPlayerDataSource? = null\n    if (reference?.get() == null) {  // 如果缓存中不存在或已被垃圾回收\n        val newDataSource = dataSourceFactory.create(id)\n        dataSource = newDataSource\n        playerContextMap[id] = WeakReference(newDataSource)\n    } else {\n        dataSource = reference.get()\n    }\n    return dataSource\n}",
    "filename": "c5e3b92c9cf17c673ef360d01626b9ce_2.kt"
  },
  {
    "conversation_hash": "5e3eb8ae9e64f4c0f1f2cbbaa90a969f",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "object SharedPlayerDataSourceManager {\n\n    private val sharedPlayerDataSourceMap = ConcurrentHashMap<Long, WeakReference<ISharedPlayerDataSource>>()\n    private val referenceCountMap = ConcurrentHashMap<Long, AtomicInteger>()\n\n    // 创建PlayerDataSource的方法\n    fun checkAndCreatePlayerDataSource(id: Long, factory: ISharedPlayerDataSourceFactory) : ISharedPlayerDataSource?{\n        var dataSource: ISharedPlayerDataSource? = sharedPlayerDataSourceMap[id]?.get()\n\n        if (dataSource == null) {  // 缓存中不存在或已被垃圾回收\n            dataSource = factory.create()\n            sharedPlayerDataSourceMap[id] = WeakReference(dataSource)\n            referenceCountMap[id] = AtomicInteger(1) // 初始化引用计数\n        } else {\n            // 如果dataSource存在，则增加引用计数\n            referenceCountMap[id]?.incrementAndGet()\n        }\n        return dataSource\n    }\n\n    /**\n     * 更为细致控制引用的释放流程，按需减少引用计数\n     */\n    fun releaseReference(id: Long) {\n        // 尝试减少引用计数\n        val newCount = referenceCountMap[id]?.decrementAndGet()\n        if (newCount != null && newCount <= 0) {\n            // 引用计数为零，可以安全地销毁资源并从Map中移除\n            releasePlayerDataSource(id)\n        }\n    }\n\n    /**\n     * 释放PlayerContext缓存\n     */\n    fun releasePlayerDataSource(id: Long) {\n        sharedPlayerDataSourceMap[id]?.get()?.destroy()\n        sharedPlayerDataSourceMap.remove(id)\n        referenceCountMap.remove(id) // 从引用计数Map中移除\n    }\n}",
    "filename": "5e3eb8ae9e64f4c0f1f2cbbaa90a969f_0.kt"
  },
  {
    "conversation_hash": "5e3eb8ae9e64f4c0f1f2cbbaa90a969f",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "java.lang.ref.ReferenceQueue",
      "java.lang.ref.WeakReference",
      "java.util.concurrent.ConcurrentHashMap"
    ],
    "code": "import java.lang.ref.ReferenceQueue\nimport java.lang.ref.WeakReference\nimport java.util.concurrent.ConcurrentHashMap\n\nobject SharedPlayerDataSourceManager {\n\n    private val sharedPlayerDataSourceMap = ConcurrentHashMap<Long, WeakReference<ISharedPlayerDataSource>>()\n    private val referenceQueue = ReferenceQueue<ISharedPlayerDataSource>()\n    private val cleanupThread = Thread {\n        while (true) {\n            try {\n                // 阻塞直到引用被加入队列\n                val ref = referenceQueue.remove() as PlayerDataSourceReference\n                sharedPlayerDataSourceMap[ref.id]?.get()?.destroy()\n                sharedPlayerDataSourceMap.remove(ref.id)\n            } catch (e: InterruptedException) {\n                break // 当线程被中断时退出循环\n            }\n        }\n    }\n\n    init {\n        cleanupThread.start()\n    }\n\n    fun checkAndCreatePlayerDataSource(id: Long, factory: ISharedPlayerDataSourceFactory): ISharedPlayerDataSource? {\n        // 清理已经被回收的PlayerDataSource\n        System.gc() // 强制调用GC进行演示，实际使用中不推荐这么做\n        sharedPlayerDataSourceMap.compute(id) { _, oldRef ->\n            oldRef?.get()?.let {\n                // 如果存在且未被回收，则返回原有Reference\n                return@compute oldRef\n            }\n            // 如果不存在或被回收，则创建新的\n            val newDataSource = factory.create()\n            PlayerDataSourceReference(id, newDataSource, referenceQueue)\n        }\n\n        return sharedPlayerDataSourceMap[id]?.get()\n    }\n\n    private class PlayerDataSourceReference(\n        val id: Long,\n        referent: ISharedPlayerDataSource,\n        q: ReferenceQueue<in ISharedPlayerDataSource>\n    ) : WeakReference<ISharedPlayerDataSource>(referent, q)\n\n}",
    "filename": "5e3eb8ae9e64f4c0f1f2cbbaa90a969f_1.kt"
  },
  {
    "conversation_hash": "9acc325acf8aa97b7dd57bce32ef93e9",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.flow.MutableStateFlow",
      "kotlinx.coroutines.flow.asStateFlow"
    ],
    "code": "import kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asStateFlow\n\nobject DataRepository {\n    private val _dataFlow = MutableStateFlow(\"Initial Data\")\n    val dataFlow = _dataFlow.asStateFlow()\n\n    fun updateData(newData: String) {\n        _dataFlow.value = newData\n    }\n}\n\nclass MyObject {\n    init {\n        // 启动一个协程来监听数据变化，并进行处理\n        kotlinx.coroutines.GlobalScope.launch {\n            DataRepository.dataFlow.collect { newData ->\n                // 对数据变化做出响应\n                println(\"Data changed: $newData\")\n            }\n        }\n    }\n}\n\nfun main() {\n    // 创建两个对象，它们将同时监听DataRepository中的数据变化\n    val obj1 = MyObject()\n    val obj2 = MyObject()\n\n    // 模拟数据更新\n    DataRepository.updateData(\"Updated Data 1\")\n    DataRepository.updateData(\"Updated Data 2\")\n}",
    "filename": "9acc325acf8aa97b7dd57bce32ef93e9_0.kt"
  },
  {
    "conversation_hash": "9acc325acf8aa97b7dd57bce32ef93e9",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.",
      "kotlinx.coroutines.flow."
    ],
    "code": "import kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.*\n\nfun main() = runBlocking {\n    val sourceFlow = flowOf(1, 2, 3, 4)\n    val sharedFlow = sourceFlow.shareIn(\n        scope = this, // 使用协程的作用域\n        replay = 1, // 重放最后一个值给新订阅者\n        started = SharingStarted.Lazily // 当有订阅者时才开始\n    )\n\n    // 第一个订阅者\n    launch {\n        sharedFlow.collect { value ->\n            println(\"First collector received: $value\")\n        }\n    }\n\n    // 延迟以确保上面的协程开始执行\n    delay(100)\n\n    // 第二个订阅者\n    launch {\n        sharedFlow.collect { value ->\n            println(\"Second collector received: $value\")\n        }\n    }\n}",
    "filename": "9acc325acf8aa97b7dd57bce32ef93e9_1.kt"
  },
  {
    "conversation_hash": "ef595567d8911161a83a40b1df62d308",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "// 首个订阅者\nGlobalScope.launch {\n    counterStateFlow.collect { value ->\n        println(\"订阅者1: $value\")\n    }\n}\n\n// 第二个订阅者\nGlobalScope.launch {\n    counterStateFlow.collect { value ->\n        println(\"订阅者2: $value\")\n    }\n}",
    "filename": "ef595567d8911161a83a40b1df62d308_3.kt"
  },
  {
    "conversation_hash": "ca0360e55fc1637aed29b952d1922e9d",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.ConcurrentHashMap",
      "kotlinx.coroutines."
    ],
    "code": "import kotlinx.coroutines.*\nimport java.util.concurrent.ConcurrentHashMap\n\nfun main() {\n    val jobManager = JobManager()\n    runBlocking {\n        jobManager.startRepeatingJob(\"Job1\") {\n            println(\"Executing Job1 at ${System.currentTimeMillis()}\")\n        }\n\n        delay(61000) // Simulates waiting for a bit more than a minute\n        jobManager.accessJob(\"Job1\") // Re-trigger the job on access\n    }\n}\n\nclass JobManager {\n    private val jobs = ConcurrentHashMap<String, Job>()\n    private val scope = CoroutineScope(Dispatchers.Default)\n\n    fun startRepeatingJob(key: String, action: suspend () -> Unit) {\n        // Cancel the existing job (if any) before launching a new one\n        jobs[key]?.cancel()\n        jobs[key] = scope.launch {\n            while (isActive) { // Keeps the job running until it's explicitly cancelled\n                action.invoke()\n                delay(60000) // Wait for a minute before repeating\n            }\n        }\n    }\n\n    fun accessJob(key: String) {\n        jobs[key]?.let {\n            if (it.isCancelled || it.isCompleted) {\n                // The job either completed or was cancelled, you might want to restart it\n                println(\"$key is no longer active. Consider restarting it.\")\n            } else {\n                // The job is still active, you might want to do something else here\n                println(\"$key is still active.\")\n            }\n        } ?: run {\n            // The job does not exist, handle accordingly, perhaps launching a new job\n            println(\"No job found for key $key. You might want to start it.\")\n        }\n    }\n}",
    "filename": "ca0360e55fc1637aed29b952d1922e9d_0.kt"
  },
  {
    "conversation_hash": "41403bc481b6e797275f33d0afa7e98d",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.ConcurrentHashMap",
      "kotlin.coroutines.CoroutineContext",
      "kotlinx.coroutines."
    ],
    "code": "import kotlinx.coroutines.*\nimport java.util.concurrent.ConcurrentHashMap\nimport kotlin.coroutines.CoroutineContext\n\nclass JobManager(private val scope: CoroutineScope) : CoroutineScope by scope {\n    private val jobs: ConcurrentHashMap<String, Job> = ConcurrentHashMap()\n\n    fun addJob(key: String, work: suspend () -> Unit) {\n        val job = launch {\n            while (isActive) { // Keep the task running\n                work()\n                delay(60_000) // Wait for a minute before repeating\n            }\n        }\n        jobs[key] = job\n    }\n\n    fun cancelJob(key: String) {\n        jobs[key]?.cancel()\n        jobs.remove(key)\n    }\n\n    fun repeatJobNow(key: String) {\n        jobs[key]?.cancel() // Cancel the current job if it's running\n        val job = jobs[key] // Access the job to potentially repeat its execution immediately\n        launch {\n            job?.join() // Wait for the job to be fully cancelled if it was running\n            jobs.remove(key) // Remove the previous job\n            // Add the new job which has the same `key`\n            addJob(key) {\n                // Your specific repeatable work here\n                println(\"Work repeated immediately for $key at ${System.currentTimeMillis()}\")\n            }\n        }\n    }\n}\n\n// Usage\nfun main() {\n    val jobManager = JobManager(GlobalScope)\n\n    jobManager.addJob(\"uniqueKey\") {\n        // Your repeatable work here.\n        println(\"Doing work for uniqueKey at ${System.currentTimeMillis()}\")\n    }\n\n    Thread.sleep(120_000) // Simulate wait to see repetition\n\n    jobManager.repeatJobNow(\"uniqueKey\") // Manually trigger the repetition of the job\n\n    Thread.sleep(5000) // Ensure there's a delay to observe the output before app shutdown\n}",
    "filename": "41403bc481b6e797275f33d0afa7e98d_1.kt"
  },
  {
    "conversation_hash": "cb840c16fe3449648ec39e728c82c7ec",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "java.util.LinkedList",
      "java.util.Queue"
    ],
    "code": "import java.util.LinkedList\nimport java.util.Queue\n\nfun main() {\n    // Creating a queue of persons\n    val peopleQueue: Queue<Person> = LinkedList<Person>().apply {\n        add(Person(\"Alice\", 30))\n        add(Person(\"Bob\", 25))\n        add(Person(\"Charlie\", 35))\n    }\n\n    val nameToFind = \"Bob\"\n    \n    // Using any() to check if the queue contains a person with the specified name\n    val containsPersonWithName = peopleQueue.any { person -> person.name == nameToFind }\n    \n    // Printing the result\n    println(\"Does the queue contain a person with name $nameToFind? $containsPersonWithName\")\n    \n    // Optional: Finding the person with the specified name and printing their details\n    val foundPerson = peopleQueue.find { it.name == nameToFind }\n    \n    if (foundPerson != null) {\n        println(\"Found person: $foundPerson\")\n    } else {\n        println(\"No person found with name $nameToFind\")\n    }\n}",
    "filename": "cb840c16fe3449648ec39e728c82c7ec_1.kt"
  },
  {
    "conversation_hash": "d80d69c229c941255c265a1dc063ee34",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun convertValue(t: Double, e: Int, n: Int, i: Array<Array<Array<Double>>>): Double {\n    if (\"---\" == t.toString()) return \"---\".toDouble() // \"---\" ile karşılaştırma mantıklı değil, t'nin tipi üzerinden düşünülmeli\n    if (t >= 500) return i[e][500][n]\n    if (t <= 100) return i[e][100][n]\n    \n    val o = kotlin.math.floor(t).toInt()\n    val a = o + 1\n    val l = 1 - kotlin.math.abs(t - o)\n    val d = 1 - kotlin.math.abs(a - t)\n    \n    return l * i[e][o][n] + d * i[e][a][n]\n}",
    "filename": "d80d69c229c941255c265a1dc063ee34_0.kt"
  },
  {
    "conversation_hash": "86cf9e8e3d90eba410a8a2709e426d06",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "// Örnek olarak Kotlin kodu\nlateinit var progressDialog: ProgressDialog\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_test)\n\n    // progressDialog'u burada başlatın\n    progressDialog = ProgressDialog(this)\n    progressDialog.setMessage(\"Lütfen bekleyin...\")\n    // Diğer işlemlerinizi burada yapın\n}",
    "filename": "86cf9e8e3d90eba410a8a2709e426d06_0.kt"
  },
  {
    "conversation_hash": "bee3cacfa0e71e8d96bf2828e8fbf8f8",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "retrofit2.Call",
      "retrofit2.http.GET",
      "retrofit2.http.Query"
    ],
    "code": "import retrofit2.Call\n    import retrofit2.http.GET\n    import retrofit2.http.Query\n\n    interface NewsService {\n        @GET(\"v2/top-headlines\")\n        fun getTopHeadlines(@Query(\"country\") country: String, @Query(\"apiKey\") apiKey: String): Call<NewsResponse>\n    }",
    "filename": "bee3cacfa0e71e8d96bf2828e8fbf8f8_1.kt"
  },
  {
    "conversation_hash": "bee3cacfa0e71e8d96bf2828e8fbf8f8",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "androidx.lifecycle.LiveData",
      "androidx.lifecycle.MutableLiveData",
      "androidx.lifecycle.ViewModel",
      "androidx.lifecycle.viewModelScope",
      "kotlinx.coroutines.launch"
    ],
    "code": "import androidx.lifecycle.LiveData\n    import androidx.lifecycle.MutableLiveData\n    import androidx.lifecycle.ViewModel\n    import androidx.lifecycle.viewModelScope\n    import kotlinx.coroutines.launch\n\n    class NewsViewModel : ViewModel() {\n\n        private val _articles = MutableLiveData<List<Article>>()\n        val articles: LiveData<List<Article>> = _articles\n\n        fun getTopHeadlines(country: String, apiKey: String) {\n            viewModelScope.launch {\n                val response = RetrofitClient.newsService.getTopHeadlines(country, apiKey).execute()\n                if (response.isSuccessful && response.body() != null) {\n                    _articles.postValue(response.body()!!.articles)\n                }\n            }\n        }\n    }",
    "filename": "bee3cacfa0e71e8d96bf2828e8fbf8f8_4.kt"
  },
  {
    "conversation_hash": "bee3cacfa0e71e8d96bf2828e8fbf8f8",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "androidx.compose.foundation.layout.Column",
      "androidx.compose.foundation.layout.padding",
      "androidx.compose.material.Text",
      "androidx.compose.runtime.Composable",
      "androidx.compose.ui.Modifier",
      "androidx.compose.ui.unit.dp",
      "androidx.lifecycle.viewmodel.compose.viewModel"
    ],
    "code": "import androidx.compose.runtime.Composable\n    import androidx.compose.foundation.layout.Column\n    import androidx.compose.foundation.layout.padding\n    import androidx.compose.material.Text\n    import androidx.compose.ui.Modifier\n    import androidx.compose.ui.unit.dp\n    import androidx.lifecycle.viewmodel.compose.viewModel\n\n    @Composable\n    fun NewsList(newsViewModel: NewsViewModel = viewModel()) {\n        val articles = newsViewModel.articles.value ?: listOf()\n\n        // Example of a simple list display\n        Column(modifier = Modifier.padding(16.dp)) {\n            for (article in articles) {\n                Text(text = article.title, modifier = Modifier.padding(8.dp))\n                // Here you could add more detail or even make these clickable\n            }\n        }\n    }",
    "filename": "bee3cacfa0e71e8d96bf2828e8fbf8f8_5.kt"
  },
  {
    "conversation_hash": "bee3cacfa0e71e8d96bf2828e8fbf8f8",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "sealed class NewsUIState {\n    object Loading : NewsUIState()\n    data class Success(val articles: List<Article>) : NewsUIState()\n    data class Error(val message: String) : NewsUIState()\n}\n\nclass NewsViewModel : ViewModel() {\n\n    private val _uiState = MutableLiveData<NewsUIState>(NewsUIState.Loading)\n    val uiState: LiveData<NewsUIState> = _uiState\n\n    fun getTopHeadlines(country: String, apiKey: String) {\n        viewModelScope.launch {\n            try {\n                _uiState.postValue(NewsUIState.Loading)\n                val response = RetrofitClient.newsService.getTopHeadlines(country, apiKey).execute()\n                if (response.isSuccessful && response.body() != null) {\n                    _uiState.postValue(NewsUIState.Success(response.body()!!.articles))\n                } else {\n                    _uiState.postValue(NewsUIState.Error(\"An error occurred: ${response.message()}\"))\n                }\n            } catch (e: Exception) {\n                _uiState.postValue(NewsUIState.Error(\"Failed to fetch data: ${e.message}\"))\n            }\n        }\n    }\n}",
    "filename": "bee3cacfa0e71e8d96bf2828e8fbf8f8_6.kt"
  },
  {
    "conversation_hash": "bee3cacfa0e71e8d96bf2828e8fbf8f8",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun NewsScreen(newsViewModel: NewsViewModel = viewModel()) {\n    val state = newsViewModel.uiState.observeAsState()\n\n    when (val currentState = state.value) {\n        is NewsUIState.Loading -> LoadingView()\n        is NewsUIState.Success -> NewsList(currentState.articles)\n        is NewsUIState.Error -> ErrorView(currentState.message)\n    }\n}\n\n@Composable\nfun LoadingView() {\n    Box(contentAlignment = Alignment.Center, modifier = Modifier.fillMaxSize()) {\n        CircularProgressIndicator()\n    }\n}\n\n@Composable\nfun ErrorView(message: String) {\n    Column(modifier = Modifier.fillMaxSize(), horizontalAlignment = Alignment.CenterHorizontally, verticalArrangement = Arrangement.Center) {\n        Text(text = \"Error: $message\")\n    }\n}",
    "filename": "bee3cacfa0e71e8d96bf2828e8fbf8f8_7.kt"
  },
  {
    "conversation_hash": "bee3cacfa0e71e8d96bf2828e8fbf8f8",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Composable\nfun NewsScreenWithRefresh(newsViewModel: NewsViewModel = viewModel()) {\n    Column() {\n        Button(onClick = { newsViewModel.getTopHeadlines(\"us\", \"YOUR_API_KEY\") }) {\n            Text(\"Refresh News\")\n        }\n        NewsScreen(newsViewModel)\n    }\n}",
    "filename": "bee3cacfa0e71e8d96bf2828e8fbf8f8_8.kt"
  },
  {
    "conversation_hash": "d7ce6a057f3da1899eee7f0462f1f818",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun connectAndPrintSample(target: String) {\n    val printer = Epos2Printer(Epos2Printer.TM_T88, Epos2Printer.MODEL_ANK, applicationContext)\n    \n    try {\n        printer.connect(target, Epos2Printer.PARAM_DEFAULT)\n        printer.beginTransaction()\n        \n        // Settings for text printing\n        printer.addText(\"Hello, Epson Printer!\\n\")\n        \n        printer.sendData(Epos2Printer.PARAM_DEFAULT)\n        \n        // Disconnect after printing\n        printer.disconnect()\n    } catch (e: Exception) {\n        e.printStackTrace()\n    } finally {\n        printer.clearCommandBuffer()\n        printer.endTransaction()\n        printer.disconnect()\n        printer.dispose()\n    }\n}",
    "filename": "d7ce6a057f3da1899eee7f0462f1f818_10.kt"
  },
  {
    "conversation_hash": "d7ce6a057f3da1899eee7f0462f1f818",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun printArabicText(printer: Printer, text: String) {\n    try {\n        printer.addTextAlign(Printer.ALIGN_LEFT)\n        printer.addTextSmooth(Printer.TRUE)\n        printer.addTextStyle(Printer.PARAM_DEFAULT, Printer.PARAM_DEFAULT, Printer.TRUE, Printer.PARAM_DEFAULT)\n        val arabicText = PrinterUtils.reorderArabicText(text)\n        printer.addText(arabicText)\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n}",
    "filename": "d7ce6a057f3da1899eee7f0462f1f818_12.kt"
  },
  {
    "conversation_hash": "32bef672ddd460782783ae683010cb24",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.util.concurrent.ConcurrentHashMap",
      "kotlin.reflect.KClass",
      "kotlinx.coroutines.CoroutineScope",
      "kotlinx.coroutines.Dispatchers",
      "kotlinx.coroutines.Job",
      "kotlinx.coroutines.flow."
    ],
    "code": "package com.ixigua.blockrepo.external\n\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.*\n\nimport java.util.concurrent.ConcurrentHashMap\nimport kotlin.reflect.KClass\n\nopen class BaseSharedPlayerDataSource(private val externalScope: CoroutineScope? = null) : ISharedPlayerDataSource {\n\n    private val dataFlows = ConcurrentHashMap<KClass<*>, SharedFlow<*>>()\n    private val flowCollectJobs = ConcurrentHashMap<KClass<*>, MutableList<Job>>()\n    private val coroutineScope = externalScope ?: CoroutineScope(Dispatchers.Main)\n\n    override fun init() {\n        // 初始化工作\n    }\n\n    override fun <T : Any> registerFlow(klass: KClass<out T>, flow: SharedFlow<T>) {\n        if (!dataFlows.containsKey(klass)) {\n            dataFlows[klass] = flow\n        }\n    }\n\n    override fun <T : Any> unRegisterFlow(klass: KClass<out T>) {\n        flowCollectJobs[klass]?.forEach { it.cancel() }\n        flowCollectJobs.remove(klass)\n        dataFlows.remove(klass)\n    }\n\n    @Suppress(\"UNCHECKED_CAST\")\n    override fun <T : Any> updateData(klass: KClass<T>, data: T) {\n        (dataFlows[klass] as? MutableStateFlow<T>)?.value = data\n    }\n\n    override fun destroy() {\n        dataFlows.values.forEach {\n            (it as? MutableStateFlow<Any?>)?.value = null\n        }\n        flowCollectJobs.values.flatten().forEach(Job::cancel)\n        dataFlows.clear()\n        flowCollectJobs.clear()\n    }\n\n    override fun <T : Any> getDataFlow(klass: KClass<T>, initialValue: T?): SharedFlow<T>? {\n        return dataFlows[klass] as? SharedFlow<T> ?: initialValue?.let {\n            MutableStateFlow(it).asSharedFlow()\n        }\n    }\n\n    override fun <T : Any> collectFlow(klass: KClass<T>, flow: SharedFlow<T>, collector: suspend (T) -> Unit) {\n        coroutineScope.launch {\n            val job = flow.collect(collector)\n            val jobs = flowCollectJobs.getOrPut(klass) { mutableListOf() }\n            jobs.add(job)\n        }\n    }\n\n    override fun <T> interceptDataFlow(interceptor: BlockDataInterceptor<T>) {\n        // 实现细节略\n    }\n}",
    "filename": "32bef672ddd460782783ae683010cb24_0.kt"
  },
  {
    "conversation_hash": "32bef672ddd460782783ae683010cb24",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun <T:Any> collectWithInitialValue(flow: SharedFlow<T>?, initialValue: T, collector: suspend (T) -> Unit) {\n    coroutineScope.launch {\n        flow?.onStart { emit(initialValue) }?.collect(collector)\n    }\n}",
    "filename": "32bef672ddd460782783ae683010cb24_2.kt"
  },
  {
    "conversation_hash": "32bef672ddd460782783ae683010cb24",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyActivity : AppCompatActivity() {\n    private val activityScope = CoroutineScope(Dispatchers.Main + Job())\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // 使用activityScope来启动协程，保证协程与Activity的生命周期绑定\n        activityScope.launch {\n            // 这里执行协程代码\n        }\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        activityScope.cancel() // Activity销毁时取消所有协程\n    }\n}",
    "filename": "32bef672ddd460782783ae683010cb24_3.kt"
  },
  {
    "conversation_hash": "32bef672ddd460782783ae683010cb24",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines."
    ],
    "code": "import kotlinx.coroutines.*\n\nclass CardHolder {\n    private var job = Job()\n    private val coroutineScope = CoroutineScope(Dispatchers.Main + job)\n\n    fun loadContent() {\n        coroutineScope.launch {\n            // 异步加载内容\n        }\n    }\n\n    fun clear() {\n        // 一旦你不再需要卡片holder时，取消所有协程\n        job.cancel()\n    }\n}\n\n// 在组件不再使用时，调用clear()方法\nval cardHolder = CardHolder()\n// 使用卡片holder\n// ...\n// 不再需要时\ncardHolder.clear()",
    "filename": "32bef672ddd460782783ae683010cb24_4.kt"
  },
  {
    "conversation_hash": "32bef672ddd460782783ae683010cb24",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyPlayerComponent(lifecycle: Lifecycle) {\n    init {\n        lifecycle.addObserver(object : LifecycleObserver {\n            @OnLifecycleEvent(Lifecycle.Event.ON_START)\n            fun start() {\n                lifecycle.coroutineScope.launch {\n                    // 这里启动相关的协程操作\n                }\n            }\n\n            @OnLifecycleEvent(Lifecycle.Event.ON_STOP)\n            fun stop() {\n                // 可能需要在停止时执行的操作\n            }\n        })\n    }\n}",
    "filename": "32bef672ddd460782783ae683010cb24_5.kt"
  },
  {
    "conversation_hash": "32bef672ddd460782783ae683010cb24",
    "code_index": 12,
    "language": "Kotlin",
    "libraries": [
      "kotlin.reflect.KClass",
      "kotlinx.coroutines.flow.Flow",
      "kotlinx.coroutines.flow.MutableStateFlow"
    ],
    "code": "import kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlin.reflect.KClass\n\nclass FlowRegistry {\n    private val flowMap = mutableMapOf<KClass<*>, Flow<*>>()\n    \n    // 注册方法，用于添加新的Flow与对应的KClass映射关系\n    fun <T: Any> register(klass: KClass<T>, flow: Flow<T>) {\n        flowMap[klass] = flow\n    }\n    \n    // 泛型方法，用于根据KClass获取对应的Flow\n    @Suppress(\"UNCHECKED_CAST\")\n    fun <T: Any> getFlow(klass: KClass<T>): Flow<T>? {\n        return flowMap[klass] as? Flow<T>\n    }\n}\n\n// 用法示例：\nclass ExampleUsage {\n    // 初始化一个FlowRegistry实例\n    private val flowRegistry = FlowRegistry()\n\n    init {\n        // 创建一个MutableStateFlow实例\n        val exampleFlow = MutableStateFlow(\"Initial Value\")\n        \n        // 注册Flow，与ExampleData类相关联\n        flowRegistry.register(ExampleData::class, exampleFlow)\n    }\n    \n    fun getExampleFlow(): Flow<String>? {\n        // 根据ExampleData的KClass获取之前注册的Flow\n        return flowRegistry.getFlow(ExampleData::class)\n    }\n}\n\nclass ExampleData\n\n// 主函数，用于演示用法\nfun main() {\n    val usage = ExampleUsage()\n    val exampleFlow = usage.getExampleFlow()\n    println(exampleFlow) // 输出Flow实例\n}",
    "filename": "32bef672ddd460782783ae683010cb24_12.kt"
  },
  {
    "conversation_hash": "32bef672ddd460782783ae683010cb24",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [
      "kotlinx.coroutines.",
      "kotlinx.coroutines.flow."
    ],
    "code": "import kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.*\n\nfun main() = runBlocking<Unit> {\n    // 创建一个MutableStateFlow实例，初始化值为0\n    val mutableStateFlow = MutableStateFlow(0)\n\n    // 在一个新的协程中开始收集这个StateFlow\n    val job = launch {\n        mutableStateFlow.collect { value ->\n            println(\"Received $value\")\n        }\n    }\n\n    // 更新StateFlow的值\n    mutableStateFlow.value = 1\n    mutableStateFlow.value = 2\n\n    // 等待一段时间以确保收集器有机会接收并打印所有的值\n    delay(100)\n\n    // 取消收集协程\n    job.cancel()\n}",
    "filename": "32bef672ddd460782783ae683010cb24_13.kt"
  },
  {
    "conversation_hash": "8b4b9626a7c40b789d271897b84d8996",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "java.io.ByteArrayInputStream",
      "java.io.ByteArrayOutputStream",
      "java.util.Base64",
      "java.util.zip.GZIPInputStream"
    ],
    "code": "import java.io.ByteArrayInputStream\nimport java.io.ByteArrayOutputStream\nimport java.util.Base64\nimport java.util.zip.GZIPInputStream\n\nfun decompressBase64Gzip(input: String): String {\n    val output = ByteArrayOutputStream()\n    val decodedBytes = Base64.getDecoder().decode(input)\n\n    GZIPInputStream(ByteArrayInputStream(decodedBytes)).use { gzipInputStream ->\n        val buffer = ByteArray(1024)\n        var bytesRead: Int\n        while (gzipInputStream.read(buffer).also { bytesRead = it } != -1) {\n            output.write(buffer, 0, bytesRead)\n        }\n    }\n\n    return output.toString(Charsets.UTF_8)\n}\n\n// Example usage\nfun main() {\n    val compressedBase64 = \"YOUR_COMPRESSED_BASE64_STRING_HERE\"\n    val decompressedString = decompressBase64Gzip(compressedBase64)\n    println(decompressedString)\n}",
    "filename": "8b4b9626a7c40b789d271897b84d8996_0.kt"
  },
  {
    "conversation_hash": "8b4b9626a7c40b789d271897b84d8996",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.util.Base64",
      "java.io.ByteArrayInputStream",
      "java.io.ByteArrayOutputStream",
      "java.util.zip.GZIPInputStream"
    ],
    "code": "import android.util.Base64\nimport java.io.ByteArrayInputStream\nimport java.io.ByteArrayOutputStream\nimport java.util.zip.GZIPInputStream\n\nfun decompressBase64Gzip(input: String): String {\n    // Use android.util.Base64 for decoding\n    val output = ByteArrayOutputStream()\n    val decodedBytes = Base64.decode(input, Base64.DEFAULT)\n\n    GZIPInputStream(ByteArrayInputStream(decodedBytes)).use { gzipInputStream ->\n        val buffer = ByteArray(1024)\n        var bytesRead: Int\n        while (gzipInputStream.read(buffer).also { bytesRead = it } != -1) {\n            output.write(buffer, 0, bytesRead)\n        }\n    }\n\n    return output.toString(Charsets.UTF_8)\n}\n\n// Example usage within an Android context (e.g., Activity)\nfun exampleUsage() {\n    val compressedBase64 = \"YOUR_COMPRESSED_BASE64_STRING_HERE\"\n    val decompressedString = decompressBase64Gzip(compressedBase64)\n    println(decompressedString)\n}",
    "filename": "8b4b9626a7c40b789d271897b84d8996_1.kt"
  },
  {
    "conversation_hash": "97a8d2d669bb5122042fad86babc9ffc",
    "code_index": 19,
    "language": "Kotlin",
    "libraries": [],
    "code": "class Player2 {\n  Player2() {\n    // Constructor\n  }\n  \n  void someMethod() {\n    println(\"someMethod called on a Player2 instance\");\n  }\n}",
    "filename": "97a8d2d669bb5122042fad86babc9ffc_19.kt"
  },
  {
    "conversation_hash": "feb9a24834ae9ee1c0127c265cf7440b",
    "code_index": 10,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.widget.Button",
      "android.widget.TextView",
      "androidx.appcompat.app.AppCompatActivity",
      "kotlin.random.Random"
    ],
    "code": "package com.example.yourappname\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport kotlin.random.Random\n\nclass MainActivity : AppCompatActivity() {\n\n    // 定义地点列表\n    private val locations = listOf(\"公主坟\", \"军事博物馆\", \"木樨地1\", /* 其他所有地点 */, \"牛街\")\n    // 上一次随机选择的结果\n    private var lastRandomLocations = listOf<String>()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // 获取布局中的视图引用\n        val refreshButton: Button = findViewById(R.id.button_refresh)\n        val textView: TextView = findViewById(R.id.textView_randomText)\n\n        // 设置按钮的点击监听器\n        refreshButton.setOnClickListener {\n            // 获取10个不重复的地点\n            var randomLocations = getRandomLocations()\n\n            // 确保这次选择和上次不重复\n            while (randomLocations == lastRandomLocations) {\n                randomLocations = getRandomLocations() // 重新选择直至不重复\n            }\n\n            // 更新上次选择的结果\n            lastRandomLocations = randomLocations\n\n            // 在文本视图中显示地点\n            textView.text = randomLocations.joinToString(separator = \"\\n\")\n        }\n    }\n\n    // 函数：随机选择10个不重复的地点\n    private fun getRandomLocations(): List<String> {\n        return locations.shuffled().take(10)\n    }\n}",
    "filename": "feb9a24834ae9ee1c0127c265cf7440b_10.kt"
  },
  {
    "conversation_hash": "77dc3f964ec33e4213c822a22f0235ad",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "the"
    ],
    "code": "fun main() {\n    val listOfElements = listOf(\"A\", \"B\", \"C\", \"D\") // Example list\n    val iterationCount = 10 // Total number of iterations required\n\n    for (i in 0 until iterationCount) {\n        // Use modulo to find the current index in the list.\n        // This ensures that when i exceeds the size of the list,\n        // it wraps around starting from the beginning.\n        val currentIndex = i % listOfElements.size\n        \n        val currentItem = listOfElements[currentIndex]\n        println(\"Iteration $i: $currentItem\")\n    }\n}",
    "filename": "77dc3f964ec33e4213c822a22f0235ad_0.kt"
  },
  {
    "conversation_hash": "77dc3f964ec33e4213c822a22f0235ad",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun main() {\n    val listOfElements = listOf(\"A\", \"B\", \"C\", \"D\") // Example list with fewer than 10 elements\n    val totalIterations = 20 // Total number of iterations you want to perform, for demonstration\n\n    for (i in 0 until totalIterations) {\n        // The modulo operation ensures cycling through the first 10 indexes [0-9],\n        // but since our list may have fewer elements, we also apply modulo to the list size.\n        val currentIndex = (i % 10) % listOfElements.size\n        \n        val currentItem = listOfElements[currentIndex]\n        println(\"Iteration $i (Target Index: ${i % 10}): $currentItem\")\n    }\n}",
    "filename": "77dc3f964ec33e4213c822a22f0235ad_1.kt"
  },
  {
    "conversation_hash": "d04daaf1167f83425c8d125d2387cecf",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "package com.androidstudio.clearup\n\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // Set the content view to use the main_activity.xml layout\n        setContentView(R.layout.main_activity)\n    }\n}",
    "filename": "d04daaf1167f83425c8d125d2387cecf_0.kt"
  },
  {
    "conversation_hash": "d04daaf1167f83425c8d125d2387cecf",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.app.Activity",
      "android.content.Intent",
      "android.os.Bundle",
      "android.provider.MediaStore",
      "android.widget.Button",
      "android.widget.ImageView",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "package com.androidstudio.clearup\n\nimport android.app.Activity\nimport android.content.Intent\nimport android.os.Bundle\nimport android.provider.MediaStore\nimport android.widget.Button\nimport android.widget.ImageView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    private val REQUEST_IMAGE_CAPTURE = 1\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.main_activity)\n        \n        val captureButton: Button = findViewById(R.id.captureButton) // Replace with your button's ID\n        captureButton.setOnClickListener {\n            dispatchTakePictureIntent()\n        }\n    }\n\n    private fun dispatchTakePictureIntent() {\n        Intent(MediaStore.ACTION_IMAGE_CAPTURE).also { takePictureIntent ->\n            takePictureIntent.resolveActivity(packageManager)?.also {\n                startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE)\n            }\n        }\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n\n        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == Activity.RESULT_OK) {\n            val imageBitmap = data?.extras?.get(\"data\") as Bitmap\n            val imageView: ImageView = findViewById(R.id.image_view) // Replace with your ImageView's ID\n            imageView.setImageBitmap(imageBitmap)\n        }\n    }\n}",
    "filename": "d04daaf1167f83425c8d125d2387cecf_2.kt"
  },
  {
    "conversation_hash": "6dd1df70070003eb1508e6377ca7be6b",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == Activity.RESULT_OK) {\n    val imageBitmap = data?.extras?.get(\"data\") as Bitmap\n    val imageView: ImageView = findViewById(R.id.image_outline) // Replace with your ImageView’s ID\n    imageView.setImageBitmap(imageBitmap)\n}",
    "filename": "6dd1df70070003eb1508e6377ca7be6b_2.kt"
  },
  {
    "conversation_hash": "16d52694bfedfd31c5f7c8c549d03ca6",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n\n    if (requestCode == requestImageCapture && resultCode == Activity.RESULT_OK) {\n        val imageBitmap = data?.extras?.get(\"data\") as? Bitmap // Notice the change here\n        val imageView: ImageView = findViewById(R.id.image_layout) // Adjusted to the correct ID\n        imageView.setImageBitmap(imageBitmap) // No need for explicit cast\n    }\n}",
    "filename": "16d52694bfedfd31c5f7c8c549d03ca6_4.kt"
  },
  {
    "conversation_hash": "16d52694bfedfd31c5f7c8c549d03ca6",
    "code_index": 7,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun dispatchTakePictureIntent() {\n    Intent(MediaStore.ACTION_IMAGE_CAPTURE).also { takePictureIntent ->\n        takePictureIntent.resolveActivity(packageManager)?.also {\n            val photoFile: File? = try {\n                createImageFile() // Implement this method to create a File\n            } catch (ex: IOException) {\n                // Error occurred while creating the File\n                null\n            }\n            photoFile?.also {\n                val photoURI: Uri = FileProvider.getUriForFile(\n                    this,\n                    \"${BuildConfig.APPLICATION_ID}.provider\",\n                    it\n                )\n                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI)\n                startActivityForResult(takePictureIntent, requestImageCapture)\n            }\n        }\n    }\n}",
    "filename": "16d52694bfedfd31c5f7c8c549d03ca6_7.kt"
  },
  {
    "conversation_hash": "ce6b100964f2199fc639457a9a1b7e1c",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun setupTakePictureIntent() {\n    getImage = registerForActivityResult(ActivityResultContracts.TakePicture()) { success: Boolean ->\n        if (success) {\n            // The image was captured successfully, display it\n            val imageView: ImageView = findViewById(R.id.image_layout)\n            imageView.setImageURI(imageUri)\n        }\n    }\n}",
    "filename": "ce6b100964f2199fc639457a9a1b7e1c_1.kt"
  },
  {
    "conversation_hash": "ce6b100964f2199fc639457a9a1b7e1c",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.main_activity)\n\n    setupTakePictureIntent()\n\n    val captureButton: Button = findViewById(R.id.captureButton) // Replace with your button’s ID\n    captureButton.setOnClickListener {\n        dispatchTakePictureIntent()\n    }\n}",
    "filename": "ce6b100964f2199fc639457a9a1b7e1c_2.kt"
  },
  {
    "conversation_hash": "ce6b100964f2199fc639457a9a1b7e1c",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun dispatchTakePictureIntent() {\n    // Create a file and get its URI to pass to the camera app\n    val photoFile: File? = createImageFile() // Implement this method to create a file\n    photoFile?.also {\n        imageUri = FileProvider.getUriForFile(\n            this,\n            \"your.package.fileprovider\", // Replace with your app's package name and the provider as declared in the manifest\n            it\n        )\n        getImage.launch(imageUri)\n    }\n}",
    "filename": "ce6b100964f2199fc639457a9a1b7e1c_3.kt"
  },
  {
    "conversation_hash": "b9f6468cbde469811ca6c6e37cd1b970",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "@Throws(IOException::class)\n   private fun createImageFile(): File {\n       val timeStamp: String = SimpleDateFormat(\"yyyyMMdd_HHmmss\", Locale.getDefault()).format(Date())\n       val storageDir: File = getExternalFilesDir(Environment.DIRECTORY_PICTURES)!!\n       return File.createTempFile(\n           \"JPEG_${timeStamp}_\", /* prefix */\n           \".jpg\", /* suffix */\n           storageDir /* directory */\n       ).apply {\n           // Save a file path for use with ACTION_VIEW intents\n           currentPhotoPath = absolutePath\n       }\n   }\n   \n   private lateinit var currentPhotoPath: String",
    "filename": "b9f6468cbde469811ca6c6e37cd1b970_0.kt"
  },
  {
    "conversation_hash": "d59b28714271b51d04d8e4be8397b765",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.annotation.SuppressLint",
      "android.net.Uri",
      "android.widget.ImageView",
      "androidx.activity.result.contract.ActivityResultContracts",
      "java.io.File",
      "java.io.IOException",
      "java.text.SimpleDateFormat",
      "java.util."
    ],
    "code": "import android.annotation.SuppressLint\nimport android.net.Uri\nimport android.widget.ImageView\nimport androidx.activity.result.contract.ActivityResultContracts\nimport java.io.File\nimport java.io.IOException\nimport java.text.SimpleDateFormat\nimport java.util.*\n\n// Assuming the other required imports and context exist\nclass YourActivity : AppCompatActivity() {\n    // Assuming imageUri and currentPhotoPath are defined elsewhere in your class\n    private lateinit var imageUri: Uri\n    private var currentPhotoPath: String = \"\"\n\n    @SuppressLint(\"QueryPermissionsNeeded\")\n    private fun setupTakePictureIntent() {\n        getImage = registerForActivityResult(ActivityResultContracts.TakePicture()) { success: Boolean ->\n            if (success) {\n                val imageView: ImageView = findViewById(R.id.image_layout)\n                imageView.setImageURI(imageUri)\n            }\n        }\n    }\n\n    @Throws(IOException::class)\n    private fun createImageFile(): File {\n        val timestamp: String = SimpleDateFormat(\"yyyyMMdd_HHms\", Locale.getDefault()).format(Date())\n        val storageDir: File = getExternalFilesDir(Environment.DIRECTORY_PICTURES)!!\n        return File.createTempFile(\n            \"JPEG_${timestamp}_\",\n            \".jpg\",\n            storageDir\n        ).apply {\n            currentPhotoPath = absolutePath\n        }\n    }\n}",
    "filename": "d59b28714271b51d04d8e4be8397b765_1.kt"
  },
  {
    "conversation_hash": "d59b28714271b51d04d8e4be8397b765",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "class YourActivity : AppCompatActivity() {\n        private lateinit var launcher: ActivityResultLauncher<String>\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_your)\n    \n            launcher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->\n                // Handle the returned Uri\n            }\n    \n            // Perhaps in a button click listener, launch the intent\n            // launcher.launch(\"image/*\")\n        }\n    }",
    "filename": "d59b28714271b51d04d8e4be8397b765_4.kt"
  },
  {
    "conversation_hash": "61cca58c99fccd15e059b0466a4c5b35",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n\n    if (requestCode == requestImageCapture && resultCode == RESULT_OK) {\n        val extras = data?.extras\n        val imageBitmap: Bitmap? = extras?.getParcelable(\"data\")\n        imageBitmap?.let {\n            val imageView: ImageView = findViewById(R.id.image_layout)\n            imageView.setImageBitmap(it)\n        }\n    }\n}",
    "filename": "61cca58c99fccd15e059b0466a4c5b35_2.kt"
  },
  {
    "conversation_hash": "61cca58c99fccd15e059b0466a4c5b35",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [],
    "code": "class YourActivity : AppCompatActivity() {\n\n    private lateinit var getImage: ActivityResultLauncher<Uri>\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.your_layout)\n\n        setupTakePictureIntent()\n    }\n\n    @SuppressLint(\"QueryPermissionsNeeded\")\n    private fun setupTakePictureIntent() {\n        val imageUri: Uri = /* Provide your Uri here */\n        getImage = registerForActivityResult(ActivityResultContracts.TakePicture()) { success: Boolean ->\n            if (success) {\n                val imageView: ImageView = findViewById(R.id.image_layout)\n                imageView.setImageURI(imageUri)\n            }\n        }\n        // You might want to trigger the intent here or based on some user action\n    }\n}",
    "filename": "61cca58c99fccd15e059b0466a4c5b35_5.kt"
  },
  {
    "conversation_hash": "61cca58c99fccd15e059b0466a4c5b35",
    "code_index": 8,
    "language": "Kotlin",
    "libraries": [],
    "code": "class YourActivity : AppCompatActivity() {\n\n    private lateinit var getContent: ActivityResultLauncher<String>\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.your_activity_layout)\n\n        // Initialize your ActivityResultLauncher\n        getContent = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->\n            // Handle the returned Uri\n        }\n    }\n}",
    "filename": "61cca58c99fccd15e059b0466a4c5b35_8.kt"
  },
  {
    "conversation_hash": "61cca58c99fccd15e059b0466a4c5b35",
    "code_index": 14,
    "language": "Kotlin",
    "libraries": [
      "android.annotation.SuppressLint",
      "android.app.Activity",
      "android.content.Intent",
      "android.graphics.Bitmap",
      "android.net.Uri",
      "android.os.Bundle",
      "android.os.Environment",
      "android.widget.Button",
      "android.widget.ImageView",
      "androidx.activity.result.ActivityResultLauncher",
      "androidx.activity.result.contract.ActivityResultContracts",
      "androidx.appcompat.app.AppCompatActivity",
      "androidx.core.content.FileProvider",
      "com.clearup.android.clearup.R",
      "java.io.File",
      "java.io.IOException",
      "java.text.SimpleDateFormat",
      "java.util.Date",
      "java.util.Locale"
    ],
    "code": "package com.androidstudio.clearup\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.content.Intent\nimport android.graphics.Bitmap\nimport android.net.Uri\nimport android.os.Bundle\nimport android.os.Environment\nimport android.widget.Button\nimport android.widget.ImageView\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.activity.result.ActivityResultLauncher\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.FileProvider\nimport com.clearup.android.clearup.R\nimport java.io.File\nimport java.io.IOException\nimport java.text.SimpleDateFormat\nimport java.util.Date\nimport java.util.Locale\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var getImage: ActivityResultLauncher<Uri>\n    private lateinit var imageUri: Uri\n    private var currentPhotoPath: String = \"\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.main_activity)\n\n        setupTakePictureIntent()\n\n        val captureButton: Button = findViewById(R.id.captureButton)\n        captureButton.setOnClickListener {\n            dispatchTakePictureIntent()\n        }\n    }\n\n    @SuppressLint(\"QueryPermissionsNeeded\")\n    private fun setupTakePictureIntent() {\n        getImage = registerForActivityResult(ActivityResultContracts.TakePicture()) { success: Boolean ->\n            if (success) {\n                val imageView: ImageView = findViewById(R.id.image_layout)\n                imageView.setImageURI(imageUri)\n            }\n        }\n    }\n\n    private fun dispatchTakePictureIntent() {\n        Intent(MediaStore.ACTION_IMAGE_CAPTURE).also { takePictureIntent ->\n            // Ensure that there's a camera activity to handle the intent\n            takePictureIntent.resolveActivity(packageManager)?.also {\n                // Create the File where the photo should go\n                val photoFile: File? = try {\n                    createImageFile().apply {\n                        // Save a file: path for use with ACTION_VIEW intents\n                        currentPhotoPath = absolutePath\n                    }\n                } catch (ex: IOException) {\n                    // Error occurred while creating the File\n                    null\n                }\n                // Continue only if the File was successfully created\n                photoFile?.also {\n                    imageUri = FileProvider.getUriForFile(\n                        this,\n                        \"${applicationContext.packageName}.fileprovider\",\n                        it\n                    )\n                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri)\n                    startActivityForResult(takePictureIntent, requestImageCapture)\n                }\n            }\n        }\n    }\n\n    @Throws(IOException::class)\n    private fun createImageFile(): File {\n        // Create an image file name\n        val timeStamp: String = SimpleDateFormat(\"yyyyMMdd_HHmmss\", Locale.getDefault()).format(Date())\n        val storageDir: File? = getExternalFilesDir(Environment.DIRECTORY_PICTURES)\n        return File.createTempFile(\n            \"JPEG_${timeStamp}_\", /* prefix */\n            \".jpg\", /* suffix */\n            storageDir /* directory */\n        ).also {\n            // Save a file: path for use with ACTION_VIEW intents\n            currentPhotoPath = it.absolutePath\n        }\n    }\n}",
    "filename": "61cca58c99fccd15e059b0466a4c5b35_14.kt"
  },
  {
    "conversation_hash": "52447392de781c68b5319c709ca943f3",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "private fun dispatchTakePictureIntent() {\n    val photoFile: File? = try {\n        createImageFile()\n    } catch (ex: IOException) {\n        // Error occurred while creating the File\n        null // Log the exception or notify the user\n    }\n    photoFile?.also {\n        imageUri = FileProvider.getUriForFile(\n            this,\n            \"com.android.clearup.fileProvider\",\n            it\n        )\n        getImage.launch(imageUri)\n    } ?: kotlin.run {\n        // Handle the error, photoFile was null, unable to create image file\n        // For example, show an error message\n    }\n}",
    "filename": "52447392de781c68b5319c709ca943f3_6.kt"
  },
  {
    "conversation_hash": "46a895065b6fda6131de78ca5383a120",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun toKey(c: Int): Key {\n    return if (c in Key.MIN_CODE..Key.MAX_CODE) { \n        Key(c)\n    } else {\n        Key.None\n    }\n}",
    "filename": "46a895065b6fda6131de78ca5383a120_0.kt"
  },
  {
    "conversation_hash": "c1264012fcdb56d2cc04e62afac3292c",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "fun soma(a: Int, b: Int): Int {\n    return a + b\n}\n\n// Ou, usando a forma encurtada\nfun soma(a: Int, b: Int) = a + b",
    "filename": "c1264012fcdb56d2cc04e62afac3292c_4.kt"
  },
  {
    "conversation_hash": "ebe7e2e37488b87c9c90a00bf37cafd2",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n       super.onActivityResult(requestCode, resultCode, data)\n   \n       if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {\n           val imageBitmap = data?.extras?.get(\"data\") as Bitmap\n           // use the imageBitmap as needed\n       }\n   }",
    "filename": "ebe7e2e37488b87c9c90a00bf37cafd2_3.kt"
  },
  {
    "conversation_hash": "ebe7e2e37488b87c9c90a00bf37cafd2",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "android.content.Context",
      "android.hardware.Camera",
      "android.view.SurfaceHolder",
      "android.view.SurfaceView"
    ],
    "code": "import android.content.Context\nimport android.hardware.Camera\nimport android.view.SurfaceHolder\nimport android.view.SurfaceView\n\nclass CameraPreview(context: Context, private val mCamera: Camera) : SurfaceView(context), SurfaceHolder.Callback {\n    private val mHolder: SurfaceHolder = holder.apply {\n        // Install a SurfaceHolder.Callback so we get notified when the\n        // underlying surface is created and destroyed.\n        addCallback(this@CameraPreview)\n        // deprecated setting, but required on Android versions prior to 3.0\n        setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS)\n    }\n\n    override fun surfaceChanged(holder: SurfaceHolder?, format: Int, width: Int, height: Int) {\n        // If your preview can change or rotate, take care of those events here.\n        // Make sure to stop the preview before resizing or reformatting it.\n        mCamera?.apply {\n            val parameters = parameters\n            parameters.setPreviewSize(width, height)\n            requestLayout()\n            startPreview()\n        }\n    }\n\n    override fun surfaceDestroyed(holder: SurfaceHolder?) {\n        // Empty. Take care of releasing the Camera preview in your activity.\n    }\n\n    override fun surfaceCreated(holder: SurfaceHolder?) {\n        // The Surface has been created, now tell the camera where to draw the preview.\n        mCamera.apply {\n            try {\n                setPreviewDisplay(holder)\n                startPreview()\n            } catch (e: IOException) {\n                Log.d(\"CameraPreview\", \"Error setting camera preview: ${e.message}\")\n            }\n        }\n    }\n}",
    "filename": "ebe7e2e37488b87c9c90a00bf37cafd2_4.kt"
  },
  {
    "conversation_hash": "ebe7e2e37488b87c9c90a00bf37cafd2",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.hardware.Camera"
    ],
    "code": "import android.hardware.Camera\n\nfun getCameraInstance(): Camera? {\n    return try {\n        Camera.open() // attempt to get a Camera instance\n    } catch (e: Exception) {\n        // Camera is not available (in use or does not exist)\n        null // returns null if camera is unavailable\n    }\n}",
    "filename": "ebe7e2e37488b87c9c90a00bf37cafd2_5.kt"
  },
  {
    "conversation_hash": "cba74b079624abfd35567491dc4b4c3e",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "a"
    ],
    "code": "class UserViewModel : ViewModel() {\n    private val _user = MutableLiveData<User>()\n    \n    val user: LiveData<User>\n        get() = _user\n    \n    fun fetchUser() {\n        // Simulate fetching user data from a repository\n        val user = User(1, \"John Doe\", \"johndoe@example.com\")\n        _user.value = user\n    }\n}",
    "filename": "cba74b079624abfd35567491dc4b4c3e_1.kt"
  },
  {
    "conversation_hash": "cba74b079624abfd35567491dc4b4c3e",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MainActivity : AppCompatActivity() {\n    private val userViewModel by viewModels<UserViewModel>()\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val binding: ActivityMainBinding = DataBindingUtil.setContentView(this, R.layout.activity_main)\n        binding.viewModel = userViewModel\n        userViewModel.fetchUser()\n    }\n}",
    "filename": "cba74b079624abfd35567491dc4b4c3e_3.kt"
  },
  {
    "conversation_hash": "e9b9d1b1a9ced90417aa25129c98861a",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n    val context = parent.context // Получаем контекст\n    val inflater = LayoutInflater.from(context)\n    val view = inflater.inflate(R.layout.my_item_view, parent, false)\n    return MyViewHolder(view)\n}",
    "filename": "e9b9d1b1a9ced90417aa25129c98861a_4.kt"
  },
  {
    "conversation_hash": "cc40bee7c8fc3160215e8b6bfb49d180",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    fun bind(item: MyItem) {\n        val resources = itemView.context.resources\n        // Теперь можно использовать resources, например:\n        val myString = resources.getString(R.string.my_string)\n    }\n}\n\nclass MyAdapter : RecyclerView.Adapter<MyViewHolder>() {\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n        val view = LayoutInflater.from(parent.context)\n                                 .inflate(R.layout.my_item_layout, parent, false)\n        return MyViewHolder(view)\n    }\n\n    // Реализация остальной части адаптера, onBindVH, getItemCount и т.д.\n}",
    "filename": "cc40bee7c8fc3160215e8b6bfb49d180_0.kt"
  },
  {
    "conversation_hash": "cc40bee7c8fc3160215e8b6bfb49d180",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "class MyAdapter(private val context: Context) : RecyclerView.Adapter<MyViewHolder>() {\n    private val resources = context.resources\n\n    // Использование resources внутри адаптера\n}\n\n// При создании адаптера в Activity или Fragment\nval myAdapter = MyAdapter(context)",
    "filename": "cc40bee7c8fc3160215e8b6bfb49d180_1.kt"
  },
  {
    "conversation_hash": "0245bb40404685d3e6bbf99a3391a959",
    "code_index": 29,
    "language": "Kotlin",
    "libraries": [],
    "code": "usuarioController.iniciarSesion(email, contrasena) {\n    onSuccess = {\n        // Navegar a otra Activity\n    },\n    onFailure = { error ->\n        // Mostrar mensaje de error\n    }\n}",
    "filename": "0245bb40404685d3e6bbf99a3391a959_29.kt"
  },
  {
    "conversation_hash": "b0df50804e58ebc06184569c41aedb63",
    "code_index": 23,
    "language": "Kotlin",
    "libraries": [],
    "code": "// 用于演示的样例DataFrame\n   val df = List(\"Hello\", \"World\").toDF(\"word\")\n\n   // 使用已注册的UDF转换列的值\n   val resultDF = df.select(expr(\"upperCaseUDF(word) as word_upper\"))\n\n   // 显示结果\n   resultDF.show()",
    "filename": "b0df50804e58ebc06184569c41aedb63_23.kt"
  },
  {
    "conversation_hash": "bcf94023a972deaa906c7bf34c7b34b5",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "androidx.appcompat.app.AppCompatActivity"
    ],
    "code": "package com.example.myapp\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    }\n}",
    "filename": "bcf94023a972deaa906c7bf34c7b34b5_0.kt"
  },
  {
    "conversation_hash": "377f868d662fceef5dcdac5fb7738427",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "io.realm.Realm",
      "io.realm.RealmConfiguration"
    ],
    "code": "import io.realm.Realm\nimport io.realm.RealmConfiguration\n\nprivate fun initRealm() {\n    // Initialize Realm (Place this somewhere appropriate, like in your Application class)\n    Realm.init(this)\n\n    val realmConfig = RealmConfiguration.Builder()\n        .deleteRealmIfMigrationNeeded() // Here we specify the option\n        .build()\n\n    Realm.setDefaultConfiguration(realmConfig)\n}",
    "filename": "377f868d662fceef5dcdac5fb7738427_2.kt"
  },
  {
    "conversation_hash": "377f868d662fceef5dcdac5fb7738427",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "com.facebook.stetho.Stetho",
      "com.uphyca.stetho_realm.RealmInspectorModulesProvider"
    ],
    "code": "import com.facebook.stetho.Stetho\nimport com.uphyca.stetho_realm.RealmInspectorModulesProvider\n\nprivate fun initStetho() {\n    if (BuildConfig.DEBUG) {\n        Stetho.initialize(\n            Stetho.newInitializerBuilder(this)\n                .enableDumpapp(Stetho.defaultDumperPluginsProvider(this))\n                .enableWebKitInspector(\n                    RealmInspectorModulesProvider.builder(this)\n                        .withMetaTables() // Include meta data about your tables\n                        .withLimit(10000) // Increase limit if needed\n                        .build()\n                )\n                .build()\n        )\n    }\n}",
    "filename": "377f868d662fceef5dcdac5fb7738427_3.kt"
  },
  {
    "conversation_hash": "377f868d662fceef5dcdac5fb7738427",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onCreate() {\n    super.onCreate()\n    initRealm() // Initialize Realm with your desired configuration\n    initStetho() // Then initialize Stetho for debugging purposes\n}",
    "filename": "377f868d662fceef5dcdac5fb7738427_4.kt"
  },
  {
    "conversation_hash": "377f868d662fceef5dcdac5fb7738427",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.content.Intent",
      "android.util.Log",
      "androidx.appcompat.app.AppCompatDelegate",
      "com.facebook.stetho.Stetho",
      "com.firebase.client.Firebase",
      "com.medicdigital.jjpodcasts.data.database.DataService",
      "com.medicdigital.jjpodcasts.di.AppModule",
      "com.medicdigital.jjpodcasts.di.DaggerAppComponent",
      "com.medicdigital.jjpodcasts.presentation.auth.activity.AuthActivity",
      "com.medicdigital.jjpodcasts.presentation.login.activity.LoginAsGuestActivity",
      "com.medicdigital.jjpodcasts.presentation.utils.AppStyles",
      "com.medicdigital.jjpodcasts.presentation.utils.AppStyles.initStyles",
      "com.uphyca.stetho_realm.RealmInspectorModulesProvider",
      "dagger.android.AndroidInjector",
      "dagger.android.DaggerApplication",
      "dagger.android.support.HasSupportFragmentInjector",
      "io.reactivex.plugins.RxJavaPlugins",
      "io.reactivex.rxkotlin.subscribeBy",
      "io.realm.Realm",
      "io.realm.RealmConfiguration",
      "javax.inject.Inject"
    ],
    "code": "package com.medicdigital.jjpodcasts\n\nimport android.content.Intent\nimport android.util.Log\nimport androidx.appcompat.app.AppCompatDelegate\nimport com.facebook.stetho.Stetho\nimport com.firebase.client.Firebase\nimport com.medicdigital.jjpodcasts.data.database.DataService\nimport com.medicdigital.jjpodcasts.di.AppModule\nimport com.medicdigital.jjpodcasts.di.DaggerAppComponent\nimport com.medicdigital.jjpodcasts.presentation.auth.activity.AuthActivity\nimport com.medicdigital.jjpodcasts.presentation.login.activity.LoginAsGuestActivity\nimport com.medicdigital.jjpodcasts.presentation.utils.AppStyles\nimport com.medicdigital.jjpodcasts.presentation.utils.AppStyles.initStyles\nimport com.uphyca.stetho_realm.RealmInspectorModulesProvider\nimport dagger.android.AndroidInjector\nimport dagger.android.DaggerApplication\nimport dagger.android.support.HasSupportFragmentInjector\nimport io.reactivex.plugins.RxJavaPlugins\nimport io.reactivex.rxkotlin.subscribeBy\nimport io.realm.Realm\nimport io.realm.RealmConfiguration\nimport javax.inject.Inject\n\nclass App : DaggerApplication() {\n    companion object {\n        lateinit var instance: App\n            private set\n    }\n\n    @Inject\n    lateinit var dbManager: DataService\n\n    override fun onCreate() {\n        super.onCreate()\n        instance = this\n        initRealm()\n        Firebase.setAndroidContext(this)\n        initStyles(this)\n        AppCompatDelegate.setCompatVectorFromResourcesEnabled(true)\n        initStetho()\n        RxJavaPlugins.setErrorHandler { e -> Log.e(\"RxJava Error\", \"Unhandled RxJava error: ${e?.message}\", e) }\n    }\n\n    override fun applicationInjector(): AndroidInjector<out DaggerApplication> =\n        DaggerAppComponent.builder()\n            .appModule(AppModule(this))\n            .create(this)\n\n    fun logout(ssoEnabled: Boolean) {\n        dbManager.dropDB().subscribeBy(\n            onError = { Log.e(\"App\", \"Error during logout\", it) },\n            onComplete = {\n                AppStyles.saveToken(\"\", \"\")\n                PlayerService.stopService(this)\n                val intent = Intent(this, if (ssoEnabled) AuthActivity::class.java else LoginAsGuestActivity::class.java).apply {\n                    flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n                }\n                startActivity(intent)\n            }\n        )\n    }\n\n    private fun initStetho() {\n        if (BuildConfig.DEBUG) {\n            Stetho.initialize(\n                Stetho.newInitializerBuilder(this)\n                    .enableDumpapp(Stetho.defaultDumperPluginsProvider(this))\n                    .enableWebKitInspector(\n                        RealmInspectorModulesProvider.builder(this)\n                            // The withDeleteIfMigrationNeeded setting is not applicable here.\n                            // It is set within the Realm configuration (in initRealm()).\n                            .withMetaTables() // Enhanced meta data for debugging purposes.\n                            .withLimit(10000) // Increase the default limit to allow viewing larger datasets.\n                            .build()\n                    )\n                    .build()\n            )\n        }\n    }\n\n    private fun initRealm() {\n        Realm.init(this)\n        val realmConfig = RealmConfiguration.Builder()\n            .deleteRealmIfMigrationNeeded() // Automatically handle schema migrations by deleting and recreating the DB.\n            .build()\n        Realm.setDefaultConfiguration(realmConfig)\n    }\n}",
    "filename": "377f868d662fceef5dcdac5fb7738427_5.kt"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 0,
    "language": "Kotlin",
    "libraries": [],
    "code": "private lateinit var binding: FragmentLeaderboardBinding\n\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n    binding = FragmentLeaderboardBinding.inflate(inflater, container, false)\n    return binding.root\n}\n\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    // Now access your views via binding instance\n    binding.toolbarFragmentLeaderboard.setTitle(boardModel?.name)\n    // Similarly access other views with their correct IDs as per your layout file\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_0.kt"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    val toolbarFragmentLeaderboard: Toolbar = view.findViewById(R.id.toolbar_fragment_leaderboard)\n    // And so on for other views\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_1.kt"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "android.os.Bundle",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "androidx.fragment.app.viewModels",
      "androidx.lifecycle.Observer",
      "androidx.recyclerview.widget.LinearLayoutManager",
      "com.medicdigital.jjpodcasts.NetworkUtils",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.leaderboard.BoardModel",
      "com.medicdigital.jjpodcasts.databinding.FragmentLeaderboardBinding",
      "com.medicdigital.jjpodcasts.presentation.base.BaseFragment",
      "dagger.hilt.android.AndroidEntryPoint"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.leaderboard\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.viewModels\nimport androidx.lifecycle.Observer\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.medicdigital.jjpodcasts.NetworkUtils\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.leaderboard.BoardModel\nimport com.medicdigital.jjpodcasts.databinding.FragmentLeaderboardBinding\nimport com.medicdigital.jjpodcasts.presentation.base.BaseFragment\nimport dagger.hilt.android.AndroidEntryPoint\n\n@AndroidEntryPoint\nclass LeaderBoardFragment : BaseFragment() {\n    private val viewModel: LeaderBoardViewModel by viewModels()\n    private lateinit var leaderBoardListAdapter: LeaderBoardListAdapter\n    private lateinit var binding: FragmentLeaderboardBinding\n    private lateinit var layoutManager: LinearLayoutManager\n\n    private var boardModel: BoardModel? = null\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\n        binding = FragmentLeaderboardBinding.inflate(inflater, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        setupView()\n        setUpObservers()\n    }\n\n    private fun setupRecyclerView() {\n        layoutManager = LinearLayoutManager(activity, RecyclerView.VERTICAL, false)\n        leaderBoardListAdapter = LeaderBoardListAdapter() // Initialize your adapter here\n        binding.rvLeaderboard.apply {\n            layoutManager = this@LeaderBoardFragment.layoutManager\n            adapter = leaderBoardListAdapter\n        }\n    }\n\n    private fun setupView() {\n        boardModel = arguments?.getParcelable(\"board\")\n        binding.toolbarLeaderboard.setTitle(boardModel?.name)\n        binding.toolbarLeaderboard.setNavigationOnClickListener {\n            activity?.onBackPressed()\n        }\n\n        setupRecyclerView()\n\n        binding.srlLeaderboard.setOnRefreshListener {\n            viewModel.loadParticipants(boardModel?.id ?: 0, 0)\n        }\n\n        // Load initial data\n        if (NetworkUtils.isNetworkConnected(requireContext(), false)) {\n            viewModel.loadParticipants(boardModel?.id ?: 0, viewModel.offset)\n        }\n\n        // You can handle additional UI logic here\n    }\n\n    private fun setUpObservers() {\n        viewModel.participantsLiveData.observe(viewLifecycleOwner, Observer {\n            // Update your adapter data here\n            leaderBoardListAdapter.submitList(it) // Assuming you're using a ListAdapter, adjust accordingly\n        })\n\n        viewModel.loadingLiveData.observe(viewLifecycleOwner, Observer { isLoading ->\n            binding.progressBar.visibility = if (isLoading) View.VISIBLE else View.GONE\n        })\n\n        // Observe other LiveData objects similarly\n    }\n\n    companion object {\n        // Your Companion object contents\n    }\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_4.kt"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 13,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.ViewGroup",
      "com.bumptech.glide.Glide",
      "com.bumptech.glide.request.RequestOptions",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding",
      "com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick",
      "the"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding\nimport com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick\n\nclass PodcastFeaturedListAdapter(private val itemClickListener: EpisodesClick?, private val itemWidth: Int, private val itemHeight: Int) :\n    BaseQuickAdapter<NodeItem, BaseViewHolder>(R.layout.item_podcast_featured) {\n\n    override fun onCreateDefViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder {\n        val binding = ItemPodcastFeaturedBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        \n        // You can set width and height for binding.root here if necessary\n        \n        return BaseViewHolder(binding.root)\n    }\n\n    override fun convert(holder: BaseViewHolder, item: NodeItem) {\n        // Remember to get the binding from the holder's itemView\n        val binding = ItemPodcastFeaturedBinding.bind(holder.itemView)\n\n        binding.ivPodcastFeaturedLogo.layoutParams.height = itemHeight\n        \n        Glide.with(context)\n            .load(getNodeFeatureImage(item.assets) ?: getNodeImage(item.assets))\n            .placeholder(R.drawable.ic_microfon_gray)\n            .apply(RequestOptions.fitCenterTransform())\n            .into(binding.ivPodcastFeaturedLogo)\n\n        binding.txtPodcastFeatured.text = item.name\n\n        binding.vgPodcastFeaturedLogo.apply {\n            tag = item\n            setOnClickListener { v ->\n                // Item click logic\n            }\n            outlineProvider = context.getRoundedOutlineProvider(0.3f, context.resources.getDimension(R.dimen.corner_4))\n        }\n    }\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_13.kt"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 15,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.bumptech.glide.Glide",
      "com.bumptech.glide.request.RequestOptions",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding",
      "com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick",
      "com.medicdigital.jjpodcasts.presentation.utils.Constants",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding\nimport com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick\nimport com.medicdigital.jjpodcasts.presentation.utils.Constants\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx\n\nclass PodcastFeaturedListAdapter(\n    private val itemClickListener: EpisodesClick?,\n    private val itemWidth: Int, // Passed but not used. If needed, use in onBindViewHolder or convert method.\n    private val itemHeight: Int\n) : BaseQuickAdapter<NodeItem, BaseViewHolder>(R.layout.item_podcast_featured),\n    View.OnClickListener {\n\n    override fun onCreateDefViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder {\n        val binding: ItemPodcastFeaturedBinding = ItemPodcastFeaturedBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return BaseViewHolder(binding.root)\n    }\n\n    override fun convert(holder: BaseViewHolder, item: NodeItem) {\n       // We need to reacquire the binding for the ViewHolder's itemView\n       val binding = ItemPodcastFeaturedBinding.bind(holder.itemView)\n\n       binding.ivPodcastFeaturedLogo.layoutParams.height = itemHeight\n       Glide.with(context)\n           .load(getNodeFeatureImage(item.assets) ?: getNodeImage(item.assets))\n           .placeholder(R.drawable.ic_microfon_gray)\n           .apply(RequestOptions.fitCenterTransform())\n           .into(binding.ivPodcastFeaturedLogo)\n\n       binding.txtPodcastFeatured.text = item.name\n\n       binding.vgPodcastFeaturedLogo.apply {\n          tag = item\n          setOnClickListener(this@PodcastFeaturedListAdapter)\n          outlineProvider = context.getRoundedOutlineProvider(0.3f, context.resources.getDimension(R.dimen.corner_4))\n       }\n    }\n\n    override fun onClick(v: View?) {\n       v ?: return\n       val nodeItem = v.tag as? NodeItem\n       if (nodeItem != null && v.id == R.id.vg_podcast_featured_logo) {\n           itemClickListener?.onNodeWithDetailInfoClick(nodeItem)\n       }\n    }\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_15.kt"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.bumptech.glide.Glide",
      "com.bumptech.glide.request.RequestOptions",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding",
      "com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick",
      "com.medicdigital.jjpodcasts.presentation.utils.Constants",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding\nimport com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick\nimport com.medicdigital.jjpodcasts.presentation.utils.Constants\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx\n\nclass PodcastFeaturedListAdapter(\n    private val itemClickListener: EpisodesClick?,\n    private val itemWidth: Int,\n    private val itemHeight: Int\n) : BaseQuickAdapter<NodeItem, BaseViewHolder>(R.layout.item_podcast_featured),\n    View.OnClickListener {\n\n    override fun onCreateDefViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder {\n        val binding = ItemPodcastFeaturedBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return BaseViewHolder(binding.root)\n    }\n\n    override fun convert(holder: BaseViewHolder, item: NodeItem) {\n        val binding = ItemPodcastFeaturedBinding.bind(holder.itemView)\n\n        binding.ivPodcastFeaturedLogo.layoutParams.height = itemHeight\n        Glide.with(context)\n            .load(getNodeFeatureImage(item.assets) ?: getNodeImage(item.assets))\n            .placeholder(R.drawable.ic_microfon_gray)\n            .apply(RequestOptions.fitCenterTransform())\n            .into(binding.ivPodcastFeaturedLogo)\n\n        binding.txtPodcastFeatured.text = item.name\n\n        binding.vgPodcastFeaturedLogo.apply {\n            tag = item\n            setOnClickListener(this@PodcastFeaturedListAdapter)\n            outlineProvider = context.getRoundedOutlineProvider(0.3f, context.resources.getDimension(R.dimen.corner_4))\n        }\n    }\n\n    override fun onClick(v: View?) {\n        v ?: return\n        val nodeItem = v.tag as? NodeItem\n        val nodeItemType = getTypeWithPriorityEx(nodeItem, nodeItem?.url, nodeItem?.quiz)\n        when (v.id) {\n            R.id.vg_podcast_featured_logo -> {\n                when (nodeItemType) {\n                    Constants.TYPE_VIDEO, Constants.TYPE_AUDIO, Constants.TYPE_PDF, Constants.TYPE_GALLERY, Constants.EXTERNAL_LINK, Constants.QUIZ -> {\n                        itemClickListener?.onEpisodeClick(nodeItem, nodeItemType)\n                    }\n                    else -> {\n                        itemClickListener?.onNodeWithDetailInfoClick(nodeItem)\n                    }\n                }\n            }\n        }\n    }\n\n    // Additional adapter logic if necessary\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_16.kt"
  },
  {
    "conversation_hash": "33014b662423c6b7aacf4183b09700f9",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding"
    ],
    "code": "// Import your generated binding class\n     import com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding\n\n     class PodcastFeaturedListAdapter: BaseQuickAdapter<NodeItem, PodcastFeaturedListAdapter.ViewHolder>() {\n\n         override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n             val binding = ItemPodcastFeaturedBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n             return ViewHolder(binding)\n         }\n\n         inner class ViewHolder(private val binding: ItemPodcastFeaturedBinding) : RecyclerView.ViewHolder(binding.root) {\n             fun bind(item: NodeItem) {\n                 // Use binding object to reference your views\n                 binding.ivPodcastFeaturedLogo // Example usage\n             }\n         }\n     }",
    "filename": "33014b662423c6b7aacf4183b09700f9_2.kt"
  },
  {
    "conversation_hash": "33014b662423c6b7aacf4183b09700f9",
    "code_index": 6,
    "language": "Kotlin",
    "libraries": [],
    "code": "override fun convert(holder: BaseViewHolder, item: NodeItem) {\n    // Example for image view binding with Glide\n    Glide.with(holder.itemView.context)\n        .load(getNodeFeatureImage(item.assets ?: arrayListOf()) ?: getNodeImage(item.assets ?: arrayListOf()))\n        .placeholder(R.drawable.ic_microfon_gray)\n        .apply(RequestOptions.fitCenterTransform())\n        .into(holder.getView(R.id.iv_podcast_featured_logo))\n\n    // Example for text view\n    holder.setText(R.id.txt_podcast_featured, item.name)\n\n    // Setting up click listener and tag correctly\n    val vgPodcastFeaturedLogo = holder.getView<View>(R.id.vg_podcast_featured_logo)\n    vgPodcastFeaturedLogo.tag = item\n    vgPodcastFeaturedLogo.setOnClickListener(this)\n}",
    "filename": "33014b662423c6b7aacf4183b09700f9_6.kt"
  },
  {
    "conversation_hash": "169567b6f8fce147ef1f015907ef7a9f",
    "code_index": 4,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.bumptech.glide.Glide",
      "com.bumptech.glide.request.RequestOptions",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.responce.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding",
      "com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick",
      "com.medicdigital.jjpodcasts.presentation.utils."
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.responce.NodeItem\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding\nimport com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick\nimport com.medicdigital.jjpodcasts.presentation.utils.*\n\nclass PodcastFeaturedListAdapter(private val itemClickListener: EpisodesClick?, private val itemWidth: Int, private val itemHeight: Int) :\n       BaseQuickAdapter<NodeItem, BaseViewHolder>(R.layout.item_podcast_featured) {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder {\n        val binding = ItemPodcastFeaturedBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        val holder = BaseViewHolder(binding.root)\n        \n        // Set up View onClickListener here if applicable\n        \n        return holder\n    }\n\n    override fun convert(holder: BaseViewHolder, item: NodeItem) {\n       val binding = ItemPodcastFeaturedBinding.bind(holder.itemView)\n       \n       with(binding) {\n           ivPodcastFeaturedLogo.apply {\n               layoutParams.height = itemHeight\n               Glide.with(context)\n                     .load(getNodeFeatureImage(item.assets ?: arrayListOf()) ?: getNodeImage(item.assets ?: arrayListOf()))\n                     .placeholder(R.drawable.ic_microfon_gray)\n                     .apply(RequestOptions.fitCenterTransform())\n                     .into(this)\n           }\n\n           txtPodcastFeatured.text = item.name\n\n           vgPodcastFeaturedLogo.apply {\n               tag = item\n               setOnClickListener { view ->\n                 // Delegate click handling to the View's onClickListener set in onCreateViewHolder or wherever applicable\n                 onClick(view)\n               }\n               outlineProvider = context.getRoundedOutlineProvider(alpha = .3f, cornerRadius = R.dimen.corner_4)\n           }\n       }\n    }\n\n    private fun onClick(v: View?) {\n       v ?: return\n       val nodeItem = v.tag as? NodeItem\n       nodeItem?.let { item ->\n           if (item.type == Constants.TYPE_PODCAST_EPISODE) {\n               val typeWithPriority = getTypeWithPriorityEx(item, item.url, item.quiz)\n               itemClickListener?.onEpisodeClick(item, typeWithPriority)\n           } else {\n               itemClickListener?.onNodeWithDetailInfoClick(item)\n           }\n       }\n    }\n}",
    "filename": "169567b6f8fce147ef1f015907ef7a9f_4.kt"
  },
  {
    "conversation_hash": "169567b6f8fce147ef1f015907ef7a9f",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.bumptech.glide.Glide",
      "com.bumptech.glide.request.RequestOptions",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick",
      "com.medicdigital.jjpodcasts.presentation.utils."
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem\nimport com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick\nimport com.medicdigital.jjpodcasts.presentation.utils.*\n\nclass PodcastFeaturedListAdapter(private val itemClickListener: EpisodesClick?, private val itemWidth: Int, private val itemHeight: Int) :\n        BaseQuickAdapter<NodeItem, BaseViewHolder>(R.layout.item_podcast_featured) {\n\n    override fun onItemViewHolderCreated(viewHolder: BaseViewHolder, viewType: Int) {\n        super.onItemViewHolderCreated(viewHolder, viewType)\n        viewHolder.getView<View>(R.id.vg_podcast_featured_logo).setOnClickListener {\n            val position = viewHolder.adapterPosition\n            if (position != RecyclerView.NO_POSITION) {\n                val item = getItem(position)\n                // Use onClick handling logic here\n            }\n        }\n    }\n\n    override fun convert(holder: BaseViewHolder, item: NodeItem) {\n        // Ensure to inflate your layout manually if required here\n\n        val ivPodcastFeatured = holder.itemView.findViewById<ImageView>(R.id.iv_podcast_featured_logo)\n        ivPodcastFeatured.layoutParams.height = itemHeight\n        Glide.with(holder.itemView.context)\n                .load(getNodeFeatureImage(item.assets ?: arrayListOf()) ?: getNodeImage(item.assets ?: arrayListOf()))\n                .placeholder(R.drawable.ic_microfon_gray)\n                .apply(RequestOptions.fitCenterTransform())\n                .into(ivPodcastFeatured)\n\n        holder.itemView.findViewById<TextView>(R.id.txt_podcast_featured).text = item.name\n\n        val vgPodcastFeaturedLogo = holder.itemView.findViewById<ViewGroup>(R.id.vg_podcast_featured_logo)\n        vgPodcastFeaturedLogo.tag = item\n        // Note: onClick listener is set in onItemViewHolderCreated\n    }\n    \n    // You could include your onClick method here if needed, ensuring it understands which item was clicked.\n}",
    "filename": "169567b6f8fce147ef1f015907ef7a9f_5.kt"
  },
  {
    "conversation_hash": "92cdc79491151ff8bc61e3d6337e5f01",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastBlockBinding",
      "com.medicdigital.jjpodcasts.presentation.extensions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.utils.showImage"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastBlockBinding\nimport com.medicdigital.jjpodcasts.presentation.extensions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.utils.showImage\n\nclass PodcastBlockListAdapter(private val onPodcastItemClickListener: OnPodcastItemClickListener?) : \n        BaseQuickAdapter<NodeItem, BaseViewHolder>(R.layout.item_podcast_block), View.OnClickListener {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder {\n        val binding = ItemPodcastBlockBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return BaseViewHolder(binding.root)\n    }\n\n    override fun convert(holder: BaseViewHolder, item: NodeItem) {\n        // Now using View Binding to access the views\n        val binding = ItemPodcastBlockBinding.bind(holder.itemView)\n\n        showImage(context, item?.assets, binding.ivItemPodcastBlockLogo)\n\n        binding.txtItemPodcastBlockName.text = item?.name\n\n        binding.vgItemPodcastBlockLogo.apply {\n            tag = item\n            setOnClickListener(this@PodcastBlockListAdapter)\n            outlineProvider = context.getRoundedOutlineProvider(alpha = .3f, cornerRadius = R.dimen.corner_4)\n        }\n    }\n\n    override fun onClick(v: View?) {\n        v ?: return\n        val nodeItem = v.tag as? NodeItem\n        when (v.id) {\n            R.id.vg_item_podcast_block_logo -> {\n                nodeItem?.let { onPodcastItemClickListener?.onPodcastItemClick(it) }\n            }\n        }\n    }\n\n    interface OnPodcastItemClickListener {\n        fun onPodcastItemClick(nodeItem: NodeItem)\n    }\n}",
    "filename": "92cdc79491151ff8bc61e3d6337e5f01_1.kt"
  },
  {
    "conversation_hash": "bd677706ddaf64bc6db0af38fbb52060",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastBlockBinding",
      "com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.utils.showImage"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastBlockBinding\nimport com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.utils.showImage\n\nclass PodcastBlockListAdapter(private val onPodcastItemClickListener: OnPodcastItemClickListener?) : BaseQuickAdapter<NodeItem, PodcastBlockListAdapter.PodcastViewHolder>(R.layout.item_podcast_block), View.OnClickListener {\n\n    override fun onCreateDefViewHolder(parent: ViewGroup, viewType: Int): PodcastViewHolder {\n        val binding = ItemPodcastBlockBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return PodcastViewHolder(binding)\n    }\n\n    override fun convert(holder: PodcastViewHolder, item: NodeItem) {\n        holder.bind(item)\n    }\n\n    inner class PodcastViewHolder(private val binding: ItemPodcastBlockBinding) : BaseViewHolder(binding.root), View.OnClickListener {\n        init {\n            binding.vgItemPodcastBlockLogo.setOnClickListener(this)\n        }\n\n        fun bind(item: NodeItem) {\n            with(binding) {\n                showImage(context, item.assets, ivItemPodcastBlockLogo)\n\n                txtItemPodcastBlockName.text = item.name\n\n                vgItemPodcastBlockLogo.apply {\n                    tag = item\n                    outlineProvider = context.getRoundedOutlineProvider(alpha = .3f, cornerRadius = R.dimen.corner_4)\n                }\n            }\n        }\n\n        override fun onClick(view: View) {\n            when (view.id) {\n                R.id.vg_item_podcast_block_logo -> {\n                    val nodeItem = view.tag as? NodeItem\n                    nodeItem?.let { onPodcastItemClickListener?.onPodcastItemClick(it) }\n                }\n            }\n        }\n    }\n\n    interface OnPodcastItemClickListener {\n        fun onPodcastItemClick(nodeItem: NodeItem)\n    }\n}",
    "filename": "bd677706ddaf64bc6db0af38fbb52060_1.kt"
  },
  {
    "conversation_hash": "ba39969ab50728b078c0cd0b04e9bc31",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastBlockBinding",
      "com.medicdigital.jjpodcasts.presentation.utils.showImage"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem  // Make sure the package name is correct here\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastBlockBinding // Import your item XML layout with View Binding\nimport com.medicdigital.jjpodcasts.presentation.utils.showImage\n\nclass PodcastBlockListAdapter(private val onPodcastItemClickListener: OnPodcastItemClickListener?) : \n    BaseQuickAdapter<NodeItem, PodcastBlockListAdapter.PodcastViewHolder>(R.layout.item_podcast_block) {\n\n    override fun onItemViewHolderCreated(viewHolder: PodcastViewHolder, viewType: Int) {\n        viewHolder.binding.root.setOnClickListener {\n            val position = viewHolder.bindingAdapterPosition\n            if (position != RecyclerView.NO_POSITION) {\n                getItem(position)?.let { onPodcastItemClickListener?.onPodcastItemClick(it) }\n            }\n        }\n    }\n    \n    override fun convert(holder: PodcastViewHolder, item: NodeItem) {\n        with(holder.binding) {\n            showImage(context, item.assets, ivItemPodcastBlockLogo)\n            txtItemPodcastBlockName.text = item.name\n            // Customize your view as needed\n        }\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PodcastViewHolder {\n        val binding = ItemPodcastBlockBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return PodcastViewHolder(binding)\n    }\n\n    class PodcastViewHolder(val binding: ItemPodcastBlockBinding) : BaseViewHolder(binding.root)\n\n    interface OnPodcastItemClickListener {\n        fun onPodcastItemClick(nodeItem: NodeItem)\n    }\n}",
    "filename": "ba39969ab50728b078c0cd0b04e9bc31_1.kt"
  },
  {
    "conversation_hash": "fb794923bc1aca876dc7d7f208a6ac71",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.ViewGroup",
      "androidx.recyclerview.widget.RecyclerView",
      "com.medicdigital.jjpodcasts.data.remote.responce.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastBlockBinding",
      "com.medicdigital.jjpodcasts.presentation.utils.showImage"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.RecyclerView\nimport com.medicdigital.jjpodcasts.data.remote.responce.NodeItem\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastBlockBinding\nimport com.medicdigital.jjpodcasts.presentation.utils.showImage\n\nclass PodcastBlockListAdapter(\n    private val onPodcastItemClickListener: OnPodcastItemClickListener?\n) : RecyclerView.Adapter<PodcastBlockListAdapter.PodcastViewHolder>() {\n\n    private val items = mutableListOf<NodeItem>()\n\n    fun setItems(list: List<NodeItem>) {\n        items.clear()\n        items.addAll(list)\n        notifyDataSetChanged()\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PodcastViewHolder {\n        val binding = ItemPodcastBlockBinding.inflate(\n            LayoutInflater.from(parent.context), parent, false\n        )\n        return PodcastViewHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: PodcastViewHolder, position: Int) {\n        holder.bind(items[position])\n    }\n\n    override fun getItemCount(): Int = items.size\n\n    inner class PodcastViewHolder(private val binding: ItemPodcastBlockBinding) :\n        RecyclerView.ViewHolder(binding.root) {\n\n        init {\n            binding.vgItemPodcastBlockLogo.setOnClickListener {\n                val item = items[adapterPosition]\n                onPodcastItemClickListener?.onPodcastItemClick(item)\n            }\n        }\n\n        fun bind(item: NodeItem) {\n            with(binding) {\n                showImage(itemView.context, item.assets, ivItemPodcastBlockLogo)\n                txtItemPodcastBlockName.text = item.name\n                vgItemPodcastBlockLogo.outlineProvider = itemView.context.getRoundedOutlineProvider(\n                    alpha = .3f, cornerRadius = context.resources.getDimension(R.dimen.corner_4)\n                )\n                vgItemPodcastBlockLogo.tag = item\n            }\n        }\n    }\n\n    interface OnPodcastItemClickListener {\n        fun onPodcastItemClick(nodeItem: NodeItem)\n    }\n}",
    "filename": "fb794923bc1aca876dc7d7f208a6ac71_1.kt"
  },
  {
    "conversation_hash": "17fa21c04c78c59847c407deb1991d48",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.ViewGroup",
      "androidx.recyclerview.widget.RecyclerView",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastBlockBinding",
      "com.medicdigital.jjpodcasts.presentation.extensions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.utils.showImage"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.RecyclerView\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastBlockBinding\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem\nimport com.medicdigital.jjpodcasts.presentation.extensions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.utils.showImage\n\nclass PodcastBlockListAdapter(private val onPodcastItemClickListener: OnPodcastItemClickListener?) : RecyclerView.Adapter<PodcastBlockListAdapter.PodcastViewHolder>() {\n\n    private var items: List<NodeItem> = listOf()\n\n    fun setItems(items: List<NodeItem>) {\n        this.items = items\n        notifyDataSetChanged()\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PodcastViewHolder {\n        val binding = ItemPodcastBlockBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return PodcastViewHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: PodcastViewHolder, position: Int) {\n        val item = items[position]\n        holder.bind(item)\n    }\n\n    override fun getItemCount(): Int = items.size\n\n    inner class PodcastViewHolder(private val binding: ItemPodcastBlockBinding) : RecyclerView.ViewHolder(binding.root) {\n\n        fun bind(item: NodeItem) {\n            with(binding) {\n                showImage(itemView.context, item.assets, ivItemPodcastBlockLogo)\n\n                txtItemPodcastBlockName.text = item.name\n\n                vgItemPodcastBlockLogo.apply {\n                    tag = item\n                    setOnClickListener {\n                        onPodcastItemClickListener?.onPodcastItemClick(item)\n                    }\n                    outlineProvider = context.getRoundedOutlineProvider(alpha = .3f, cornerRadius = R.dimen.corner_4)\n                }\n            }\n        }\n    }\n\n    interface OnPodcastItemClickListener {\n        fun onPodcastItemClick(nodeItem: NodeItem)\n    }\n}",
    "filename": "17fa21c04c78c59847c407deb1991d48_1.kt"
  },
  {
    "conversation_hash": "a51eac21e12ab1a58cd3c8b95f8bc767",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.bumptech.glide.Glide",
      "com.bumptech.glide.request.RequestOptions",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.responce.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding",
      "com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick",
      "com.medicdigital.jjpodcasts.presentation.utils.Constants",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.responce.NodeItem\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding\nimport com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick\nimport com.medicdigital.jjpodcasts.presentation.utils.Constants\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx\n\nclass PodcastFeaturedListAdapter(private val itemClickListener: EpisodesClick?, private val itemWidth: Int, private val itemHeight: Int) :\n    BaseQuickAdapter<NodeItem, BaseViewHolder>(R.layout.item_podcast_featured),\n    View.OnClickListener {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder {\n        val binding = ItemPodcastFeaturedBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return BaseViewHolder(binding.root)\n    }\n\n    override fun convert(holder: BaseViewHolder, item: NodeItem) {\n        val binding = ItemPodcastFeaturedBinding.bind(holder.itemView)\n\n        binding.ivPodcastFeaturedLogo.apply {\n            layoutParams.height = itemHeight\n            Glide.with(context)\n                .load(getNodeFeatureImage(item.assets) ?: getNodeImage(item.assets))\n                .placeholder(R.drawable.ic_microfon_gray)\n                .apply(RequestOptions.fitCenterTransform())\n                .into(this)\n        }\n\n        binding.txtPodcastFeatured.text = item.name\n\n        binding.vgPodcastFeaturedLogo.apply {\n            tag = item\n            setOnClickListener(this@PodcastFeaturedListAdapter)\n            outlineProvider = context.getRoundedOutlineProvider(alpha = .3f, cornerRadius = R.dimen.corner_4)\n        }\n    }\n\n    override fun onClick(v: View?) {\n        v ?: return\n        val nodeItem = v.tag as? NodeItem\n        when (v.id) {\n            R.id.vg_podcast_featured_logo -> {\n                itemClickListener?.let {\n                    if (nodeItem?.type == Constants.TYPE_PODCAST_EPISODE.toString()) {\n                        val typePriorityEx = getTypeWithPriorityEx(nodeItem, nodeItem.url, nodeItem.quiz)\n                        it.onEpisodeClick(nodeItem, typePriorityEx)\n                    } else {\n                        it.onNodeWithDetailInfoClick(nodeItem)\n                    }\n                }\n            }\n        }\n    }\n}",
    "filename": "a51eac21e12ab1a58cd3c8b95f8bc767_1.kt"
  },
  {
    "conversation_hash": "a51eac21e12ab1a58cd3c8b95f8bc767",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.bumptech.glide.Glide",
      "com.bumptech.glide.request.RequestOptions",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding",
      "com.medicdigital.jjpodcasts.presentation.extensions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick",
      "com.medicdigital.jjpodcasts.presentation.utils.Constants",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding\nimport com.medicdigital.jjpodcasts.presentation.extensions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick\nimport com.medicdigital.jjpodcasts.presentation.utils.Constants\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx\n\nclass PodcastFeaturedListAdapter(private val itemClickListener: EpisodesClick?, private val itemWidth: Int, private val itemHeight: Int) :\n    BaseQuickAdapter<NodeItem, BaseViewHolder>(R.layout.item_podcast_featured),\n    View.OnClickListener {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder {\n        val binding = ItemPodcastFeaturedBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return BaseViewHolder(binding.root)\n    }\n\n    override fun convert(holder: BaseViewHolder, item: NodeItem) {\n        val binding = ItemPodcastFeaturedBinding.bind(holder.itemView)\n\n        binding.ivPodcastFeaturedLogo.apply {\n            layoutParams.height = itemHeight\n            Glide.with(context)\n                .load(getNodeFeatureImage(item.assets) ?: getNodeImage(item.assets))\n                .placeholder(R.drawable.ic_microfon_gray)\n                .apply(RequestOptions.fitCenterTransform())\n                .into(this)\n        }\n\n        binding.txtPodcastFeatured.text = item.name\n\n        binding.vgPodcastFeaturedLogo.apply {\n            tag = item\n            setOnClickListener(this@PodcastFeaturedListAdapter)\n            outlineProvider = context.getRoundedOutlineProvider(alpha = .3f, cornerRadius = R.dimen.corner_4)\n        }\n    }\n\n    override fun onClick(v: View?) {\n        v ?: return\n        val nodeItem = v.tag as? NodeItem\n        when (v.id) {\n            R.id.vg_podcast_featured_logo -> {\n                if (nodeItem?.type == Constants.TYPE_PODCAST_EPISODE.toString()) {\n                    getTypeWithPriorityEx(nodeItem, nodeItem.url, nodeItem.quiz).also { contentType ->\n                        itemClickListener?.onEpisodeClick(nodeItem, contentType)\n                    }\n                } else {\n                    itemClickListener?.onNodeWithDetailInfoClick(nodeItem)\n                }\n            }\n        }\n    }\n}",
    "filename": "a51eac21e12ab1a58cd3c8b95f8bc767_2.kt"
  },
  {
    "conversation_hash": "a51eac21e12ab1a58cd3c8b95f8bc767",
    "code_index": 3,
    "language": "Kotlin",
    "libraries": [
      "CymChad",
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.bumptech.glide.Glide",
      "com.bumptech.glide.request.RequestOptions",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding",
      "com.medicdigital.jjpodcasts.presentation.extensions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick",
      "com.medicdigital.jjpodcasts.presentation.utils.Constants",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding\nimport com.medicdigital.jjpodcasts.presentation.extensions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick\nimport com.medicdigital.jjpodcasts.presentation.utils.Constants\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx\n\nclass PodcastFeaturedListAdapter(private val itemClickListener: EpisodesClick?, private val itemWidth: Int, private val itemHeight: Int) :\n    BaseQuickAdapter<NodeItem, BaseViewHolder>(R.layout.item_podcast_featured),\n    View.OnClickListener {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder {\n        val binding = ItemPodcastFeaturedBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return BaseViewHolder(binding.root)\n    }\n\n    override fun onItemViewHolderCreated(viewHolder: BaseViewHolder, viewType: Int) {\n        // Assuming you're using BaseQuickAdapter from CymChad's BaseRecyclerViewAdapterHelper\n        ItemPodcastFeaturedBinding.bind(viewHolder.itemView).apply {\n            vgPodcastFeaturedLogo.setOnClickListener(this@PodcastFeaturedListAdapter)\n        }       \n    }\n\n    override fun convert(holder: BaseViewHolder, item: NodeItem) {\n        val binding = ItemPodcastFeaturedBinding.bind(holder.itemView)\n\n        binding.ivPodcastFeaturedLogo.layoutParams.height = itemHeight\n        Glide.with(holder.itemView.context)\n             .load(getNodeFeatureImage(item.assets) ?: getNodeImage(item.assets))\n             .placeholder(R.drawable.ic_microfon_gray)\n             .apply(RequestOptions.fitCenterTransform())\n             .into(binding.ivPodcastFeaturedLogo)\n\n        binding.txtPodcastFeatured.text = item.name\n        binding.vgPodcastFeaturedLogo.tag = item\n        binding.vgPodcastFeaturedLogo.outlineProvider = holder.itemView.context.getRoundedOutlineProvider(alpha = .3f, cornerRadius = R.dimen.corner_4)\n    }\n\n    override fun onClick(v: View?) {\n        v ?: return\n        val nodeItem = v.tag as? NodeItem\n        if (nodeItem != null && v.id == R.id.vg_podcast_featured_logo) {\n            if(nodeItem.type == Constants.TYPE_PODCAST_EPISODE.toString()) {\n                val contentType = getTypeWithPriorityEx(nodeItem, nodeItem.url, nodeItem.quiz)\n                itemClickListener?.onEpisodeClick(nodeItem, contentType)\n            } else {\n                itemClickListener?.onNodeWithDetailInfoClick(nodeItem)\n            }\n        }\n    }\n}",
    "filename": "a51eac21e12ab1a58cd3c8b95f8bc767_3.kt"
  },
  {
    "conversation_hash": "a51eac21e12ab1a58cd3c8b95f8bc767",
    "code_index": 5,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.bumptech.glide.Glide",
      "com.bumptech.glide.request.RequestOptions",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding",
      "com.medicdigital.jjpodcasts.presentation.extensions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick",
      "com.medicdigital.jjpodcasts.presentation.utils.Constants",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx",
      "for"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem // Fixed typo in package\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding // Correct import for ViewBinding\nimport com.medicdigital.jjpodcasts.presentation.extensions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick\nimport com.medicdigital.jjpodcasts.presentation.utils.Constants\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx\n\nclass PodcastFeaturedListAdapter(\n    private val itemClickListener: EpisodesClick?, \n    private val itemWidth: Int, \n    private val itemHeight: Int\n) : BaseQuickAdapter<NodeItem, BaseViewHolder>(R.layout.item_podcast_featured),\n    View.OnClickListener {\n\n    override fun onCreateDefViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder {\n        val binding = ItemPodcastFeaturedBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return BaseViewHolder(binding.root)\n    }\n\n    override fun convert(holder: BaseViewHolder, item: NodeItem) {\n        // Since BaseViewHolder doesn't directly support ViewBinding, we retrieve the binding like this.\n        val binding = ItemPodcastFeaturedBinding.bind(holder.itemView)\n\n        binding.ivPodcastFeaturedLogo.layoutParams.height = itemHeight\n\n        Glide.with(context)\n            .load(getNodeFeatureImage(item.assets) ?: getNodeImage(item.assets))\n            .placeholder(R.drawable.ic_microfon_gray)\n            .apply(RequestOptions.fitCenterTransform())\n            .into(binding.ivPodcastFeaturedLogo)\n\n        binding.txtPodcastFeatured.text = item.name\n\n        binding.vgPodcastFeaturedLogo.apply {\n            tag = item\n            setOnClickListener(this@PodcastFeaturedListAdapter)\n            outlineProvider = context.getRoundedOutlineProvider(alpha = .3f, cornerRadius = R.dimen.corner_4)\n        }\n    }\n\n    override fun onClick(v: View?) {\n        v ?: return\n        val nodeItem = v.tag as? NodeItem\n        nodeItem?.let {\n            when (v.id) {\n                R.id.vg_podcast_featured_logo -> handleItemClick(it)\n            }\n        }\n    }\n\n    private fun handleItemClick(nodeItem: NodeItem) {\n        if (nodeItem.type == Constants.TYPE_PODCAST_EPISODE.toString()) {\n            val contentType = getTypeWithPriorityEx(nodeItem, nodeItem.url, nodeItem.quiz)\n            itemClickListener?.onEpisodeClick(nodeItem, contentType)\n        } else {\n            itemClickListener?.onNodeWithDetailInfoClick(nodeItem)\n        }\n    }\n}",
    "filename": "a51eac21e12ab1a58cd3c8b95f8bc767_5.kt"
  },
  {
    "conversation_hash": "d508fb64a179712676719edc239fa96f",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "android.view.LayoutInflater",
      "android.view.View",
      "android.view.ViewGroup",
      "com.bumptech.glide.Glide",
      "com.bumptech.glide.request.RequestOptions",
      "com.chad.library.adapter.base.BaseQuickAdapter",
      "com.chad.library.adapter.base.viewholder.BaseViewHolder",
      "com.medicdigital.jjpodcasts.R",
      "com.medicdigital.jjpodcasts.data.remote.response.NodeItem",
      "com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding",
      "com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider",
      "com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick",
      "com.medicdigital.jjpodcasts.presentation.utils.Constants",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getNodeImage",
      "com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx",
      "the"
    ],
    "code": "package com.medicdigital.jjpodcasts.presentation.podcasts.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.chad.library.adapter.base.BaseQuickAdapter\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\nimport com.medicdigital.jjpodcasts.R\nimport com.medicdigital.jjpodcasts.data.remote.response.NodeItem\nimport com.medicdigital.jjpodcasts.databinding.ItemPodcastFeaturedBinding\nimport com.medicdigital.jjpodcasts.presentation.extentions.getRoundedOutlineProvider\nimport com.medicdigital.jjpodcasts.presentation.podcasts.EpisodesClick\nimport com.medicdigital.jjpodcasts.presentation.utils.Constants\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeFeatureImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getNodeImage\nimport com.medicdigital.jjpodcasts.presentation.utils.getTypeWithPriorityEx\n\nclass PodcastFeaturedListAdapter(private val itemClickListener: EpisodesClick?, private val itemWidth: Int, private val itemHeight: Int) :\n    BaseQuickAdapter<NodeItem, BaseViewHolder>(R.layout.item_podcast_featured),\n    View.OnClickListener {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder {\n        val binding = ItemPodcastFeaturedBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        return BaseViewHolder(binding.root)\n    }\n\n    override fun convert(holder: BaseViewHolder, item: NodeItem) {\n        // Get the binding from the itemView\n        val binding = ItemPodcastFeaturedBinding.bind(holder.itemView)\n\n        binding.ivPodcastFeaturedLogo.layoutParams.height = itemHeight\n        Glide.with(context)\n            .load(getNodeFeatureImage(item.assets ?: arrayListOf()) ?: getNodeImage(item.assets ?: arrayListOf()))\n            .placeholder(R.drawable.ic_microfon_gray)\n            .apply(RequestOptions.fitCenterTransform())\n            .into(binding.ivPodcastFeaturedLogo)\n\n        binding.txtPodcastFeatured.text = item.name\n\n        binding.vgPodcastFeaturedLogo.apply {\n            tag = item\n            setOnClickListener(this@PodcastFeaturedListAdapter)\n            outlineProvider = context.getRoundedOutlineProvider(alpha = .3f, cornerRadius = R.dimen.corner_4)\n        }\n    }\n\n    override fun onClick(v: View?) {\n        v ?: return\n        val nodeItem = v.tag as? NodeItem\n        when (v.id) {\n            R.id.vg_podcast_featured_logo -> {\n                nodeItem?.let {\n                    itemClickListener?.onEpisodeClick(it, getTypeWithPriorityEx(it, it.url, it.quiz))\n                }\n            }\n        }\n    }\n}",
    "filename": "d508fb64a179712676719edc239fa96f_1.kt"
  },
  {
    "conversation_hash": "39329eede6c3ce2d77351a0b312740e8",
    "code_index": 2,
    "language": "Kotlin",
    "libraries": [],
    "code": "buildscript {\n        repositories {\n            google()\n            mavenCentral()\n        }\n        dependencies {\n            classpath \"com.android.tools.build:gradle:[VERSION]\"\n        }\n    }",
    "filename": "39329eede6c3ce2d77351a0b312740e8_2.kt"
  },
  {
    "conversation_hash": "a051c7dde11068f90eb93449f265d04a",
    "code_index": 1,
    "language": "Kotlin",
    "libraries": [
      "androidx.test.ext.junit.runners.AndroidJUnit4",
      "androidx.test.platform.app.InstrumentationRegistry",
      "org.junit.Assert.assertEquals",
      "org.junit.Test",
      "org.junit.runner.RunWith"
    ],
    "code": "package com.medicdigital.jjpodcasts\n\nimport androidx.test.platform.app.InstrumentationRegistry\nimport androidx.test.ext.junit.runners.AndroidJUnit4\nimport org.junit.Test\nimport org.junit.runner.RunWith\nimport org.junit.Assert.assertEquals\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * See [testing documentation](http://d.android.com/tools/testing).\n */\n@RunWith(AndroidJUnit4::class)\nclass ExampleInstrumentedTest {\n    @Test\n    fun useAppContext() {\n        // Context of the app under test.\n        val appContext = InstrumentationRegistry.getInstrumentation().targetContext\n        assertEquals(\"com.medicdigital.jjpodcasts\", appContext.packageName)\n    }\n}",
    "filename": "a051c7dde11068f90eb93449f265d04a_1.kt"
  },
  {
    "conversation_hash": "811f48c598873a23318c9a80465737bc",
    "code_index": 16,
    "language": "Kotlin",
    "libraries": [],
    "code": "@RestController\nclass MyCoroutineController(val myService: MyService) {\n\n    @GetMapping(\"/data\")\n    suspend fun getData(): MyData {\n        return myService.getData()\n    }\n}",
    "filename": "811f48c598873a23318c9a80465737bc_16.kt"
  }
]