[
  {
    "conversation_hash": "ea990dbf3391ddb5aaf272d60c68f4a7",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "var queryObject = {\n  name: \"John\",\n  age: 30,\n  gender: \"male\"\n}",
    "filename": "ea990dbf3391ddb5aaf272d60c68f4a7_8.swift"
  },
  {
    "conversation_hash": "a2de368674d1377c9f82e7a3e9eda55f",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "setContent {\n    MaterialTheme {\n        ExampleBarChart()\n    }\n}",
    "filename": "a2de368674d1377c9f82e7a3e9eda55f_2.swift"
  },
  {
    "conversation_hash": "29130f9ac45e85bbf0a5d1336c18e4db",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "let statisticsLabel = UILabel()\nstatisticsLabel.frame = CGRect(x: 0, y: 0, width: 200, height: 21)\nstatisticsLabel.center = CGPoint(x: 160, y: 285) // modifier pour positionner où vous souhaitez afficher les statistiques\nstatisticsLabel.textAlignment = .center\nstatisticsLabel.text = \"Statistiques : Attaque - 50, Défense - 60\"\nself.view.addSubview(statisticsLabel)\n// Vous devez modifier le texte en fonction des données que vous voulez afficher.",
    "filename": "29130f9ac45e85bbf0a5d1336c18e4db_4.swift"
  },
  {
    "conversation_hash": "6b78bde94c3afc48ff37e12b82b5493e",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "logging:\n  level:\n    root: DEBUG\n  appenders:\n    console:\n      name: console\n      threshold: DEBUG\n      target: SYSTEM_OUT\n      encoder:\n        pattern: \"%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\"\n        charset: UTF-8\n  loggers:\n    com.example:\n      level: DEBUG\n      additivity: false\n      appenders: console",
    "filename": "6b78bde94c3afc48ff37e12b82b5493e_7.swift"
  },
  {
    "conversation_hash": "6b78bde94c3afc48ff37e12b82b5493e",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "logging:\n  level:\n    root: DEBUG\n    org.hibernate.SQL: DEBUG\n    org.hibernate.type.descriptor.sql.BasicBinder: TRACE\n  appenders:\n    console:\n      name: console\n      threshold: DEBUG\n      target: SYSTEM_OUT\n      encoder:\n        pattern: \"%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\"\n        charset: UTF-8\n  loggers:\n    com.example:\n      level: DEBUG\n      additivity: false\n      appenders: console",
    "filename": "6b78bde94c3afc48ff37e12b82b5493e_11.swift"
  },
  {
    "conversation_hash": "18369146b6127dda62afeef5f27d4d96",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "func generateStory(genre: String, character: String?, setting: String?, includeConflict: Bool, includePlot: Bool) async -> String {\n    var prompt = \"Create a creative kids story about a\"\n    if let character = character {\n        prompt += \" \\(character)\"\n    } else {\n        prompt += \" [ADD CHARACTER]\"\n    }\n    if let setting = setting {\n        prompt += \" in a \\(setting)\"\n    } else {\n        prompt += \" [ADD SETTING]\"\n    }\n    prompt += \" for a \\(genre) adventure.\"\n    if includeConflict {\n        prompt += \" Include conflict.\"\n    }\n    if includePlot {\n        prompt += \" Include a plot.\"\n    }\n\n    // Call OpenAI chat GPT API with prompt as input\n    // ...\n}",
    "filename": "18369146b6127dda62afeef5f27d4d96_0.swift"
  },
  {
    "conversation_hash": "18369146b6127dda62afeef5f27d4d96",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "struct StoryView: View {\n    let genre: String\n    let character: String?\n    let setting: String?\n    let includeConflict: Bool\n    let includePlot: Bool\n\n    @State private var story: String? = nil\n\n    var body: some View {\n        Group {\n            if story == nil {\n                ProgressView(\"Creating Story...\")\n                    .onAppear {\n                        Task {\n                            let response = await generateStory(genre: genre, character: character, setting: setting, includeConflict: includeConflict, includePlot: includePlot)\n                            story = parseStory(response: response)\n                        }\n                    }\n            } else {\n                ScrollView {\n                    VStack {\n                        Text(story!)\n                            .padding()\n                        Button(action: {\n                            dismiss(animated: true)\n                        }) {\n                            Text(\"Dismiss\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "filename": "18369146b6127dda62afeef5f27d4d96_1.swift"
  },
  {
    "conversation_hash": "c11ce47c421f4ea20347ea6732807fb1",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "class UpdateLocationWorker(\n    appContext: Context,\n    params: WorkerParameters\n) : Worker(appContext, params) {\n\n    // ...\n}",
    "filename": "c11ce47c421f4ea20347ea6732807fb1_2.swift"
  },
  {
    "conversation_hash": "c11ce47c421f4ea20347ea6732807fb1",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "class UpdateLocationWorker(\n    appContext: Context,\n    params: WorkerParameters,\n    private val prefs: SharedPreferences\n) : Worker(appContext, params) {\n\n    // ...\n}",
    "filename": "c11ce47c421f4ea20347ea6732807fb1_3.swift"
  },
  {
    "conversation_hash": "c11ce47c421f4ea20347ea6732807fb1",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "class UpdateLocationWorker(\n    appContext: Context,\n    workerParams: WorkerParameters\n) : Worker(appContext, workerParams) {\n\n    // ...\n}",
    "filename": "c11ce47c421f4ea20347ea6732807fb1_10.swift"
  },
  {
    "conversation_hash": "c11ce47c421f4ea20347ea6732807fb1",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "class UpdateLocationWorker(\n    appContext: Context,\n    workerParams: WorkerParameters,\n    private val prefs: SharedPreferences   // added parameter for SharedPreferences\n) : CoroutineWorker(appContext, workerParams) {\n    // ...\n}",
    "filename": "c11ce47c421f4ea20347ea6732807fb1_11.swift"
  },
  {
    "conversation_hash": "a2b3ffde3a4721314e3808ce31ba4937",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "// Create a platform\nadd([\n  rect(100, 10),\n  pos(0, 150),\n  solid(),\n  \"platform\"\n])",
    "filename": "a2b3ffde3a4721314e3808ce31ba4937_2.swift"
  },
  {
    "conversation_hash": "093f43a76ec16de8f953741728ac1697",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildFeatures {\n        viewBinding true\n    }\n}",
    "filename": "093f43a76ec16de8f953741728ac1697_0.swift"
  },
  {
    "conversation_hash": "77f5b25034c3caa79b0e50c4882f561a",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  _id: ObjectId(),\n  players: [\n    { playerId: ObjectId(\"playerOneId\"), score: 25 },\n    { playerId: ObjectId(\"playerTwoId\"), score: 10 },\n    { playerId: ObjectId(\"playerThreeId\"), score: 45 },\n    { playerId: ObjectId(\"playerFourId\"), score: 20 }\n  ],\n  currentTrick: { trickNum: 1, cards: [] },\n  cardsPlayed: [\"AH\", \"KH\", \"QH\", \"JH\", \"TH\", \"9H\", \"8H\", \"7H\", \"6H\", \"5H\", \"4H\", \"3H\", \"2H\"],\n  round: 1\n}",
    "filename": "77f5b25034c3caa79b0e50c4882f561a_1.swift"
  },
  {
    "conversation_hash": "c6bc9af25ae14c879ba81da6396ba617",
    "code_index": 15,
    "language": "Swift",
    "libraries": [],
    "code": "TextField(\n  decoration: InputDecoration(\n    hintText: '请输入中文',\n  ),\n  style: TextStyle(\n    fontFamily: 'PingFang',\n  ),\n),",
    "filename": "c6bc9af25ae14c879ba81da6396ba617_15.swift"
  },
  {
    "conversation_hash": "c6bc9af25ae14c879ba81da6396ba617",
    "code_index": 16,
    "language": "Swift",
    "libraries": [],
    "code": "DefaultTextStyle(\n  style: TextStyle(fontFamily: Theme.of(context).platform == TargetPlatform.android ? 'Roboto' : 'San Francisco'),\n  child: MaterialApp(\n    // Your app goes here\n  ),\n)",
    "filename": "c6bc9af25ae14c879ba81da6396ba617_16.swift"
  },
  {
    "conversation_hash": "d098ffb62c06e5a70244c2bc4a76a921",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "var app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n})",
    "filename": "d098ffb62c06e5a70244c2bc4a76a921_0.swift"
  },
  {
    "conversation_hash": "d098ffb62c06e5a70244c2bc4a76a921",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "var vm = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n})",
    "filename": "d098ffb62c06e5a70244c2bc4a76a921_7.swift"
  },
  {
    "conversation_hash": "3f49333daf8b1f5fbce713c11ad4a16d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "[\n  { resource: Timeout {\n      _idleTimeout: 1,\n      _idlePrev: [Timeout],\n      _idleNext: [Timeout],\n      _idleStart: 1607493295230,\n      _onTimeout: [Function (anonymous)],\n      _timerArgs: undefined,\n      _repeat: null,\n      _destroyed: false,\n      [Symbol(refed)]: true,\n      [Symbol(asyncId)]: 1,\n      [Symbol(triggerAsyncId)]: 0\n    },\n    asyncId: 1,\n    triggerAsyncId: 0\n  },\n  { resource: Timeout {\n      _idleTimeout: 1,\n      _idlePrev: [Timeout],\n      _idleNext: [Timeout],\n      _idleStart: 1607493295360,\n      _onTimeout: [Function (anonymous)],\n      _timerArgs: undefined,\n      _repeat: null,\n      _destroyed: false,\n      [Symbol(refed)]: true,\n      [Symbol(asyncId)]: 2,\n      [Symbol(triggerAsyncId)]: 1\n    },\n    asyncId: 2,\n    triggerAsyncId: 1\n  }\n]",
    "filename": "3f49333daf8b1f5fbce713c11ad4a16d_0.swift"
  },
  {
    "conversation_hash": "04572a82d4d2338fa93064136ffc2032",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "func realizarVentaEnCorto() {\n   // Aquí se puede implementar la lógica para vender en corto. Ejemplo:\n   let cantidadAcciones: Int = 100 // Cantidad de acciones que se venderán en corto.\n   let precioAccionActual: Float = 90.00 // Precio actual de la acción.\n   \n   // Realizar la venta en corto de las acciones.\n   let montoTotalVenta: Float = Float(cantidadAcciones) * precioAccionActual\n   // Puede utilizar alguna herramienta o API de corredor de bolsa para realizar la transacción.\n   // Por ejemplo:\n   // corredor.brokerAPI.vender(cantidadAcciones, precioAccionActual)\n   \n   // Actualizar el portafolio de acciones con la venta realizada.\n   actualizarPortafolio(cantidadAcciones, precioAccionActual, montoTotalVenta)\n   // Es importante actualizar el registro del portafolio de inversiones una vez que se ha completado una venta en corto.\n}",
    "filename": "04572a82d4d2338fa93064136ffc2032_1.swift"
  },
  {
    "conversation_hash": "62f8b60ee1c0955e90205b6846b73102",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  combinationRank: 4,\n  combination: \"straight\",\n  cards: [\n    { suit: 'c', rank: 'A' },\n    { suit: 'd', rank: 'K' },\n    { suit: 'c', rank: 'Q' },\n    { suit: 's', rank: 'T' },\n    { suit: 's', rank: 'J' }\n  ]\n}",
    "filename": "62f8b60ee1c0955e90205b6846b73102_2.swift"
  },
  {
    "conversation_hash": "f369d9686fd10a461bd727e7b07ac939",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n    super.viewWillTransition(to: size, with: coordinator)\n    coordinator.animate(alongsideTransition: { _ in\n        let orientation = UIApplication.shared.statusBarOrientation\n        if orientation == .landscapeLeft || orientation == .landscapeRight {\n            // Switch to the landscape interface - this will be the new view controller you added to your storyboard\n        } else {\n            // Switch back to the portrait interface - this will be the initial view controller in your storyboard\n        }\n    }, completion: nil)\n}",
    "filename": "f369d9686fd10a461bd727e7b07ac939_0.swift"
  },
  {
    "conversation_hash": "c258cd267629925f01913775a1418a84",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "@Entity(tableName = \"Book\")\ndata class Book(\n    @PrimaryKey(autoGenerate = true)\n    var id: Int = 0,\n    var title: String,\n    var author: String\n )",
    "filename": "c258cd267629925f01913775a1418a84_0.swift"
  },
  {
    "conversation_hash": "5aba826f7bbdae4638e67ed6635a859b",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "xAxis: {\n    type: 'time',\n    // ...\n    dataZoom: [{\n        type: 'slider',\n        // ...\n        rangeMode: ['value', 'value'], // 禁止用户自定义范围\n        // ...\n    }],\n}",
    "filename": "5aba826f7bbdae4638e67ed6635a859b_0.swift"
  },
  {
    "conversation_hash": "68a7012b03b9f3b42b5807cd2ee257e4",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "if contact.count > 1 {\n    var number = String(contact[1].characters.filter{$0 != \" \"})\n\n    if number.range(of: \"+86\") != nil {\n        if (!self.isTelNumber(num: number.substring(from: number.characters.index(number.startIndex, offsetBy: 3)) as NSString)) {\n            continue\n        }\n    }\n    if number.isEmpty || !number.characters.contains(\"+\") || number.characters.count < 10 {\n        continue\n    }\n\n    if number.range(of: \"-\") != nil {\n        number = number.replacingOccurrences(of: \"-\", with: \"\")\n    }\n    number = number.replacingOccurrences(of: \" \", with: \"\")\n    dict.setObject(name, forKey: number as NSCopying)\n}",
    "filename": "68a7012b03b9f3b42b5807cd2ee257e4_9.swift"
  },
  {
    "conversation_hash": "e8b86f4913cb0833e6d017806f1d072d",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  selector: \"#example-element\",\n  text: \"这是一个需要引导用户了解的元素\",\n  position: {\n    top: 50,\n    right: 10\n  }\n}",
    "filename": "e8b86f4913cb0833e6d017806f1d072d_1.swift"
  },
  {
    "conversation_hash": "1785805a81221a2bc3845abdabc93d69",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "// 存储来电阻止号码列表\nUserDefaults.standard.setValue([\"800-123-4567\", \"888-555-1212\"], forKey: \"blockedNumbers\")\n\n// 在CXCallDirectoryProvider中检索来电阻止号码列表，并将其与将打入的电话号码进行比对\nfunc beginRequest(with context: CXCallDirectoryExtensionContext) {\n    let blockedNumbers = UserDefaults.standard.array(forKey: \"blockedNumbers\") as? [String] ?? []\n    for phoneNumber in context.phoneNumbers {\n        if blockedNumbers.contains(phoneNumber.stringValue) {\n            context.addBlockingEntry(withNextSequentialPhoneNumber: phoneNumber)\n        }\n    }\n    context.completeRequest()\n}",
    "filename": "1785805a81221a2bc3845abdabc93d69_0.swift"
  },
  {
    "conversation_hash": "1785805a81221a2bc3845abdabc93d69",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "// 存储用户设置\nUserDefaults.standard.set(\"Ringtone 1\", forKey: \"preferredRingtone\")\n\n// 使用CallKit来应用用户设置\nclass MyCallController: CXCallObserverDelegate {\n    func callObserver(_ callObserver: CXCallObserver, callChanged call: CXCall) {\n        let preferredRingtone = UserDefaults.standard.string(forKey: \"preferredRingtone\") ?? \"Default\"\n        if call.hasConnected {\n            // 应用来电铃声设置\n            let soundUrl = Bundle.main.url(forResource: preferredRingtone, withExtension: \"mp3\")\n            let ringtone = CXPlayDTMFCallAction(call: call, digits: \"p\", timer: .global(), completion: { _ in })\n            call.requestTransaction(with: [ringtone])\n        } else if call.hasEnded {\n            // 应用静音铃声设置\n            let silence = CXPlayDTMFCallAction(call: call, digits: \"w\", timer: .global(), completion: { _ in })\n            call.requestTransaction(with: [silence])\n        }\n    }\n}",
    "filename": "1785805a81221a2bc3845abdabc93d69_1.swift"
  },
  {
    "conversation_hash": "1785805a81221a2bc3845abdabc93d69",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "// 在实现CXCallObserverDelegate协议中的callObserver(_:callChanged:)方法时，对来电号码进行检查和识别\nfunc callObserver(_ callObserver: CXCallObserver, callChanged call: CXCall) {\n    if let handle = call.handle, call.hasConnected {\n        // 获取来电号码\n        let phoneNumber = handle.value(forKey: \"digits\") as? String ?? handle.value(forKey: \"normalizedDigits\") as? String ?? handle.stringValue\n        \n        // 在NSUserDefaults中检索并匹配来电号码标记\n        let myDefaults = UserDefaults(suiteName: \"com.myapp.callerID\")\n        let callerIDs = myDefaults?.dictionary(forKey: \"callerIDs\") as? [String: String] ?? [:]\n        if let callerID = callerIDs[phoneNumber] {\n            // 发送更新来电标记的本地通知\n            let content = UNMutableNotificationContent()\n            content.title = callerID\n            content.body = \"您有一个来电来自：\" + phoneNumber\n            content.sound = UNNotificationSound.default\n            let request = UNNotificationRequest(identifier: \"CallerIDNotification\", content: content, trigger: nil)\n            UNUserNotificationCenter.current().add(request, withCompletionHandler: nil)\n        }\n    }\n}",
    "filename": "1785805a81221a2bc3845abdabc93d69_3.swift"
  },
  {
    "conversation_hash": "1785805a81221a2bc3845abdabc93d69",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "class MyViewController: UIViewController, UITextFieldDelegate {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        myTextField.delegate = self\n    }\n\n    func textFieldShouldReturn(_ textField: UITextField) -> Bool {\n        textField.resignFirstResponder()\n        return true\n    }\n}",
    "filename": "1785805a81221a2bc3845abdabc93d69_5.swift"
  },
  {
    "conversation_hash": "f8744ccff1c51162fa6376e8cbc8aa7c",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    // ...\n    defaultConfig {\n        // ...\n        multiDexEnabled true\n    }\n    // ...\n}\ndependencies {\n    // ...\n    implementation 'com.android.support:multidex:1.0.3'\n    // ...\n}",
    "filename": "f8744ccff1c51162fa6376e8cbc8aa7c_0.swift"
  },
  {
    "conversation_hash": "d1db43c26cc3ce8813ae91e4e01e479b",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    api(gradleApi())\n    implementation(repo.gradleToolkit())\n    implementation(localProject(\":my-plugin\"))\n    implementation(kotlin(\"stdlib\"))\n}",
    "filename": "d1db43c26cc3ce8813ae91e4e01e479b_1.swift"
  },
  {
    "conversation_hash": "cbabcba2f499c10cea4cf86a30884a9b",
    "code_index": 18,
    "language": "Swift",
    "libraries": [],
    "code": "import { defineConfig } from 'vite';\nimport { createProxyMiddleware } from 'http-proxy-middleware';\n\nexport default defineConfig({\n  server: {\n    proxy: {\n      '/api': {\n        target: 'http://localhost:8000',\n        changeOrigin: true,\n        pathRewrite: {\n          '^/api': ''\n        }\n      }\n    }\n  }\n});",
    "filename": "cbabcba2f499c10cea4cf86a30884a9b_18.swift"
  },
  {
    "conversation_hash": "a5545e1b4c0ed0806f6bc2f23395e281",
    "code_index": 4,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\n// ... (Resto del codice invariato)\n\nstruct ExpandingCardView: View {\n    @GestureState private var dragState = DragState.inactive\n    @State private var expandImage = false\n\n    let card: Card\n    let onClose: () -> Void\n\n    var body: some View {\n        VStack {\n            GeometryReader { geometry in\n                VStack {\n                    // ... (Resto del codice invariato)\n                }\n            }\n        }\n        // ... (Resto del codice invariato)\n        .gesture(\n            DragGesture()\n                .updating($dragState) { value, state, _ in\n                    state = DragState.active(translation: value.translation)\n                }\n                .onEnded { value in\n                    // Qui viene verificato il valore di drag per chiudere la vista.\n                    if value.translation.height > 200 {\n                        UIImpactFeedbackGenerator(style: .medium).impactOccurred() // Vibrazione\n                        onClose()\n                    }\n                }\n        )\n    }\n}\n\n// ... (Resto del codice invariato)",
    "filename": "a5545e1b4c0ed0806f6bc2f23395e281_4.swift"
  },
  {
    "conversation_hash": "a5545e1b4c0ed0806f6bc2f23395e281",
    "code_index": 5,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\n// ... (Resto del codice invariato)\n\nstruct ExpandingCardView: View {\n    @GestureState private var dragState = DragState.inactive\n    @State private var expandImage = false\n    @State private var shouldClose = false\n\n    let card: Card\n    let onClose: () -> Void\n\n    var body: some View {\n        VStack {\n            GeometryReader { geometry in\n                VStack {\n                    // ... (Resto del codice invariato)\n                }\n            }\n        }\n        // ... (Resto del codice invariato)\n        .gesture(\n            DragGesture()\n                .updating($dragState) { value, state, _ in\n                    state = DragState.active(translation: value.translation)\n                    \n                    // Controlla il valore di drag e imposta shouldClose a true se viene superato il limite.\n                    if !shouldClose && value.translation.height > 200 {\n                        shouldClose = true\n                        UIImpactFeedbackGenerator(style: .medium).impactOccurred() // Vibrazione\n                    }\n                }\n                .onEnded { _ in\n                    if shouldClose {\n                        onClose()\n                    }\n                }\n        )\n        // Aggiungi la seguente riga per osservare il cambiamento di shouldClose e chiudere la card quando necessario.\n        .onChange(of: shouldClose) { newValue in\n            if newValue {\n                withAnimation {\n                    onClose()\n                }\n            }\n        }\n    }\n}\n\n// ... (Resto del codice invariato)",
    "filename": "a5545e1b4c0ed0806f6bc2f23395e281_5.swift"
  },
  {
    "conversation_hash": "b8bf6987e3f47c0ca1b948628e288ae4",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "const router = createRouter({\n  routes: [\n    {\n      path: '/user/:id',\n      name: 'User',\n      component: User\n    }\n  ]\n})",
    "filename": "b8bf6987e3f47c0ca1b948628e288ae4_2.swift"
  },
  {
    "conversation_hash": "5bb2a71c18ca9a71834568419bfffbeb",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "{\n    name: \"小明\",\n    age: 20,\n    address: {\n        city: \"北京\",\n        district: \"海淀区\"\n    }\n}",
    "filename": "5bb2a71c18ca9a71834568419bfffbeb_10.swift"
  },
  {
    "conversation_hash": "4ef7d8de42fcb7fdf96a98e6ddfecaed",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "// build.gradle.kts\nplugins {\n    id(\"org.junit.platform.gradle.plugin\") version \"1.6.0\"\n    application\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(kotlin(\"stdlib-jdk8\"))\n    implementation(\"org.junit.jupiter:junit-jupiter:5.5.2\")\n}\n\napplication {\n    mainClassName = \"com.example.SampleKt\"\n}",
    "filename": "4ef7d8de42fcb7fdf96a98e6ddfecaed_6.swift"
  },
  {
    "conversation_hash": "9f1eff50d511cfa5757d241f035daf6f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "{\n    // Step 1: Borrow assets\n    let flashloan_amount := <flashloan_amount>\n    let borrow_data := <data_needed_to_borrow>\n    let lend_platform_address := <lending_platform_address>\n    let success := call(<gas_limit>, lend_platform_address, 0, add(borrow_data, 32), mload(borrow_data), 0, 0)\n\n    if iszero(success) {\n      revert(0, 0)\n    }\n\n    // Step 2: Execute your arbitrage or liquidation opportunity\n    let execute_data := <data_needed_for_execution>\n    let execute_address := <address_of_strategy>\n    let success := call(<gas_limit>, execute_address, 0, add(execute_data, 32), mload(execute_data), 0, 0)\n\n    if iszero(success) {\n      revert(0, 0)\n    }\n\n    // Step 3: Pay back the loan plus fees\n    let payback_amount := add(flashloan_amount, <fee_amount>)\n    let payback_data := <data_needed_to_pay_back>\n    let success := call(<gas_limit>, lend_platform_address, 0, add(payback_data, 32), mload(payback_data), 0, 0)\n\n    if iszero(success) {\n      revert(0, 0)\n    }\n\n    // Step 4: Keep the remaining profit\n}",
    "filename": "9f1eff50d511cfa5757d241f035daf6f_0.swift"
  },
  {
    "conversation_hash": "9240d593f8c79edcb3f168cd31aaf532",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "Admin",
      "Expert",
      "Home",
      "Login",
      "NotFound"
    ],
    "code": "npm install vue-router\n\nimport { createRouter, createWebHistory } from 'vue-router'\nimport Home from './views/Home.vue'\nimport Login from './views/Login.vue'\nimport Admin from './views/Admin.vue'\nimport Expert from './views/Expert.vue'\nimport NotFound from './views/NotFound.vue'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: Home\n  },\n  {\n    path: '/login',\n    name: 'Login',\n    component: Login\n  },\n  {\n    path: '/admin',\n    name: 'Admin',\n    component: Admin,\n    meta: {\n      requiresAuth: true,\n      roles: ['admin']\n    }\n  },\n  {\n    path: '/expert',\n    name: 'Expert',\n    component: Expert,\n    meta: {\n      requiresAuth: true,\n      roles: ['admin', 'expert']\n    }\n  },\n  {\n    path: '/:catchAll(.*)',\n    component: NotFound\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\n\nexport default router",
    "filename": "9240d593f8c79edcb3f168cd31aaf532_0.swift"
  },
  {
    "conversation_hash": "8948c18e8ccd4ed278851f8796e4c686",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "export default {\n  methods: {\n    async submitForm() {\n      const validator = this.$refs.validator\n      const isValid = await validator.validateAll()\n      if (isValid) {\n        // 表单验证通过，执行提交操作\n      }\n    }\n  }\n}",
    "filename": "8948c18e8ccd4ed278851f8796e4c686_2.swift"
  },
  {
    "conversation_hash": "95db88225bf2414d2e434ad79eded727",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "swift\nlet request = MKDirectionsRequest()\nrequest.source = // начальная точка\nrequest.destination = // конечная точка\nrequest.transportType = .walking\n\nlet directions = MKDirections(request: request)\ndirections.calculate { (response, error) in\n    if let route = response?.routes.first {\n        // обработка полученного маршрута\n    }\n}",
    "filename": "95db88225bf2414d2e434ad79eded727_0.swift"
  },
  {
    "conversation_hash": "a357b9398af45794e8a515115d2132d4",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "// export default\nexport default {\n  // ...\n}\n\n// module.exports\nmodule.exports = {\n  // ...\n}",
    "filename": "a357b9398af45794e8a515115d2132d4_1.swift"
  },
  {
    "conversation_hash": "20878f1e71fc7108cc7fd6c8b7659f67",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import { defineComponent } from 'vue'\n\nconst ChildComponent = defineComponent({\n  setup() {\n    return {\n      count: 0\n    }\n  }\n})\n\nconst ParentComponent = defineComponent({\n  extends: ChildComponent,\n  setup() {\n    return {\n      name: 'Parent'\n    }\n  }\n})",
    "filename": "20878f1e71fc7108cc7fd6c8b7659f67_0.swift"
  },
  {
    "conversation_hash": "1042e1fdfef0078dc71669f1f206cb05",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "for var in item1 item2 ... itemN\ndo\n  command1\n  command2\n  ...\n  commandN\ndone",
    "filename": "1042e1fdfef0078dc71669f1f206cb05_8.swift"
  },
  {
    "conversation_hash": "5a8a067e16632c1ed726f9a499bcd98f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Text(\n  'Hello, Flutter!',\n  style: TextStyle(\n    fontSize: 24.0,\n    color: Colors.blue,\n    fontWeight: FontWeight.bold,\n  ),\n)",
    "filename": "5a8a067e16632c1ed726f9a499bcd98f_0.swift"
  },
  {
    "conversation_hash": "a75cc89bf6fe1c6d4e9c66e02bf096b7",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "buildTypes {\n    release {\n        // ...\n    }\n}",
    "filename": "a75cc89bf6fe1c6d4e9c66e02bf096b7_0.swift"
  },
  {
    "conversation_hash": "8a7703c70faa7989669c0ad40a75493e",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "pipeline {\n    agent any\n    parameters {\n        string(name: 'PARAM1', defaultValue: 'value1', description: 'Parameter 1')\n        string(name: 'PARAM2', defaultValue: 'value2', description: 'Parameter 2')\n    }\n    stages {\n        stage('Build') {\n            steps {\n                myFunction(params.PARAM1, params.PARAM2)\n            }\n        }\n    }\n}",
    "filename": "8a7703c70faa7989669c0ad40a75493e_7.swift"
  },
  {
    "conversation_hash": "77cd40ff0ca9876dd6cb15a23b271865",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "func splitPolyline(polyline: MKPolyline) -> [MKPolyline] {\n    var result: [MKPolyline] = []\n    \n    guard polyline.pointCount > 2 else {\n        result.append(polyline)\n        return result\n    }\n    \n    var coordinates = polyline.coordinates\n    \n    for i in 0 ..< polyline.pointCount - 1 {\n        let startCoordinate = coordinates[i]\n        let endCoordinate = coordinates[i + 1]\n        let segment = [startCoordinate, endCoordinate]\n        var intersects = false\n        \n        for j in i + 2 ..< polyline.pointCount - 1 {\n            let otherStartCoordinate = coordinates[j]\n            let otherEndCoordinate = coordinates[j + 1]\n            let otherSegment = [otherStartCoordinate, otherEndCoordinate]\n            if let intersection = MKGeometry.lineSegmentIntersection(segment, otherSegment),\n                intersection != startCoordinate && intersection != endCoordinate {\n                intersects = true\n                let start = CLLocationCoordinate2D(latitude: startCoordinate.latitude, longitude: startCoordinate.longitude)\n                let intersection = CLLocationCoordinate2D(latitude: intersection.latitude, longitude: intersection.longitude)\n                result.append(MKPolyline(coordinates: [start, intersection], count: 2))\n                coordinates.remove(at: j)\n                coordinates.insert(intersection, at: j)\n                break\n            }\n        }\n        \n        if !intersects {\n            result.append(MKPolyline(coordinates: segment, count: 2))\n        }\n    }\n    \n    return result\n}",
    "filename": "77cd40ff0ca9876dd6cb15a23b271865_0.swift"
  },
  {
    "conversation_hash": "77cd40ff0ca9876dd6cb15a23b271865",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "func mergePolylines(polylines: [MKPolyline]) -> [MKPolyline] {\n    var coordinates: [CLLocationCoordinate2D] = []\n    \n    for polyline in polylines {\n        coordinates.append(contentsOf: polyline.coordinates)\n    }\n    \n    while true {\n        var intersects = false\n        \n        for i in 0 ..< coordinates.count - 2 {\n            let startCoordinate = coordinates[i]\n            let endCoordinate = coordinates[i + 1]\n            let segment = [startCoordinate, endCoordinate]\n            \n            for j in i + 2 ..< coordinates.count - 1 {\n                let otherStartCoordinate = coordinates[j]\n                let otherEndCoordinate = coordinates[j + 1]\n                let otherSegment = [otherStartCoordinate, otherEndCoordinate]\n                if let intersection = MKGeometry.lineSegmentIntersection(segment, otherSegment),\n                    intersection != startCoordinate && intersection != endCoordinate {\n                    intersects = true\n                    coordinates.insert(intersection, at: j + 1)\n                    coordinates.removeSubrange(i + 1 ... j)\n                    break\n                }\n            }\n            \n            if intersects {\n                break\n            }\n        }\n        \n        if !intersects {\n            break\n        }\n    }\n    \n    var result: [MKPolyline] = []\n    var currentCoordinates: [CLLocationCoordinate2D] = []\n    \n    for coordinate in coordinates {\n        currentCoordinates.append(coordinate)\n        \n        if currentCoordinates.count == 2 {\n            result.append(MKPolyline(coordinates: currentCoordinates, count: 2))\n            currentCoordinates = []\n        }\n    }\n    \n    return result\n}",
    "filename": "77cd40ff0ca9876dd6cb15a23b271865_1.swift"
  },
  {
    "conversation_hash": "77cd40ff0ca9876dd6cb15a23b271865",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "func splitPolyline(polyline: MKPolyline) -> [MKPolyline] {\n    var result: [MKPolyline] = []\n    \n    guard polyline.pointCount > 2 else {\n        result.append(polyline)\n        return result\n    }\n    \n    let points = polyline.points()\n    var coordinates = [CLLocationCoordinate2D](repeating: CLLocationCoordinate2D(), count: points.count)\n    for i in 0 ..< points.count {\n        coordinates[i] = MKCoordinateForMapPoint(points[i])\n    }\n    \n    for i in 0 ..< polyline.pointCount - 1 {\n        let startCoordinate = coordinates[i]\n        let endCoordinate = coordinates[i + 1]\n        let segment = [startCoordinate, endCoordinate]\n        var intersects = false\n        \n        for j in i + 2 ..< polyline.pointCount - 1 {\n            let otherStartCoordinate = coordinates[j]\n            let otherEndCoordinate = coordinates[j + 1]\n            let otherSegment = [otherStartCoordinate, otherEndCoordinate]\n            if let intersection = MKGeometry.lineSegmentIntersection(segment, otherSegment),\n                intersection != startCoordinate && intersection != endCoordinate {\n                intersects = true\n                result.append(MKPolyline(coordinates: [startCoordinate, intersection], count: 2))\n                coordinates.removeSubrange(i + 1 ... j - 1)\n                coordinates.insert(intersection, at: i + 1)\n                break\n            }\n        }\n        \n        if !intersects {\n            result.append(MKPolyline(coordinates: segment, count: 2))\n        }\n    }\n    \n    return result\n}",
    "filename": "77cd40ff0ca9876dd6cb15a23b271865_2.swift"
  },
  {
    "conversation_hash": "77cd40ff0ca9876dd6cb15a23b271865",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "func mergePolylines(polylines: [MKPolyline]) -> [MKPolyline] {\n    var coordinates: [CLLocationCoordinate2D] = []\n    \n    for polyline in polylines {\n        let points = polyline.points()\n        let polylineCoordinates = [CLLocationCoordinate2D](UnsafeBufferPointer(start: points, count: polyline.pointCount))\n        coordinates.append(contentsOf: polylineCoordinates)\n    }\n    \n    while true {\n        var intersects = false\n        \n        for i in 0 ..< coordinates.count - 2 {\n            let startCoordinate = coordinates[i]\n            let endCoordinate = coordinates[i + 1]\n            let segment = [startCoordinate, endCoordinate]\n            \n            for j in i + 2 ..< coordinates.count - 1 {\n                let otherStartCoordinate = coordinates[j]\n                let otherEndCoordinate = coordinates[j + 1]\n                let otherSegment = [otherStartCoordinate, otherEndCoordinate]\n                if let intersection = MKGeometry.lineSegmentIntersection(segment, otherSegment),\n                    intersection != startCoordinate && intersection != endCoordinate {\n                    intersects = true\n                    coordinates.insert(intersection, at: j + 1)\n                    coordinates.removeSubrange(i + 1 ... j)\n                    break\n                }\n            }\n            \n            if intersects {\n                break\n            }\n        }\n        \n        if !intersects {\n            break\n        }\n    }\n    \n    var result: [MKPolyline] = []\n    var currentCoordinates: [CLLocationCoordinate2D] = []\n    \n    for coordinate in coordinates {\n        currentCoordinates.append(coordinate)\n        \n        if currentCoordinates.count == 2 {\n            result.append(MKPolyline(coordinates: currentCoordinates, count: 2))\n            currentCoordinates = []\n        }\n    }\n    \n    return result\n}",
    "filename": "77cd40ff0ca9876dd6cb15a23b271865_3.swift"
  },
  {
    "conversation_hash": "77cd40ff0ca9876dd6cb15a23b271865",
    "code_index": 5,
    "language": "Swift",
    "libraries": [
      "MapKit"
    ],
    "code": "import MapKit\n\nfunc splitPolyline(_ polyline: MKPolyline) -> [MKPolyline] {\n    var result: [MKPolyline] = []\n    \n    guard polyline.pointCount > 2 else {\n        result.append(polyline)\n        return result\n    }\n    \n    let points = UnsafeMutablePointer<MKMapPoint>.allocate(capacity: polyline.pointCount)\n    polyline.getCoordinates(points, range: NSRange(location: 0, length: polyline.pointCount))\n    \n    var coordinates: [CLLocationCoordinate2D] = []\n    for i in 0 ..< polyline.pointCount {\n        coordinates.append(MKCoordinateForMapPoint(points[i]))\n    }\n    \n    points.deallocate()\n    \n    for i in 0 ..< polyline.pointCount - 1 {\n        let startCoordinate = coordinates[i]\n        let endCoordinate = coordinates[i + 1]\n        let segment = [startCoordinate, endCoordinate]\n        var intersects = false\n        \n        for j in i + 2 ..< polyline.pointCount - 1 {\n            let otherStartCoordinate = coordinates[j]\n            let otherEndCoordinate = coordinates[j + 1]\n            let otherSegment = [otherStartCoordinate, otherEndCoordinate]\n            if let intersection = intersectionBetweenSegments(segment, otherSegment),\n                intersection != startCoordinate && intersection != endCoordinate {\n                intersects = true\n                result.append(MKPolyline(coordinates: [startCoordinate, intersection], count: 2))\n                coordinates.removeSubrange(i + 1 ... j - 1)\n                coordinates.insert(intersection, at: i + 1)\n                break\n            }\n        }\n        \n        if !intersects {\n            result.append(MKPolyline(coordinates: segment, count: 2))\n        }\n    }\n    \n    return result\n}\n\nprivate func intersectionBetweenSegments(_ segment1: [CLLocationCoordinate2D], _ segment2: [CLLocationCoordinate2D]) -> CLLocationCoordinate2D? {\n    let line1StartX = segment1[0].longitude\n    let line1StartY = segment1[0].latitude\n    let line1EndX = segment1[1].longitude\n    let line1EndY = segment1[1].latitude\n    \n    let line2StartX = segment2[0].longitude\n    let line2StartY = segment2[0].latitude\n    let line2EndX = segment2[1].longitude\n    let line2EndY = segment2[1].latitude\n    \n    let denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY)\n    \n    if denominator == 0 {\n        return nil\n    }\n    \n    let ua = ((line2EndX - line2StartX) * (line1StartY - line2StartY) - (line2EndY - line2StartY) * (line1StartX - line2StartX)) / denominator\n    \n    let intersectionX = line1StartX + ua * (line1EndX - line1StartX)\n    let intersectionY = line1StartY + ua * (line1EndY - line1StartY)\n    \n    return CLLocationCoordinate2D(latitude: intersectionY, longitude: intersectionX)\n}",
    "filename": "77cd40ff0ca9876dd6cb15a23b271865_5.swift"
  },
  {
    "conversation_hash": "77cd40ff0ca9876dd6cb15a23b271865",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "func splitPolyline(_ polyline: MKPolyline) -> [MKPolyline] {\n    var result: [MKPolyline] = []\n    \n    guard polyline.pointCount > 2 else {\n        result.append(polyline)\n        return result\n    }\n    \n    let pointsPointer = UnsafeMutablePointer<CLLocationCoordinate2D>.allocate(capacity: polyline.pointCount)\n    polyline.getCoordinates(pointsPointer, range: NSRange(location: 0, length: polyline.pointCount))\n    let coordinates = UnsafeMutableBufferPointer(start: pointsPointer, count: polyline.pointCount)\n    \n    for i in 0 ..< polyline.pointCount - 1 {\n        let startCoordinate = coordinates[i]\n        let endCoordinate = coordinates[i + 1]\n        let segment = [startCoordinate, endCoordinate]\n        var intersects = false\n        \n        for j in i + 2 ..< polyline.pointCount - 1 {\n            let otherStartCoordinate = coordinates[j]\n            let otherEndCoordinate = coordinates[j + 1]\n            let otherSegment = [otherStartCoordinate, otherEndCoordinate]\n            if let intersection = intersectionBetweenSegments(segment, otherSegment),\n                intersection != startCoordinate && intersection != endCoordinate {\n                intersects = true\n                result.append(MKPolyline(coordinates: [startCoordinate, intersection], count: 2))\n                coordinates.removeSubrange(i + 1 ... j - 1)\n                coordinates.insert(intersection, at: i + 1)\n                break\n            }\n        }\n        \n        if !intersects {\n            result.append(MKPolyline(coordinates: segment, count: 2))\n        }\n    }\n    \n    pointsPointer.deallocate()\n    \n    return result\n}\n\nprivate func intersectionBetweenSegments(_ segment1: [CLLocationCoordinate2D], _ segment2: [CLLocationCoordinate2D]) -> CLLocationCoordinate2D? {\n    let line1StartX = segment1[0].longitude\n    let line1StartY = segment1[0].latitude\n    let line1EndX = segment1[1].longitude\n    let line1EndY = segment1[1].latitude\n    \n    let line2StartX = segment2[0].longitude\n    let line2StartY = segment2[0].latitude\n    let line2EndX = segment2[1].longitude\n    let line2EndY = segment2[1].latitude\n    \n    let denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY)\n    \n    if denominator == 0 {\n        return nil\n    }\n    \n    let ua = ((line2EndX - line2StartX) * (line1StartY - line2StartY) - (line2EndY - line2StartY) * (line1StartX - line2StartX)) / denominator\n    \n    let intersectionX = line1StartX + ua * (line1EndX - line1StartX)\n    let intersectionY = line1StartY + ua * (line1EndY - line1StartY)\n    \n    return CLLocationCoordinate2D(latitude: intersectionY, longitude: intersectionX)\n}",
    "filename": "77cd40ff0ca9876dd6cb15a23b271865_6.swift"
  },
  {
    "conversation_hash": "d04aa66a56aa168f2132c3869d60b54b",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "Text(\n  'Hello, world!',\n  style: TextStyle(\n    fontFamily: 'Noto',\n    fontSize: 22,\n    fontWeight: FontWeight.bold,\n  ),\n),",
    "filename": "d04aa66a56aa168f2132c3869d60b54b_3.swift"
  },
  {
    "conversation_hash": "16a9564cace912324207bd6327ef228b",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "override var supportedInterfaceOrientations: UIInterfaceOrientationMask {\n    get {\n        return .portrait\n    }\n}",
    "filename": "16a9564cace912324207bd6327ef228b_0.swift"
  },
  {
    "conversation_hash": "4ea747779653ee2c161207ebaff1037d",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "<template>\n  <div>\n    <v-chart :options=\"chartData\"></v-chart>\n  </div>\n</template>\n\n<script>\nimport { VueECharts } from 'vue-echarts'\n\nexport default {\n  components: {\n    'v-chart': VueECharts\n  },\n  data() {\n    return {\n      chartData: {\n        title: {\n          text: '设备最新数据'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            animation: false\n          }\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          data: []\n        },\n        yAxis: {\n          type: 'value',\n          boundaryGap: [0, '100%']\n        },\n        series: [{\n          name: '最新数据',\n          type: 'line',\n          data: []\n        }]\n      }\n    }\n  }\n}\n</script>",
    "filename": "4ea747779653ee2c161207ebaff1037d_1.swift"
  },
  {
    "conversation_hash": "6ef968042101ca95842ee9831deb3003",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  decoration: BoxDecoration(\n    borderRadius: BorderRadius.circular(10),\n    color: Colors.grey[300],\n  ),\n  child: Row(\n    children: [\n      Icon(Icons.account_box),\n      SizedBox(width: 10),\n      Text('Username'),\n    ],\n  ),\n);",
    "filename": "6ef968042101ca95842ee9831deb3003_9.swift"
  },
  {
    "conversation_hash": "6ef968042101ca95842ee9831deb3003",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  decoration: BoxDecoration(\n    borderRadius: BorderRadius.circular(10),\n    color: Colors.grey[300],\n  ),\n  padding: EdgeInsets.all(10), // add padding to the entire container\n  child: Row(\n    children: [\n      Icon(Icons.account_box),\n      SizedBox(width: 10),\n      Text('Username'),\n    ],\n  ),\n);",
    "filename": "6ef968042101ca95842ee9831deb3003_10.swift"
  },
  {
    "conversation_hash": "6ef968042101ca95842ee9831deb3003",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  decoration: BoxDecoration(\n    borderRadius: BorderRadius.circular(10),\n    color: Colors.grey[300],\n  ),\n  child: Padding(\n    padding: EdgeInsets.all(10), // add padding between the contents and the decoration\n    child: Row(\n      children: [\n        Icon(Icons.account_box),\n        SizedBox(width: 10),\n        Text('Username'),\n      ],\n    ),\n  ),\n);",
    "filename": "6ef968042101ca95842ee9831deb3003_11.swift"
  },
  {
    "conversation_hash": "6ef968042101ca95842ee9831deb3003",
    "code_index": 12,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  height: 200,\n  decoration: BoxDecoration(\n    borderRadius: BorderRadius.circular(10),\n    color: Colors.grey[300],\n  ),\n  child: Row(\n    children: [\n      Icon(Icons.account_box),\n      SizedBox(width: 10),\n      Text('Username'),\n    ],\n  ),\n);",
    "filename": "6ef968042101ca95842ee9831deb3003_12.swift"
  },
  {
    "conversation_hash": "315bc736db828c23acf4f7138c2fb431",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let proxySettings = [\n    kCFNetworkProxiesHTTPEnable: true,\n    kCFNetworkProxiesHTTPPort: 8080,\n    kCFNetworkProxiesHTTPProxy: \"proxy.example.com\",\n    kCFNetworkProxiesHTTPSEnable: true,\n    kCFNetworkProxiesHTTPSPort: 8080,\n    kCFNetworkProxiesHTTPSProxy: \"proxy.example.com\"\n] as [String : Any]\n\nCFNetworkSetSystemProxySettings(proxySettings as CFDictionary)",
    "filename": "315bc736db828c23acf4f7138c2fb431_0.swift"
  },
  {
    "conversation_hash": "95b50c1e490e8f2e26ffded99c1c943a",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "AppBar(\n  elevation: 0,\n  backgroundColor: Colors.white,\n  bottom: PreferredSize(\n    preferredSize: Size.fromHeight(1.0),\n    child: Container(\n      color: Colors.grey,\n      height: 1.0,\n      child: TabBar(\n        indicatorColor: Colors.blue,\n        tabs: [\n          Tab(text: 'Tab 1'),\n          Tab(text: 'Tab 2'),\n        ],\n      ),\n    ),\n  ),\n),",
    "filename": "95b50c1e490e8f2e26ffded99c1c943a_3.swift"
  },
  {
    "conversation_hash": "4902a7ee877c9b7c37d2ceac2e3333e6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Stack(\n  children: [\n    Container(\n      height: 200,\n      color: Colors.blue,\n    ),\n    SizedBox(\n      width: 100,\n    ),\n    Container(\n      height: 200,\n      color: Colors.green,\n    ),\n  ],\n)",
    "filename": "4902a7ee877c9b7c37d2ceac2e3333e6_0.swift"
  },
  {
    "conversation_hash": "45b888673cb7a358908fba4e833f92a4",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    applicationVariants.all { variant ->\n        variant.outputs.all {\n            outputFileName = \"myapp_${variant.versionName}.apk\" // 自定义apk文件名\n            outputDirectory = file(\"custom/build/output/path\") // 自定义输出路径\n        }\n    }\n}",
    "filename": "45b888673cb7a358908fba4e833f92a4_0.swift"
  },
  {
    "conversation_hash": "a9ff38c9ca72692b7ee51afb48985df3",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "interface MyObject {\n  [key: string]: any;\n}\n\nlet obj: MyObject = { name: 'John', age: 25 };",
    "filename": "a9ff38c9ca72692b7ee51afb48985df3_6.swift"
  },
  {
    "conversation_hash": "71af031c16d68c1c7014aaf9f2bba9e1",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let timelineData = [\n  {time: \"2019-02-12\", content: \"内容1\"},\n  {time: \"2019-01-05\", content: \"内容2\"},\n  {time: \"2020-03-08\", content: \"内容3\"},\n  {time: \"2021-11-20\", content: \"内容4\"},\n  {time: \"2020-10-15\", content: \"内容5\"}\n]\n\ntimelineData.sort((a, b) => new Date(a.time) - new Date(b.time))",
    "filename": "71af031c16d68c1c7014aaf9f2bba9e1_0.swift"
  },
  {
    "conversation_hash": "a0d001955c611fc3f028fb442f95d475",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": ".item {\n  position: relative;\n}\n.time {\n  position: absolute;\n  bottom: 100%;\n  /* 时间部分样式 */\n}\n.content {\n  /* 内容部分样式 */\n}",
    "filename": "a0d001955c611fc3f028fb442f95d475_2.swift"
  },
  {
    "conversation_hash": "ccbf3952e790504aca3e85603315a8cf",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "task printVersion {\n    doLast {\n        println \"Current version is \" + android.defaultConfig.versionName\n    }\n}",
    "filename": "ccbf3952e790504aca3e85603315a8cf_0.swift"
  },
  {
    "conversation_hash": "ccbf3952e790504aca3e85603315a8cf",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    defaultConfig {\n        ...\n        ndk {\n            moduleName \"MyLibrary\"\n        }\n    }\n}",
    "filename": "ccbf3952e790504aca3e85603315a8cf_1.swift"
  },
  {
    "conversation_hash": "e74d1c88a68343dc6e3d0c5864ee4eb6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "const card = {\n  name: \"Fireball\",\n  cost: 4,\n  damage: 6,\n  rarity: \"Basic\",\n}",
    "filename": "e74d1c88a68343dc6e3d0c5864ee4eb6_0.swift"
  },
  {
    "conversation_hash": "b0df10351f3aede4a911fe8def038b2b",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "const gameState = {\n  player1: {\n    deck: [], // an array of card objects\n    graveyard: [], // an array of discarded card objects\n    hand: [], // an array of card objects\n    board: [], // an array of card objects placed on the board\n    hero: null, // hero object representing the player's hero\n    maxManaCrystals: 0,\n    currentManaCrystals: 0,\n    fatigueCount: 0,\n    health: 30,\n  },\n  player2: {...} // same object structure as player1\n}",
    "filename": "b0df10351f3aede4a911fe8def038b2b_0.swift"
  },
  {
    "conversation_hash": "0a0575f135e7d0878e4fda710449fa2f",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  alignment: Alignment.centerLeft,\n  child: TabBar(\n    isScrollable: true,\n    tabs: [\n      Tab(text: 'Tab 1'),\n      Tab(text: 'Tab 2'),\n      Tab(text: 'Tab 3'),\n      Tab(text: 'Tab 4'),\n      Tab(text: 'Tab 5'),\n      Tab(text: 'Tab 6'),\n    ],\n  ),\n),",
    "filename": "0a0575f135e7d0878e4fda710449fa2f_1.swift"
  },
  {
    "conversation_hash": "0a0575f135e7d0878e4fda710449fa2f",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "Row(\n  mainAxisAlignment: MainAxisAlignment.start,\n  children: [\n    Expanded(\n      child: TabBar(\n        isScrollable: true,\n        tabs: [\n          Tab(text: 'Tab 1'),\n          Tab(text: 'Tab 2'),\n          Tab(text: 'Tab 3'),\n          Tab(text: 'Tab 4'),\n          Tab(text: 'Tab 5'),\n          Tab(text: 'Tab 6'),\n        ],\n      ),\n    ),\n  ],\n),",
    "filename": "0a0575f135e7d0878e4fda710449fa2f_2.swift"
  },
  {
    "conversation_hash": "0a0575f135e7d0878e4fda710449fa2f",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "Row(\n  mainAxisSize: MainAxisSize.min,\n  children: [\n    Tab(\n      text: 'Tab 1',\n    ),\n    Tab(\n      text: 'Tab 2',\n    ),\n    Tab(\n      text: 'Tab 3',\n    ),\n  ],\n)",
    "filename": "0a0575f135e7d0878e4fda710449fa2f_3.swift"
  },
  {
    "conversation_hash": "0a0575f135e7d0878e4fda710449fa2f",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "Wrap(\n  children: [\n    Tab(\n      text: 'Tab 1',\n    ),\n    Tab(\n      text: 'Tab 2',\n    ),\n    Tab(\n      text: 'Tab 3',\n    ),\n    Tab(\n      text: 'Tab 4',\n    ),\n    Tab(\n      text: 'Tab 5',\n    ),\n    Tab(\n      text: 'Tab 6',\n    ),\n  ],\n),",
    "filename": "0a0575f135e7d0878e4fda710449fa2f_4.swift"
  },
  {
    "conversation_hash": "0a0575f135e7d0878e4fda710449fa2f",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "TextField(\n  decoration: InputDecoration(\n    filled: true,\n    fillColor: Colors.grey[200],\n    hintText: 'Enter text here',\n    border: OutlineInputBorder(),\n  ),\n),",
    "filename": "0a0575f135e7d0878e4fda710449fa2f_9.swift"
  },
  {
    "conversation_hash": "b8f29d79b1815fd6c0fd492ae731053b",
    "code_index": 12,
    "language": "Swift",
    "libraries": [],
    "code": "import { PrismaClient } from '@prisma/client'\n\n     const prisma = new PrismaClient()\n\n     export default prisma",
    "filename": "b8f29d79b1815fd6c0fd492ae731053b_12.swift"
  },
  {
    "conversation_hash": "b8f29d79b1815fd6c0fd492ae731053b",
    "code_index": 17,
    "language": "Swift",
    "libraries": [
      "React"
    ],
    "code": "import React, { createContext, useState } from 'react'\n\n   const StateContext = createContext()\n\n   const StateProvider = ({ children }) => {\n     const [state, setState] = useState(initialState)\n     \n     return (\n       <StateContext.Provider value={[state, setState]}>\n         {children}\n       </StateContext.Provider>\n     )\n   }\n\n   export { StateContext, StateProvider }",
    "filename": "b8f29d79b1815fd6c0fd492ae731053b_17.swift"
  },
  {
    "conversation_hash": "e47bde394c2fbaec347e81116140f45b",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "title: {\n    text: '这里是echarts的整体标题',\n    left: 'center', // 标题居中\n    textStyle: {\n        fontSize: 16,\n        fontWeight: 'bold'\n    }\n},",
    "filename": "e47bde394c2fbaec347e81116140f45b_10.swift"
  },
  {
    "conversation_hash": "50ea3368da6d109f8fa1e46788fd0423",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  decoration: BoxDecoration(\n    image: DecorationImage(\n      image: AssetImage('assets/images/background.png'),\n      fit: BoxFit.cover,\n    ),\n  ),\n  child: // Your child widgets here\n);",
    "filename": "50ea3368da6d109f8fa1e46788fd0423_1.swift"
  },
  {
    "conversation_hash": "50ea3368da6d109f8fa1e46788fd0423",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "Scaffold(\n  appBar: AppBar(\n    title: Text('My App'),\n  ),\n  body: Container(\n    decoration: BoxDecoration(\n      image: DecorationImage(\n        image: AssetImage('assets/images/background.png'),\n        fit: BoxFit.cover,\n      ),\n    ),\n    child: // Your child widgets here\n  ),\n);",
    "filename": "50ea3368da6d109f8fa1e46788fd0423_2.swift"
  },
  {
    "conversation_hash": "50ea3368da6d109f8fa1e46788fd0423",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "Scaffold(\n  appBar: AppBar(\n    title: Text('My App'),\n  ),\n  body: Stack(\n    children: [\n      // Your body widgets here,\n      Positioned(\n        left: 0,\n        right: 0,\n        bottom: 0,\n        child: BottomNavigationBar(\n          // Your BottomNavigationBar properties here,\n        ),\n      ),\n    ],\n  ),\n);",
    "filename": "50ea3368da6d109f8fa1e46788fd0423_5.swift"
  },
  {
    "conversation_hash": "df734a80230c87829de7b7ce3b480a3e",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "new Vue({\n  data: {\n    myArray: [1, 2, 3, 4, 5]\n  }\n})",
    "filename": "df734a80230c87829de7b7ce3b480a3e_3.swift"
  },
  {
    "conversation_hash": "df734a80230c87829de7b7ce3b480a3e",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "new Vue({\n  data: {\n    myArray: []\n  }\n})",
    "filename": "df734a80230c87829de7b7ce3b480a3e_4.swift"
  },
  {
    "conversation_hash": "df734a80230c87829de7b7ce3b480a3e",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "new Vue({\n  data() {\n    return {\n      myArray: []\n    }\n  }\n})",
    "filename": "df734a80230c87829de7b7ce3b480a3e_5.swift"
  },
  {
    "conversation_hash": "88f8f633663515c9237bfcf9ac944335",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  path: '/example',\n  component: Example,\n  meta: {\n    noopener: true\n  }\n}",
    "filename": "88f8f633663515c9237bfcf9ac944335_5.swift"
  },
  {
    "conversation_hash": "5be649d3f2c52b2418e86942a59b173d",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "module: {\n  rules: [\n    //...\n    {\n      test: /\\.scss$/,\n      use: [\n        'style-loader',\n        'css-loader',\n        'sass-loader'\n      ]\n    }\n  ]\n}",
    "filename": "5be649d3f2c52b2418e86942a59b173d_6.swift"
  },
  {
    "conversation_hash": "45615dd3c47191dcb19e59b5468a5238",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    compileSdkVersion 30\n    buildToolsVersion \"30.0.3\"\n    // ...\n\n    defaultConfig {\n        // ...\n    }\n\n    buildTypes {\n        // ...\n    }\n}\n\ndependencies {\n    // ...\n\n    implementation 'androidx.appcompat:appcompat:1.3.0'\n}",
    "filename": "45615dd3c47191dcb19e59b5468a5238_3.swift"
  },
  {
    "conversation_hash": "45615dd3c47191dcb19e59b5468a5238",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "allprojects {\n    repositories {\n        google()\n        jcenter()\n        // ...\n    }\n}",
    "filename": "45615dd3c47191dcb19e59b5468a5238_4.swift"
  },
  {
    "conversation_hash": "28f1fc983e4757a92f61b49db90bb0f0",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "<script>\nexport default {\n  data() {\n    return {\n      orders: []\n    }\n  }\n}\n</script>",
    "filename": "28f1fc983e4757a92f61b49db90bb0f0_2.swift"
  },
  {
    "conversation_hash": "4f03c3324c353825bc2a394f56246a6e",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "struct Person {\n    name: String,\n    age: u32,\n    gender: char,\n}",
    "filename": "4f03c3324c353825bc2a394f56246a6e_0.swift"
  },
  {
    "conversation_hash": "abe242afb96cc33468be6673bdd59734",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Scaffold(\n  bottomNavigationBar: BottomNavigationBar(\n    // bottom navigation bar content\n  ),\n  bottomPadding: 16.0, // add 16.0 pixels of padding at the bottom\n  // other scaffold content\n)",
    "filename": "abe242afb96cc33468be6673bdd59734_0.swift"
  },
  {
    "conversation_hash": "abe242afb96cc33468be6673bdd59734",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "Scaffold(\n  body: // Your main content\n  bottomNavigationBar: BottomNavigationBar(\n    // Your bottom navigation bar content\n  ),\n  bottomSheet: Container(\n    height: double.infinity,\n    width: double.infinity,\n    color: Colors.red, // Example color\n    child: Align(\n      alignment: Alignment.bottomCenter,\n      child: Padding(\n        padding: EdgeInsets.only(bottom: 16.0), // Optional padding for the content\n        child: // Your additional content here\n      ),\n    ),\n  ),\n)",
    "filename": "abe242afb96cc33468be6673bdd59734_2.swift"
  },
  {
    "conversation_hash": "abe242afb96cc33468be6673bdd59734",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "Scaffold(\n  extendBody: true,\n  body: // Your main content here\n  bottomNavigationBar: BottomNavigationBar(\n    // Your bottom navigation bar content here\n  ),\n  bottomNavigationBarColor: Colors.blue, // The background color for the BottomNavigationBar\n  bottomSheet: Container(\n    height: double.infinity,\n    width: double.infinity,\n    color: Colors.red, // The color to fill the space between the BottomNavigationBar and the bottom of the screen\n    child: Padding(\n      padding: const EdgeInsets.all(16.0),\n      child: // Your additional content here\n    ),\n  ),\n);",
    "filename": "abe242afb96cc33468be6673bdd59734_3.swift"
  },
  {
    "conversation_hash": "abe242afb96cc33468be6673bdd59734",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  color: Colors.red, // Example color\n  child: PageView(\n    children: [\n      // Your page content here\n    ],\n  ),\n)",
    "filename": "abe242afb96cc33468be6673bdd59734_4.swift"
  },
  {
    "conversation_hash": "abe242afb96cc33468be6673bdd59734",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "Scaffold(\n     appBar: PreferredSize(\n       preferredSize: Size.fromHeight(kToolbarHeight),\n       child: AppBar(\n         backgroundColor: Colors.blue, // Example color\n         // Your app bar content here\n       ),\n     ),\n     backgroundColor: Colors.red, // Your scaffold background color here\n     // Your scaffold content here\n   )",
    "filename": "abe242afb96cc33468be6673bdd59734_5.swift"
  },
  {
    "conversation_hash": "abe242afb96cc33468be6673bdd59734",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "Scaffold(\n     backgroundColor: Colors.red, // Your scaffold background color here\n     // Your scaffold content here\n   ),\n   theme: ThemeData(\n     scaffoldBackgroundColor: Colors.white, // Example theme color\n     // Your app theme properties here\n   ),",
    "filename": "abe242afb96cc33468be6673bdd59734_6.swift"
  },
  {
    "conversation_hash": "1c7beec3bd2ea0f7d0d28fd3c2b4f1d5",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "db.collection.aggregate([\n  {\n    $lookup: {\n      from: \"orders\",\n      let: { customerId: \"$customerId\", product: \"$product\" },\n      pipeline: [\n        { $match:\n          { $expr:\n            { $and:\n              [\n                { $eq: [\"$customerId\", \"$$customerId\"] }, // match on customer id\n                { $eq: [\"$product\", \"$$product\"] } // match on product\n              ]\n            }\n          }\n        },\n        { $sort: { orderDate: -1 } }, // sort by order date to get the latest order\n        { $limit: 1 }, // only return the latest order\n        { $project: { _id: 0, orderNumber: 1 } } // return the order number field\n      ],\n      as: \"latestOrder\" // store the result in a new field called latestOrder\n    }\n  },\n  { $unwind: \"$latestOrder\" }, // flatten the latestOrder array\n  { $project: { customerId: 1, product: 1, latestOrder: \"$latestOrder.orderNumber\" } } // return only the relevant fields\n])",
    "filename": "1c7beec3bd2ea0f7d0d28fd3c2b4f1d5_0.swift"
  },
  {
    "conversation_hash": "7dc4c98cc22e4ebe3efd785074340d28",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n    switch indexPath.section {\n    case 0:\n        switch indexPath.row {\n        case 0:\n            // Обработка нажатия на первую ячейку в первой секции\n            break\n        case 1:\n            // Обработка нажатия на вторую ячейку в первой секции\n            break\n        default:\n            break\n        }\n    case 1:\n        // Обработка нажатия на ячейки второй секции\n        break\n    default:\n        break\n    }\n}",
    "filename": "7dc4c98cc22e4ebe3efd785074340d28_0.swift"
  },
  {
    "conversation_hash": "7dc4c98cc22e4ebe3efd785074340d28",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "extension ViewController: UITableViewDataSource {\n    \n    func numberOfSections(in tableView: UITableView) -> Int {\n        return myData.count\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 1\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = myData[indexPath.section][\"name\"]\n        cell.imageView?.image = UIImage(named: myData[indexPath.section][\"image\"]!)\n        return cell\n    }\n}",
    "filename": "7dc4c98cc22e4ebe3efd785074340d28_3.swift"
  },
  {
    "conversation_hash": "7dc4c98cc22e4ebe3efd785074340d28",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "extension ViewController: UITableViewDelegate {\n    \n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        tableView.deselectRow(at: indexPath, animated: true)\n        // Обработка нажатия на ячейку\n    }\n    \n    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {\n        return myData[section][\"description\"]\n    }\n}",
    "filename": "7dc4c98cc22e4ebe3efd785074340d28_4.swift"
  },
  {
    "conversation_hash": "1e26feb1e884463410181ac19cd0793c",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nclass GameViewModel: ObservableObject {\n    @Published var board: Board\n    @Published var selection: Position?\n    @Published var moves: [Position] = []\n    \n    private var gameLogic: GameLogic\n    \n    init() {\n        board = Board()\n        gameLogic = GameLogic(board: board) \n    }\n    \n    func boardViewDidTap(_ position: Position) {\n        if let selectedPosition = selection {\n            if gameLogic.isValidMove(from: selectedPosition, to: position) {\n                gameLogic.performMove(from: selectedPosition, to: position)\n                board.update() // Aggiorna la board dopo aver eseguito la mossa\n                selection = nil\n                moves.removeAll()\n            } else {\n                selection = nil\n            }\n        } else {\n            selection = position\n            moves = gameLogic.availableMoves(at: position)\n        }\n    }\n}",
    "filename": "1e26feb1e884463410181ac19cd0793c_1.swift"
  },
  {
    "conversation_hash": "049a747b964eba48419e6b9ff718ea13",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "SwiftUI",
      "WebKit"
    ],
    "code": "import SwiftUI\nimport WebKit\n\nstruct WebView: UIViewRepresentable {\n\n    let url: URL\n\n    func makeUIView(context: Context) -> WKWebView {\n        let webView = WKWebView()\n        return webView\n    }\n\n    func updateUIView(_ webView: WKWebView, context: Context) {\n        let request = URLRequest(url: url)\n        webView.load(request)\n    }\n}\n\nstruct ContentView: View {\n\n    var body: some View {\n        WebView(url: URL(string: \"https://www.aliexpress.com/item/1234567890.html\")!)\n    }\n}",
    "filename": "049a747b964eba48419e6b9ff718ea13_0.swift"
  },
  {
    "conversation_hash": "a1931de25b42de85c0a6e09faf9872eb",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "SwiftSoup"
    ],
    "code": "import SwiftSoup\n\nguard let url = URL(string: \"http://www.aliexpress.com/your-product-url\") else {\n    return\n}\n\ndo {\n    let html = try String(contentsOf: url)\n    let doc = try SwiftSoup.parse(html)\n    let element = try doc.getElementsByClass(\"op-value\").first()\n    let priceString = try element?.text()\n    \n    if let price = Float(priceString ?? \"\") {\n        // Fai qualcosa con il prezzo come inviare una notifica o aggiornare il prezzo di riferimento\n    }\n} catch {\n    // Gestione degli errori\n}",
    "filename": "a1931de25b42de85c0a6e09faf9872eb_0.swift"
  },
  {
    "conversation_hash": "0ddd81c4ac73cf4712cd82fe40aec28b",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "struct Item: Codable, Identifiable {\n    let id: String\n    let title: String\n    let price: Double\n}",
    "filename": "0ddd81c4ac73cf4712cd82fe40aec28b_0.swift"
  },
  {
    "conversation_hash": "0ddd81c4ac73cf4712cd82fe40aec28b",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    @StateObject private var priceTracker = ItemPriceTracker()\n\n    var body: some View {\n        NavigationView {\n            List {\n                ForEach(priceTracker.items) { item in\n                    VStack(alignment: .leading) {\n                        Text(item.title)\n                            .font(.headline)\n                        Text(\"Price: \\(item.price)\")\n                            .font(.subheadline)\n                    }\n                }\n            }\n            .navigationBarTitle(\"Tracked Items\")\n            .onAppear {\n                // Inserisci l'ID dell'oggetto che vuoi tracciare\n                priceTracker.trackItemPrice(itemID: \"YOUR_ITEM_ID\")\n            }\n        }\n    }\n}",
    "filename": "0ddd81c4ac73cf4712cd82fe40aec28b_2.swift"
  },
  {
    "conversation_hash": "127b9064f79b66e221d2c69c334bd4ac",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "AliExpress",
      "SwiftUI",
      "UserNotifications"
    ],
    "code": "import SwiftUI\nimport UserNotifications\n\nstruct ContentView: View {\n    @State private var price: Double = 0.0\n    @State private var lastPrice: Double = 0.0\n    \n    let itemURL = \"https://www.aliexpress.com/item/example-url\"\n    \n    var body: some View {\n        VStack {\n            Text(\"Current Price: \\(price, specifier: \"%.2f\")\")\n            Button(\"Start Tracking\", action: startTracking)\n        }\n    }\n    \n    func startTracking() {\n        fetchPrice()\n        lastPrice = price\n        Timer.scheduledTimer(withTimeInterval: 60.0, repeats: true) { timer in\n            fetchPrice()\n            if price != lastPrice {\n                let priceChange = price > lastPrice ? \"Increased\" : \"Decreased\"\n                sendNotification(priceChange: priceChange)\n                lastPrice = price\n            }\n        }\n    }\n    \n    func fetchPrice() {\n        // Implement the method to scrape or fetch the data from AliExpress using APIs (if available)\n    }\n    \n    func sendNotification(priceChange: String) {\n        let content = UNMutableNotificationContent()\n        content.title = \"Price Update\"\n        content.body = \"The price has \\(priceChange) to \\(price)\"\n        \n        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)\n        \n        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n        \n        UNUserNotificationCenter.current().add(request)\n    }\n}",
    "filename": "127b9064f79b66e221d2c69c334bd4ac_0.swift"
  },
  {
    "conversation_hash": "02cb4e257b66cd452e7dbc4360d5d6fc",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    @State var price: Float?\n    \n    var body: some View {\n        VStack {\n            if let price = price {\n                Text(\"Prezzo: \\(price) €\")\n            } else {\n                Text(\"Caricamento in corso...\")\n            }\n        }\n        .onAppear {\n            getPrice { fetchedPrice in\n                self.price = fetchedPrice\n            }\n        }\n    }\n}",
    "filename": "02cb4e257b66cd452e7dbc4360d5d6fc_3.swift"
  },
  {
    "conversation_hash": "02cb4e257b66cd452e7dbc4360d5d6fc",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    @State var htmlString: String?\n    \n    var body: some View {\n        VStack {\n            if let html = htmlString {\n                Text(html)\n            } else {\n                Text(\"Caricamento in corso...\")\n            }\n            WebView(url: URL(string: \"https://google.com\")!, htmlString: $htmlString)\n        }\n    }\n}",
    "filename": "02cb4e257b66cd452e7dbc4360d5d6fc_5.swift"
  },
  {
    "conversation_hash": "961f8b1c1f159a475f034c28fd28265c",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "// vite.config.js\nexport default {\n  build: {\n    rollupOptions: {\n      output: {\n        fileName: 'app.[hash].js'  // 输出文件名包含 [hash] 占位符\n      }\n    }\n  }\n}",
    "filename": "961f8b1c1f159a475f034c28fd28265c_2.swift"
  },
  {
    "conversation_hash": "961f8b1c1f159a475f034c28fd28265c",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "// vite.config.js\nexport default {\n  build: {\n    rollupOptions: {\n      output: {\n        fileName: 'app.[hash:8].js'  // 输出文件名包含 [hash:8] 占位符\n      }\n    }\n  }\n}",
    "filename": "961f8b1c1f159a475f034c28fd28265c_3.swift"
  },
  {
    "conversation_hash": "06fbae52127546eef5f14ab10f5c0ed3",
    "code_index": 6,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nstruct ChessboardView: View {\n    @ObservedObject var chessboard: Chessboard\n\n    var body: some View {\n        let rows = [0, 1, 2, 3, 4, 5, 6, 7]\n        let cols = [0, 1, 2, 3, 4, 5, 6, 7]\n\n        VStack {\n            ForEach(rows, id: \\.self) { row in\n                HStack {\n                    ForEach(cols, id: \\.self) { col in\n                        SquareView(piece: chessboard.board[row][col])\n                    }\n                }\n            }\n        }\n    }\n}",
    "filename": "06fbae52127546eef5f14ab10f5c0ed3_6.swift"
  },
  {
    "conversation_hash": "06fbae52127546eef5f14ab10f5c0ed3",
    "code_index": 7,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nstruct GameControllerView: View {\n    @ObservedObject var gameLogic: GameLogic\n\n    var body: some View {\n        VStack {\n            // Aggiungi viste per mostrare informazioni sul gioco, pulsante per tornare indietro, \n            // ripetere mosse, terminare il gioco, ecc.\n        }\n    }\n}",
    "filename": "06fbae52127546eef5f14ab10f5c0ed3_7.swift"
  },
  {
    "conversation_hash": "06fbae52127546eef5f14ab10f5c0ed3",
    "code_index": 8,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nstruct ContentView: View {\n    private var gameLogic = GameLogic()\n\n    var body: some View {\n        VStack {\n            GameControllerView(gameLogic: gameLogic)\n            ChessboardView(chessboard: gameLogic.chessboard)\n        }\n    }\n}",
    "filename": "06fbae52127546eef5f14ab10f5c0ed3_8.swift"
  },
  {
    "conversation_hash": "06fbae52127546eef5f14ab10f5c0ed3",
    "code_index": 10,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\n@main\nstruct ChessApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n    }\n}",
    "filename": "06fbae52127546eef5f14ab10f5c0ed3_10.swift"
  },
  {
    "conversation_hash": "0b01b999872d9a23f9c6aa915f7756f3",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    implementation(\"some.library:with:duplicatedClass\") {\n       exclude group: \"org.qtproject.qt.android.multimedia\", module: \"QtAndroidMediaPlayer$1\"\n    }\n}",
    "filename": "0b01b999872d9a23f9c6aa915f7756f3_0.swift"
  },
  {
    "conversation_hash": "0b01b999872d9a23f9c6aa915f7756f3",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    implementation(\"some.library:with:duplicatedClass\") {\n        exclude(group = \"org.qtproject.qt.android.multimedia\", module = \"QtAndroidMediaPlayer$1\")\n    }\n}",
    "filename": "0b01b999872d9a23f9c6aa915f7756f3_1.swift"
  },
  {
    "conversation_hash": "bb42decfb7fcdc0c45cf91918a19832a",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "var isVisible by remember { mutableStateOf(true) }\n\nColumn {\n    Button(onClick = { isVisible = !isVisible }) {\n        Text(text = if (isVisible) \"Hide\" else \"Show\")\n    }\n    AnimatedVisibility(\n        visible = isVisible,\n        enter = slideInVertically(initialOffsetY = { -it }),\n        exit = slideOutVertically(targetOffsetY = { -it })\n    ) {\n        Text(\"Hello World!\")\n    }\n}",
    "filename": "bb42decfb7fcdc0c45cf91918a19832a_0.swift"
  },
  {
    "conversation_hash": "81bdb170c8eeca40db5a39e7dae49b47",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    remove86 = (textValue as text) =>\n        if Text.StartsWith(textValue, \"86\") then Text.Range(textValue, 2, Text.Length(textValue) - 2) else textValue\nin\n    remove86",
    "filename": "81bdb170c8eeca40db5a39e7dae49b47_0.swift"
  },
  {
    "conversation_hash": "0eb1c2b05393916ae21c3366a90f6e2e",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "<template>\n  <div>\n    <button @click=\"chooseImage()\">选择图片</button>\n    <img :src=\"imageData\" v-if=\"imageData\"/>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      imageData: ''\n    }\n  },\n  methods: {\n    chooseImage() {\n      uni.chooseImage({\n        count: 1,\n        sizeType: ['compressed'],\n        sourceType: ['album', 'camera'],\n        success: (res) => {\n          uni.getImageInfo({\n            src: res.tempFilePaths[0],\n            success: (infoRes) => {\n              uni.compressImage({\n                src: res.tempFilePaths[0],\n                quality: 80,\n                success: (compressRes) => {\n                  let base64Data = 'data:image/jpeg;base64,' + uni.arrayBufferToBase64(compressRes.data)\n                  this.imageData = base64Data\n                }\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n}\n</script>",
    "filename": "0eb1c2b05393916ae21c3366a90f6e2e_0.swift"
  },
  {
    "conversation_hash": "e195ffe10590adb7b1c6be3fd3a02579",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "UIKit"
    ],
    "code": "import UIKit\n\nclass CountDownButton: UIButton {\n    \n    private var timer: Timer?\n    private var totalTime: Int = 60 //总时间秒数\n    private var remainingTime: Int = 0 //剩余时间秒数\n    private var isEnabledBeforeCountDown: Bool = true //倒计时前按钮是否可用\n    \n    //设置按钮倒计时的总时间\n    func setTotalTime(time: Int) {\n        totalTime = time\n    }\n    \n    //开始倒计时\n    func startCountDown() {\n        isEnabledBeforeCountDown = isEnabled\n        isEnabled = false //按钮不可用\n        \n        remainingTime = totalTime\n        \n        timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateCountDownButton), userInfo: nil, repeats: true)\n        RunLoop.current.add(timer!, forMode: .common)\n    }\n    \n    //更新倒计时按钮显示文本\n    @objc private func updateCountDownButton() {\n        remainingTime -= 1\n        \n        if remainingTime == 0 {\n            stopCountDown()\n        } else {\n            setTitle(\"\\(remainingTime)s\", for: .normal)\n        }\n    }\n    \n    //结束倒计时\n    func stopCountDown() {\n        timer?.invalidate()\n        timer = nil\n        setTitle(\"获取验证码\", for: .normal)\n        isEnabled = isEnabledBeforeCountDown //按钮恢复原来的可用状态\n    }\n    \n}",
    "filename": "e195ffe10590adb7b1c6be3fd3a02579_0.swift"
  },
  {
    "conversation_hash": "6c121b4636c5f7562a8b6de7d5688c6b",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    Source = <your data source>,\n    #\"Grouped Rows\" = Table.Group(Source, {\"MobilePhone_new\", \"Phone_new\"}, {{\"Count\", each Table.RowCount(_), type number}}),\n    #\"Merged Queries\" = Table.NestedJoin(Source, {\"MobilePhone_new\", \"Phone_new\"}, #\"Grouped Rows\", {\"MobilePhone_new\", \"Phone_new\"}, \"Grouped\", JoinKind.LeftOuter),\n    #\"Added Custom\" = Table.AddColumn(#\"Merged Queries\", \"重复标识\", each if [Count] > 1 then 1 else 0)\nin\n    #\"Added Custom\"",
    "filename": "6c121b4636c5f7562a8b6de7d5688c6b_0.swift"
  },
  {
    "conversation_hash": "f75856731313b38f1569f870c502a3fa",
    "code_index": 12,
    "language": "Swift",
    "libraries": [],
    "code": "xAxis: {\n  type: 'time',\n  min: '2020-01-01',\n  max: '2020-12-31'\n}",
    "filename": "f75856731313b38f1569f870c502a3fa_12.swift"
  },
  {
    "conversation_hash": "d42c2398adc8a8dfba09a94ed56bfee0",
    "code_index": 12,
    "language": "Swift",
    "libraries": [],
    "code": ".theme-switcher {\n  /* Basic styling properties */\n}\n\n.theme-switcher:hover,\n.theme-switcher:focus {\n  transform: scale(1.1);\n}\n\n.theme-switcher.active {\n  animation: rotate 1s linear infinite;\n}\n\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}",
    "filename": "d42c2398adc8a8dfba09a94ed56bfee0_12.swift"
  },
  {
    "conversation_hash": "76eaf4ba3fe8e7042745b5a5efab2047",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "extends MeshInstance\n\n# Modify these properties to adjust the quad size and position\nexport var quad_half_size: Vector2 = Vector2(0.5, 0.5)\nexport var quad_position: Vector3 = Vector3(0, 0, 0)\n\n# Initialization\nfunc _ready():\n\tvar surface_tool: SurfaceTool = SurfaceTool.new()\n\tvar quad_mesh: Mesh = generate_quad(quad_position, quad_half_size)\n\n\tsurface_tool.begin(Mesh.PRIMITIVE_TRIANGLES)\n\tcreate_quad_vertices(surface_tool, quad_mesh)\n\tsurface_tool.generate_normals()\n\tsurface_tool.index()\n\tset_mesh(surface_tool.commit())\n\n# Generates a quad mesh using two triangles\nfunc generate_quad(position: Vector3, half_size: Vector2) -> Mesh:\n\tvar mesh: Mesh = Mesh.new()\n\tvar vertex_array: Array = []\n\n\tvertex_array.append(position + Vector3(half_size.x, half_size.y, 0))\n\tvertex_array.append(position + Vector3(-half_size.x, half_size.y, 0))\n\tvertex_array.append(position + Vector3(-half_size.x, -half_size.y, 0))\n\tvertex_array.append(position + Vector3(half_size.x, -half_size.y, 0))\n\n\tmesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, [\n\t\t\tMesh.ARRAY_VERTEX, vertex_array,\n\t\t\tMesh.ARRAY_INDEX, [0, 1, 2, 0, 2, 3] # Indices for two triangles that form the quad\n\t\t])\n\n\treturn mesh\n\n# Adds a quad to the SurfaceTool\nfunc create_quad_vertices(surface_tool: SurfaceTool, mesh: Mesh) -> void:\n\tfor i in range(mesh.vertex_get_count()):\n\t\tsurface_tool.add_vertex(mesh.vertex_get(i))",
    "filename": "76eaf4ba3fe8e7042745b5a5efab2047_0.swift"
  },
  {
    "conversation_hash": "668999603f1345b98633d00666f08f51",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "var globalEvents = {\n    1: {currency: 'rub', change: -0.005},\n    2: {currency: 'usd', change: 0.005},\n    3: {currency: 'rub', change: 0.01},\n    4: {currency: 'usd', change: 0.005},\n    5: {currency: 'usd', change: 0.01},\n    6: {currency: 'rub', change: -0.005},\n    7: {currency: 'usd', change: 0.01},\n    8: {currency: 'rub', change: 0.005},\n    9: {currency: 'rub', change: 0.01},\n    10: {currency: 'usd', change: 0.01},\n    11: {currency: 'rub', change: 0.005},\n    12: {currency: 'usd', change: -0.01},\n    13: {currency: 'rub', change: 0.005},\n    14: {currency: 'usd', change: 0.005},\n    15: {currency: 'usd', change: 0.01},\n};",
    "filename": "668999603f1345b98633d00666f08f51_2.swift"
  },
  {
    "conversation_hash": "668999603f1345b98633d00666f08f51",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "var usaEvents = {\n    1: {text: 'Президент США объявил о санкциях в отношении Китая.', currency: 'rub', change: -0.005},\n    2: {text: 'Федеральная резервная система повысила процентную ставку.', currency: 'usd', change: 0.01},\n    3: {text: 'Банк США объявил о новой программе кредитования.', currency: 'rub', change: 0.005},\n    4: {text: 'Производство автомобилей в США увеличилось.', currency: 'usd', change: 0.005},\n    5: {text: 'Завод по производству электроники открылся в США.', currency: 'rub', change: -0.005},\n    6: {text: 'Правительство США сократило финансирование военных проектов.', currency: 'usd', change: -0.005},\n    7: {text: 'Американская компания объявила о планах на приобретение европейской компании.', currency: 'rub', change: 0.005},\n    8: {text: 'США введут новую тарифную политику в отношении ЕС.', currency: 'usd', change: 0.01},\n    9: {text: 'Крупная нефтяная компания заявила о планах на расширение производства.', currency: 'rub', change: -0.01},\n    10: {text: 'Решение суда США об уменьшении размера штрафа для компании.', currency: 'usd', change: 0.005},\n    11: {text: 'Крупный продуктовый супермаркет объявил о планах на снижение цен.', currency: 'rub', change: 0.005},\n    12: {text: 'Трейдер сообщил об увеличении продаж товаров в США.', currency: 'usd', change: 0.005},\n    13: {text: 'Компания Айтишников объявила о массовом привлечении специалистов в США.', currency: 'rub', change: -0.005},\n    14: {text: 'США объявляет о проведении масштабных военных учений.', currency: 'usd', change: -0.01},\n    15: {text: 'Руководство одной из крупных технологических компаний США получило новый состав.', currency: 'rub', change: 0.005}\n};",
    "filename": "668999603f1345b98633d00666f08f51_3.swift"
  },
  {
    "conversation_hash": "88b2055699f46e38e391b22e4db0dca2",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Column(\n  children: [\n    // First child takes up as much space as needed\n    Text(\n      'This is the first child',\n      style: TextStyle(fontSize: 20),\n    ),\n    // Second child takes up the remaining space\n    Expanded(\n      child: Container(\n        color: Colors.blue,\n        child: Center(\n          child: Text(\n            'This is the second child',\n            style: TextStyle(fontSize: 20, color: Colors.white),\n          ),\n        ),\n      ),\n    ),\n  ],\n);",
    "filename": "88b2055699f46e38e391b22e4db0dca2_0.swift"
  },
  {
    "conversation_hash": "042f4e78be743280074cd82be7b9b26f",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "import { useAuthStore } from '../store/authStore'\n   \n   export default {\n     setup() {\n       const authStore = useAuthStore()\n   \n       const user = authStore.user\n   \n       return {\n         user,\n       }\n     },\n   }",
    "filename": "042f4e78be743280074cd82be7b9b26f_5.swift"
  },
  {
    "conversation_hash": "e71bde6e44ede02f5e596282d31ea767",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "cleanup() {\n  # 清理工作\n}\n\ntrap cleanup EXIT",
    "filename": "e71bde6e44ede02f5e596282d31ea767_3.swift"
  },
  {
    "conversation_hash": "baf9f22054aa955f9085ece352b555e3",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "ClipRect(\n  child: Container(\n    width: 200,\n    height: 200,\n    color: Colors.red,\n  ),\n),",
    "filename": "baf9f22054aa955f9085ece352b555e3_3.swift"
  },
  {
    "conversation_hash": "baf9f22054aa955f9085ece352b555e3",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "OverflowBox(\n  maxWidth: double.infinity,\n  maxHeight: double.infinity,\n  child: Container(\n    width: 200,\n    height: 200,\n    color: Colors.red,\n  ),\n),",
    "filename": "baf9f22054aa955f9085ece352b555e3_4.swift"
  },
  {
    "conversation_hash": "d550f7bcfaf8ae0a7c7d48630d03f8cb",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Wrap(\n  children: [\n    Container(\n      width: 100,\n      height: 100,\n      color: Colors.red,\n    ),\n    Container(\n      width: 100,\n      height: 100,\n      color: Colors.green,\n    ),\n    Container(\n      width: 100,\n      height: 100,\n      color: Colors.blue,\n    ),\n    Container(\n      width: 100,\n      height: 100,\n      color: Colors.orange,\n    ),\n    Container(\n      width: 100,\n      height: 100,\n      color: Colors.purple,\n    ),\n  ],\n),",
    "filename": "d550f7bcfaf8ae0a7c7d48630d03f8cb_0.swift"
  },
  {
    "conversation_hash": "2aab860583ea406cb69c7796af1d9ba6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "TextFormField(\n  decoration: InputDecoration(\n    labelText: 'Username',\n    prefixIcon: Icon(Icons.person),\n    suffix: Text('@gmail.com'),\n  ),\n),",
    "filename": "2aab860583ea406cb69c7796af1d9ba6_0.swift"
  },
  {
    "conversation_hash": "20e44fe2bf40353f5df1c06f07aa4790",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "#content {\n  width: 200px;\n  height: 300px;\n  overflow: auto;  /* 显示滚动条 */\n}",
    "filename": "20e44fe2bf40353f5df1c06f07aa4790_4.swift"
  },
  {
    "conversation_hash": "b8d052008f8a127d10d06df2f3430321",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "xAxis: {\n   type: 'datetime',\n   min: Date.UTC(2019, 3, 1),\n   max: Date.UTC(2019, 3, 30),\n   tickInterval: 24 * 3600 * 1000,\n},",
    "filename": "b8d052008f8a127d10d06df2f3430321_2.swift"
  },
  {
    "conversation_hash": "b5a0e04c161644bab5f7fa2941fb9e23",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "cont_act: {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      emil: {\n        type: 'string'\n      }\n    }\n  }\n}",
    "filename": "b5a0e04c161644bab5f7fa2941fb9e23_1.swift"
  },
  {
    "conversation_hash": "481c79dacca02029fa2f90ecda107de1",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    // ...\n    composeOptions {\n        targetPackage 'my.package'\n        // ...\n    }\n    // ...\n}",
    "filename": "481c79dacca02029fa2f90ecda107de1_1.swift"
  },
  {
    "conversation_hash": "9467642d40e3385683e62a723ce4fd88",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": ".label {\n    // styles for labels\n}\n\n.button {\n    // styles for buttons\n}",
    "filename": "9467642d40e3385683e62a723ce4fd88_11.swift"
  },
  {
    "conversation_hash": "b625a830d136f8d178e4e84020c59063",
    "code_index": 9,
    "language": "Swift",
    "libraries": [
      "androidx.room.Entity",
      "androidx.room.PrimaryKey"
    ],
    "code": "import androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"user\")\ndata class User(\n    @PrimaryKey var id: Int,\n    var username: String,\n    var password: String,\n    var name: String,\n    var lastname: String,\n    var age: Int,\n    var sex: Int,\n    var sport: String,\n    var bio: String\n)",
    "filename": "b625a830d136f8d178e4e84020c59063_9.swift"
  },
  {
    "conversation_hash": "b625a830d136f8d178e4e84020c59063",
    "code_index": 10,
    "language": "Swift",
    "libraries": [
      "androidx.room.Entity",
      "androidx.room.PrimaryKey"
    ],
    "code": "import androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"reservation\")\ndata class Reservation(\n    @PrimaryKey var id: Int,\n    var date: String,\n    var time: String,\n    var username: String,\n    var court: String,\n    var sport: String,\n    var equipment_required: Boolean\n)",
    "filename": "b625a830d136f8d178e4e84020c59063_10.swift"
  },
  {
    "conversation_hash": "05015b3b31164542e6f70ecd08694ff6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Theme(\n  data: ThemeData(\n    textTheme: TextTheme(\n      subhead: TextStyle(fontSize: 20),\n    ),\n  ),\n  child: TextFormField(\n    // Your TextFormField properties\n  ),\n);",
    "filename": "05015b3b31164542e6f70ecd08694ff6_0.swift"
  },
  {
    "conversation_hash": "0f736757b6b1776d2c6e1d6eb9041d0f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "MapKit",
      "SwiftUI"
    ],
    "code": "import SwiftUI\nimport MapKit\n\nstruct MapView: View {\n    struct MyAnnotation: Identifiable {\n        let id = UUID()\n        var coordinate: CLLocationCoordinate2D\n\n        init(coordinate: CLLocationCoordinate2D) {\n            self.coordinate = coordinate\n        }\n    }\n\n    enum MapType: String, CaseIterable {\n        case standard = \"Standard\"\n        case satellite = \"Satellite\"\n        case hybrid = \"Hybrid\"\n    }\n\n    @State private var region = MKCoordinateRegion(\n        center: CLLocationCoordinate2D(latitude: 51.95, longitude: 85.97),\n        span: MKCoordinateSpan(latitudeDelta: 0.1, longitudeDelta: 0.1)\n    )\n\n    @State private var mapType = MapType.standard\n\n    var body: some View {\n        ZStack(alignment: .trailing) {\n            MyMap(coordinateRegion: $region, mapType: $mapType, annotationItems: [MyAnnotation]()) { annotation in\n                MapMarker(coordinate: (annotation as? MyAnnotation)?.coordinate ?? CLLocationCoordinate2D())\n            }\n\n            VStack {\n                Spacer()\n                Picker(selection: $mapType, label: Text(\"\")) {\n                    ForEach(MapType.allCases, id: \\.rawValue) { type in\n                        Text(type.rawValue)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.bottom, 10)\n\n                // Zoom in and out buttons remain the same\n                // ...\n\n                Spacer()\n            }\n            .padding(.trailing, 20)\n        }\n    }\n}\n\nstruct MyMap<Items, Content>: UIViewRepresentable where Items : RandomAccessCollection, Content : View, Items.Element : Identifiable {\n    @Binding var coordinateRegion: MKCoordinateRegion\n    @Binding var mapType: MapView.MapType\n    var annotationItems: Items\n    var annotationContent: (Items.Element) -> Content\n\n    func makeUIView(context: Context) -> MKMapView {\n        let mapView = MKMapView()\n        mapView.delegate = context.coordinator\n        return mapView\n    }\n\n    func updateUIView(_ mapView: MKMapView, context: Context) {\n        mapView.setRegion(coordinateRegion, animated: true)\n        mapView.mapType = mapType.toMKMapType()\n\n        mapView.removeAnnotations(mapView.annotations)\n        annotationItems.map { item -> MKPointAnnotation in\n            let annotation = MKPointAnnotation()\n            annotation.coordinate = item.coordinate\n            annotation.title = \"\\(item.id)\"\n            return annotation\n        }.forEach(mapView.addAnnotation)\n    }\n\n    func makeCoordinator() -> Coordinator {\n        Coordinator(self)\n    }\n\n    class Coordinator: NSObject, MKMapViewDelegate {\n        var parent: MyMap\n\n        init(_ parent: MyMap) {\n            self.parent = parent\n        }\n\n        // Implement any other delegate methods you need.\n    }\n}\n\nextension MapView.MapType {\n    func toMKMapType() -> MKMapType {\n        switch self {\n        case .standard:\n            return .standard\n        case .satellite:\n            return .satellite\n        case .hybrid:\n            return .hybrid\n        }\n    }\n}\n\nstruct MapView_Previews: PreviewProvider {\n    static var previews: some View {\n        MapView()\n    }\n}",
    "filename": "0f736757b6b1776d2c6e1d6eb9041d0f_0.swift"
  },
  {
    "conversation_hash": "0f736757b6b1776d2c6e1d6eb9041d0f",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "MapKit",
      "SwiftUI"
    ],
    "code": "import SwiftUI\nimport MapKit\n\nstruct MapNewView: View {\n    @State private var showsUserLocation = false\n    \n    @State private var mapType: MKMapType = .standard\n    @State private var region = MKCoordinateRegion(\n        center: CLLocationCoordinate2D(latitude: 51.95, longitude: 85.97),\n        span: MKCoordinateSpan(latitudeDelta: 0.1, longitudeDelta: 0.1)\n    )\n    \n    var body: some View {\n        // ...\n    }\n}\n\nstruct MapAddView: UIViewRepresentable {\n    @Binding var mapType: MKMapType\n    @Binding var region: MKCoordinateRegion\n    @Binding var showsUserLocation: Bool\n    \n    func makeCoordinator() -> Coordinator {\n        Coordinator(self)\n    }\n    \n    func makeUIView(context: Context) -> MKMapView {\n        // ...\n    }\n\n    func updateUIView(_ uiView: MKMapView, context: Context) {\n        // ...\n    }\n    \n    class Coordinator: NSObject, MKMapViewDelegate {\n        var parent: MapAddView\n        \n        init(_ parent: MapAddView) {\n            self.parent = parent\n        }\n        \n        func mapView(_ mapView: MKMapView, didUpdate userLocation: MKUserLocation) {\n            if parent.showsUserLocation {\n                let region = MKCoordinateRegion(center: userLocation.coordinate, latitudinalMeters: 1000, longitudinalMeters: 1000)\n                mapView.setRegion(region, animated: true)\n                \n                let annotation = MKPointAnnotation()\n                annotation.coordinate = userLocation.coordinate\n                annotation.title = \"You are here\"\n                mapView.addAnnotation(annotation)\n            }\n        }\n        \n        func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {\n            if annotation.isKind(of: MKUserLocation.self) {\n                let annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: \"UserLocation\")\n                if annotationView == nil {\n                    let av = MKAnnotationView(annotation: annotation, reuseIdentifier: \"UserLocation\")\n                    av.image = UIImage(named: \"user-location\")\n                    return av\n                }\n                return annotationView\n            }\n            return nil\n        }\n    }\n}\n\nstruct MapNewView_Previews: PreviewProvider {\n    static var previews: some View {\n        MapNewView()\n    }\n}",
    "filename": "0f736757b6b1776d2c6e1d6eb9041d0f_1.swift"
  },
  {
    "conversation_hash": "cc09f3caea4f0001c78c7816a8fcb365",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "ThemeData(\n  brightness: Brightness.light,\n  primaryColor: Colors.blue,\n  accentColor: Colors.orange,\n  ...\n)",
    "filename": "cc09f3caea4f0001c78c7816a8fcb365_0.swift"
  },
  {
    "conversation_hash": "83d6906222a49dda1ae8bf515b7f11e9",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "// Hello.jsx\n\nexport default {\n  props: {\n    text: {\n      type: String,\n      required: true\n    }\n  },\n  render() {\n    return <div>{this.text}</div>\n  }\n}",
    "filename": "83d6906222a49dda1ae8bf515b7f11e9_0.swift"
  },
  {
    "conversation_hash": "83d6906222a49dda1ae8bf515b7f11e9",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "Hello"
    ],
    "code": "// App.js\n\nimport Hello from './Hello.jsx'\n\nexport default {\n  render() {\n    return <Hello text=\"Hello World!\" />\n  }\n}",
    "filename": "83d6906222a49dda1ae8bf515b7f11e9_1.swift"
  },
  {
    "conversation_hash": "c6394ba64220088d7849ce65518230b8",
    "code_index": 6,
    "language": "Swift",
    "libraries": [
      "MyComponent"
    ],
    "code": "import MyComponent from '@/components/MyComponent'\n\nexport default {\n  components: {\n    MyComponent\n  },\n  data() {\n    return {\n      myData: null\n    }\n  },\n  mounted() {\n    this.getData()\n  },\n  methods: {\n    async getData() {\n      try {\n        // 获取自定义组件的axios数据\n        const data = await this.$refs.myComponent.getData()\n        this.myData = data\n      } catch (error) {\n        // 处理错误\n      }\n    }\n  }\n}",
    "filename": "c6394ba64220088d7849ce65518230b8_6.swift"
  },
  {
    "conversation_hash": "cbae2697d5a3199717d27365613b416d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "ThemeData(\n  textTheme: TextTheme(\n    bodyText2: TextStyle(\n      fontSize: 16.0, // your desired font size\n    ),\n  ),\n);",
    "filename": "cbae2697d5a3199717d27365613b416d_0.swift"
  },
  {
    "conversation_hash": "cbae2697d5a3199717d27365613b416d",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "ThemeData(\n  textTheme: TextTheme(\n    bodyText2: TextStyle(\n      fontSize: 16.0, // your desired font size\n    ),\n  ),\n);",
    "filename": "cbae2697d5a3199717d27365613b416d_1.swift"
  },
  {
    "conversation_hash": "ca6170517177c75b1bbe3698bade267b",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "About",
      "Home"
    ],
    "code": "// 导入模块\nimport { createRouter, createWebHistory } from 'vue-router'\nimport Home from '@/views/Home.vue'\nimport About from '@/views/About.vue'\n\n// 创建路由实例\nconst router = createRouter({\n  history: createWebHistory(),\n\n  // 添加路由规则\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: Home\n    },\n    {\n      path: '/about',\n      name: 'about',\n      component: About\n    }\n  ]\n})\n\n// 导出路由实例\nexport default router",
    "filename": "ca6170517177c75b1bbe3698bade267b_0.swift"
  },
  {
    "conversation_hash": "0ee615a1f1349d81cc746026ae5592c7",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "buildFeatures {\n    compose true\n}\n\nkotlinOptions {\n    jvmTarget = \"1.8\"\n    useIR = true\n}",
    "filename": "0ee615a1f1349d81cc746026ae5592c7_1.swift"
  },
  {
    "conversation_hash": "0ee615a1f1349d81cc746026ae5592c7",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    // ...\n    implementation 'androidx.appcompat:appcompat:<version>'\n    // ...\n}",
    "filename": "0ee615a1f1349d81cc746026ae5592c7_6.swift"
  },
  {
    "conversation_hash": "8818bff77344846273d2253eecd0a36f",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "NYT(4)\n           /   \\\n          /     \\\n      C(3)  B(1)\n              /   \\\n             /     \\\n          D(1)   A(2)\n                   \\\n                    \\\n                  NYT(2)",
    "filename": "8818bff77344846273d2253eecd0a36f_5.swift"
  },
  {
    "conversation_hash": "a97f9234b9eb6dbf367850fef60f864d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "static AppBar buildAppBar(BuildContext context, {List<Widget>? actions}) {\n  return AppBar(\n    automaticallyImplyLeading: false,\n    toolbarHeight: theme.headerHeight,\n    title: const HospitalLogo(),\n    actions: _buildActions(actions),\n    flexibleSpace: SafeArea(child: Container()),\n  );\n}",
    "filename": "a97f9234b9eb6dbf367850fef60f864d_0.swift"
  },
  {
    "conversation_hash": "2c90f1fe4ad24314e235df99688ec6ff",
    "code_index": 13,
    "language": "Swift",
    "libraries": [],
    "code": "repositories {\n    maven {\n        url 'https://dl.bintray.com/golang/go'\n    }\n}\n\ndependencies {\n    implementation(name: 'Test', ext: 'aar') // Test 表示编译生成的 Java 类库文件名称\n}",
    "filename": "2c90f1fe4ad24314e235df99688ec6ff_13.swift"
  },
  {
    "conversation_hash": "dbc0bce792c9562af73560f432f70810",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "struct Person {\n  1: required string name,\n  2: optional i32 age,\n}\n\nservice MyService {\n  void ping(),\n  Person getPerson(1: string name),\n}",
    "filename": "dbc0bce792c9562af73560f432f70810_1.swift"
  },
  {
    "conversation_hash": "161e86276c89fb0f97538ebb1c78effb",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "tooltip: {\n    dateTimeLabelFormats: {\n        millisecond: '%H:%M:%S.%L',\n        second: '%H:%M:%S',\n        minute: '%H:%M',\n        hour: '%H:%M',\n        day: '%Y-%m-%d',\n        week: 'Week from %A, %b %e, %Y',\n        month: '%Y-%m',\n        year: '%Y'\n    }\n}",
    "filename": "161e86276c89fb0f97538ebb1c78effb_1.swift"
  },
  {
    "conversation_hash": "161e86276c89fb0f97538ebb1c78effb",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "xAxis: {\n    dateTimeLabelFormats: {\n        millisecond: '%H:%M:%S.%L',\n        second: '%H:%M:%S',\n        minute: '%H:%M',\n        hour: '%H:%M',\n        day: '%m-%d',\n        week: '%m-%d',\n        month: '%Y-%m',\n        year: '%Y'\n    }\n}",
    "filename": "161e86276c89fb0f97538ebb1c78effb_2.swift"
  },
  {
    "conversation_hash": "161e86276c89fb0f97538ebb1c78effb",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "timeAxis: {\n    tooltipDateTimeLabelFormats: {\n        millisecond: '%H:%M:%S.%L',\n        second: '%H:%M:%S',\n        minute: '%H:%M',\n        hour: '%H:%M:%S',\n        day: '%Y-%m-%d',\n        week: 'Week from %A, %b %e, %Y',\n        month: '%Y-%m',\n        year: '%Y'\n    },\n    dateTimeLabelFormats: {\n        millisecond: '%H:%M:%S.%L',\n        second: '%H:%M:%S',\n        minute: '%H:%M',\n        hour: '%H:%M:%S',\n        day: '%Y-%m-%d',\n        week: '%Y-%m-%d',\n        month: '%Y-%m',\n        year: '%Y'\n    }\n}",
    "filename": "161e86276c89fb0f97538ebb1c78effb_3.swift"
  },
  {
    "conversation_hash": "161e86276c89fb0f97538ebb1c78effb",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "timeAxis: {\n    currentTimeIndicator: {\n        enabled: true,\n        label: {\n            format: '%H:%M:%S'\n        }\n    }\n}",
    "filename": "161e86276c89fb0f97538ebb1c78effb_4.swift"
  },
  {
    "conversation_hash": "161e86276c89fb0f97538ebb1c78effb",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "timeAxis: {\n    currentDateIndicator: {\n        enabled: true,\n        dateFormat: '%Y/%m/%d %H:%M:%S'\n    }\n}",
    "filename": "161e86276c89fb0f97538ebb1c78effb_5.swift"
  },
  {
    "conversation_hash": "161e86276c89fb0f97538ebb1c78effb",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "xAxis: {\n    // 其他代码省略\n    labels: {\n        format: '{value:%Y-%m-%d}',\n        style: {\n            fontSize: '12px',\n            fontWeight: 'normal'\n        }\n    }\n},",
    "filename": "161e86276c89fb0f97538ebb1c78effb_7.swift"
  },
  {
    "conversation_hash": "349c1ce1d5a132b6a6fd269ee5daf1ed",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "//@version=5\nindicator(\"Live Price Data\")\n\n// Get current price data for the current symbol\nvar price = close\n\n// Output the data\nplot(price, title=\"Price\", color=color.blue, linewidth=1)",
    "filename": "349c1ce1d5a132b6a6fd269ee5daf1ed_0.swift"
  },
  {
    "conversation_hash": "1af5860fd81722d4b1ea2f2e1fe19e08",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "var myMap map[interface{}]int\nmyMap = make(map[interface{}]int)\n\nmyMap[\"apple\"] = 1\nmyMap[2] = 2",
    "filename": "1af5860fd81722d4b1ea2f2e1fe19e08_4.swift"
  },
  {
    "conversation_hash": "af4acb57cca31fc9f820ffe1df8a71f3",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "IconTheme(\n  data: IconThemeData(color: Theme.of(context).iconTheme.color),\n  child: const Icon(\n    Icons.map,\n  ),\n)",
    "filename": "af4acb57cca31fc9f820ffe1df8a71f3_1.swift"
  },
  {
    "conversation_hash": "67793701caa4558ebcf5aac5a3a76b0f",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "items(categories) { category ->\n    CategoryItem(category) {\n        onCategorySelected(category)\n    }\n}",
    "filename": "67793701caa4558ebcf5aac5a3a76b0f_3.swift"
  },
  {
    "conversation_hash": "6c446686ea8c05a2062ad67a38576e58",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "class CartFragment : Fragment(), ONCartitemListener {\n    private lateinit var cartAdapter: CartAdapter\n    \n    ...\n}",
    "filename": "6c446686ea8c05a2062ad67a38576e58_0.swift"
  },
  {
    "conversation_hash": "791bf97f08d2c21d7d233a219d13b8c8",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "AVFoundation"
    ],
    "code": "import AVFoundation\n\nlet utterance = AVSpeechUtterance(string: \"Hello, how are you?\")\nlet synthesizer = AVSpeechSynthesizer()\n\nsynthesizer.speak(utterance)",
    "filename": "791bf97f08d2c21d7d233a219d13b8c8_0.swift"
  },
  {
    "conversation_hash": "4e21ece0ce539b7ef82f0c674af170c5",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "AVFoundation",
      "UIKit"
    ],
    "code": "import UIKit\nimport AVFoundation\n\nclass ViewController: UIViewController {\n\n    let speechSynthesizer = AVSpeechSynthesizer()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let sentence = \"This is the sentence that will be read aloud.\"\n        speak(text: sentence)\n    }\n    \n    func speak(text: String) {\n        let speechUtterance = AVSpeechUtterance(string: text)\n        speechUtterance.voice = AVSpeechSynthesisVoice(language: \"en-US\")\n        speechUtterance.rate = 0.5\n        \n        speechSynthesizer.speak(speechUtterance)\n    }\n}",
    "filename": "4e21ece0ce539b7ef82f0c674af170c5_0.swift"
  },
  {
    "conversation_hash": "1f79145dd9349af182df843bd755e5a5",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "generator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id         Int      @id @default(autoincrement())\n  email      String   @unique\n  bookings   Booking[]\n}\n\nmodel Booking {\n  id          Int      @id @default(autoincrement())\n  user        User     @relation(fields: [userId], references: [id])\n  userId      Int\n  event       String\n  pending     Boolean  @default(true)\n  paymentId   String?\n}\n\nmodel Payment {\n  id          String   @id   @default(uuid())\n  bookingId   Int\n  amount      Float\n  createdAt   DateTime @default(now())\n}",
    "filename": "1f79145dd9349af182df843bd755e5a5_8.swift"
  },
  {
    "conversation_hash": "7f4bf6ff975a7928deb3cc9540efca61",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "actions: {\n  setData({ commit }, data) {\n    commit('SET_DATA', data)\n  }\n}",
    "filename": "7f4bf6ff975a7928deb3cc9540efca61_6.swift"
  },
  {
    "conversation_hash": "c10c13e2dc5a2c0ec2d243c40bb99293",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "// ...\ncontent = { padding ->\n    NavHost(navController, startDestination = \"musicCategories\") {\n        // ...\n    }\n}\n//...",
    "filename": "c10c13e2dc5a2c0ec2d243c40bb99293_4.swift"
  },
  {
    "conversation_hash": "7b11a7d4b7d11bfde01d990ddf51e3c2",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "InputFormText(\n  enabled: false,\n  decoration: InputDecoration(\n    filled: true,\n    fillColor: Colors.grey[200], // set background color\n    labelText: 'Disabled input',\n  ),\n)",
    "filename": "7b11a7d4b7d11bfde01d990ddf51e3c2_0.swift"
  },
  {
    "conversation_hash": "a5ed8a2d45afd0dda5802ffdf2793361",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "TabBar(\n  indicator: BoxDecoration(\n    color: Colors.red, // set your desired background color here\n    borderRadius: BorderRadius.circular(50), // to give rounded corners\n  ),\n  tabs: [\n    // your tabs\n  ],\n),",
    "filename": "a5ed8a2d45afd0dda5802ffdf2793361_0.swift"
  },
  {
    "conversation_hash": "4773d8af883d21e8ca80cf75f02bfd1b",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "TabBar(\n  indicator: BoxDecoration(\n    // pass an empty BoxDecoration here\n  ),\n  tabs: [\n    Tab(\n      text: \"Tab 1\",\n    ),\n    Tab(\n      text: \"Tab 2\",\n    ),\n  ],\n),",
    "filename": "4773d8af883d21e8ca80cf75f02bfd1b_0.swift"
  },
  {
    "conversation_hash": "4773d8af883d21e8ca80cf75f02bfd1b",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "TabBar(\n  indicator: BoxDecoration(\n    borderRadius: BorderRadius.circular(50),\n    color: Colors.red, // define color for the active indicator\n    // use BoxDecoration for the inactive indicator decoration\n    border: Border.all(\n      color: Colors.grey,\n      width: 3,\n    ),\n  ),\n  tabs: [\n    Tab(\n      text: \"Tab 1\",\n    ),\n    Tab(\n      text: \"Tab 2\",\n    ),\n  ],\n),",
    "filename": "4773d8af883d21e8ca80cf75f02bfd1b_2.swift"
  },
  {
    "conversation_hash": "55785e19f12aa19ddb4f8103c0a71739",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Theme(\n  data: ThemeData(\n    tabBarTheme: TabBarTheme(\n      indicatorColor: Colors.transparent, // set indicator color to transparent\n    ),\n  ),\n  child: TabBar(\n    tabs: [\n      Tab(icon: Icon(Icons.home)),\n      Tab(icon: Icon(Icons.search)),\n      Tab(icon: Icon(Icons.person)),\n    ],\n  ),\n)",
    "filename": "55785e19f12aa19ddb4f8103c0a71739_0.swift"
  },
  {
    "conversation_hash": "55785e19f12aa19ddb4f8103c0a71739",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "TabBar(\n  indicator: BoxDecoration(\n    color: Colors.transparent, // set indicator color to transparent\n  ),\n  tabs: [\n    Tab(icon: Icon(Icons.home)),\n    Tab(icon: Icon(Icons.search)),\n    Tab(icon: Icon(Icons.person)),\n  ],\n)",
    "filename": "55785e19f12aa19ddb4f8103c0a71739_1.swift"
  },
  {
    "conversation_hash": "6cb2490eb70d2e1c9d0c8994c0776bba",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "import { CheckoutResolver } from './checkout/checkout.resolver';\n\n@Module({\n  imports: [\n    // ...\n  ],\n  providers: [CheckoutResolver, StripeService],\n})\nexport class AppModule {}",
    "filename": "6cb2490eb70d2e1c9d0c8994c0776bba_8.swift"
  },
  {
    "conversation_hash": "3dbbf563b6c1e3c8a76e9396c000d268",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "scalar DateTime\n    \ntype Checkout {\n    id: ID!\n    createdAt: DateTime!\n    total: Float!\n    currency: String!\n    sessionId: String!\n    customerEmail: String\n    lineItems: [LineItem!]!\n}\n\ntype LineItem {\n    id: ID!\n    product: Product!\n    quantity: Int!\n}\n\ntype Product {\n    id: ID!\n    price: Float!\n    title: String!\n    description: String\n}\n\ninput CreateCheckoutInput {\n    items: [CreateCheckoutItemInput!]!\n    customerEmail: String\n    successUrl: String!\n    cancelUrl: String!\n}\n\ninput CreateCheckoutItemInput {\n    productId: ID!\n    quantity: Int!\n}\n\ntype Mutation {\n    createCheckoutSession(input: CreateCheckoutInput!): Checkout\n}",
    "filename": "3dbbf563b6c1e3c8a76e9396c000d268_0.swift"
  },
  {
    "conversation_hash": "b035d01c9bcaf6fa547e55a57aa87986",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "MetalKit"
    ],
    "code": "import MetalKit\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n     \n        let metalView = MTKView(frame: view.bounds, device: MTLCreateSystemDefaultDevice())\n        metalView.preferredFramesPerSecond = 60 // 灵活设置客户端每秒希望呈现的帧数\n        view.addSubview(metalView)\n    }\n}",
    "filename": "b035d01c9bcaf6fa547e55a57aa87986_0.swift"
  },
  {
    "conversation_hash": "b035d01c9bcaf6fa547e55a57aa87986",
    "code_index": 2,
    "language": "Swift",
    "libraries": [
      "MetalKit",
      "UIKit"
    ],
    "code": "import UIKit\nimport MetalKit\n\nclass ViewController: UIViewController {\n    private var device: MTLDevice!\n    private var commandQueue: MTLCommandQueue!\n    private var displayLink: CADisplayLink!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupMetalConfiguration()\n        setupDisplayLink()\n    }\n\n    private func setupMetalConfiguration() {\n        device = MTLCreateSystemDefaultDevice()\n        commandQueue = device.makeCommandQueue()\n        // 设置其他Metal相关配置（如创建MTKView、管道状态等）\n    }\n\n    private func setupDisplayLink() {\n        displayLink = CADisplayLink(target: self, selector: #selector(self.renderLoop))\n        displayLink.add(to: .current, forMode: .common)\n    }\n\n    @objc private func renderLoop() {\n        autoreleasepool {\n            // 在这里执行与每帧相关的更新（如动画）\n\n            // 发送绘制命令到GPU\n            guard let commandBuffer = commandQueue.makeCommandBuffer() else { return }\n            // 在此处设置其他绘制命令相关的资源\n            commandBuffer.commit()\n            commandBuffer.waitUntilCompleted()\n        }\n    }\n}",
    "filename": "b035d01c9bcaf6fa547e55a57aa87986_2.swift"
  },
  {
    "conversation_hash": "b035d01c9bcaf6fa547e55a57aa87986",
    "code_index": 3,
    "language": "Swift",
    "libraries": [
      "MetalKit",
      "UIKit"
    ],
    "code": "import UIKit\nimport MetalKit\n\nclass ViewController: UIViewController {\n    private var device: MTLDevice!\n    private var commandQueue: MTLCommandQueue!\n    private var displayLink: CADisplayLink!\n\n    private var previousTimestamp: CFTimeInterval = 0\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupMetalConfiguration()\n        setupDisplayLink()\n    }\n\n    private func setupMetalConfiguration() {\n        device = MTLCreateSystemDefaultDevice()\n        commandQueue = device.makeCommandQueue()\n        // 设置其他Metal相关配置（如创建MTKView、管道状态等）\n    }\n\n    private func setupDisplayLink() {\n        displayLink = CADisplayLink(target: self, selector: #selector(self.renderLoop))\n        displayLink.add(to: .current, forMode: .common)\n    }\n\n    @objc private func renderLoop() {\n        autoreleasepool {\n            let currentTime = displayLink.timestamp\n            let deltaTime = currentTime - previousTimestamp\n            previousTimestamp = currentTime\n\n            // 使用deltaTime更新动画\n            updateAnimation(deltaTime)\n\n            // 使用displayLink.targetTimestamp计算距离下一帧的剩余时间\n            let timeUntilNextFrame = displayLink.targetTimestamp - currentTime\n\n            // 根据timeUntilNextFrame调整动画进度\n\n            // 发送绘制命令到GPU\n            guard let commandBuffer = commandQueue.makeCommandBuffer() else { return }\n            // 在此处设置其他绘制命令相关的资源\n            commandBuffer.commit()\n            commandBuffer.waitUntilCompleted()\n        }\n    }\n\n    private func updateAnimation(_ deltaTime: CFTimeInterval) {\n        // 在此处根据deltaTime更新动画\n    }\n}",
    "filename": "b035d01c9bcaf6fa547e55a57aa87986_3.swift"
  },
  {
    "conversation_hash": "b035d01c9bcaf6fa547e55a57aa87986",
    "code_index": 4,
    "language": "Swift",
    "libraries": [
      "MetalKit",
      "UIKit"
    ],
    "code": "import UIKit\nimport MetalKit\n\nclass ViewController: UIViewController {\n    private var device: MTLDevice!\n    private var commandQueue: MTLCommandQueue!\n    private var displayLink: CADisplayLink!\n\n    private var previousTimestamp: CFTimeInterval = 0\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupMetalConfiguration()\n        setupDisplayLink()\n    }\n\n    private func setupMetalConfiguration() {\n        device = MTLCreateSystemDefaultDevice()\n        commandQueue = device.makeCommandQueue()\n        // 设置其他Metal相关配置（如创建MTKView、管道状态等）\n    }\n\n    private func setupDisplayLink() {\n        displayLink = CADisplayLink(target: self, selector: #selector(self.renderLoop))\n        displayLink.preferredFramesPerSecond = 30 // 控制游戏帧率为每秒30帧\n        displayLink.add(to: .current, forMode: .common)\n    }\n\n    @objc private func renderLoop() {\n        autoreleasepool {\n            let currentTime = displayLink.timestamp\n            let deltaTime = currentTime - previousTimestamp\n            previousTimestamp = currentTime\n\n            // 使用deltaTime更新动画\n            updateAnimation(deltaTime)\n            \n            // 发送绘制命令到GPU\n            guard let commandBuffer = commandQueue.makeCommandBuffer() else { return }\n            // 在此处设置其他绘制命令相关的资源\n            commandBuffer.commit()\n            commandBuffer.waitUntilCompleted()\n        }\n    }\n\n    private func updateAnimation(_ deltaTime: CFTimeInterval) {\n        // 在此处根据deltaTime更新游戏逻辑和动画\n    }\n}",
    "filename": "b035d01c9bcaf6fa547e55a57aa87986_4.swift"
  },
  {
    "conversation_hash": "b035d01c9bcaf6fa547e55a57aa87986",
    "code_index": 5,
    "language": "Swift",
    "libraries": [
      "MetalKit",
      "UIKit"
    ],
    "code": "import UIKit\nimport MetalKit\n\nclass ViewController: UIViewController {\n    private var device: MTLDevice!\n    private var commandQueue: MTLCommandQueue!\n    private var displayLink: CADisplayLink!\n\n    private var previousTimestamp: CFTimeInterval = 0\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupMetalConfiguration()\n        setupDisplayLink()\n    }\n\n    private func setupMetalConfiguration() {\n        device = MTLCreateSystemDefaultDevice()\n        commandQueue = device.makeCommandQueue()\n        // 设置其他Metal相关配置（如创建MTKView、管道状态等）\n    }\n\n    private func setupDisplayLink() {\n        displayLink = CADisplayLink(target: self, selector: #selector(self.renderLoop))\n        displayLink.preferredFrameRateRange = CAFrameRateRange(minimum: 30, maximum: 30) // 控制游戏帧率为每秒30帧\n        displayLink.add(to: .current, forMode: .common)\n    }\n\n    @objc private func renderLoop() {\n        autoreleasepool {\n            let currentTime = displayLink.timestamp\n            let deltaTime = currentTime - previousTimestamp\n            previousTimestamp = currentTime\n\n            // 使用deltaTime更新动画\n            updateAnimation(deltaTime)\n            \n            // 发送绘制命令到GPU\n            guard let commandBuffer = commandQueue.makeCommandBuffer() else { return }\n            // 在此处设置其他绘制命令相关的资源\n            commandBuffer.commit()\n            commandBuffer.waitUntilCompleted()\n        }\n    }\n\n    private func updateAnimation(_ deltaTime: CFTimeInterval) {\n        // 在此处根据deltaTime更新游戏逻辑和动画\n    }\n}",
    "filename": "b035d01c9bcaf6fa547e55a57aa87986_5.swift"
  },
  {
    "conversation_hash": "700b832f04ac319c53afabe026d3e875",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "let metalLayer = CAMetalLayer()\nmetalLayer.device = myMetalDevice\nmetalLayer.framebufferOnly = true\nmetalLayer.wantsExtendedDynamicRangeContent = true\n\n// 禁用垂直同步\nmetalLayer.displaySyncEnabled = false",
    "filename": "700b832f04ac319c53afabe026d3e875_2.swift"
  },
  {
    "conversation_hash": "ffe7234212a2445c11298754f8e8f955",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, OnInit } from '@angular/core';\nimport { DataService } from './data.service';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n  styleUrls: ['./my-component.component.css']\n})\nexport class MyComponentComponent implements OnInit {\n\n  data: any;\n\n  constructor(private dataService: DataService) { }\n\n  async ngOnInit() {\n    this.data = await this.dataService.getData();\n  }\n\n}",
    "filename": "ffe7234212a2445c11298754f8e8f955_1.swift"
  },
  {
    "conversation_hash": "7c183d48e34e65a3bf1e1b3f8c343fbf",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "class MyService {\n    private lazy var productProcessor: ProductProcessor = {\n        return ProductProcessor()\n    }()\n\n    func handleData(data: Any) {\n        productProcessor.process(data: data)\n    }\n}",
    "filename": "7c183d48e34e65a3bf1e1b3f8c343fbf_0.swift"
  },
  {
    "conversation_hash": "6a49c3cfb5c7541611b760c669cad114",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  height: MediaQuery.of(context).size.height * 0.8, // increase height to 80% of screen height\n  child: Column(\n    children: [\n      // add the widget and overlay here\n    ],\n  ),\n)",
    "filename": "6a49c3cfb5c7541611b760c669cad114_0.swift"
  },
  {
    "conversation_hash": "5e4012a455ab2ede676e2f0f1f6a3698",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "Column {\n    Text(sharedViewModel.text.value)\n    Button(onClick = { sharedViewModel.onReset() }) {\n        Text(\"Reset\")\n    }\n}",
    "filename": "5e4012a455ab2ede676e2f0f1f6a3698_4.swift"
  },
  {
    "conversation_hash": "ef5c52bbf581c61fec42fa694c2a9bd0",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "import { Popper } from '@material-ui/core';\n\n<Popper\n  placement=\"bottom\"\n  open={open}\n  anchorEl={anchorEl}\n  transitionDuration={500} // установка времени задержки в 500 мс\n  popperOptions={{\n    modifiers: {\n      preventOverflow: {\n        enabled: true,\n        boundariesElement: 'window',\n      },\n    },\n  }}\n>\n  {/* Ваше содержимое Popper компонента */}\n</Popper>",
    "filename": "ef5c52bbf581c61fec42fa694c2a9bd0_7.swift"
  },
  {
    "conversation_hash": "e7566bc2e2da7b39a5c0413de3237a8d",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "externalNativeBuild {\n    cmake {\n        path \"CMakeLists.txt\"\n    }\n}\n\nndkVersion '21.3.6528147'",
    "filename": "e7566bc2e2da7b39a5c0413de3237a8d_2.swift"
  },
  {
    "conversation_hash": "621860818f82f5d06a95967282e74045",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "days: {\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  justifyContent: 'space-between',\n},\nday: {\n  flexBasis: '14%',\n  height: 20,\n  alignItems: 'center',\n  justifyContent: 'center',\n},",
    "filename": "621860818f82f5d06a95967282e74045_0.swift"
  },
  {
    "conversation_hash": "ca6f3686af13bd9ed45a57b0f5176f21",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "buildTypes {\n    release {\n        minifyEnabled true\n        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n    }\n}",
    "filename": "ca6f3686af13bd9ed45a57b0f5176f21_0.swift"
  },
  {
    "conversation_hash": "ca6f3686af13bd9ed45a57b0f5176f21",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "buildTypes {\n    debug {\n        minifyEnabled false\n    }\n}",
    "filename": "ca6f3686af13bd9ed45a57b0f5176f21_2.swift"
  },
  {
    "conversation_hash": "c6621bc04f77f058dd441512159d572b",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "body: Column(\n  children: [\n    Container(\n      height: PageSizeExpert.pageHeight(context) *\n          theme.pageMinHeightModifier,\n      child: Center(\n        child: ResponsiveScaledBox(\n          width: width,\n          child: child,\n        ),\n      ),\n    ),\n    Expanded(\n      child: const Footer(),\n    ),\n  ],\n),",
    "filename": "c6621bc04f77f058dd441512159d572b_3.swift"
  },
  {
    "conversation_hash": "2ec88a70ef543ef6710a33b5bd88c69a",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "Expanded(\n  child: Row(\n    children: [\n      // add widgets here\n    ]\n  ),\n)",
    "filename": "2ec88a70ef543ef6710a33b5bd88c69a_3.swift"
  },
  {
    "conversation_hash": "2ec88a70ef543ef6710a33b5bd88c69a",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "Row(\n  children: [\n    Expanded(\n      flex: 1,\n      child: Container(\n        color: Colors.red,\n        height: 50,\n      ),\n    ),\n    Expanded(\n      flex: 1,\n      child: Container(\n        color: Colors.blue,\n        height: 50,\n      ),\n    ),\n  ],\n)",
    "filename": "2ec88a70ef543ef6710a33b5bd88c69a_4.swift"
  },
  {
    "conversation_hash": "95e12acdf93758eda322f519bd0d9074",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "export const locale = {\n    en: {\n        key: '{{key}} is {{err}}',\n        enum: '{{key}} must be a valid enum value',\n        exists: 'The value of {{key}} must exist',\n        equals: '{{key}} must be equal to {{comparison}}',\n        isArray: '{{key}} must be an array',\n        isIn: '{{key}} must be one of the following values: {{values}}',\n        isNotEmpty: '{{key}} must not be empty',\n        isString: '{{key}} must be a string',\n        isBoolean: '{{key}} must be a boolean',\n        isNumber: '{{key}} must be a number',\n        isInt: '{{key}} must be an integer number',\n        isDate: '{{key}} must be a date',\n        isEmail: '{{key}} must be an email',\n        isUrl: '{{key}} must be a URL',\n        isAlpha: '{{key}} must contain only letters (a-zA-Z)',\n        isAlphanumeric: '{{key}} must contain only letters and numbers',\n        isLength: '{{key}} must be {{len}} characters long',\n        isPositive: '{{key}} must be a positive number',\n        isNegative: '{{key}} must be a negative number'\n    },\n    fr: {\n        key: '{{key}} est {{err}}',\n        enum: '{{key}} doit être une valeur d\\'enum valide',\n        exists: 'La valeur de {{key}} doit exister',\n        equals: '{{key}} doit être égal à {{comparison}}',\n        isArray: '{{key}} doit être un tableau',\n        isIn: '{{key}} doit être une des valeurs suivantes: {{values}}',\n        isNotEmpty: '{{key}} ne doit pas être vide',\n        isString: '{{key}} doit être une chaîne de caractères',\n        isBoolean: '{{key}} doit être un booléen',\n        isNumber: '{{key}} doit être un nombre',\n        isInt: '{{key}} doit être un nombre entier',\n        isDate: '{{key}} doit être une date',\n        isEmail: '{{key}} doit être un email',\n        isUrl: '{{key}} doit être une URL',\n        isAlpha: '{{key}} doit contenir uniquement des lettres (a-zA-Z)',\n        isAlphanumeric: '{{key}} doit contenir uniquement des lettres et des chiffres',\n        isLength: '{{key}} doit contenir {{len}} caractères',\n        isPositive: '{{key}} doit être un nombre positif',\n        isNegative: '{{key}} doit être un nombre négatif'\n    }\n}",
    "filename": "95e12acdf93758eda322f519bd0d9074_2.swift"
  },
  {
    "conversation_hash": "95e12acdf93758eda322f519bd0d9074",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "import { Controller, Post, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { Language } from 'class-validator-multi-lang';\nimport { CreateUserDto } from './create-user.dto';\n\n@Controller()\n@UsePipes(new ValidationPipe())\nexport class UserController {\n  @Post()\n  async create(@Body() data: CreateUserDto, @Language() lang?: string) {\n    // ...\n  }\n\n  @Post('/fr')\n  @Language('fr')\n  async createWithFrenchValidation(@Body() data: CreateUserDto) {\n    // ...\n  }\n}",
    "filename": "95e12acdf93758eda322f519bd0d9074_10.swift"
  },
  {
    "conversation_hash": "95e12acdf93758eda322f519bd0d9074",
    "code_index": 14,
    "language": "Swift",
    "libraries": [],
    "code": "import { Controller, Post, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { Lang } from 'class-validator-multi-lang';\nimport { CreateUserDto } from './create-user.dto';\n\n@Controller()\n@UsePipes(new ValidationPipe())\nexport class UserController {\n  @Post()\n  async create(@Body() data: CreateUserDto, @Lang() lang?: string) {\n    // ...\n  }\n\n  @Post('/fr')\n  @Lang('fr')\n  async createWithFrenchValidation(@Body() data: CreateUserDto) {\n    // ...\n  }\n}",
    "filename": "95e12acdf93758eda322f519bd0d9074_14.swift"
  },
  {
    "conversation_hash": "89597db87954fdc4dc321705c5c44187",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Offstage(\n  offstage: true,\n  child: Container(\n    width: 100,\n    height: 100,\n    child: YourWidget(),\n  ),\n)",
    "filename": "89597db87954fdc4dc321705c5c44187_0.swift"
  },
  {
    "conversation_hash": "047e7264608357413b6e5eb2b074d5a3",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "FittedBox(\n  fit: BoxFit.contain,\n  child: Text(\n    \"This is a very long word that could overflow the layout\",\n    maxLines: 1,\n    overflow: TextOverflow.ellipsis,\n  ),\n)",
    "filename": "047e7264608357413b6e5eb2b074d5a3_1.swift"
  },
  {
    "conversation_hash": "c09aee82574545c9805f01ac1afbb5c6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "export interface Product {\n  id: number;\n  name: string;\n  images: string[];\n}",
    "filename": "c09aee82574545c9805f01ac1afbb5c6_0.swift"
  },
  {
    "conversation_hash": "d236751480b1dcb1d46b795571c66c60",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Row(\n  mainAxisSize: MainAxisSize.max,\n  children: [\n    Container(\n      height: 60,\n      width: Get.width,\n      child: Expanded(\n        child: Stack(\n          children: [\n            ...\n          ],\n        ),\n      ),\n    ),\n  ],\n),",
    "filename": "d236751480b1dcb1d46b795571c66c60_0.swift"
  },
  {
    "conversation_hash": "d236751480b1dcb1d46b795571c66c60",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  height: 60,\n  width: Get.width,\n  child: Stack(\n    children: [\n      ...\n    ],\n  ),\n),",
    "filename": "d236751480b1dcb1d46b795571c66c60_1.swift"
  },
  {
    "conversation_hash": "59618f2692246b70e4877d5ffe4bdf46",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column('json')\n  data: any;\n}",
    "filename": "59618f2692246b70e4877d5ffe4bdf46_0.swift"
  },
  {
    "conversation_hash": "4dd0471eb07049d6ba7e6814a1cbe2f2",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "export default {\n  data() {\n    return {\n      canvasHeight: 200 // initial height\n    }\n  },\n  computed: {\n    canvasStyle() {\n      return `${this.canvasHeight}px`;\n    }\n  },\n  methods: {\n    touchstart(event) {\n      // your code here\n    },\n    touchmove(event) {\n      // your code here\n    }\n  }\n}",
    "filename": "4dd0471eb07049d6ba7e6814a1cbe2f2_4.swift"
  },
  {
    "conversation_hash": "9b838c7e34bb43107d1b542bab1a895f",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[noDecimal]'\n})\nexport class NoDecimalDirective {\n\n  constructor(private el: ElementRef) { }\n\n  @HostListener('keydown', ['$event']) onKeyDown(event: KeyboardEvent) {\n    const forbiddenKeys = ['.', 'e', '-', '+'];\n    if (forbiddenKeys.indexOf(event.key) !== -1) {\n      event.preventDefault();\n    }\n  }\n}",
    "filename": "9b838c7e34bb43107d1b542bab1a895f_3.swift"
  },
  {
    "conversation_hash": "64c92d5a1ffca0485548d6d6996e2d3d",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "import { Directive, HostListener } from '@angular/core';\n\n@Directive({\n  selector: 'input[type=\"number\"][noDecimal]'\n})\nexport class NoDecimalDirective {\n  @HostListener('keydown', ['$event'])\n  onKeyPress(event: KeyboardEvent) {\n    if (event.key === '.') {\n      event.preventDefault();\n    }\n  }\n}",
    "filename": "64c92d5a1ffca0485548d6d6996e2d3d_3.swift"
  },
  {
    "conversation_hash": "57ba0c6f324acc38bb0d86a1e5205796",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class UserWord {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  userId: number;\n\n  @Column()\n  wordId: number;\n\n  @Column()\n  progress: string;\n\n  // additional fields for tracking progress can be added here\n}",
    "filename": "57ba0c6f324acc38bb0d86a1e5205796_0.swift"
  },
  {
    "conversation_hash": "40fceac7b7dacdf90b397aac06665d46",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": ".parent {\n  position: relative;\n  height: 300px; /* 容器的高度 */\n}\n.child {\n  position: absolute;\n  top: 50%; /* 设置子元素顶部距离为父元素高度的50% */\n  transform: translateY(-50%); /* 将子元素上移50%的高度，即使它垂直居中 */\n  margin: 0 auto; /* 使子元素水平居中 */\n}",
    "filename": "40fceac7b7dacdf90b397aac06665d46_1.swift"
  },
  {
    "conversation_hash": "be6664113d3c130c0c77f38ad68f7549",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "var amount by rememberSaveable { mutableStateOf(\"0\") }\n\nCurrencyTextField(\n    value = amount,\n    onValueChange = { amount = it }\n)",
    "filename": "be6664113d3c130c0c77f38ad68f7549_1.swift"
  },
  {
    "conversation_hash": "be6664113d3c130c0c77f38ad68f7549",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "var amount by rememberSaveable { mutableStateOf(\"\") }\n\nCurrencyTextField(\n    value = amount,\n    onValueChange = { amount = it }\n)",
    "filename": "be6664113d3c130c0c77f38ad68f7549_3.swift"
  },
  {
    "conversation_hash": "ac35840d57760a3df83e4f57f01003e7",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "func sum(a: Int, b: Int) -> Int {\n    return a + b\n}\n\nvar operation: (Int, Int) -> Int = sum",
    "filename": "ac35840d57760a3df83e4f57f01003e7_6.swift"
  },
  {
    "conversation_hash": "310cb0fe1222635ccb6a866506c6ed00",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  type: 'ADD_TO_CART',\n  payload: {\n    product: {\n      id: 1,\n      name: 'Product Name',\n      price: 10.99,\n    },\n    quantity: 1\n  }\n}",
    "filename": "310cb0fe1222635ccb6a866506c6ed00_0.swift"
  },
  {
    "conversation_hash": "310cb0fe1222635ccb6a866506c6ed00",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  type: 'REMOVE_FROM_CART',\n  payload: {\n    productId: 1\n  }\n}",
    "filename": "310cb0fe1222635ccb6a866506c6ed00_2.swift"
  },
  {
    "conversation_hash": "310cb0fe1222635ccb6a866506c6ed00",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  type: 'UPDATE_CART',\n  payload: {\n    productId: 1,\n    quantity: 2\n  }\n}",
    "filename": "310cb0fe1222635ccb6a866506c6ed00_4.swift"
  },
  {
    "conversation_hash": "eb726c5d4b8efde4cc6f5b4523e45b76",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "LazyVGrid(columns: gridLayout, spacing: 15) {\n    //...\n}\n.scaleEffect(x: 1, y: -1, anchor: .center)\n.animation(nil)",
    "filename": "eb726c5d4b8efde4cc6f5b4523e45b76_0.swift"
  },
  {
    "conversation_hash": "eb726c5d4b8efde4cc6f5b4523e45b76",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "ScrollView {\n    LazyVGrid(columns: gridLayout, spacing: 15) {\n        ForEach(items, id: \\.self) { item in\n            ZStack {\n                ItemView(item: item)\n            }\n            .scaleEffect(x: 1, y: -1, anchor: .center)\n        }\n    }\n}",
    "filename": "eb726c5d4b8efde4cc6f5b4523e45b76_1.swift"
  },
  {
    "conversation_hash": "eb726c5d4b8efde4cc6f5b4523e45b76",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "ScrollView {\n    VStack {\n        Spacer(minLength: 100) // 可以根据需要调整这个数值\n        \n        LazyVGrid(columns: gridLayout, spacing: 15) {\n            ForEach(items, id: \\.self) { item in\n                ItemView(item: item)\n                    .scaleEffect(x: 1, y: -1, anchor: .center)\n            }\n        }\n        .scaleEffect(x: 1, y: -1, anchor: .center)\n        \n        Spacer(minLength: 100) // 可以根据需要调整这个数值\n    }\n}",
    "filename": "eb726c5d4b8efde4cc6f5b4523e45b76_2.swift"
  },
  {
    "conversation_hash": "880f9a4d2b1aa788cce2862094aadb88",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "[\n  { name: \"Apple\", code: [ \"A001\", \"C001\" ] },\n  { name: \"Apple\", code: [ \"A001\", \"E001\" ] },\n  { name: \"Apple\", code: [ \"C001\", \"E001\" ] },\n  { name: \"Grape\", code: [ \"G001\", \"H001\" ] },\n  { name: \"Grape\", code: [ \"G001\", \"I001\" ] },\n  { name: \"Grape\", code: [ \"H001\", \"I001\" ] }\n]",
    "filename": "880f9a4d2b1aa788cce2862094aadb88_2.swift"
  },
  {
    "conversation_hash": "1c5a8e60f7eb19da54baa513cf47a7ba",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "where: {\n  ...filter,\n  approved: true,\n  disabled: false,\n  endDate: {\n    gte: subDays(new Date(), -5),\n    lte: new Date(),\n  },\n  isDraft: false,\n},",
    "filename": "1c5a8e60f7eb19da54baa513cf47a7ba_0.swift"
  },
  {
    "conversation_hash": "1c5a8e60f7eb19da54baa513cf47a7ba",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "where: {\n  ...filter,\n  approved: true,\n  disabled: false,\n  startDate: { lte: new Date() },\n  endDate: {\n    gte: subDays(new Date(), -5),\n    lte: new Date(),\n  },\n  isDraft: false,\n},",
    "filename": "1c5a8e60f7eb19da54baa513cf47a7ba_1.swift"
  },
  {
    "conversation_hash": "e5744d7a2a9c127f22156568b2142f30",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "var from = global_transform.origin\nvar to = global_transform.origin - global_transform.basis.z.normalized() * 2.0\nvar space_state = get_world().direct_space_access\nvar result = space_state.intersect_ray(from, to, [owner], true, false)\nvar collision = result[\"collider\"]",
    "filename": "e5744d7a2a9c127f22156568b2142f30_0.swift"
  },
  {
    "conversation_hash": "665a6ce8ba8bfd429764e3ff8a998aac",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation files('libs/xxx.so')    // 添加so库\n    ...\n}",
    "filename": "665a6ce8ba8bfd429764e3ff8a998aac_2.swift"
  },
  {
    "conversation_hash": "524cbf36c56d51de7c36638cf4810f49",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component } from '@angular/core';\nimport { ProductService } from '../product.service';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent {\n\n  products: any[] = this.productService.getProducts();\n\n  constructor(private productService: ProductService) { }\n\n  addFavorite(productId: string) {\n    this.productService.addFavorite(productId);\n  }\n\n  removeFavorite(productId: string) {\n    this.productService.removeFavorite(productId);\n  }\n\n  addDisfavorite(productId: string) {\n    this.productService.addDisfavorite(productId);\n  }\n\n  removeDisfavorite(productId: string) {\n    this.productService.removeDisfavorite(productId);\n  }\n\n}",
    "filename": "524cbf36c56d51de7c36638cf4810f49_5.swift"
  },
  {
    "conversation_hash": "42a381a2627638eb52c23da434a72ebf",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    @State private var showDetail = false\n\n    var body: some View {\n        NavigationView {\n            VStack {\n                NavigationLink(\n                    destination: DetailView(),\n                    isActive: $showDetail) {\n                    Text(\"Go To Detail View\")\n                }\n                Button(\"Go To Detail View\") {\n                    self.showDetail = true\n                }\n            }\n        }\n    }\n}\n\nstruct DetailView: View {\n    @Environment(\\.presentationMode) var presentationMode\n\n    var body: some View {\n        VStack {\n            Text(\"Detail View\")\n\n            Button(\"Dismiss\") {\n                self.presentationMode.wrappedValue.dismiss()\n            }\n        }\n    }\n}",
    "filename": "42a381a2627638eb52c23da434a72ebf_1.swift"
  },
  {
    "conversation_hash": "e179a5e8508776787511a9af93e986de",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "<script>\nexport default {\n  methods: {\n    removeItem() {\n      // 从列表中删除当前项\n    }\n  }\n}\n</script>",
    "filename": "e179a5e8508776787511a9af93e986de_3.swift"
  },
  {
    "conversation_hash": "5c705477f3946a708749a9c8f978ff22",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n  return {\n    inputText: '',\n    textList: [],\n    activeIndex: -1\n  }\n},",
    "filename": "5c705477f3946a708749a9c8f978ff22_4.swift"
  },
  {
    "conversation_hash": "9a93e70d0674c43c0889b16adb607710",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": ".countDownWrapper_cell div {\n  /* стили для <div>00</div> */\n}\n\n.countDownWrapper_cell span {\n  /* стили для <span>Минуты</span> */\n}",
    "filename": "9a93e70d0674c43c0889b16adb607710_0.swift"
  },
  {
    "conversation_hash": "556223422a0d1d2a19135aabd8fa05ca",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    implementation(\"org.jetbrains.kotlinx:lincheck:3.8.0\")\n    testImplementation(\"org.jetbrains.kotlinx:lincheck:3.8.0\")\n    testImplementation(\"org.jetbrains.kotlinx:lincheck-junit5:3.8.0\")\n    testImplementation(\"org.junit.jupiter:junit-jupiter:5.7.0\")\n}",
    "filename": "556223422a0d1d2a19135aabd8fa05ca_0.swift"
  },
  {
    "conversation_hash": "8baff8a12b7872ba1a9a8ec7be210fd9",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n    return {\n        jsonData: null,\n        error: null\n    }\n}",
    "filename": "8baff8a12b7872ba1a9a8ec7be210fd9_11.swift"
  },
  {
    "conversation_hash": "fb8d78d1189360850266b3016702a6cb",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation fileTree(dir: 'jniLibs', include: ['*.so'])\n\n    ...\n}",
    "filename": "fb8d78d1189360850266b3016702a6cb_6.swift"
  },
  {
    "conversation_hash": "630aa5de323800f2c4aae913633fcb9f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "TextFormField(\n  decoration: InputDecoration(\n    border: OutlineInputBorder(),\n    contentPadding: EdgeInsets.symmetric(vertical: 10.0, horizontal: 20.0),\n    labelText: 'Name',\n  ),\n),",
    "filename": "630aa5de323800f2c4aae913633fcb9f_0.swift"
  },
  {
    "conversation_hash": "2ef99be73e33c72b72a3ed1226627a8d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "const schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n\n  type Subscription {\n    count: Int\n  }\n`);",
    "filename": "2ef99be73e33c72b72a3ed1226627a8d_0.swift"
  },
  {
    "conversation_hash": "2ef99be73e33c72b72a3ed1226627a8d",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "const schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n\n  type Count {\n    value: Int\n  }\n\n  type Subscription {\n    count: Count!\n  }\n`);",
    "filename": "2ef99be73e33c72b72a3ed1226627a8d_4.swift"
  },
  {
    "conversation_hash": "0c075833dffbbcc6015f374a0fa52d6f",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    let names = [\"John\", \"Jane\", \"Jim\"]\n    \n    var body: some View {\n        NavigationView {\n            List(names, id: \\.self) { name in\n                Text(name)\n            }\n            .navigationBarTitle(\"Names\")\n        }\n    }\n}",
    "filename": "0c075833dffbbcc6015f374a0fa52d6f_1.swift"
  },
  {
    "conversation_hash": "0c075833dffbbcc6015f374a0fa52d6f",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "struct Book: Identifiable {\n    let id = UUID()\n    let title: String\n    let author: String\n}\n\nstruct ContentView: View {\n    let books = [\n        Book(title: \"The Great Gatsby\", author: \"F. Scott Fitzgerald\"),\n        Book(title: \"To Kill a Mockingbird\", author: \"Harper Lee\"),\n        Book(title: \"1984\", author: \"George Orwell\")\n    ]\n    \n    var body: some View {\n        List(books) { book in\n            Text(book.title)\n            Text(book.author)\n        }\n        .id(UUID())\n    }\n}",
    "filename": "0c075833dffbbcc6015f374a0fa52d6f_2.swift"
  },
  {
    "conversation_hash": "3548d15c75e5f64de4414e98c7777902",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "struct TodoTask: Identifiable {\n    let id = UUID()\n    var title: String\n    var description: String\n}",
    "filename": "3548d15c75e5f64de4414e98c7777902_0.swift"
  },
  {
    "conversation_hash": "3548d15c75e5f64de4414e98c7777902",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "struct AddTaskView: View {\n    @State var title = \"\"\n    @State var description = \"\"\n    @EnvironmentObject var todoList: TodoList\n    \n    var body: some View {\n        VStack {\n            TextField(\"Task title\", text: $title)\n                .padding()\n            TextField(\"Task description\", text: $description)\n                .padding()\n            Button(\"Add Task\") {\n                todoList.tasks.append(TodoTask(title: title, description: description))\n            }\n        }\n    }\n}",
    "filename": "3548d15c75e5f64de4414e98c7777902_2.swift"
  },
  {
    "conversation_hash": "3548d15c75e5f64de4414e98c7777902",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "struct TodoListView: View {\n    @EnvironmentObject var todoList: TodoList\n    \n    var body: some View {\n        NavigationView {\n            List(todoList.tasks) { task in\n                Text(task.title)\n            }\n            .navigationBarTitle(\"Todo List\")\n        }\n    }\n}",
    "filename": "3548d15c75e5f64de4414e98c7777902_3.swift"
  },
  {
    "conversation_hash": "3548d15c75e5f64de4414e98c7777902",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    var body: some View {\n        let todoList = TodoList()\n        \n        VStack {\n            AddTaskView()\n                .environmentObject(todoList)\n            TodoListView()\n                .environmentObject(todoList)\n        }\n    }\n}",
    "filename": "3548d15c75e5f64de4414e98c7777902_4.swift"
  },
  {
    "conversation_hash": "3548d15c75e5f64de4414e98c7777902",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "struct TodoTask: Identifiable {\n    let id = UUID()\n    var title: String\n    var description: String\n}",
    "filename": "3548d15c75e5f64de4414e98c7777902_5.swift"
  },
  {
    "conversation_hash": "3548d15c75e5f64de4414e98c7777902",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "struct AddTaskView: View {\n    @State var title = \"\"\n    @State var description = \"\"\n    @EnvironmentObject var todoList: TodoList\n    \n    var body: some View {\n        VStack {\n            TextField(\"Task title\", text: $title)\n                .padding()\n            TextField(\"Task description\", text: $description)\n                .padding()\n            Button(\"Add Task\") {\n                todoList.tasks.append(TodoTask(title: title, description: description))\n            }\n        }\n    }\n}",
    "filename": "3548d15c75e5f64de4414e98c7777902_7.swift"
  },
  {
    "conversation_hash": "3548d15c75e5f64de4414e98c7777902",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "struct TodoListView: View {\n    @EnvironmentObject var todoList: TodoList\n    \n    var body: some View {\n        NavigationView {\n            List(todoList.tasks) { task in\n                Text(task.title)\n            }\n            .navigationBarTitle(\"Todo List\")\n        }\n    }\n}",
    "filename": "3548d15c75e5f64de4414e98c7777902_8.swift"
  },
  {
    "conversation_hash": "3548d15c75e5f64de4414e98c7777902",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    var body: some View {\n        let todoList = TodoList()\n        \n        VStack {\n            AddTaskView()\n                .environmentObject(todoList)\n            TodoListView()\n                .environmentObject(todoList)\n        }\n    }\n}",
    "filename": "3548d15c75e5f64de4414e98c7777902_9.swift"
  },
  {
    "conversation_hash": "98dfdcb6b3133c51be4c98b683b7cbd9",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    var items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n    \n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) { item in\n                Text(item)\n            }\n            .navigationBarTitle(\"My List\")\n        }\n    }\n}",
    "filename": "98dfdcb6b3133c51be4c98b683b7cbd9_0.swift"
  },
  {
    "conversation_hash": "98dfdcb6b3133c51be4c98b683b7cbd9",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    @State var items: [String] = []\n    @State var newItem: String = \"\"\n    \n    var body: some View {\n        VStack {\n            TextField(\"Add Item\", text: $newItem)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n                .padding()\n            Button(\"Add\") {\n                items.append(newItem)\n                newItem = \"\"\n            }\n            .padding()\n            List(items, id: \\.self) { item in\n                Text(item)\n            }\n        }\n        .navigationTitle(\"To Do List\")\n    }\n}",
    "filename": "98dfdcb6b3133c51be4c98b683b7cbd9_4.swift"
  },
  {
    "conversation_hash": "2d0b773ee3ff1929094f4a54471b2bba",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "class DatabaseHelper : SQLiteOpenHelper {\n    \n    constructor(context: Context) : super(context, DB_NAME, null, DB_VERSION) {\n        // Additional constructor code\n    }\n    \n    constructor(context: Context, dbName: String, version: Int) : super(context, dbName, null, version) {\n        // Additional constructor code\n    }\n    \n    // Other methods\n}",
    "filename": "2d0b773ee3ff1929094f4a54471b2bba_0.swift"
  },
  {
    "conversation_hash": "77996771f77f299188d6fccb923dc6bb",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "export const firebaseConfig = {\n  apiKey: \"<your-api-key>\",\n  authDomain: \"<your-auth-domain>\",\n  ...\n}",
    "filename": "77996771f77f299188d6fccb923dc6bb_2.swift"
  },
  {
    "conversation_hash": "13f719e61b791db2992c7463bc9d972b",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "<template>\n  <v-app>\n    <div class=\"container\">\n      <v-avatar size=\"200\">\n        <img :src=\"avatarUrl\" alt=\"Avatar\" />\n      </v-avatar>\n      <v-tabs>\n        <v-tab v-for=\"(category, index) in avataaarsCategories\" :key=\"index\">\n          {{ category }}\n        </v-tab>\n        <v-tab-item v-for=\"(category, index) in avataaarsCategories\" :key=\"index\">\n          <v-container fluid>\n            <v-item-group v-model=\"selectedOptions[category]\" row>\n              <v-item\n                v-for=\"option in avataaarsOptions[category]\"\n                :key=\"option\"\n                :value=\"option\"\n              >\n                <v-card shaped width=\"80\" height=\"80\" class=\"mx-auto\">\n                  <v-avatar width=\"100%\">\n                    <img\n                      :src=\"getOptionImageUrl(category, option)\"\n                      :alt=\"option\"\n                    />\n                  </v-avatar>\n                </v-card>\n              </v-item>\n            </v-item-group>\n          </v-container>\n        </v-tab-item>\n      </v-tabs>\n    </div>\n  </v-app>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      avataaarsCategories: ['topTypes', 'facialHairTypes', 'eyeTypes'],\n      avataaarsOptions: {\n        topTypes: ['NoHair', 'Hat', 'Hijab'],\n        facialHairTypes: ['Blank', 'BeardMedium', 'BeardLight'],\n        eyeTypes: ['Default', 'Dilate', 'EyeRoll'],\n      },\n      selectedOptions: {\n        topTypes: 'NoHair',\n        facialHairTypes: 'Blank',\n        eyeTypes: 'Default',\n      },\n    }\n  },\n  created() {\n    this.loadFromLocalStorage()\n  },\n  computed: {\n    avatarUrl() {\n      let baseUrl = 'https://avataaars.io/png?'\n      let params = []\n      for (let category in this.selectedOptions) {\n        params.push(`${category}=${this.selectedOptions[category]}`)\n      }\n      return baseUrl + params.join('&')\n    },\n  },\n  methods: {\n    getOptionImageUrl(category, option) {\n      const baseOptions = { ...this.selectedOptions }\n      baseOptions[category] = option\n      let baseUrl = 'https://avataaars.io/png?'\n      let params = []\n      for (let category in baseOptions) {\n        params.push(`${category}=${baseOptions[category]}`)\n      }\n      return baseUrl + params.join('&')\n    },\n    loadFromLocalStorage() {\n      const storedAvatar = JSON.parse(localStorage.getItem('avatar'))\n      if (storedAvatar) {\n        this.selectedOptions = storedAvatar\n      }\n    },\n  },\n  watch: {\n    selectedOptions: {\n      deep: true,\n      handler(newVal) {\n        localStorage.setItem('avatar', JSON.stringify(newVal))\n      },\n    },\n  },\n}\n</script>\n\n<style scoped>\n.container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n</style>",
    "filename": "13f719e61b791db2992c7463bc9d972b_0.swift"
  },
  {
    "conversation_hash": "4f94b33a510aa10b1847dc1b31d4b1f2",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "rules: {\n  number: [\n    { required: true, message: '请输入数字', trigger: 'blur' },\n    { pattern: /^\\d+$/, message: '只能输入正整数', trigger: 'blur' }\n  ]\n}",
    "filename": "4f94b33a510aa10b1847dc1b31d4b1f2_0.swift"
  },
  {
    "conversation_hash": "4f94b33a510aa10b1847dc1b31d4b1f2",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "rules: {\n  lowerCase: [\n    { required: true, message: '请输入字母', trigger: 'blur' },\n    { pattern: /^[a-z]+$/, message: '只能输入小写字母', trigger: 'blur' }\n  ]\n}",
    "filename": "4f94b33a510aa10b1847dc1b31d4b1f2_1.swift"
  },
  {
    "conversation_hash": "6e8bf22e2c20f9603eade8ce3eb51b29",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, OnInit } from '@angular/core';\nimport { customFunction } from '../assets/js/custom-script.js';\n\n@Component({\n  selector: 'app-my-component',\n  templateUrl: './my-component.component.html',\n  styleUrls: ['./my-component.component.css']\n})\nexport class MyComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit() {\n   customFunction();\n  }\n}",
    "filename": "6e8bf22e2c20f9603eade8ce3eb51b29_1.swift"
  },
  {
    "conversation_hash": "a68d7df2929933e2f41896167d50bcdf",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  child: Expanded(\n    child: InkWell(\n      onTap: () {},\n      child: Text('Button'),\n    ),\n  ),\n);",
    "filename": "a68d7df2929933e2f41896167d50bcdf_1.swift"
  },
  {
    "conversation_hash": "c2ee0b12f8f4eaae3a2ea4ed0b3345ca",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  rules: {\n    users: {\n      $uid: {\n        .read: $uid === auth.uid,\n        .write: $uid === auth.uid\n      }\n    }\n  }\n}",
    "filename": "c2ee0b12f8f4eaae3a2ea4ed0b3345ca_5.swift"
  },
  {
    "conversation_hash": "c37a127e4ed8702756544ca5038d37a8",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "return tx.quotation.create({\n    data: {\n        questionnaireId: 17,\n        collectorId: 4,\n        itemCode: 101010101,\n        marketplaceCode: 2010101,\n        quotes: {\n            createMany: {\n                data: [\n                    {\n                        price: 13,\n                        quantity: 325,\n                        shopContactName: 'Imported',\n                        shopContactPhone: 'Imported',\n                        shopLatitude: 'Imputated',\n                        shopLongitude: 'Imputated',\n                        measurementUnit: 'g'\n                    },\n                    {\n                        ...quotes[1],\n                        measurementUnit: 'g'\n                    }\n                ]\n            }\n        }\n    },\n    select: {\n        id: true,\n        questionnaireId: true,\n        itemCode: true,\n        quotes: true\n    }\n})",
    "filename": "c37a127e4ed8702756544ca5038d37a8_0.swift"
  },
  {
    "conversation_hash": "c701ab1a8f708e4330276699e70b5801",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  cancelled: boolean, // true if the user cancelled the action\n  type: string, // MIME type of the selected media\n  uri: string, // local URI of the selected media\n  width: number, // width of the selected media in pixels\n  height: number, // height of the selected media in pixels\n  ...\n}",
    "filename": "c701ab1a8f708e4330276699e70b5801_2.swift"
  },
  {
    "conversation_hash": "18964a1a058255ac3ff668507f147d53",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n  ...\n  bundle {\n    enabled = true\n    language {\n      enableSplit = false\n    }\n    density {\n      enableSplit = true\n    }\n    abi {\n      enableSplit = true\n    }\n  }\n  ...\n}",
    "filename": "18964a1a058255ac3ff668507f147d53_0.swift"
  },
  {
    "conversation_hash": "eba1fc68a3140a4ff8049625898eb3ce",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let option = {\n    xAxis: {\n        type: 'category',\n        data: ['1949', '1950', '1951', '1952', '1953', '1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961', '1962', '1963', '1964', '1965', '1966', '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975', '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984', '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993', '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021']\n    },\n    yAxis: {\n        type: 'value'\n    },\n    series: [{\n        data: [1275, 1419, 1349, 1622, 1637, 2232, 1965, 1961, 2138, 1889, 1635, 1402, 949, 2451, 2934, 2721, 2679, 2554, 2543, 2731, 2690, 2710, 2551, 2550, 2447, 2226, 2102, 1849, 1783, 1733, 1715, 1776, 2064, 2230, 2052, 2050, 2196, 2374, 2508, 2445, 2396, 2374, 2250, 2113, 2120, 2098, 2052, 2057, 2028, 1934, 1827, 1765, 1696, 1641, 1594, 1588, 1612, 1581, 1591, 1604, 1587, 1588, 1600, 1635, 1640, 1687, 1655, 1786, 1723, 1523, 1465, 1200, 1062],\n        type: 'bar'\n    }]\n};",
    "filename": "eba1fc68a3140a4ff8049625898eb3ce_0.swift"
  },
  {
    "conversation_hash": "7e2197ce26e66785a87ddd987b543473",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "QtQuick",
      "QtQuick.Controls"
    ],
    "code": "import QtQuick 2.0\nimport QtQuick.Controls 2.15\n\nApplicationWindow {\n    visible: true\n    width: 400\n    height: 200\n    title: \"My App\"\n\n    Rectangle {\n        width: parent.width\n        height: parent.height\n\n        //设置一个空字符串给另一个编辑框作为默认焦点\n        TextField {\n            id: textField1\n            anchors.centerIn: parent\n        }\n\n        TextField {\n            id: textField2\n            anchors.centerIn: parent\n            text: \"\"\n            //设置默认焦点\n            focus: true\n        }\n    }\n}",
    "filename": "7e2197ce26e66785a87ddd987b543473_0.swift"
  },
  {
    "conversation_hash": "7e2197ce26e66785a87ddd987b543473",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "QtQuick",
      "QtQuick.Controls"
    ],
    "code": "import QtQuick 2.0\nimport QtQuick.Controls 2.15\n\nApplicationWindow {\n    visible: true\n    width: 400\n    height: 200\n    title: \"My App\"\n\n    Rectangle {\n        width: parent.width\n        height: parent.height\n\n        TextField {\n            id: textField1\n            anchors.centerIn: parent\n            //设置 focusPolicy 为 Qt.NoFocus\n            focusPolicy: Qt.NoFocus\n        }\n\n        TextField {\n            id: textField2\n            anchors.centerIn: parent\n            //设置 focusPolicy 为 Qt.NoFocus\n            focusPolicy: Qt.NoFocus\n        }\n    }\n}",
    "filename": "7e2197ce26e66785a87ddd987b543473_1.swift"
  },
  {
    "conversation_hash": "3f15aff0347660c7a7e47ea572dcb6bd",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "FreeBSD: {\n  url: \"pkg+http://pkg.FreeBSD.org/${ABI}/latest\",\n  mirror_type: \"srv\",\n  signature_type: \"fingerprints\",\n  fingerprints: \"/usr/share/keys/pkg\",\n  enabled: yes\n}",
    "filename": "3f15aff0347660c7a7e47ea572dcb6bd_0.swift"
  },
  {
    "conversation_hash": "e0c416ce630b2926b59c290044e48209",
    "code_index": 13,
    "language": "Swift",
    "libraries": [],
    "code": "type Query {\n  users: [User!]!\n  user(id: ID!): User\n  posts: [Post!]!\n  post(id: ID!): Post\n}\n\ntype Mutation {\n  createUser(data: CreateUserInput!): User!\n  updateUser(id: ID!, data: UpdateUserInput!): User!\n  deleteUser(id: ID!): User!\n  createPost(data: CreatePostInput!): Post!\n  updatePost(id: ID!, data: UpdatePostInput!): Post!\n  deletePost(id: ID!): Post!\n}\n\ntype User {\n  id: ID!\n  name: String!\n  email: String!\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  content: String!\n  published: Boolean!\n  author: User!\n}\n\ninput CreateUserInput {\n  name: String!\n  email: String!\n}\n\ninput UpdateUserInput {\n  name: String\n  email: String\n}\n\ninput CreatePostInput {\n  title: String!\n  content: String!\n  published: Boolean!\n  authorId: ID!\n}\n\ninput UpdatePostInput {\n  title: String\n  content: String\n  published: Boolean\n}",
    "filename": "e0c416ce630b2926b59c290044e48209_13.swift"
  },
  {
    "conversation_hash": "0b425a3731235b1a822883225c3d93c9",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  user(name: \"John\") {\n    posts {\n      id\n      title\n      content\n    }\n  }\n}",
    "filename": "0b425a3731235b1a822883225c3d93c9_1.swift"
  },
  {
    "conversation_hash": "5376060a5698b4317c2c2877a63bda77",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "query {\n  user(id: \"123\") {\n    id\n    name\n    posts {\n      id\n      title\n      content\n    }\n  }\n}",
    "filename": "5376060a5698b4317c2c2877a63bda77_1.swift"
  },
  {
    "conversation_hash": "5376060a5698b4317c2c2877a63bda77",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "query {\n  user(id: \"123\") {\n    id\n    name\n    posts(where: { title: \"My First Post\" }) {\n      id\n      title\n      content\n    }\n  }\n}",
    "filename": "5376060a5698b4317c2c2877a63bda77_2.swift"
  },
  {
    "conversation_hash": "5376060a5698b4317c2c2877a63bda77",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "query {\n  user(id: \"123\") {\n    id\n    name\n    posts {\n      id\n      title\n      content\n    }\n  }\n}",
    "filename": "5376060a5698b4317c2c2877a63bda77_4.swift"
  },
  {
    "conversation_hash": "3344257e18acdd87a5144231cbf79e87",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "query {\n  user(id: 1) {\n    name\n    posts {\n      title\n      content\n    }\n  }\n}",
    "filename": "3344257e18acdd87a5144231cbf79e87_1.swift"
  },
  {
    "conversation_hash": "28b905ef86450d58a283bb7887b8b713",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "Expanded(\n  child: Column(\n    children: [\n      // элементы внутри Column здесь\n    ],\n  ),\n),",
    "filename": "28b905ef86450d58a283bb7887b8b713_2.swift"
  },
  {
    "conversation_hash": "9e386b1e2f47ce8d15dfc9742ced5482",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Column(\n  children: [\n    // other widgets\n    Expanded(\n      child: TabBarView(\n        // other properties\n      ),\n    ),\n  ],\n)",
    "filename": "9e386b1e2f47ce8d15dfc9742ced5482_0.swift"
  },
  {
    "conversation_hash": "9e386b1e2f47ce8d15dfc9742ced5482",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "Column(\n     children: [\n       // other widgets\n       Expanded(\n         child: SingleChildScrollView(\n           child: TabBarView(\n             // other properties\n           ),\n         ),\n       ),\n     ],\n   )",
    "filename": "9e386b1e2f47ce8d15dfc9742ced5482_2.swift"
  },
  {
    "conversation_hash": "eb078fe12952b3ea21065ad10223ac15",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let obj = {\n  name: 'John',\n  age: '30',\n  height: '180.5'\n}",
    "filename": "eb078fe12952b3ea21065ad10223ac15_0.swift"
  },
  {
    "conversation_hash": "a1abe223b73ecd16804e99cced1e24e6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "CoreImage",
      "UIKit"
    ],
    "code": "import UIKit\nimport CoreImage\n\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var inputImageView: UIImageView!\n    @IBOutlet weak var outputImageView: UIImageView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        applyFilter()\n    }\n\n    func applyFilter() {\n        guard let inputImage = inputImageView.image else { return }\n        \n        let context = CIContext()\n        let filterName = \"CISepiaTone\"\n        let intensity = 0.8\n        \n        guard let coreImage = CIImage(image: inputImage),\n              let filter = CIFilter(name: filterName) else { return }\n        \n        filter.setValue(coreImage, forKey: kCIInputImageKey)\n        filter.setValue(intensity, forKey: kCIInputIntensityKey)\n\n        if let outputCIImage = filter.outputImage,\n           let outputCGImage = context.createCGImage(outputCIImage, from: outputCIImage.extent) {\n            outputImageView.image = UIImage(cgImage: outputCGImage)\n        }\n    }\n}",
    "filename": "a1abe223b73ecd16804e99cced1e24e6_0.swift"
  },
  {
    "conversation_hash": "023dd7ea463c420b5e8f5a8bb698a430",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "model User {\n  id        Int      @id @default(autoincrement())\n  name      String\n  posts     Post[]\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String\n  content   String\n  user      User?    @relation(fields: [userId], references: [id])\n  userId    Int?\n}",
    "filename": "023dd7ea463c420b5e8f5a8bb698a430_0.swift"
  },
  {
    "conversation_hash": "754e5484b550857ce5bd40670ba3b5ad",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "chart: {\n    height: 800\n},\ntitle: {\n    text: '甘特图示例'\n},\nplotOptions: {\n    gantt: {\n        barHeight: 20 // 设置甘特图条行的高度为20\n    }\n},\nseries: [{\n    name: '任务',\n    data: [{\n        name: '任务A',\n        start: Date.UTC(2019, 0, 1),\n        end: Date.UTC(2019, 0, 31)\n    }, {\n        name: '任务B',\n        start: Date.UTC(2019, 1, 1),\n        end: Date.UTC(2019, 1, 28)\n    }]\n}]",
    "filename": "754e5484b550857ce5bd40670ba3b5ad_0.swift"
  },
  {
    "conversation_hash": "9b0051eb45f35d73fb949bcf091f46f5",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "import { gql } from 'apollo-server-express';\n\nexport const typeDefs = gql`\ntype User {\n  id: ID!\n  email: String!\n  ...\n  profile: Profile!\n}\n\ntype Profile {\n  id: ID!\n  user: User!\n  ...\n}\n`;",
    "filename": "9b0051eb45f35d73fb949bcf091f46f5_4.swift"
  },
  {
    "conversation_hash": "ee264dd9c57884c354bf6d907a6f1758",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "query {\n  post(id: 1) {\n    id\n    title\n    content\n    author {\n      id\n      name\n    }\n  }\n}",
    "filename": "ee264dd9c57884c354bf6d907a6f1758_2.swift"
  },
  {
    "conversation_hash": "ee264dd9c57884c354bf6d907a6f1758",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "model Post {\n  id       Int    @id @default(autoincrement())\n  title    String\n  content  String\n  comments Comment[]\n}\n\nmodel Comment {\n  id       Int   @id @default(autoincrement())\n  body     String\n  post     Post  @relation(fields: [postId], references: [id])\n  postId   Int\n}",
    "filename": "ee264dd9c57884c354bf6d907a6f1758_3.swift"
  },
  {
    "conversation_hash": "6313a38c09f857b71b204239f7f7a002",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "// Author model\ntype Author {\n  id: ID!\n  firstName: String!\n  lastName: String!\n  books: [Book!]!\n}\n\n// Book model\ntype Book {\n  id: ID!\n  title: String!\n  author: Author!\n}",
    "filename": "6313a38c09f857b71b204239f7f7a002_0.swift"
  },
  {
    "conversation_hash": "6313a38c09f857b71b204239f7f7a002",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  author(id: \"1\") {\n    id\n    firstName\n    lastName\n    books {\n      id\n      title\n    }\n  }\n}",
    "filename": "6313a38c09f857b71b204239f7f7a002_2.swift"
  },
  {
    "conversation_hash": "6313a38c09f857b71b204239f7f7a002",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  book(id: \"1\") {\n    id\n    title\n    author {\n      id\n      firstName\n      lastName\n    }\n  }\n}",
    "filename": "6313a38c09f857b71b204239f7f7a002_3.swift"
  },
  {
    "conversation_hash": "6313a38c09f857b71b204239f7f7a002",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "model Author {\n  id       Int      @id @default(autoincrement())\n  name     String\n  age      Int?\n  books    Book[]\n}\n\nmodel Book {\n  id        Int     @id @default(autoincrement())\n  title     String\n  author    Author? @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}",
    "filename": "6313a38c09f857b71b204239f7f7a002_4.swift"
  },
  {
    "conversation_hash": "6313a38c09f857b71b204239f7f7a002",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  author(id: \"1\") {\n    id\n    name\n    books {\n      id\n      title\n    }\n  }\n}",
    "filename": "6313a38c09f857b71b204239f7f7a002_6.swift"
  },
  {
    "conversation_hash": "6313a38c09f857b71b204239f7f7a002",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  post(id: \"1\") {\n    id\n    title\n    content\n    comments {\n      id\n      text\n    }\n  }\n}\n\nmutation {\n  createComment(\n    data: {\n      text: \"This is a comment\"\n      post: {\n        connect: {\n          id: \"1\"\n        }\n      }\n    }\n  ) {\n    id\n    text\n    post {\n      id\n      title\n    }\n  }\n}",
    "filename": "6313a38c09f857b71b204239f7f7a002_9.swift"
  },
  {
    "conversation_hash": "f83e3d445ff07bea81ebfafb3d9eb8d6",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "SubShader {\n    Tags {\"Queue\"=\"Transparent\" \"RenderType\"=\"Opaque\"}\n    LOD 100\n\n    Pass {\n        ...\n    }\n}",
    "filename": "f83e3d445ff07bea81ebfafb3d9eb8d6_3.swift"
  },
  {
    "conversation_hash": "3d6608a89f8d631fe40a830458a2d861",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "query {\n  users {\n    id\n    posts {\n      id\n      title\n    }\n  }\n\n  posts {\n    id\n    title\n    author {\n      id\n    }\n  }\n}",
    "filename": "3d6608a89f8d631fe40a830458a2d861_1.swift"
  },
  {
    "conversation_hash": "4ca7b96d1b2b2e7ffa7121e0def485fe",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "class UserEntity(id: EntityID<Int>): IntEntity(id) {\n    companion object : IntEntityClass<UserEntity>(UsersTable)\n    var username by UsersTable.username\n    var password by UsersTable.password\n    var token by UsersTable.token\n    var roles by RoleEntity.via(UserRolesTable).hasMany()\n}",
    "filename": "4ca7b96d1b2b2e7ffa7121e0def485fe_4.swift"
  },
  {
    "conversation_hash": "4ca7b96d1b2b2e7ffa7121e0def485fe",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "class RoleEntity(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<RoleEntity>(RolesTable)\n    var name by RolesTable.name\n    var users by UserEntity.via(UserRolesTable, { userRole, userEntity ->\n        userRole.user eq userEntity.id\n    }, { userRole ->\n        UserEntity.findById(userRole.user) ?: UserEntity.new { }\n    })\n}",
    "filename": "4ca7b96d1b2b2e7ffa7121e0def485fe_9.swift"
  },
  {
    "conversation_hash": "4ca7b96d1b2b2e7ffa7121e0def485fe",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "class UserEntity(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<UserEntity>(UsersTable)\n\n    var username by UsersTable.username\n    var password by UsersTable.password\n    var token by UsersTable.token\n    var roles by RoleEntity.via(UserRolesTable, { userRole, roleEntity ->\n        userRole.role eq roleEntity.id\n    }, { userRole ->\n       RoleEntity.findById(userRole.role) ?: RoleEntity.new { }\n    }).hasMany()\n}",
    "filename": "4ca7b96d1b2b2e7ffa7121e0def485fe_10.swift"
  },
  {
    "conversation_hash": "c1fcc19847e0889a4ac3312331f49e56",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "task hello {\n       doLast {\n           println 'Hello Gradle!'\n       }\n   }",
    "filename": "c1fcc19847e0889a4ac3312331f49e56_0.swift"
  },
  {
    "conversation_hash": "28bc0fcec31ce6eff904c5fb425e51f7",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "<Select\n  options={options}\n  value={selectedOption}\n  onChange={handleSelectChange}\n/>",
    "filename": "28bc0fcec31ce6eff904c5fb425e51f7_4.swift"
  },
  {
    "conversation_hash": "c5ae9593a26873e246bdff76e76bb765",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "type Product {\n  id: ID!\n  name: String!\n  description: String!\n  price: Float!\n  category: Category!\n}\n\ntype Category {\n  id: ID!\n  name: String!\n  description: String!\n  products: [Product!]!\n}\n\ntype Query {\n  products: [Product!]!\n  product(id: ID!): Product!\n  categories: [Category!]!\n  category(id: ID!): Category!\n}\n\ntype Mutation {\n  createProduct(name: String!, description: String!, price: Float!, categoryId: ID!): Product!\n  updateProduct(id: ID!, name: String!, description: String!, price: Float!, categoryId: ID!): Product!\n  deleteProduct(id: ID!): Product!\n  createCategory(name: String!, description: String!): Category!\n  updateCategory(id: ID!, name: String!, description: String!): Category!\n  deleteCategory(id: ID!): Category!\n}",
    "filename": "c5ae9593a26873e246bdff76e76bb765_1.swift"
  },
  {
    "conversation_hash": "c5ae9593a26873e246bdff76e76bb765",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "query {\n  products {\n    id\n    name\n    description\n    price\n    category {\n      id\n      name\n      description\n    }\n  }\n}\n\nmutation {\n  createProduct(\n    name: \"Product1\"\n    description: \"Product 1 description\"\n    price: 9.99\n    categoryId: \"cat1\"\n  ) {\n    id\n    name\n    price\n    category {\n      id\n      name\n    }\n  }\n}",
    "filename": "c5ae9593a26873e246bdff76e76bb765_5.swift"
  },
  {
    "conversation_hash": "44daf96d876aafd7536530196099ed68",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "VueAwesomeSwiper"
    ],
    "code": "import VueAwesomeSwiper from 'vue-awesome-swiper'\nimport 'swiper/css/swiper.css'\n\nexport default {\n  components: {\n    VueAwesomeSwiper\n  }\n}",
    "filename": "44daf96d876aafd7536530196099ed68_1.swift"
  },
  {
    "conversation_hash": "dba31bdf0b97be142aed222fe25695b4",
    "code_index": 12,
    "language": "Swift",
    "libraries": [
      "QtQuick",
      "QtQuick.Layouts"
    ],
    "code": "// welcome.qml\nimport QtQuick 2.0\nimport QtQuick.Layouts 1.0\n\nItem {\n    GridLayout {\n        columns: 1\n        spacing: 10\n\n        Label {\n            text: \"Welcome to MyApp Installation Wizard.\"\n            font.bold: true\n        }\n\n        Label {\n            text: \"Press Next to continue.\"\n        }\n\n    }\n}",
    "filename": "dba31bdf0b97be142aed222fe25695b4_12.swift"
  },
  {
    "conversation_hash": "3fa344d28f79f94ad764ac723b4d57cd",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let\nStartDate = Date.From(\"01/01/2017\"),\nEndDate = Date.From(\"12/31/2019\"),\nSourceDates = List.Dates(StartDate,Number.From(EndDate)-Number.From(StartDate)+1,#duration(1,0,0,0))\nin\nSourceDates",
    "filename": "3fa344d28f79f94ad764ac723b4d57cd_0.swift"
  },
  {
    "conversation_hash": "9ec5abdbaf0f2fc0d4bac764384bc0f8",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, OnInit } from '@angular/core';\nimport { GridModel } from './grid.model';\nimport { GridService } from './grid.service';\n\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.scss']\n})\nexport class GridComponent implements OnInit {\n\n  public displayedColumns: string[] = ['id', 'name', 'email'];\n  public dataSource: GridModel[] = [];\n\n  constructor(private gridService: GridService) { }\n\n  ngOnInit(): void {\n    this.dataSource = this.gridService.getGridData();\n  }\n}",
    "filename": "9ec5abdbaf0f2fc0d4bac764384bc0f8_5.swift"
  },
  {
    "conversation_hash": "96db995f5c617585208b2997412e4f3a",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "defaultConfig {\n  ...\n  versionCode flutterVersionCode.toInteger()\n  versionName flutterVersionName\n  // Add the following lines\n  applicationVariants.all { variant ->\n    variant.outputs.all {\n      outputFileName = \"MyApp_v${variant.versionName}.apk\"\n    }\n  }\n}",
    "filename": "96db995f5c617585208b2997412e4f3a_2.swift"
  },
  {
    "conversation_hash": "96db995f5c617585208b2997412e4f3a",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildTypes {\n        release {\n            ...\n            shrinkResources false\n            ...\n        }\n    }\n}",
    "filename": "96db995f5c617585208b2997412e4f3a_6.swift"
  },
  {
    "conversation_hash": "f037017726e7f8e3914cbc664d5096f1",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "import { UserApi } from './generated/userApi'\nimport { OrderApi } from './generated/orderApi'\n\nexport class ApiFacade {\n  private userApi: UserApi\n  private orderApi: OrderApi\n\n  constructor() {\n    this.userApi = new UserApi()\n    this.orderApi = new OrderApi()\n  }\n\n  public getUsers() {\n    return this.userApi.getUsers()\n  }\n\n  public getUser(id: string) {\n    return this.userApi.getUserById(id)\n  }\n\n  public createOrder(order: any) {\n    return this.orderApi.createOrder(order)\n  }\n\n  // и т.д.\n}",
    "filename": "f037017726e7f8e3914cbc664d5096f1_8.swift"
  },
  {
    "conversation_hash": "1882307a4b4be0711cc55978c4eddb59",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let user = {\n  name: 'John',\n  age: 30,\n  isMale: true\n}\n\nlet userName: string = user.name; // обозначаем, что userName будет строкой, как и член name объекта user\nlet userAge: number = user.age; // обозначаем, что userAge будет числом, как и член age объекта user\nlet userMale: boolean = user.isMale; // обозначаем, что userMale будет булевым значением, как и член isMale объекта user",
    "filename": "1882307a4b4be0711cc55978c4eddb59_0.swift"
  },
  {
    "conversation_hash": "b41d6dae694b9621939b5791483c4f06",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "db.collectionName.insert({ \n   field1: value1, \n   field2: value2, \n   ...\n})",
    "filename": "b41d6dae694b9621939b5791483c4f06_0.swift"
  },
  {
    "conversation_hash": "334ee0be7fb1d2e37b86ee4f0857951a",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n  return {\n    tableData: [], // 表格数据\n    currentPage: 1, // 当前页码\n    pageSize: 10, // 每页显示数量\n    total: 0, // 总数据量\n  }\n},",
    "filename": "334ee0be7fb1d2e37b86ee4f0857951a_1.swift"
  },
  {
    "conversation_hash": "2b9731f7e0373769770d7a9b20191fff",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "UIKit"
    ],
    "code": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    // Определяем свойства класса\n    @IBOutlet weak var displayLabel: UILabel!\n    var previousNumber: Double = 0\n    var currentNumber: Double = 0\n    var performingMath = false\n    var operation = 0\n    \n    // Функция для обработки нажатия на цифровую кнопку\n    @IBAction func numberPressed(_ sender: UIButton) {\n        if performingMath == true {\n            displayLabel.text = String(sender.tag - 1)\n            currentNumber = Double(displayLabel.text!)!\n            performingMath = false\n        } else {\n            displayLabel.text = displayLabel.text! + String(sender.tag - 1)\n            currentNumber = Double(displayLabel.text!)!\n        }\n    }\n    \n    // Функция для обработки нажатия на кнопку операции\n    @IBAction func operationPressed(_ sender: UIButton) {\n        if displayLabel.text != \"\" && sender.tag != 11 && sender.tag != 16 {\n            previousNumber = Double(displayLabel.text!)!\n            \n            if sender.tag == 12 { // Выполняем сложение\n                displayLabel.text = \"+\"\n            } else if sender.tag == 13 { // Выполняем вычитание\n                displayLabel.text = \"-\"\n            } else if sender.tag == 14 { // Выполняем умножение\n                displayLabel.text = \"×\"\n            } else if sender.tag == 15 { // Выполняем деление\n                displayLabel.text = \"÷\"\n            }\n            \n            operation = sender.tag\n            performingMath = true\n        } else if sender.tag == 16 { // Выполняем равенство\n            if operation == 12 {\n                displayLabel.text = String(previousNumber + currentNumber)\n            } else if operation == 13 {\n                displayLabel.text = String(previousNumber - currentNumber)\n            } else if operation == 14 {\n                displayLabel.text = String(previousNumber * currentNumber)\n            } else if operation == 15 {\n                displayLabel.text = String(previousNumber / currentNumber)\n            }\n        } else if sender.tag == 11 { // Очистка\n            displayLabel.text = \"\"\n            previousNumber = 0\n            currentNumber = 0\n            operation = 0\n        }\n    }\n}",
    "filename": "2b9731f7e0373769770d7a9b20191fff_0.swift"
  },
  {
    "conversation_hash": "5b68c3e69f59364d1c588d62c4ce5f60",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "var ShrimpEstateMetricKey = map[string]int{\n    \"water-temperature\": 0,\n    \"dissolved-oxygen\":  1,\n    \"turbidity\":         2,\n    \"water-ph\":          3,\n    \"air-temperature\":   4,\n    \"air-humidity\":      5,\n    \"tds\":               8,\n}",
    "filename": "5b68c3e69f59364d1c588d62c4ce5f60_4.swift"
  },
  {
    "conversation_hash": "fb53fa4e8fec5c34d68a319224751809",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "axios({\n  method: 'post',\n  url: '/your-url',\n  data: {\n    key: 'value'\n  }\n})",
    "filename": "fb53fa4e8fec5c34d68a319224751809_0.swift"
  },
  {
    "conversation_hash": "9bc85e74b8ea16b1b024dd32120c3fd8",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "terser({\n  compress: {\n    passes: 2,\n    pure_getters: true,\n    unsafe_math: true,\n  },\n  mangle: {\n    properties: {\n      regex: /^_/,\n    },\n  },\n  ecma: 2018,\n  module: true,\n  toplevel: true,\n}),",
    "filename": "9bc85e74b8ea16b1b024dd32120c3fd8_0.swift"
  },
  {
    "conversation_hash": "aa696bf11ea34f58e364880e26747888",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "export default [\n  // 用户登录\n  {\n    url: '/dev-api/mock/admin/acl/index/login',\n    method: 'post',\n    response: ({ body }) => {   // 声明参数，解构赋值获取请求体\n      const { username, password } = body\n      // ...\n    },\n  },\n  // 获取用户信息\n  {\n    url: '/mock/user/info',\n    method: 'get',\n    response: (request) => {   // 声明参数，获取请求\n      const token = getRequestToken(request)\n      // ...\n    },\n  },\n  // ...\n]",
    "filename": "aa696bf11ea34f58e364880e26747888_4.swift"
  },
  {
    "conversation_hash": "2542da26941ca912568d01e029397415",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "canvas {\n  display: block;\n  width: 100%;\n  height: 100%;\n}",
    "filename": "2542da26941ca912568d01e029397415_3.swift"
  },
  {
    "conversation_hash": "53bea56f71dec64096dd1dc32db100ec",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "type\n  Graph = ref object\n    predecessors: seq[seq[int]]\n    outDegrees: array[int]\n\nproc topoSort(graph: Graph): seq[int] =\n  var queue: seq[int] = @[]\n  var result: seq[int] = @[]\n  \n  # Calculate the out-degree of each vertex\n  for i in 0..<graph.predecessors.len:\n    graph.outDegrees[i] = graph.predecessors[i].len\n  \n  # Add vertices with out-degree 0 to the queue\n  for i in 0..<graph.predecessors.len:\n    if graph.outDegrees[i] == 0:\n      queue.add(i)\n  \n  while queue.len > 0:\n    var curr = queue.pop(0)\n    result.add(curr)\n    for prevNode in graph.predecessors[curr]:\n      graph.outDegrees[prevNode] -= 1\n      if graph.outDegrees[prevNode] == 0:\n        queue.add(prevNode)\n  \n  return result",
    "filename": "53bea56f71dec64096dd1dc32db100ec_2.swift"
  },
  {
    "conversation_hash": "53bea56f71dec64096dd1dc32db100ec",
    "code_index": 4,
    "language": "Swift",
    "libraries": [
      "cairo"
    ],
    "code": "import cairo\n\nconst size = 512   # Set the size of the icon\nconst cx = size / 2  # Calculate the center x-coordinate\nconst cy = size / 2  # Calculate the center y-coordinate\nconst radius = size / 2  # Calculate the radius of the circle\n\nproc drawRugbyBall(ctx: var cairo.Context) =\n  let x1 = cx - 0.2 * radius\n  let y1 = cy - 0.5 * radius\n  let x2 = cx + 0.2 * radius\n  let y2 = cy + 0.5 * radius\n  let x3 = cx - 0.2 * radius\n  let y3 = cy + 0.5 * radius\n  let x4 = cx + 0.2 * radius\n  let y4 = cy - 0.5 * radius\n  \n  ctx.set_source_rgb(1, 0.8, 0.2)  # Set the color to orange\n  ctx.move_to(cx, cy)\n  ctx.curve_to(x1, y1, x4, y4, cx, cy - 0.8 * radius)\n  ctx.curve_to(x3, y3, x2, y2, cx, cy)\n  ctx.fill()  # Fill the rugby ball shape\n\n# Create a new surface and context for drawing the icon\nvar surface = cairo.ImageSurface.create(cairo.Format.ARGB32, size, size)\nvar ctx = cairo.Context.create(surface)\n\n# Draw a white circle as the background of the icon\nctx.set_source_rgb(1, 1, 1)  # Set the color to white\nctx.arc(cx, cy, radius, 0, 2.0 * PI)\nctx.fill()  # Fill the circle shape\n\n# Draw the rugby ball shape on top of the white circle\ndrawRugbyBall(ctx)\n\n# Save the resulting icon as a PNG image file\nsurface.writeToPNG(\"rugby_ball_icon.png\")",
    "filename": "53bea56f71dec64096dd1dc32db100ec_4.swift"
  },
  {
    "conversation_hash": "59116b5afa97486a5ea77af2e54a0fb6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, ElementRef, HostListener } from '@angular/core';\n\n@Component({\n  selector: 'app-my-modal',\n  template: `\n    <div class=\"modal\" [ngClass]=\"{ 'show': showModal }\">\n      <div class=\"modal-content\">\n        <p>Modal content goes here...</p>\n      </div>\n    </div>\n  `,\n})\nexport class MyModalComponent {\n  showModal = false;\n\n  constructor(private elementRef: ElementRef) {}\n\n  @HostListener('document:click', ['$event'])\n  onClick(event: MouseEvent) {\n    // Check if the target element is outside the modal\n    if (!this.elementRef.nativeElement.contains(event.target)) {\n      this.showModal = false;\n    }\n  }\n\n  openModal() {\n    this.showModal = true;\n  }\n}",
    "filename": "59116b5afa97486a5ea77af2e54a0fb6_0.swift"
  },
  {
    "conversation_hash": "59116b5afa97486a5ea77af2e54a0fb6",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, ElementRef, HostListener } from '@angular/core';\n\n@Component({\n  selector: 'app-my-modal',\n  template: `\n    <div class=\"modal\" [ngClass]=\"{ 'show': showModal }\">\n      <div class=\"modal-content\">\n        <p>Modal content goes here...</p>\n      </div>\n    </div>\n  `,\n})\nexport class MyModalComponent {\n  showModal = false;\n\n  constructor(private elementRef: ElementRef) {}\n\n  @HostListener('document:click', ['$event'])\n  onClick(event: MouseEvent) {\n    // Get the target element\n    let targetElement = event.target as HTMLElement;\n\n    while (targetElement != null && targetElement !== document.documentElement) {\n      // Check if the target element is inside the modal\n      if (targetElement === this.elementRef.nativeElement) {\n        return;\n      }\n\n      targetElement = targetElement.parentElement;\n    }\n\n    // Target element is outside the modal\n    this.showModal = false;\n  }\n\n  openModal() {\n    this.showModal = true;\n  }\n}",
    "filename": "59116b5afa97486a5ea77af2e54a0fb6_2.swift"
  },
  {
    "conversation_hash": "46c50490344ea328a13014874a8d24b3",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "resultItem: {\n  flexDirection: 'row',\n  alignItems: 'center',\n  marginBottom: 10,\n},\nresultItemImage: {\n  width: 80,\n  height: 80,\n  borderRadius: 5,\n  marginRight: 10,\n},\nresultItemDetails: {\n  flex: 1,\n},\nresultItemName: {\n  fontSize: 18,\n  fontWeight: 'bold',\n  marginBottom: 5,\n},\nresultItemDescription: {\n  fontSize: 14,\n},",
    "filename": "46c50490344ea328a13014874a8d24b3_5.swift"
  },
  {
    "conversation_hash": "95db7457a9be67c2f84e32bf84dd1cde",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "UIKit"
    ],
    "code": "import UIKit\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view.\n    }\n\n    @IBAction func showMessage(sender: UIButton) {\n        let alertController = UIAlertController(title: \"Welcome to My First App\", message: \"Hello, World!\", preferredStyle: UIAlertController.Style.alert)\n        alertController.addAction(UIAlertAction(title: \"OK\", style: UIAlertAction.Style.default, handler: nil))\n        present(alertController, animated: true, completion: nil)\n    }\n}",
    "filename": "95db7457a9be67c2f84e32bf84dd1cde_0.swift"
  },
  {
    "conversation_hash": "69cb5dcf8eb0ae5b0278813c9a567a02",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "type\n  GameInput = ...\n  GameState = ...\n  Frame = int\n\n  SerializedGameState = string\n\n  GameLogic = ref object\n    state: GameState\n    advanceFrame: proc (g: GameLogic, input: GameInput)\n\n  GameStateContainer = ref object\n    frame: Frame\n    state: SerializedGameState\n\n  RollbackNetcode = ref object\n    gameStateContainerList: seq[GameStateContainer]\n    currentFrame: Frame\n    gameLogic: GameLogic\n    serializeState: proc (g: GameState): SerializedGameState\n    deserializeState: proc (s: SerializedGameState): GameState\n\nproc newRollbackNetcode(advanceFrame: proc (g: GameLogic, input: GameInput),\n                        serializeState: proc (g: GameState): SerializedGameState,\n                        deserializeState: proc (s: SerializedGameState): GameState): RollbackNetcode =\n  result = RollbackNetcode(\n    gameStateContainerList: @[],\n    currentFrame: 0,\n    gameLogic: GameLogic(state: GameState(), advanceFrame: advanceFrame),\n    serializeState: serializeState,\n    deserializeState: deserializeState\n  )\n\nproc advanceGame*(rollbackNetcode: RollbackNetcode, input: GameInput) =\n  rollbackNetcode.gameLogic.advanceFrame(input)\n  rollbackNetcode.currentFrame += 1\n  let newSerializedState = rollbackNetcode.serializeState(rollbackNetcode.gameLogic.state)\n  rollbackNetcode.gameStateContainerList.add(GameStateContainer(frame: rollbackNetcode.currentFrame, state: newSerializedState))\n\nproc rollbackTo*(rollbackNetcode: RollbackNetcode, rollbackTargetFrame: Frame) =\n  let gameStateContainerList = rollbackNetcode.gameStateContainerList\n  var rollbackIndex: int\n\n  for i in 0 ..< gameStateContainerList.len:\n    if gameStateContainerList[i].frame == rollbackTargetFrame:\n      rollbackIndex = i\n      break\n  rollbackNetcode.gameLogic.state = rollbackNetcode.deserializeState(gameStateContainerList[rollbackIndex].state)\n\nproc rollbackAndAdvance*(rollbackNetcode: RollbackNetcode, rollbackTargetFrame: Frame, input: GameInput) =\n  rollbackNetcode.rollbackTo(rollbackTargetFrame)\n\n  for i in (rollbackTargetFrame + 1) ..< rollbackNetcode.currentFrame:\n    rollbackNetcode.advanceGame(input)",
    "filename": "69cb5dcf8eb0ae5b0278813c9a567a02_0.swift"
  },
  {
    "conversation_hash": "3438b7e4a7a8f06a47e9ceb593876b3f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "strutils"
    ],
    "code": "import strutils, times, sockets\n\nconst\n  syncPort = 55555\n\ntype\n  SyncMsg = tuple[senderId: string; localTs: string; remoteTs: string]\n\nproc syncTime(senderId: string, hostPortPairs: seq[tuple[string, int]]): Time =\n  let sock = newSocket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)\n  sock.setOption(SOL_SOCKET, SO_REUSEADDR, true)\n  sock.bind(INADDR_ANY, syncPort)\n  var remoteTss = @[0, 0, 0]  # store the three latest remote timestamps\n  \n  for host, port in hostPortPairs:\n    let msg = (senderId, $now().epochMillis, \"\")\n    sock.sendTo(host, port, msg.serialize())\n  \n  for i in 0 ..< hostPortPairs.len:\n    let bytes = sock.receive().payload\n    let (senderId, localTs, remoteTs) = SyncMsg.deserialize(bytes)\n    let remoteTsMs = parseFloat(remoteTs)\n    remoteTss[i] = remoteTsMs\n  \n  let correctedTsMs = now().epochMillis + (average(remoteTss).round - now().epochMillis) div 2\n  return epochMillisToTime(correctedTsMs)",
    "filename": "3438b7e4a7a8f06a47e9ceb593876b3f_0.swift"
  },
  {
    "conversation_hash": "e36d95534b6ffe7b2d746a95001d85d6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let myButton = UIButton(frame: CGRect(x: 0, y: 0, width: 100, height: 50))\nmyButton.setTitle(\"Meu botão\", for: .normal)\nmyButton.backgroundColor = .blue\nmyButton.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\nself.view.addSubview(myButton)",
    "filename": "e36d95534b6ffe7b2d746a95001d85d6_0.swift"
  },
  {
    "conversation_hash": "10dbd8b4d80871fdec5a87ec7e02994b",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "node {\n  input: \"X\"\n  output: \"Y\"\n  op_type: \"Cast\"\n  attribute {\n    name: \"to\"\n    i: 1\n  }\n}",
    "filename": "10dbd8b4d80871fdec5a87ec7e02994b_0.swift"
  },
  {
    "conversation_hash": "10dbd8b4d80871fdec5a87ec7e02994b",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "node {\n  input: \"X\"\n  output: \"Y\"\n  op_type: \"Cast\"\n  attribute {\n    name: \"to\"\n    i: 1\n  }\n  attribute {\n    name: \"saturate\"\n    i: 1\n  }\n}",
    "filename": "10dbd8b4d80871fdec5a87ec7e02994b_1.swift"
  },
  {
    "conversation_hash": "10dbd8b4d80871fdec5a87ec7e02994b",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "node {\n  input: \"X\"\n  output: \"Y\"\n  op_type: \"Tanh\"\n}",
    "filename": "10dbd8b4d80871fdec5a87ec7e02994b_2.swift"
  },
  {
    "conversation_hash": "b5f99e51d991831195671e28b95ab1ed",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "const where = {\n  mailingId,\n  ...(filter ? { ...filter } : {}),\n  payload: {\n    mailingSendId: {\n      equals: SOME_VALUE\n    }\n  }\n}",
    "filename": "b5f99e51d991831195671e28b95ab1ed_0.swift"
  },
  {
    "conversation_hash": "86786e1dd2e1730ae852d0c857fc6f23",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "Page({\n    data: {\n        content: '小容器内容'\n    }\n})",
    "filename": "86786e1dd2e1730ae852d0c857fc6f23_2.swift"
  },
  {
    "conversation_hash": "bbf66562bc2c625a2c7d6b096d202c1f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "[\n  { item: \"A\", count: 10 },\n  { item: \"B\", count: 20 },\n  { item: \"C\", count: 15 },\n  { item: \"D\", count: 5 },\n  { item: \"E\", count: 25 }\n]",
    "filename": "bbf66562bc2c625a2c7d6b096d202c1f_0.swift"
  },
  {
    "conversation_hash": "4b99cf81435212eda63965c0b73d42d6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n    let cell = tableView.cellForRow(at: indexPath)\n    let datePicker = UIDatePicker()\n    datePicker.addTarget(self, action: #selector(datePickerValueChanged(_:)), for: .valueChanged)\n    cell?.addSubview(datePicker)\n}\n\n@objc func datePickerValueChanged(_ sender: UIDatePicker) {\n    // Handle date picker value changed event\n}",
    "filename": "4b99cf81435212eda63965c0b73d42d6_0.swift"
  },
  {
    "conversation_hash": "4b99cf81435212eda63965c0b73d42d6",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "class DatePickerTableViewCell: UITableViewCell {\n\n    // Это свойство будет отвечать за наш date picker\n    let datePicker: UIDatePicker = {\n        let picker = UIDatePicker()\n        picker.datePickerMode = .date\n        picker.preferredDatePickerStyle = .wheels\n        return picker\n    }()\n    \n    // Сюда можно будет передавать текущую дату\n    var currentDate: Date? {\n        didSet {\n            if let date = currentDate {\n                datePicker.date = date\n            }\n        }\n    }\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        // Добавим наш date picker на ячейку как подпредставление\n        contentView.addSubview(datePicker)\n        \n        // Укажите свойство translatesAutoresizingMaskIntoConstraints как false, чтобы использовать автопресеты констрейнтов\n        datePicker.translatesAutoresizingMaskIntoConstraints = false\n        \n        // Добавляем констрейнты для date picker\n        datePicker.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16).isActive = true\n        datePicker.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8).isActive = true\n        datePicker.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16).isActive = true\n        datePicker.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8).isActive = true\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n}",
    "filename": "4b99cf81435212eda63965c0b73d42d6_1.swift"
  },
  {
    "conversation_hash": "4b99cf81435212eda63965c0b73d42d6",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n    let cell = DatePickerTableViewCell(style: .default, reuseIdentifier: \"datePickerCell\")\n    cell.currentDate = Date()\n    return cell\n}",
    "filename": "4b99cf81435212eda63965c0b73d42d6_2.swift"
  },
  {
    "conversation_hash": "4b99cf81435212eda63965c0b73d42d6",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "override func viewDidLoad() {\n    super.viewDidLoad()\n\n    // Настроить ScrollView и PageControl\n    scrollView.isPagingEnabled = true\n    scrollView.contentSize = CGSize(width: view.bounds.width * CGFloat(pages.count), height: scrollView.bounds.height)\n    scrollView.showsHorizontalScrollIndicator = false\n    scrollView.delegate = self\n\n    pageControl.numberOfPages = pages.count\n    pageControl.currentPage = 0\n\n    // Добавить Onboarding Pages как дочерние контроллеры ScrollView\n    for (index, page) in pages.enumerated() {\n        addChild(page)\n        page.didMove(toParent: self)\n        scrollView.addSubview(page.view)\n\n        // Установить фрейм страницы\n        page.view.frame = CGRect(x: view.bounds.width * CGFloat(index), y: 0, width: scrollView.bounds.width, height: scrollView.bounds.height)\n    }\n}",
    "filename": "4b99cf81435212eda63965c0b73d42d6_7.swift"
  },
  {
    "conversation_hash": "4b99cf81435212eda63965c0b73d42d6",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "func scrollViewDidScroll(_ scrollView: UIScrollView) {\n    let currentPage = Int(floor(scrollView.contentOffset.x / scrollView.bounds.width))\n    pageControl.currentPage = currentPage\n}\n\nfunc scrollViewWillBeginDragging(_ scrollView: UIScrollView) {\n    contentOffset = scrollView.contentOffset.x\n}\n\nfunc scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {\n    let currentPage = Int(floor(scrollView.contentOffset.x / scrollView.bounds.width))\n    if currentPage > 0 && currentPage < pages.count - 1 {\n        if contentOffset < scrollView.contentOffset.x {\n            // Прокрутить вправо\n            pages[currentPage - 1].animateOut()\n        } else {\n            // Прокрутить влево\n            pages[currentPage + 1].animateOut()\n        }\n    }\n}",
    "filename": "4b99cf81435212eda63965c0b73d42d6_8.swift"
  },
  {
    "conversation_hash": "4b99cf81435212eda63965c0b73d42d6",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "func animateIn() {\n    // Настраиваем видимые элементы\n    imageView.transform = CGAffineTransform(scaleX: 0.2, y: 0.2)\n    imageView.alpha = 0\n\n    // Создаем анимации\n    UIView.animate(withDuration: 0.5, delay: 0.1, usingSpringWithDamping: 0.6, initialSpringVelocity: 0, options: [.curveEaseOut], animations: {\n        // Анимация появления\n        self.imageView.transform = .identity\n        self.imageView.alpha = 1\n    }, completion: nil)\n}\n\nfunc animateOut() {\n    // Настраиваем видимые элементы\n    titleLabel.alpha = 0\n    descriptionLabel.alpha = 0\n\n    // Создаем анимации\n    UIView.animate(withDuration: 0.3, animations: {\n        // Анимация исчезновения\n        self.titleLabel.alpha = 1\n        self.descriptionLabel.alpha = 1\n    }, completion: nil)\n}",
    "filename": "4b99cf81435212eda63965c0b73d42d6_10.swift"
  },
  {
    "conversation_hash": "4b99cf81435212eda63965c0b73d42d6",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "class OnboardingPageViewController: UIViewController {\n\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var descriptionLabel: UILabel!\n    @IBOutlet weak var imageView: UIImageView!\n\n    var titleText: String?\n    var descriptionText: String?\n    var imageName: String?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Настроить видимые элементы\n        titleLabel.text = titleText\n        descriptionLabel.text = descriptionText\n        imageView.image = UIImage(named: imageName ?? \"\")\n    }\n\n    // Вызывается, когда включают текущую страницу\n    func animateIn() {\n        // Анимации\n    }\n\n    // Вызывается, когда исключают текущую страницу\n    func animateOut() {\n        // Анимации\n    }\n\n}",
    "filename": "4b99cf81435212eda63965c0b73d42d6_11.swift"
  },
  {
    "conversation_hash": "4b99cf81435212eda63965c0b73d42d6",
    "code_index": 12,
    "language": "Swift",
    "libraries": [],
    "code": "let page1 = OnboardingPageViewController(nibName: \"OnboardingPageViewController\", bundle: nil)\npage1.titleText = \"Title 1\"\npage1.descriptionText = \"Description 1\"\npage1.imageName = \"image1\"\npages.append(page1)\n\nlet page2 = OnboardingPageViewController(nibName: \"OnboardingPageViewController\", bundle: nil)\npage2.titleText = \"Title 2\"\npage2.descriptionText = \"Description 2\"\npage2.imageName = \"image2\"\npages.append(page2)\n\nlet page3 = OnboardingPageViewController(nibName: \"OnboardingPageViewController\", bundle: nil)\npage3.titleText = \"Title 3\"\npage3.descriptionText = \"Description 3\"\npage3.imageName = \"image3\"\npages.append(page3)",
    "filename": "4b99cf81435212eda63965c0b73d42d6_12.swift"
  },
  {
    "conversation_hash": "4b99cf81435212eda63965c0b73d42d6",
    "code_index": 14,
    "language": "Swift",
    "libraries": [],
    "code": "func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\n    if let cell = collectionView.cellForItem(at: indexPath) {\n        let index = indexPath.row\n        // Выполнить действие, используя индекс ячейки\n    }\n}",
    "filename": "4b99cf81435212eda63965c0b73d42d6_14.swift"
  },
  {
    "conversation_hash": "4b99cf81435212eda63965c0b73d42d6",
    "code_index": 15,
    "language": "Swift",
    "libraries": [],
    "code": "// Создать экземпляр следующего контроллера\nlet nextViewController = MyNextViewController()\n\n// Перейти к следующему контроллеру\npresent(nextViewController, animated: true, completion: nil)",
    "filename": "4b99cf81435212eda63965c0b73d42d6_15.swift"
  },
  {
    "conversation_hash": "4b99cf81435212eda63965c0b73d42d6",
    "code_index": 16,
    "language": "Swift",
    "libraries": [],
    "code": "// Создать экземпляр UINavigationController и установить MyNextViewController как его корневой контроллер\nlet navigationController = UINavigationController(rootViewController: MyNextViewController())\n\n// Перейти к следующему контроллеру\npresent(navigationController, animated: true, completion: nil)",
    "filename": "4b99cf81435212eda63965c0b73d42d6_16.swift"
  },
  {
    "conversation_hash": "7eb83dee499d09ec6d9ca84099ed8e0c",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "var app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n})",
    "filename": "7eb83dee499d09ec6d9ca84099ed8e0c_1.swift"
  },
  {
    "conversation_hash": "730d859c5382460606a550ec879c5f98",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let createTableQuery = \"\"\"\nCREATE TABLE Users (\nid INTEGER PRIMARY KEY AUTOINCREMENT,\nname TEXT NOT NULL,\nage INTEGER NOT NULL\n);\n\"\"\"",
    "filename": "730d859c5382460606a550ec879c5f98_0.swift"
  },
  {
    "conversation_hash": "638880c40af4113cc5e0709f72217933",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "class MyClass {\n  replaceSelection(text: string): TextState {\n    /* code here */\n  }\n}",
    "filename": "638880c40af4113cc5e0709f72217933_2.swift"
  },
  {
    "conversation_hash": "d650deada6d321809f80a9ff7b1f1684",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "[\n  {\n    node: \"node1\",\n    results: [/* results for node1 */]\n  },\n  {\n    node: \"node2\",\n    results: [/* results for node2 */]\n  },\n  // and so on\n]",
    "filename": "d650deada6d321809f80a9ff7b1f1684_9.swift"
  },
  {
    "conversation_hash": "d650deada6d321809f80a9ff7b1f1684",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  data: [\n    {\n      node1: [/* results for node1 */]\n    },\n    {\n      node2: [/* results for node2 */]\n    },\n    // and so on\n  ]\n}",
    "filename": "d650deada6d321809f80a9ff7b1f1684_11.swift"
  },
  {
    "conversation_hash": "f4853358b4557b208d4cc05632cadfcf",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "func attackMonster(monsterHealth: Int) -> Bool {\n    let damage = Int.random(in: 10 ... 20)\n    monsterHealth -= damage\n    if monsterHealth <= 0 {\n        return true\n    } else {\n        return false\n    }\n}",
    "filename": "f4853358b4557b208d4cc05632cadfcf_1.swift"
  },
  {
    "conversation_hash": "9d8cda05746b754974cc6fd090c2d83c",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "DragonBones",
      "SpriteKit"
    ],
    "code": "import DragonBones\nimport SpriteKit\n\nclass GameScene: SKScene {\n    \n    private var dragon: DragonBonesNode!\n\n    override func didMove(to view: SKView) {\n        // Load DragonBones files\n        let factory = DragonBonesFactory.shared\n        factory.parseTextureAtlasData(textureAtlasData: SKTextureAtlas(named: \"dragon\").textureAtlasData)\n        factory.parseDragonBonesData(dragonBonesData: NSDataAsset(name: \"dragon\")!.data)\n\n        // Create DragonBonesNode\n        dragon = factory.buildArmatureNode(name: \"Dragon\")\n        dragon.position = CGPoint(x: frame.midX, y: frame.midY)\n        addChild(dragon)\n\n        // Play animation\n        dragon.animation.play(to: \"walk\", loop: true)\n    }\n\n    override func update(_ currentTime: TimeInterval) {\n        // Update DragonBones animation\n        dragon.animation.advanceTime(currentTime)\n    }\n}",
    "filename": "9d8cda05746b754974cc6fd090c2d83c_0.swift"
  },
  {
    "conversation_hash": "b17742e38f9dcdad942e690e4a3ba447",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n  return {\n    isSuspended: false\n  }\n}",
    "filename": "b17742e38f9dcdad942e690e4a3ba447_0.swift"
  },
  {
    "conversation_hash": "dd060fe73582328b71124b796a79e308",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, EventEmitter, Output } from '@angular/core';\nimport { EventService } from 'path-to-event-service';\n\n@Component({\n  selector: 'app-task-item',\n  template: `...`,\n})\nexport class TaskItemComponent {\n  constructor(private eventService: EventService) {}\n\n  emitEvent() {\n    this.eventService.emitEvent('Fire');\n  }\n}",
    "filename": "dd060fe73582328b71124b796a79e308_1.swift"
  },
  {
    "conversation_hash": "efef97373e33357d7ada140ac38dc584",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "export default {\n     data() {\n       return {\n         selectedData: 'data1',\n       }\n     },\n     // ...\n   }",
    "filename": "efef97373e33357d7ada140ac38dc584_11.swift"
  },
  {
    "conversation_hash": "0259d0681f204257aa40074397f4462d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "macros"
    ],
    "code": "import macros, strutils\n\n# Define a macro that takes a library name and caches its patterns at compile time\nmacro cacheGlobLib(libName: string): untyped =\n  let\n    cacheVar = libName & \"_patterns\"\n    patterns = lib.glob(libName)\n  if patterns.len > 0:\n    result = quote do:\n      var $cacheVar: seq[string]\n      if isNil($cacheVar):\n        $cacheVar = @[$(patterns.join(\"\\\", \\\"\"))]",
    "filename": "0259d0681f204257aa40074397f4462d_0.swift"
  },
  {
    "conversation_hash": "0259d0681f204257aa40074397f4462d",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "cacheGlobLib"
    ],
    "code": "import cacheGlobLib  # Include the macro definition\n\ncacheGlobLib(\"stdlib\")  # Cache patterns for the \"stdlib\" library\n\nproc searchFiles(): seq[string] =\n  var files: seq[string]\n  for pattern in stdlib_patterns:\n    files.addFiles(pattern)\n  return files\n\nlet myFiles = searchFiles()",
    "filename": "0259d0681f204257aa40074397f4462d_1.swift"
  },
  {
    "conversation_hash": "0860b867e8e6baf5e52422f4f37e9380",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "UIKit"
    ],
    "code": "import UIKit\n\nclass ViewController: UIViewController {\n    var scaleFactor: CGFloat = 1.0\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let pinchGesture = UIPinchGestureRecognizer(target: self, action: #selector(handlePinch(_:)))\n        view.addGestureRecognizer(pinchGesture)\n    }\n    \n    @objc func handlePinch(_ gesture: UIPinchGestureRecognizer) {\n        if gesture.state == .changed {\n            view.transform = view.transform.scaledBy(x: gesture.scale, y: gesture.scale)\n            gesture.scale = 1.0\n            scaleFactor *= gesture.scale\n        } else if gesture.state == .ended {\n            if scaleFactor < 1.0 {\n                UIView.animate(withDuration: 0.2, animations: {\n                    self.view.transform = CGAffineTransform.identity\n                })\n                scaleFactor = 1.0\n            }\n        }\n    }\n}",
    "filename": "0860b867e8e6baf5e52422f4f37e9380_0.swift"
  },
  {
    "conversation_hash": "d0b7f8fd5fd83f6bcaea93348bd64e4c",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    // ...\n    // Configuration options for the Android build\n    // ...\n}",
    "filename": "d0b7f8fd5fd83f6bcaea93348bd64e4c_1.swift"
  },
  {
    "conversation_hash": "e3fd1e17606e2ec7ba82489d4dad16f7",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "server {\n  ...\n  \n  location ~* \\.env {\n    return 404;\n  }\n  \n  ...\n}",
    "filename": "e3fd1e17606e2ec7ba82489d4dad16f7_0.swift"
  },
  {
    "conversation_hash": "350fce3a64ede2a0c7650b15cd36da7f",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "ForAll(\n    varDuplicateSuppliers,\n    Relate(\n        ThisRecord,\n        varDuplicateSuppliers[@Supplier]\n    )\n)",
    "filename": "350fce3a64ede2a0c7650b15cd36da7f_1.swift"
  },
  {
    "conversation_hash": "3b1043b0ba2cd0bd3522da462de08130",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "DropdownSearchWidget<String>(\n   label: 'Select an item',\n   items: ['Item 1', 'Item 2', 'Item 3'],\n   selectedItem: 'Item 1',\n   onChanged: (value) {\n      // Handle the selected item value\n   },\n),",
    "filename": "3b1043b0ba2cd0bd3522da462de08130_3.swift"
  },
  {
    "conversation_hash": "da24f3d66bcf6aa51136ea1da99a028f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "MyPage"
    ],
    "code": "import { createRouter, createWebHistory } from 'vue-router'\nimport MyPage from './page/MyPage.vue'\n\nconst routes = [\n  {\n    path: '/mypage',\n    component: MyPage\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n})\n\nexport default router",
    "filename": "da24f3d66bcf6aa51136ea1da99a028f_0.swift"
  },
  {
    "conversation_hash": "6296146d61d51e3bf50d43c298d61df6",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "methods: {\n  toggleFullscreen() {\n    const xTable = this.$refs.xTable\n    xTable.isFullscreen = !xTable.isFullscreen\n    xTable.recalculate()\n  }\n}",
    "filename": "6296146d61d51e3bf50d43c298d61df6_1.swift"
  },
  {
    "conversation_hash": "6296146d61d51e3bf50d43c298d61df6",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "methods: {\n  toggleFullscreen() {\n    const xTable = this.$refs.xTable\n    xTable.isFullscreen = !xTable.isFullscreen\n    xTable.recalculate()\n  }\n}",
    "filename": "6296146d61d51e3bf50d43c298d61df6_4.swift"
  },
  {
    "conversation_hash": "93cf8d600a2cae76a64ba15ad036d03d",
    "code_index": 2,
    "language": "Swift",
    "libraries": [
      "Flutter",
      "UIKit"
    ],
    "code": "import Flutter\nimport UIKit\n\npublic class MyPdfViewerPlugin: NSObject, FlutterPlugin {\n    public static func register(with registrar: FlutterPluginRegistrar) {\n        let channel = FlutterMethodChannel(name: \"my_pdf_viewer_plugin\", binaryMessenger: registrar.messenger())\n        let instance = MyPdfViewerPlugin()\n        registrar.addMethodCallDelegate(instance, channel: channel)\n    }\n\n    public func handle(_ call: FlutterMethodCall, result: @escaping FlutterResult) {\n        if call.method == \"loadPdf\" {\n            if let pdfPath = call.arguments as? [String: Any]? {\n                loadPdf(pdfPath: (pdfPath?[\"pdfPath\"] as? String)!)\n                result(nil)\n            } else {\n                result(FlutterError(code: \"INVALID_ARGUMENT\", message: \"PDF path cannot be null\", details: nil))\n            }\n        } else {\n            result(FlutterMethodNotImplemented)\n        }\n    }\n\n    private func loadPdf(pdfPath: String) {\n        if let url = URL(string: pdfPath) {\n            UIApplication.shared.open(url, options: [:], completionHandler: nil)\n        }\n    }\n}",
    "filename": "93cf8d600a2cae76a64ba15ad036d03d_2.swift"
  },
  {
    "conversation_hash": "93cf8d600a2cae76a64ba15ad036d03d",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "private func loadPdf(pdfPath: String) {\n    let tempDir = NSSearchPathForDirectoriesInDomains(.cachesDirectory, .userDomainMask, true)[0]\n    let tempFilePath = (tempDir as NSString).appendingPathComponent(\"temp.pdf\")\n    \n    if FileManager.default.fileExists(atPath: tempFilePath) {\n        try? FileManager.default.removeItem(atPath: tempFilePath)\n    }\n    \n    if FileManager.default.copyItem(atPath: pdfPath, toPath: tempFilePath) {\n        let controller = UIDocumentInteractionController(url: URL(fileURLWithPath: tempFilePath))\n        controller.presentPreview(animated: true)\n    }\n}",
    "filename": "93cf8d600a2cae76a64ba15ad036d03d_5.swift"
  },
  {
    "conversation_hash": "93cf8d600a2cae76a64ba15ad036d03d",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "private func loadPdf(pdfPath: String) {\n    let fileURL = URL(fileURLWithPath: pdfPath)\n    \n    if let document = PDFDocument(url: fileURL) {\n        let viewController = PDFViewController(document: document)\n        \n        if let navigationController = UIApplication.shared.delegate?.window??.rootViewController as? UINavigationController {\n            navigationController.pushViewController(viewController, animated: true)\n        }\n    }\n}",
    "filename": "93cf8d600a2cae76a64ba15ad036d03d_7.swift"
  },
  {
    "conversation_hash": "b976414b9a78ed8dc5f2ab647eb4b97a",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "export default {\n  data() {\n    return {\n      prop1: value1,\n      prop2: value2,\n      // 最后一个属性后面不需要逗号\n    }\n  }\n}",
    "filename": "b976414b9a78ed8dc5f2ab647eb4b97a_3.swift"
  },
  {
    "conversation_hash": "b8a952a40e5e63484498a063ca8f4c18",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "Word: this, Count: 2\nWord: text, Count: 2\nWord: is, Count: 1\nWord: a, Count: 1\nWord: sample, Count: 1",
    "filename": "b8a952a40e5e63484498a063ca8f4c18_1.swift"
  },
  {
    "conversation_hash": "2d675b072cfdfe26116c883c725d6eda",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "series: [{\n  data: [{\n    name: 'Task 1',\n    start: Date.UTC(2021, 0, 1),\n    end: Date.UTC(2021, 0, 5),\n    actualStart: Date.UTC(2021, 0, 2),\n    actualEnd: Date.UTC(2021, 0, 4)\n  }, {\n    name: 'Task 2',\n    start: Date.UTC(2021, 0, 10),\n    end: Date.UTC(2021, 0, 15),\n    actualStart: Date.UTC(2021, 0, 11),\n    actualEnd: Date.UTC(2021, 0, 14)\n  }],\n  dataLabels: {\n    enabled: true,\n    format: '{point.name}: {point.start:%Y-%m-%d} - {point.end:%Y-%m-%d}\\n' + \n            'Actual: {point.actualStart:%Y-%m-%d} - {point.actualEnd:%Y-%m-%d}'\n  }\n}]",
    "filename": "2d675b072cfdfe26116c883c725d6eda_2.swift"
  },
  {
    "conversation_hash": "2008c6809662ec97493a32cb54d9d76f",
    "code_index": 18,
    "language": "Swift",
    "libraries": [],
    "code": "datasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Category {\n  id    Int    @id @default(autoincrement())\n  name  String\n  posts Post[]\n}\n\nmodel Post {\n  id          Int      @id @default(autoincrement())\n  title       String\n  content     String\n  categoryId  Int\n  category    Category @relation(fields: [categoryId], references: [id])\n  views       PostView[]\n}\n\nmodel PostView {\n  id        Int     @id @default(autoincrement())\n  postId    Int\n  post      Post    @relation(fields: [postId], references: [id])\n  viewedAt  DateTime\n}",
    "filename": "2008c6809662ec97493a32cb54d9d76f_18.swift"
  },
  {
    "conversation_hash": "2008c6809662ec97493a32cb54d9d76f",
    "code_index": 19,
    "language": "Swift",
    "libraries": [],
    "code": "model PostView {\n  id        Int      @id @default(autoincrement())\n  postId    Int\n  post      Post     @relation(fields: [postId], references: [id])\n  viewedAt  DateTime @default(now())\n}",
    "filename": "2008c6809662ec97493a32cb54d9d76f_19.swift"
  },
  {
    "conversation_hash": "2008c6809662ec97493a32cb54d9d76f",
    "code_index": 20,
    "language": "Swift",
    "libraries": [],
    "code": "model PostView {\n  id        Int      @id @default(autoincrement())\n  postId    Int\n  post      Post     @relation(fields: [postId], references: [id])\n  viewedAt  DateTime @default(now())\n}",
    "filename": "2008c6809662ec97493a32cb54d9d76f_20.swift"
  },
  {
    "conversation_hash": "2008c6809662ec97493a32cb54d9d76f",
    "code_index": 22,
    "language": "Swift",
    "libraries": [],
    "code": "model PostView {\n  id        Int      @id @default(autoincrement())\n  postId    Int\n  post      Post     @relation(fields: [postId], references: [id])\n  viewedAt  DateTime @default(now()) @db.DateTime\n}",
    "filename": "2008c6809662ec97493a32cb54d9d76f_22.swift"
  },
  {
    "conversation_hash": "cf6981de4a6085137ff8699819159092",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "return Scaffold(\n  appBar: appBarWidget(context),\n  drawer: DrawerWidget(),\n  body: PageView(\n    children: [\n      Container(\n        color: Colors.white,\n        child: HomeScreen(),\n      ),\n      Container(\n        color: Colors.white,\n        child: Creditcard(),\n      ),\n    ],\n  ),\n);",
    "filename": "cf6981de4a6085137ff8699819159092_3.swift"
  },
  {
    "conversation_hash": "cf6981de4a6085137ff8699819159092",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "return Scaffold(\n  appBar: appBarWidget(context),\n  drawer: DrawerWidget(),\n  body: PageView(\n    children: [\n      Container(\n        color: Colors.white,\n        child: HomeScreen(),\n      ),\n      Container(\n        color: Colors.white,\n        child: Creditcard(),\n      ),\n    ],\n  ),\n);",
    "filename": "cf6981de4a6085137ff8699819159092_4.swift"
  },
  {
    "conversation_hash": "cf6981de4a6085137ff8699819159092",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "return Scaffold(\n  appBar: AppBar(\n    title: Text(\"My App Title\"),\n  ),\n  drawer: DrawerWidget(),\n  body: PageView(\n    children: [\n      Container(\n        color: Colors.white,\n        child: HomeScreen(),\n      ),\n      Container(\n        color: Colors.white,\n        child: Creditcard(),\n      ),\n    ],\n  ),\n);",
    "filename": "cf6981de4a6085137ff8699819159092_5.swift"
  },
  {
    "conversation_hash": "cf6981de4a6085137ff8699819159092",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "return Scaffold(\n  appBar: appBarWidget(context),\n  drawer: DrawerWidget(),\n  body: PageView(\n    children: [\n      Container(\n        color: Colors.white,\n        child: HomeScreen(),\n      ),\n      Container(\n        color: Colors.white,\n        child: Creditcard(),\n      ),\n    ],\n  ),\n);",
    "filename": "cf6981de4a6085137ff8699819159092_7.swift"
  },
  {
    "conversation_hash": "0355ff2cca00d5c00e034ffd462b9dec",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "model Post {\n  id    Int    @id @default(autoincrement())\n  title String\n  content String\n}",
    "filename": "0355ff2cca00d5c00e034ffd462b9dec_0.swift"
  },
  {
    "conversation_hash": "77467ae43ef60a7dbdc48e065003ae58",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "showScript(script: Script) {\n  ScriptModule.updateScriptModals({\n    ...ScriptModule.scriptModals,\n    detailsScriptDialog: true,\n    script\n  })\n}",
    "filename": "77467ae43ef60a7dbdc48e065003ae58_1.swift"
  },
  {
    "conversation_hash": "45434e7cc23b6c9275ef180999b7b64f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "class Pokemon {\n    var name: String\n    var health: Int\n    var level: Int\n    // ... other properties and methods\n}\n\nclass Trainer {\n    var name: String\n    var pokemonTeam: [Pokemon]\n    // ... other properties and methods\n}\n\nclass Item {\n    var name: String\n    var effect: String\n    // ... other properties and methods\n}",
    "filename": "45434e7cc23b6c9275ef180999b7b64f_0.swift"
  },
  {
    "conversation_hash": "45434e7cc23b6c9275ef180999b7b64f",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "func performAttack(attacker: Pokemon, defender: Pokemon) {\n    // Calculate the attack power, considering attacker's level and move power\n    let attackPower = attacker.level * attacker.move.power\n\n    // Calculate damage based on attacker's attack power and defender's defense\n    let damage = attackPower - defender.defense\n\n    // Apply damage to defender's health\n    defender.health -= damage\n}",
    "filename": "45434e7cc23b6c9275ef180999b7b64f_1.swift"
  },
  {
    "conversation_hash": "45434e7cc23b6c9275ef180999b7b64f",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "enum Direction {\n    case up, down, left, right\n}\n\nclass GameWorld {\n    var currentLocation: Location\n\n    func movePlayer(direction: Direction) {\n        // Update the player's coordinates based on the direction\n        switch direction {\n        case .up:\n            currentLocation.y -= 1\n        case .down:\n            currentLocation.y += 1\n        case .left:\n            currentLocation.x -= 1\n        case .right:\n            currentLocation.x += 1\n        }\n\n        // Check for collision or interaction with objects or other NPCs\n        // ...\n    }\n}",
    "filename": "45434e7cc23b6c9275ef180999b7b64f_2.swift"
  },
  {
    "conversation_hash": "45434e7cc23b6c9275ef180999b7b64f",
    "code_index": 3,
    "language": "Swift",
    "libraries": [
      "SpriteKit"
    ],
    "code": "import SpriteKit\n\nclass GameScene: SKScene {\n    // Add UI elements, graphics, and animations using SpriteKit nodes\n    // ...\n}\n\n// Set up the game scene and view controller\nlet gameScene = GameScene(size: CGSize(width: 640, height: 480))\nlet gameView = SKView(frame: CGRect(x: 0, y: 0, width: 640, height: 480))\ngameView.presentScene(gameScene)",
    "filename": "45434e7cc23b6c9275ef180999b7b64f_3.swift"
  },
  {
    "conversation_hash": "45434e7cc23b6c9275ef180999b7b64f",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "class PokemonSprite: SKSpriteNode {\n    func performAttackAnimation() {\n        // Implement animation logic for Pokémon attacks\n        // ...\n    }\n}\n\nclass PlayerSprite: SKSpriteNode {\n    func move(direction: Direction) {\n        // Implement animation and movement logic for the player sprite\n        // ...\n    }\n}",
    "filename": "45434e7cc23b6c9275ef180999b7b64f_4.swift"
  },
  {
    "conversation_hash": "45434e7cc23b6c9275ef180999b7b64f",
    "code_index": 5,
    "language": "Swift",
    "libraries": [
      "storage"
    ],
    "code": "class GameDataManager {\n    static let shared = GameDataManager()\n\n    func saveGame() {\n        // Save game progress using UserDefaults or Core Data\n        // ...\n    }\n\n    func loadGame() {\n        // Load game progress from storage\n        // ...\n    }\n}",
    "filename": "45434e7cc23b6c9275ef180999b7b64f_5.swift"
  },
  {
    "conversation_hash": "4ab04624192d5d3511cab6495da83ae8",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "UIKit"
    ],
    "code": "import UIKit\n\nclass ViewController: UIViewController {\n\n    @IBAction func shareButtonTapped(_ sender: UIButton) {\n        let text = \"Hello, World!\"\n        let image = UIImage(named: \"exampleImage\")\n        let url = URL(string: \"https://www.example.com\")\n        \n        var itemsToShare = [Any]()\n        if let text = text {\n            itemsToShare.append(text)\n        }\n        if let image = image {\n            itemsToShare.append(image)\n        }\n        if let url = url {\n            itemsToShare.append(url)\n        }\n        \n        let activityViewController = UIActivityViewController(activityItems: itemsToShare, applicationActivities: nil)\n        activityViewController.popoverPresentationController?.sourceView = sender\n\n        present(activityViewController, animated: true, completion: nil)\n    }\n}",
    "filename": "4ab04624192d5d3511cab6495da83ae8_0.swift"
  },
  {
    "conversation_hash": "f0ca90e151e434b87ab7cd01c53d23bf",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n  return {\n    isOpen: false\n  }\n}",
    "filename": "f0ca90e151e434b87ab7cd01c53d23bf_0.swift"
  },
  {
    "conversation_hash": "d9ea72e3fabf14d05ce74a9df5ac8eca",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "the"
    ],
    "code": "let\n    // Specify the start date and number of days for the date range\n    StartDate = #date(2022, 1, 1),\n    NumberOfDays = 365,\n\n    // Generate a list of dates starting from the start date\n    DateList = List.Dates(StartDate, NumberOfDays, #duration(1, 0, 0, 0)),\n\n    // Convert the list of dates into a table\n    DateTable = Table.FromList(DateList, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Renamed Columns\" = Table.RenameColumns(DateTable,{{\"Column1\", \"Date\"}}),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"Date\", type date}})\nin\n    #\"Changed Type\"",
    "filename": "d9ea72e3fabf14d05ce74a9df5ac8eca_0.swift"
  },
  {
    "conversation_hash": "7a5dd86ae7ca0a486eb4c452c125727f",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "var array = arrayOf(1, 2, 3) // исходный массив\nval newItem = 4 // новый элемент для добавления\n\narray += newItem // добавляем новый элемент в массив\n\nprintln(array.contentToString()) // выводим массив: [1, 2, 3, 4]",
    "filename": "7a5dd86ae7ca0a486eb4c452c125727f_2.swift"
  },
  {
    "conversation_hash": "7a5dd86ae7ca0a486eb4c452c125727f",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "var array = arrayOf(1, 2, 3) // исходный массив\nval newItem = 4 // новый элемент для добавления\n\narray = array.plus(newItem) // добавляем новый элемент в массив и переопределяем его\n\nprintln(array.contentToString()) // выводим массив: [1, 2, 3, 4]",
    "filename": "7a5dd86ae7ca0a486eb4c452c125727f_3.swift"
  },
  {
    "conversation_hash": "6ed4e4183751dc4f3e2a01679feeaa0c",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "Table"
    ],
    "code": "<template>\n  <div>\n    <Table :items=\"data\" />\n  </div>\n</template>\n\n<script>\nimport Table from './Table.vue'\n\nexport default {\n  components: {\n    Table\n  },\n  data() {\n    return {\n      data: [\n        { id: 1, name: 'John Doe', age: 25 },\n        { id: 2, name: 'Jane Smith', age: 30 },\n        { id: 3, name: 'Bob Johnson', age: 40 }\n      ]\n    }\n  }\n}\n</script>",
    "filename": "6ed4e4183751dc4f3e2a01679feeaa0c_1.swift"
  },
  {
    "conversation_hash": "a2b4c8836ca46130280e119220ca4711",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "@objc func handlePanGesture(_ gestureRecognizer: UIPanGestureRecognizer) {\n    let translation = gestureRecognizer.translation(in: webView)\n    let velocity = gestureRecognizer.velocity(in: webView)\n\n    if gestureRecognizer.state == .ended {\n        if translation.x < -200 && velocity.x < -500 {\n            // 手势快速向左滑动，并且滑动的距离超过阈值，则执行删除操作\n            \n            // 在这里执行删除操作，比如跳转回上一个页面或关闭当前页面\n            // 调用webView.goBack()来回到上一个页面\n            // 或者使用popViewController等方法关闭当前页面\n        }\n    }\n}",
    "filename": "a2b4c8836ca46130280e119220ca4711_5.swift"
  },
  {
    "conversation_hash": "a2b4c8836ca46130280e119220ca4711",
    "code_index": 13,
    "language": "Swift",
    "libraries": [],
    "code": "@objc func handlePanGesture(_ gestureRecognizer: UIPanGestureRecognizer) {\n    let translation = gestureRecognizer.translation(in: webView)\n    let velocity = gestureRecognizer.velocity(in: webView)\n\n    if gestureRecognizer.state == .ended {\n        if translation.x < -200 && velocity.x < -500 {\n            // 手势快速向左滑动，并且滑动的距离超过阈值，则执行删除操作\n            \n            // 在这里执行删除操作，比如跳转回上一个页面或关闭当前页面\n            // 调用webView.goBack()来回到上一个页面\n            // 或者使用popViewController等方法关闭当前页面\n        }\n    }\n}",
    "filename": "a2b4c8836ca46130280e119220ca4711_13.swift"
  },
  {
    "conversation_hash": "011c19dcc76297a358ac5fd655e85cfe",
    "code_index": 2,
    "language": "Swift",
    "libraries": [
      "UIKit",
      "WebKit"
    ],
    "code": "import UIKit\nimport WebKit\n\nclass ViewController: UIViewController, WKNavigationDelegate {\n    \n    var webView: WKWebView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let url = Bundle.main.url(forResource: \"your_html_file_name\", withExtension: \"html\")!\n        webView = WKWebView(frame: view.bounds)\n        webView.navigationDelegate = self\n        view.addSubview(webView)\n        \n        webView.loadFileURL(url, allowingReadAccessTo: url)\n    }\n    \n    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {\n        let highlightJS = try! String(contentsOfFile: Bundle.main.path(forResource: \"highlight.js\", ofType: \"\")!, encoding: .utf8)\n        let script = WKUserScript(source: highlightJS, injectionTime: .atDocumentEnd, forMainFrameOnly: true)\n        webView.configuration.userContentController.addUserScript(script)\n\n        let highlightCSS = try! String(contentsOfFile: Bundle.main.path(forResource: \"highlight.css\", ofType: \"\")!, encoding: .utf8)\n        let styleScript = WKUserScript(source: \"var style = document.createElement('style'); style.innerHTML = '\\(highlightCSS)'; document.head.appendChild(style);\", injectionTime: .atDocumentEnd, forMainFrameOnly: true)\n        webView.configuration.userContentController.addUserScript(styleScript)\n        \n        webView.evaluateJavaScript(\"hljs.initHighlighting()\", completionHandler: nil)\n    }\n}",
    "filename": "011c19dcc76297a358ac5fd655e85cfe_2.swift"
  },
  {
    "conversation_hash": "2d567c285446f2582c69ad139d33ee30",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    source = Excel.CurrentWorkbook(){[Name=\"UserData\"]}[Content],\n    retentionRateNextDay = calculateNextDayRetentionRate(source, \"UserID\", \"JoinDate\"),\n    retentionRateThreeDay = calculateThreeDayRetentionRate(source, \"UserID\", \"JoinDate\"),\n    retentionRateSevenDay = calculateSevenDayRetentionRate(source, \"UserID\", \"JoinDate\")\nin\n    retentionRateNextDay, retentionRateThreeDay, retentionRateSevenDay",
    "filename": "2d567c285446f2582c69ad139d33ee30_1.swift"
  },
  {
    "conversation_hash": "69084b28fbb2d0a66bcba6477b495a24",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  // Your form code here\n  child: SVGButton(\n    onTap: () {\n      // Handle tap here\n    },\n    svgPath: 'assets/your_image.svg',\n    width: 200,  // Set the width of the SVG\n    height: 200, // Set the height of the SVG\n  ),\n),",
    "filename": "69084b28fbb2d0a66bcba6477b495a24_5.swift"
  },
  {
    "conversation_hash": "991561d349e80e1b54364af2cff3769b",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n  return {\n    cardData: [], // Your existing card data array\n    selectedItems: []\n  }\n}",
    "filename": "991561d349e80e1b54364af2cff3769b_1.swift"
  },
  {
    "conversation_hash": "991561d349e80e1b54364af2cff3769b",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n  return {\n    showForm: false\n  }\n}",
    "filename": "991561d349e80e1b54364af2cff3769b_6.swift"
  },
  {
    "conversation_hash": "991561d349e80e1b54364af2cff3769b",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n  return {\n    showForm: false,\n    formData: {\n      bottleCap: \"\",\n      bottleBody: \"\",\n      capacity: null,\n      image: null\n    }\n  }\n}",
    "filename": "991561d349e80e1b54364af2cff3769b_10.swift"
  },
  {
    "conversation_hash": "991561d349e80e1b54364af2cff3769b",
    "code_index": 13,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n  return {\n    showForm: false\n  }\n}",
    "filename": "991561d349e80e1b54364af2cff3769b_13.swift"
  },
  {
    "conversation_hash": "55f44757476824c0ccae5bf8c6a66c80",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "export default {\n  data () {\n    return {\n      value: null\n    }\n  },\n  methods: {\n    handleInput (newValue) {\n      if (newValue < 0) {\n        this.value = 0;\n      }\n    }\n  }\n}",
    "filename": "55f44757476824c0ccae5bf8c6a66c80_2.swift"
  },
  {
    "conversation_hash": "55f44757476824c0ccae5bf8c6a66c80",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "export default {\n  data () {\n    return {\n      capacity1: null\n    }\n  },\n  methods: {\n    handleInput (newValue) {\n      if (newValue < 0) {\n        this.capacity1 = 0;\n      }\n    }\n  }\n}",
    "filename": "55f44757476824c0ccae5bf8c6a66c80_4.swift"
  },
  {
    "conversation_hash": "ae847c15b1cd6c0dc955f9fcf1357356",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "[\n  { title: '6-5', dataIndex: '6-5' },\n  { title: '6-6', dataIndex: '6-6' },\n  { title: '6-7', dataIndex: '6-7' }\n]",
    "filename": "ae847c15b1cd6c0dc955f9fcf1357356_1.swift"
  },
  {
    "conversation_hash": "5b291e3c13980ada283f1bea667e1625",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "Row(\n  mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n  children: [\n    Icon(Icons.icon1),\n    Icon(Icons.icon2),\n  ],\n)",
    "filename": "5b291e3c13980ada283f1bea667e1625_1.swift"
  },
  {
    "conversation_hash": "43a663e3f17dd06d0fe49c9118e098d8",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "const props = defineProps({\n  childData: {\n    type: Number,\n    required: true\n  }\n})",
    "filename": "43a663e3f17dd06d0fe49c9118e098d8_0.swift"
  },
  {
    "conversation_hash": "798a2a4af618a1bc892a1a525b483985",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  xtype: 'grid',\n  layout: 'border',\n  // 其他配置项...\n}",
    "filename": "798a2a4af618a1bc892a1a525b483985_5.swift"
  },
  {
    "conversation_hash": "798a2a4af618a1bc892a1a525b483985",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  xtype: 'grid',\n  layout: 'border',\n  scrollable: 'horizontal',\n  // 其他配置项...\n}",
    "filename": "798a2a4af618a1bc892a1a525b483985_6.swift"
  },
  {
    "conversation_hash": "798a2a4af618a1bc892a1a525b483985",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  text: '加锁列1',\n  dataIndex: 'column1',\n  width: 100,\n  height: 300, // 设置和不加锁列的高度一致\n  locked: true, // 加锁列\n  // 其他配置项...\n}",
    "filename": "798a2a4af618a1bc892a1a525b483985_7.swift"
  },
  {
    "conversation_hash": "a77605567d77ed596af14bd58ff95cca",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Flickable {\n    // ...\n    contentWidth: childItem.width\n    contentHeight: childItem.height\n    // ...\n}",
    "filename": "a77605567d77ed596af14bd58ff95cca_0.swift"
  },
  {
    "conversation_hash": "a77605567d77ed596af14bd58ff95cca",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "ScrollBar {\n    // ...\n    minimumValue: 0\n    maximumValue: flickable.contentHeight - flickable.height\n    // ...\n}",
    "filename": "a77605567d77ed596af14bd58ff95cca_1.swift"
  },
  {
    "conversation_hash": "a77605567d77ed596af14bd58ff95cca",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "ScrollBar {\n    // ...\n    position: flickable.contentY\n    // ...\n}",
    "filename": "a77605567d77ed596af14bd58ff95cca_2.swift"
  },
  {
    "conversation_hash": "a77605567d77ed596af14bd58ff95cca",
    "code_index": 4,
    "language": "Swift",
    "libraries": [
      "QtQuick",
      "QtQuick.Controls"
    ],
    "code": "import QtQuick 2.15\nimport QtQuick.Controls 2.15\n\nScrollView {\n    width: 400\n    height: 300\n\n    Flickable {\n        contentWidth: column.width\n        contentHeight: column.height\n\n        Column {\n            id: column\n\n            // 添加一些内容...\n        }\n    }\n}",
    "filename": "a77605567d77ed596af14bd58ff95cca_4.swift"
  },
  {
    "conversation_hash": "a77605567d77ed596af14bd58ff95cca",
    "code_index": 5,
    "language": "Swift",
    "libraries": [
      "QtQuick",
      "QtQuick.Controls"
    ],
    "code": "import QtQuick 2.15\nimport QtQuick.Controls 2.15\n\nScrollView {\n    width: 400\n    height: 300\n\n    Flickable {\n        id: flickable\n        contentWidth: column.width\n        contentHeight: column.height\n\n        Column {\n            id: column\n\n            // 添加一些内容...\n        }\n    }\n\n    ScrollBar.vertical: ScrollBar {\n        id: scrollBar\n        size: flickable.height / flickable.contentHeight\n        position: flickable.contentY / (flickable.contentHeight - flickable.height + scrollBar.height)\n\n        onPositionChanged: {\n            flickable.contentY = position * (flickable.contentHeight - flickable.height + scrollBar.height)\n        }\n    }\n}",
    "filename": "a77605567d77ed596af14bd58ff95cca_5.swift"
  },
  {
    "conversation_hash": "fc46f88726f93773393b0dcb88872ce6",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "methods: {\n  addSku() {\n    // 处理点击卡片的逻辑\n  }\n}",
    "filename": "fc46f88726f93773393b0dcb88872ce6_1.swift"
  },
  {
    "conversation_hash": "09ff2359b17ffd04152a8f09978aa0e0",
    "code_index": 13,
    "language": "Swift",
    "libraries": [],
    "code": "const schema = buildSchema(`\n  type User {\n    id: ID!\n    name: String!\n    email: String!\n  }\n\n  type Query {\n    login(email: String!, password: String!): String\n    getUser(token: String!): User\n  }\n`);",
    "filename": "09ff2359b17ffd04152a8f09978aa0e0_13.swift"
  },
  {
    "conversation_hash": "893ee4d6c7445a48e023b34f207d9fec",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "StreamBuilder<WeatherModel?>(\n  stream: weatherBloc.weatherStream,\n  builder: (context, snapshot) {\n    // Rest of the code...\n  },\n),",
    "filename": "893ee4d6c7445a48e023b34f207d9fec_0.swift"
  },
  {
    "conversation_hash": "e832031af358b9d5117ead3694cd27df",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-bundle-selector',\n  template: `\n    <h2>Bundles:</h2>\n    <div *ngFor=\"let bundle of bundles\">\n      <div>\n        <label>{{ bundle.bundleName }}</label>\n        <button (click)=\"selectBundle(bundle)\">{{ bundle.selected ? 'Selected' : 'Select' }}</button>\n      </div>\n    </div>\n\n    <h2>Selected Bundles:</h2>\n    <ul>\n      <li *ngFor=\"let bundle of bundles\" *ngIf=\"bundle.selected\">{{ bundle.bundleName }}</li>\n    </ul>\n  `\n})\nexport class BundleSelectorComponent {\n  bundles = [\n    { bundleName: 'Bundle 1', selected: false },\n    { bundleName: 'Bundle 2', selected: false },\n    { bundleName: 'Bundle 3', selected: false }\n  ];\n\n  selectBundle(bundle: any) {\n    bundle.selected = !bundle.selected;\n  }\n}",
    "filename": "e832031af358b9d5117ead3694cd27df_4.swift"
  },
  {
    "conversation_hash": "4c84c76a0658af97f8dd654537537e21",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "import { useKeycloakStore } from 'path-to-your-useKeycloakStore'\n\nexport default {\n  methods: {\n    getTokenFromStore() {\n      const store = useKeycloakStore()\n      return store.getToken()\n    }\n  },\n  // ...\n}",
    "filename": "4c84c76a0658af97f8dd654537537e21_1.swift"
  },
  {
    "conversation_hash": "087a5951bdb219ceba469d4bb2c300d6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "keycloak.init({\n  // ...\n  checkLoginIframe: false,\n  // ...\n})",
    "filename": "087a5951bdb219ceba469d4bb2c300d6_0.swift"
  },
  {
    "conversation_hash": "087a5951bdb219ceba469d4bb2c300d6",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "keycloak.init({\n  // ...\n  checkLoginIframe: false,\n  // ...\n})",
    "filename": "087a5951bdb219ceba469d4bb2c300d6_2.swift"
  },
  {
    "conversation_hash": "e593b85157c927c07ef8f102f41d83e0",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    // Определите поля, соответствующие виджетам в item_layout.xml\n    var imageView: ImageView = itemView.findViewById(R.id.imageView)\n    var textView: TextView = itemView.findViewById(R.id.textView)\n}",
    "filename": "e593b85157c927c07ef8f102f41d83e0_1.swift"
  },
  {
    "conversation_hash": "c7dec9831e7fa47c7be727366a3ccbdb",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n  return {\n    formLabelWidth: '100px'\n  }\n}",
    "filename": "c7dec9831e7fa47c7be727366a3ccbdb_0.swift"
  },
  {
    "conversation_hash": "298ca81797cc4496d93c79078399d360",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "db.collection.update(\n   { age: { $lt: 30 } }, // 条件\n   { $set: { name: \"John\" } }, // 更新操作\n   { multi: true } // 更新多个文档\n)",
    "filename": "298ca81797cc4496d93c79078399d360_1.swift"
  },
  {
    "conversation_hash": "15516d324e2671e54f11b2a4ee943b1a",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "config {\n     // ...\n     db: {\n       provider = \"postgresql\"\n       url      = env(\"DATABASE_URL\")\n     }\n     http = {\n       // ...\n       port = 443\n     }\n   }",
    "filename": "15516d324e2671e54f11b2a4ee943b1a_1.swift"
  },
  {
    "conversation_hash": "dbbfd91d667aba6e81ccd2095bbc99d5",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": ".col1 {\n  width: 50%;\n}\n\n.col2 {\n  width: 50%;\n}",
    "filename": "dbbfd91d667aba6e81ccd2095bbc99d5_8.swift"
  },
  {
    "conversation_hash": "70e535fc6f930a2981be434da4cd0b50",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    siteUrl = \"https://your-sharepoint-site-url.com\",\n    listName = \"{Your SharePoint List Name}\",\n    apiUrl = siteUrl & \"/_vti_bin/listdata.svc/\" & listName & \"?$filter=ColumnName eq 'FilterValue'\",\n    source = OData.Feed(apiUrl),\n    #\"Removed Other Columns\" = Table.SelectColumns(source, {\"Column1\", \"Column2\", \"Column3\"}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Other Columns\",{{\"Column1\", \"NewColumn1\"}, {\"Column2\", \"NewColumn2\"}, {\"Column3\", \"NewColumn3\"}})\nin\n    #\"Renamed Columns\"",
    "filename": "70e535fc6f930a2981be434da4cd0b50_2.swift"
  },
  {
    "conversation_hash": "57a567973cbfa0f7c2546f77b0aaadf2",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "const openOrders: Record<string, Record<string, AccountOpenOrder>> = {\n  \"order1\": {\n    \"apiKeyId\": \"123456789\",\n    \"apiKeyName\": \"APIKey1\",\n    \"id\": \"order1\",\n    \"symbol\": \"BTCUSDT\",\n    \"type\": \"limit\",\n    \"price\": 29140,\n    \"quantity\": 1,\n    \"side\": \"buy\",\n    \"status\": \"open\"\n  },\n  \"order2\": {\n    \"apiKeyId\": \"123456789\",\n    \"apiKeyName\": \"APIKey1\",\n    \"id\": \"order2\",\n    \"symbol\": \"BTCUSDT\",\n    \"type\": \"limit\",\n    \"price\": 29200,\n    \"quantity\": 0.5,\n    \"side\": \"sell\",\n    \"status\": \"open\"\n  },\n  \"order3\": {\n    \"apiKeyId\": \"123456789\",\n    \"apiKeyName\": \"APIKey1\",\n    \"id\": \"order3\",\n    \"symbol\": \"BTCUSDT\",\n    \"type\": \"limit\",\n    \"price\": 29230,\n    \"quantity\": 2,\n    \"side\": \"buy\",\n    \"status\": \"open\"\n  }\n};",
    "filename": "57a567973cbfa0f7c2546f77b0aaadf2_0.swift"
  },
  {
    "conversation_hash": "ec0fddc789288c054cb1510f96ac9cb9",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "proxy: {\n  // 配置代理，解决跨域问题\n  '/api': {\n    target: 'http://example.com', // 你想要请求的后台接口地址\n    changeOrigin: true,\n    pathRewrite: {\n      '^/api': '' // 将请求地址中的 '/api' 替换为空字符串\n    }\n  }\n},",
    "filename": "ec0fddc789288c054cb1510f96ac9cb9_0.swift"
  },
  {
    "conversation_hash": "ee101e3fc9b5e1dc430398fa54fe3277",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "// store.js\nimport { createStore } from 'vuex'\n\nexport default createStore({\n  state() {\n    return {\n      darkMode: false\n    }\n  },\n  mutations: {\n    toggleDarkMode(state) {\n      state.darkMode = !state.darkMode\n    }\n  }\n})",
    "filename": "ee101e3fc9b5e1dc430398fa54fe3277_1.swift"
  },
  {
    "conversation_hash": "69654495430b4135edf5ab6f06b972bc",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "devServer: {\n  // https: true,\n  open: true, // 自动打开浏览器窗口\n  proxy: {\n    \"/api\": {\n      target: \"https://gxcs.sinnolab.com/api/\",\n      changeOrigin: true,\n      pathRewrite: {\n        \"^/api\": \"\", //重写路径\n      },\n    },\n  },\n},",
    "filename": "69654495430b4135edf5ab6f06b972bc_0.swift"
  },
  {
    "conversation_hash": "5b77baf33b92e5b7d68d265ce58accc3",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "devServer: {\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9001',\n      pathRewrite: {\n        '^/api': '/proxy/proxy',\n      },\n    },\n  },\n}",
    "filename": "5b77baf33b92e5b7d68d265ce58accc3_3.swift"
  },
  {
    "conversation_hash": "9d88dce44ea52041753a966a968aa77b",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "AVFoundation",
      "UIKit"
    ],
    "code": "import UIKit\nimport AVFoundation\n\nclass ViewController: UIViewController {\n    @IBOutlet weak var timeIntervalTextField: UITextField!\n    @IBOutlet weak var inputTextField: UITextField!\n    @IBOutlet weak var startButton: UIButton!\n    @IBOutlet weak var lampImageView: UIImageView!\n    \n    var timer: Timer?\n    var isLampOn = false\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        lampImageView.image = UIImage(named: \"lamp_off\")\n    }\n    \n    @IBAction func startButtonTapped(_ sender: UIButton) {\n        guard let timeIntervalString = timeIntervalTextField.text,\n              let timeInterval = Double(timeIntervalString) else {\n            return\n        }\n        \n        if isLampOn {\n            turnOffLamp()\n        } else {\n            timer = Timer.scheduledTimer(withTimeInterval: timeInterval, repeats: true) { [weak self] _ in\n                self?.checkInputText()\n            }\n            sender.setTitle(\"Stop\", for: .normal)\n            isLampOn = true\n        }\n    }\n    \n    func checkInputText() {\n        guard let inputText = inputTextField.text,\n              let inputNumber = Int(inputText) else {\n            return\n        }\n        \n        if inputNumber == 1 {\n            turnOnLamp()\n        } else {\n            turnOffLamp()\n        }\n    }\n    \n    func turnOnLamp() {\n        lampImageView.image = UIImage(named: \"lamp_on\")\n    }\n    \n    func turnOffLamp() {\n        lampImageView.image = UIImage(named: \"lamp_off\")\n        timer?.invalidate()\n        startButton.setTitle(\"Start\", for: .normal)\n        isLampOn = false\n    }\n}",
    "filename": "9d88dce44ea52041753a966a968aa77b_0.swift"
  },
  {
    "conversation_hash": "32b6ac1cfc0fb69134ede518b58dabdf",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import (\n\t// inne importy...\n\t\"os\"\n\t\"strings\"\n\n\tchart \"github.com/wcharczuk/go-chart\"\n)",
    "filename": "32b6ac1cfc0fb69134ede518b58dabdf_0.swift"
  },
  {
    "conversation_hash": "fff5e8bd42f65e79ee51692ddb69668c",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "let g:lspsaga_codeaction_prompt_enable = 0\nnnoremap <silent><nowait><A-d> <cmd>lua require('lspsaga.floaterm').open_float_terminal()<CR>\nnnoremap <silent><nowait><A-u> <cmd>Lspsaga hover_doc<CR>\nnnoremap <silent><nowait>K <cmd>Lspsaga signature_help<CR>\nnnoremap <silent><nowait>gh <cmd>Lspsaga lsp_finder<CR>\nnnoremap <silent><nowait>gr <cmd>Lspsaga lsp_finder<CR>\nnnoremap <silent><nowait>gD <cmd>Lspsaga preview_definition<CR>\nnnoremap <silent><nowait>gd <cmd>lua vim.lsp.buf.definition()<CR>",
    "filename": "fff5e8bd42f65e79ee51692ddb69668c_1.swift"
  },
  {
    "conversation_hash": "08e724f70d82bc8b45e9a76a58a93c77",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "messages"
    ],
    "code": "import { Quasar, Dialog, date } from 'quasar'\n\n// 导入中文语言包\nimport messages from 'quasar/lang/zh-CN'\n\nQuasar.lang.set(messages)\n\nVue.use(Quasar, {\n  config: {\n    // ...\n  },\n  plugins: {\n    // ...\n  }\n})\n\nVue.prototype.$date = date\nVue.prototype.$dialog = Dialog",
    "filename": "08e724f70d82bc8b45e9a76a58a93c77_0.swift"
  },
  {
    "conversation_hash": "08e724f70d82bc8b45e9a76a58a93c77",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "computed: {\n  formattedDate() {\n    return formatDate(this.date, 'YYYY-MM-DD')\n  }\n}",
    "filename": "08e724f70d82bc8b45e9a76a58a93c77_7.swift"
  },
  {
    "conversation_hash": "56378c7b815867fc63461e98ecf18af7",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "the"
    ],
    "code": "private var lines: [Line]? // Reference to lines array\nprivate var isLinesInitialized = false // Flag to check if lines array has been initialized\n\nfunc lineIndexAtPosition(_ position: Int) -> Int {\n    initializeLinesIfNeeded() // Lazily initialize the lines array if needed\n\n    guard let lines = lines else {\n        NSLog(\"ERROR! Line array not initialized\")\n        return 0\n    }\n\n    // Binary search to find the line at the given position\n    var low = 0\n    var high = lines.count - 1\n\n    while low <= high {\n        let mid = (low + high) / 2\n        let line = lines[mid]\n\n        if position >= line.range.lowerBound && position <= line.range.upperBound {\n            return mid\n        } else if position < line.range.lowerBound {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    NSLog(\"ERROR! Line not found\")\n    return 0\n}\n\nprivate func initializeLinesIfNeeded() {\n    if !isLinesInitialized {\n        // Logic to initialize the lines array from the text\n        // ...\n\n        isLinesInitialized = true\n    }\n}",
    "filename": "56378c7b815867fc63461e98ecf18af7_0.swift"
  },
  {
    "conversation_hash": "68a9c6064873c3a4f23e7a89340b7299",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "const renderRows = (rowsCount: number, ...)\n  ...\n  if (dollarsVolume) {\n    // Перемножьте quantity на price, если dollarsVolume равно true\n    const bidRow: number[] = [price * quantity, // Вместо quantity используйте значение quantity из параметров функции\n    ...\n    const askRow: number[] = [price * quantity, // Вместо quantity используйте значение quantity из параметров функции\n    ...\n  } else {\n    const bidRow: number[] = [quantity,\n    ...\n    const askRow: number[] = [quantity,\n    ...\n  }\n  ...\n}",
    "filename": "68a9c6064873c3a4f23e7a89340b7299_2.swift"
  },
  {
    "conversation_hash": "96063076b8fcdb4b786b693a1daa7aaf",
    "code_index": 13,
    "language": "Swift",
    "libraries": [],
    "code": "// Внутри адаптера:\ncallFragmentMethod()\n\n// Внутри ViewHolder'а:\nitemView.yourButton.setOnClickListener {\n    (itemView.context as? YourFragment)?.yourMethod()\n}",
    "filename": "96063076b8fcdb4b786b693a1daa7aaf_13.swift"
  },
  {
    "conversation_hash": "91a9853f0a80dbebe53cbc6325583255",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n  return {\n    //...\n    results: [] //保存搜索结果的数组\n  }\n}",
    "filename": "91a9853f0a80dbebe53cbc6325583255_2.swift"
  },
  {
    "conversation_hash": "2f4c26a366703b98a0918abff5669677",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "func determineShouldPaybackAll(paybackAmount: BigUInt, debt: BigUInt, debtOffset: BigUInt, daiBalance: BigUInt) -> Bool {\n    return debt > 0 &&\n        daiBalance >= debt.adding(debtOffset) &&\n        (paybackAmount > 0) && (paybackAmount.adding(PAYBACK_ALL_BOUND) >= debt) && !(paybackAmount > debt)\n}",
    "filename": "2f4c26a366703b98a0918abff5669677_0.swift"
  },
  {
    "conversation_hash": "bdff2fd48563b957d77e6a9a0d457bea",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "extension Comparable {\n    func gte(_ other: Self) -> Bool {\n        return self >= other\n    }\n    \n    func gt(_ other: Self) -> Bool {\n        return self > other\n    }\n    \n    func lte(_ other: Self) -> Bool {\n        return self <= other\n    }\n    \n    func lt(_ other: Self) -> Bool {\n        return self < other\n    }\n}",
    "filename": "bdff2fd48563b957d77e6a9a0d457bea_1.swift"
  },
  {
    "conversation_hash": "bdff2fd48563b957d77e6a9a0d457bea",
    "code_index": 2,
    "language": "Swift",
    "libraries": [
      "Foundation"
    ],
    "code": "import Foundation\n\nfunc vaultWillBeAtRiskLevelDangerValidator(inputAmountsEmpty: Bool,\n                                          afterCollateralizationRatio: BigNumber,\n                                          liquidationRatio: BigNumber,\n                                          collateralizationDangerThreshold: BigNumber) -> Bool {\n    return (!inputAmountsEmpty &&\n            afterCollateralizationRatio.gte(liquidationRatio) &&\n            afterCollateralizationRatio.lte(collateralizationDangerThreshold))\n}",
    "filename": "bdff2fd48563b957d77e6a9a0d457bea_2.swift"
  },
  {
    "conversation_hash": "6585becf15c2cf6a55695fa785113edc",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "Foundation"
    ],
    "code": "import Foundation\n\nfunc vaultWillBeAtRiskLevelDangerValidator(inputAmountsEmpty: Bool, afterCollateralizationRatio: BigNumber, liquidationRatio: BigNumber, collateralizationDangerThreshold: BigNumber) -> Bool {\n    return (!inputAmountsEmpty && afterCollateralizationRatio >= liquidationRatio && afterCollateralizationRatio <= collateralizationDangerThreshold)\n}\n\nfunc vaultWillBeAtRiskLevelDangerAtNextPriceValidator(vaultWillBeAtRiskLevelDanger: Bool, inputAmountsEmpty: Bool, afterCollateralizationRatioAtNextPrice: BigNumber, liquidationRatio: BigNumber, collateralizationDangerThreshold: BigNumber) -> Bool {\n    return (!vaultWillBeAtRiskLevelDanger && !inputAmountsEmpty && afterCollateralizationRatioAtNextPrice >= liquidationRatio && afterCollateralizationRatioAtNextPrice <= collateralizationDangerThreshold)\n}\n\nfunc vaultWillBeAtRiskLevelWarningValidator(inputAmountsEmpty: Bool, afterCollateralizationRatio: BigNumber, collateralizationDangerThreshold: BigNumber, collateralizationWarningThreshold: BigNumber) -> Bool {\n    return (!inputAmountsEmpty && afterCollateralizationRatio > collateralizationDangerThreshold && afterCollateralizationRatio <= collateralizationWarningThreshold)\n}\n\nfunc vaultWillBeAtRiskLevelWarningAtNextPriceValidator(vaultWillBeAtRiskLevelWarning: Bool, inputAmountsEmpty: Bool, afterCollateralizationRatioAtNextPrice: BigNumber, collateralizationDangerThreshold: BigNumber, collateralizationWarningThreshold: BigNumber) -> Bool {\n    return (!vaultWillBeAtRiskLevelWarning && !inputAmountsEmpty && afterCollateralizationRatioAtNextPrice > collateralizationDangerThreshold && afterCollateralizationRatioAtNextPrice <= collateralizationWarningThreshold)\n}\n\nfunc depositingAllEthBalanceValidator(token: String, depositAmount: BigNumber?, collateralBalance: BigNumber) -> Bool {\n    return token == \"ETH\" && (depositAmount != nil ? depositAmount!.isEqual(to: collateralBalance) : false)\n}\n\nfunc notEnoughETHtoPayForTx(token: String?, gasEstimationUsd: BigNumber?, ethBalance: BigNumber, ethPrice: BigNumber, depositAmount: BigNumber?) -> Bool {\n    if gasEstimationUsd == nil {\n        return false\n    }\n    if let depositAmount = depositAmount, !depositAmount.isZero() && token == \"ETH\" {\n        return ethBalance.subtracting(depositAmount).multiplying(by: ethPrice).isLessThan(gasEstimationUsd!)\n    }\n    return ethBalance.multiplying(by: ethPrice).isLessThan(gasEstimationUsd!)\n}",
    "filename": "6585becf15c2cf6a55695fa785113edc_0.swift"
  },
  {
    "conversation_hash": "e6d83376d9cb92491dbfbd06675b5891",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "export class MyClass {\n  constructor() {\n    // ...\n  }\n}",
    "filename": "e6d83376d9cb92491dbfbd06675b5891_3.swift"
  },
  {
    "conversation_hash": "07f5587527d239477da672dc83c04c12",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "let exitButton = UIButton()\nexitButton.addTarget(self, action: #selector(exitButtonTapped), for: .touchUpInside)\n\n@objc func exitButtonTapped() {\n    exit(0)\n}",
    "filename": "07f5587527d239477da672dc83c04c12_1.swift"
  },
  {
    "conversation_hash": "fc9ee45cce65f23d58f8e0bcefe4cc81",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "var someProperty: SomeType {\n    willSet {\n        // код, выполняемый перед установкой нового значения\n    }\n    \n    didSet {\n        // код, выполняемый после установки нового значения\n    }\n}",
    "filename": "fc9ee45cce65f23d58f8e0bcefe4cc81_0.swift"
  },
  {
    "conversation_hash": "13fe89c4f0ca65570d1be706c104a300",
    "code_index": 2,
    "language": "Swift",
    "libraries": [
      "Language.Haskell.TH"
    ],
    "code": "import Language.Haskell.TH\n\nexample :: Q Exp\nexample = do\n  let symbol = mkName \"world\"\n  quoteExp $ return $ LamE [VarP symbol] (AppE (VarE 'putStrLn) (LitE (StringL \"Hello, \" ++ $(varE symbol) ++ \"!\")))",
    "filename": "13fe89c4f0ca65570d1be706c104a300_2.swift"
  },
  {
    "conversation_hash": "5e51b6da2f50a24b304cc036412e3c92",
    "code_index": 23,
    "language": "Swift",
    "libraries": [],
    "code": "class Person {\n    var age: Int = 0\n        get() {\n            // Custom logic for getting the age property\n            return field + 1\n        }\n        set(value) {\n            // Custom logic for setting the age property\n            field = if (value < 0) 0 else value\n        }\n}",
    "filename": "5e51b6da2f50a24b304cc036412e3c92_23.swift"
  },
  {
    "conversation_hash": "3b914f33a5cc88047aa72ac6bf40b943",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "WebKit"
    ],
    "code": "import WebKit\n\nextension WKWebView {\n    @objc dynamic var compatibility_isInspectable: Bool {\n        get {\n            if #available(iOS 16, *) {\n                return true\n            } else {\n                return self.compatibility_isInspectable\n            }\n        }\n    }\n\n    @objc dynamic class func loadCompat() {\n        let originalSelector = #selector(getter: WKWebView.isInspectable)\n        let swizzledSelector = #selector(getter: WKWebView.compatibility_isInspectable)\n\n        guard let originalMethod = class_getInstanceMethod(self, originalSelector),\n              let swizzledMethod = class_getInstanceMethod(self, swizzledSelector) else {\n            return\n        }\n\n        method_exchangeImplementations(originalMethod, swizzledMethod)\n    }\n\n    static let _loadCompat: Void = {\n        self.loadCompat()\n    }()\n}",
    "filename": "3b914f33a5cc88047aa72ac6bf40b943_0.swift"
  },
  {
    "conversation_hash": "245d659efac802cc20a57a162059b350",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "const form = reactive<NetConfigPayload>({\n  source: '',\n  target: '',\n  cfgmethod: 'dhcp',\n  manual: {\n    body: ''\n  },\n  static: {\n    gateway: '',\n    cidr: '',\n    dns: []\n  }\n})",
    "filename": "245d659efac802cc20a57a162059b350_3.swift"
  },
  {
    "conversation_hash": "245d659efac802cc20a57a162059b350",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "const form = reactive({\n  source: '',\n  target: '',\n  cfgmethod: 'dhcp',\n  manual: {\n    body: ''\n  },\n  static: {\n    gateway: '',\n    cidr: '',\n    dns: []\n  }\n})",
    "filename": "245d659efac802cc20a57a162059b350_6.swift"
  },
  {
    "conversation_hash": "244793c9e2c6428d404467f5fd23136a",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "<script>\nexport default {\n  data() {\n    return {\n      items: [] // Initialize with an empty array\n    }\n  }\n}\n</script>",
    "filename": "244793c9e2c6428d404467f5fd23136a_1.swift"
  },
  {
    "conversation_hash": "e4e1506279e37d8f9403bf12c8dc0c47",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  a: {\n    d: \"value 4\"\n  },\n  e: \"value 5\"\n}",
    "filename": "e4e1506279e37d8f9403bf12c8dc0c47_2.swift"
  },
  {
    "conversation_hash": "1811c7476fc5c5d4e33553692015cfb1",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "glfw",
      "opengl"
    ],
    "code": "import opengl\nimport glfw\n\nconst\n  screenWidth = 800\n  screenHeight = 600\n  tileSize = 512\n  textureSize = 4096\n\n# Vertex structure for tiles\ntype\n  TileVertex = object\n    position: array[2, float32]\n    texCoord: array[2, float32]\n\n# Coordinate and texture data for tiles\nvar tileVertices: seq[TileVertex]\n\nproc generateTileVertices(startTileX, startTileY, endTileX, endTileY: int) =\n  for y in startTileY ..< endTileY:\n    for x in startTileX ..< endTileX:\n      let tileIndex = y * (textureSize div tileSize) + x\n\n      # Generate texture coordinates based on current tile\n      let texCoordX = (x * tileSize) / float32(textureSize)\n      let texCoordY = (y * tileSize) / float32(textureSize)\n\n      # Define vertices and texture coordinates for the current tile\n      let topLeft = TileVertex([x * tileSize, y * tileSize], [texCoordX, texCoordY])\n      let topRight = TileVertex([(x + 1) * tileSize, y * tileSize], [texCoordX + tileSize / float32(textureSize), texCoordY])\n      let bottomRight = TileVertex([(x + 1) * tileSize, (y + 1) * tileSize], [texCoordX + tileSize / float32(textureSize), texCoordY + tileSize / float32(textureSize)])\n      let bottomLeft = TileVertex([x * tileSize, (y + 1) * tileSize], [texCoordX, texCoordY + tileSize / float32(textureSize)])\n\n      tileVertices.add(topLeft)\n      tileVertices.add(topRight)\n      tileVertices.add(bottomRight)\n\n      tileVertices.add(bottomRight)\n      tileVertices.add(bottomLeft)\n      tileVertices.add(topLeft)\n\nproc render(visibleTileX, visibleTileY: int) =\n  # Bind your texture here\n\n  # Calculate the start and end tile indices based on the visible tiles\n  var startTileX = visibleTileX - screenWidth // tileSize\n  var startTileY = visibleTileY - screenHeight // tileSize\n  var endTileX = visibleTileX // tileSize\n  var endTileY = visibleTileY // tileSize\n\n  # Generate vertices for visible tiles\n  tileVertices.clear()\n  generateTileVertices(startTileX, startTileY, endTileX, endTileY)\n\n  # Create and bind VBO for tile vertices\n  var vbo: GLuint\n  glGenBuffers(1, addr vbo)\n  glBindBuffer(GL_ARRAY_BUFFER, vbo)\n\n  # Transfer tile vertex data to the VBO\n  glBufferData(GL_ARRAY_BUFFER, tileVertices.len * sizeof(TileVertex), tileVertices[0], GL_STATIC_DRAW)\n\n  # Enable vertex attribute arrays\n  glEnableVertexAttribArray(0)\n  glEnableVertexAttribArray(1)\n\n  # Define layout and enable vertex attribute pointers\n  glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(TileVertex), cast[pointer][TileVertex].offsetof(position))\n  glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, sizeof(TileVertex), cast[pointer][TileVertex].offsetof(texCoord))\n\n  # Draw the tiles using the VBO\n  glDrawArrays(GL_TRIANGLES, 0, tileVertices.len)\n\n  # Disable vertex attribute arrays\n  glDisableVertexAttribArray(0)\n  glDisableVertexAttribArray(1)\n\n  # Unbind the VBO\n  glBindBuffer(GL_ARRAY_BUFFER, 0)\n  glDeleteBuffers(1, addr vbo)\n\n# GLFW window resize callback\nproc framebufferSizeCallback(window: GLFWwindow, width, height: int) =\n  glViewport(0, 0, width, height)\n\n# Initialize GLFW and create window\nglfwInit()\nglfwWindowHint(WINDOW_CONTEXT_VERSION_MAJOR, 3)\nglfwWindowHint(WINDOW_CONTEXT_VERSION_MINOR, 3)\nglfwWindowHint(WINDOW_OPENGL_PROFILE, OPENGL_CORE_PROFILE)\nvar window = glfwCreateWindow(screenWidth, screenHeight, \"Texture Tiling Example\", nil, nil)\nglfwMakeContextCurrent(window)\n\n# Set the OpenGL viewport and register the resize callback\nglViewport(0, 0, screenWidth, screenHeight)\nglfwSetFramebufferSizeCallback(window, framebufferSizeCallback)\n\n# Initialize tileVertices array\ntileVertices = @[]\n\n# Main rendering loop\nwhile not glfwWindowShouldClose(window):\n  glClear(GL_COLOR_BUFFER_BIT)\n\n  # Calculate the visible tile based on the camera position or other inputs\n  let visibleTileX = cameraX\n  let visibleTileY = cameraY\n\n  # Render only the visible parts of the texture\n  render(visibleTileX, visibleTileY)\n\n  glfwSwapBuffers(window)\n  glfwPollEvents()\n\nglfwTerminate()",
    "filename": "1811c7476fc5c5d4e33553692015cfb1_1.swift"
  },
  {
    "conversation_hash": "7de3c88f8de783059c1bb46d4111f6fa",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "// vite.config.js\nexport default {\n  build: {\n    rollupOptions: {\n      input: {\n        main: './index.html' // указываем путь к основному файлу\n      }\n    }\n  },\n  esbuild: {\n    // включаем поддержку импорта модулей \n    // и указываем точку входа для сборки\n    jsxFactory: 'h',\n    jsxFragment: 'Fragment',\n    jsxInject: `import { h, Fragment } from 'vue'`\n  }\n}",
    "filename": "7de3c88f8de783059c1bb46d4111f6fa_0.swift"
  },
  {
    "conversation_hash": "e414917cfff33c1bbfece9f1021295c5",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "class NoteViewModel(application: Application) : AndroidViewModel(application) {\n    // остальной код\n\n    constructor() : this(getApplication()) {\n        // логика конструктора по умолчанию\n    }\n\n    // остальной код\n}",
    "filename": "e414917cfff33c1bbfece9f1021295c5_1.swift"
  },
  {
    "conversation_hash": "141f7605e150159b1b8e8f22e5b8cc78",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "PDFViewer(\n  document: pdfDoc,\n  startPage: 5, // Specify the page number to start with\n  zoomSteps: 1,\n),",
    "filename": "141f7605e150159b1b8e8f22e5b8cc78_4.swift"
  },
  {
    "conversation_hash": "e5140a0e213032a4c8458ecc566c9e4f",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "// Playlist.vue\nimport { EventBus } from './EventBus.js'\n\nexport default {\n  methods: {\n    addToPlaylist(song) {\n      // Добавляем песню в плейлист\n      // ...\n      // Излучаем событие \"songAdded\" с данными о песне\n      EventBus.$emit('songAdded', song)\n    }\n  }\n}",
    "filename": "e5140a0e213032a4c8458ecc566c9e4f_1.swift"
  },
  {
    "conversation_hash": "e5140a0e213032a4c8458ecc566c9e4f",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "// Playlist.vue\nimport { EventBus } from './EventBus.js'\n\nexport default {\n  methods: {\n    addToPlaylist(song) {\n      // Добавляем песню в плейлист\n      // ...\n      // Излучаем событие \"songAdded\" с данными о песне\n      EventBus.$emit('songAdded', song)\n    }\n  }\n}",
    "filename": "e5140a0e213032a4c8458ecc566c9e4f_3.swift"
  },
  {
    "conversation_hash": "7adc7d1e3d4266be4774b57baa3d16bb",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "type Entity {\n  id: ID!\n  name: String!\n  // 其他字段...\n}",
    "filename": "7adc7d1e3d4266be4774b57baa3d16bb_0.swift"
  },
  {
    "conversation_hash": "7adc7d1e3d4266be4774b57baa3d16bb",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "query {\n  entity {\n    id\n    name\n    // 其他字段...\n  }\n}",
    "filename": "7adc7d1e3d4266be4774b57baa3d16bb_4.swift"
  },
  {
    "conversation_hash": "d749c98ce1583fa54efa370fd4224417",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, HostListener } from '@angular/core';\n\n@Component({\n  selector: 'app-your-component',\n  template: `\n    <div id=\"menu\" [class.show]=\"showSubmenu\">...</div>\n  `,\n  styleUrls: ['./your-component.component.css']\n})\nexport class YourComponent {\n  showSubmenu = true;\n\n  @HostListener('window:click', ['$event'])\n  onWindowClick(event: MouseEvent) {\n    const targetElement = event.target as HTMLElement;\n    \n    // Check if the target is inside the submenu\n    const isInsideSubmenu = targetElement.closest('#submenu');\n\n    // If the target is not inside the submenu, close the submenu\n    if (!isInsideSubmenu) {\n      this.showSubmenu = false;\n    }\n  }\n}",
    "filename": "d749c98ce1583fa54efa370fd4224417_3.swift"
  },
  {
    "conversation_hash": "1321ffe7b59018efe0b06605b63c8ff8",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "class MyClass {\n    private var privateProperty: Int = 10\n    \n    private func privateMethod() {\n        // Код приватного метода\n    }\n}",
    "filename": "1321ffe7b59018efe0b06605b63c8ff8_0.swift"
  },
  {
    "conversation_hash": "1321ffe7b59018efe0b06605b63c8ff8",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "class MyClass {\n    static var staticProperty: Int = 20\n    \n    static func staticMethod() {\n        // Код статического метода\n    }\n}",
    "filename": "1321ffe7b59018efe0b06605b63c8ff8_1.swift"
  },
  {
    "conversation_hash": "3934d089ff04f1b8ea0c8f3d0453638d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "enum MyPetName: String, CaseIterable {\n    case cat = \"vasya\"\n    case dog = \"tuzick\"\n    case udav = \"shnur\"\n    case popugay = \"babaduk\"\n\n    static var allCases: [MyPetName] {\n        return [.cat, .dog, .udav, .popugay]\n    }\n}",
    "filename": "3934d089ff04f1b8ea0c8f3d0453638d_0.swift"
  },
  {
    "conversation_hash": "3934d089ff04f1b8ea0c8f3d0453638d",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "enum Seasons: Int {\n    case winter = 1; case spring; case summer; case autumn\n    \n    var label: String {\n        switch self {\n        case .winter:\n            return \"zima\"\n        case .spring:\n            return \"vesna\"\n        case .summer:\n            return \"LETO\"\n        case .autumn:\n            return \"osen'\"\n        }\n    }\n}",
    "filename": "3934d089ff04f1b8ea0c8f3d0453638d_2.swift"
  },
  {
    "conversation_hash": "377f43bf2feb073a1dff1e808167e2be",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  storeMenu(channel: \"whitelabel\", region: \"CA\", storeId: \"102305\") {\n    name\n  }\n}",
    "filename": "377f43bf2feb073a1dff1e808167e2be_0.swift"
  },
  {
    "conversation_hash": "5e3d0737828b66c2d40dc937b09bf125",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "import { Request, Response, NextFunction } from \"express\";\n\nexport default class RedisMiddleware {\n  redisClient: any;\n\n  constructor(redisClient: any) {\n    this.redisClient = redisClient;\n  }\n\n  cacheCheck() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      // Your cache check logic here\n      // Make sure to call next() to pass control to the next middleware or route handler\n      next();\n    };\n  }\n}",
    "filename": "5e3d0737828b66c2d40dc937b09bf125_3.swift"
  },
  {
    "conversation_hash": "af422aece9117fabcdf46231d5349e3c",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "@objc func proximityStateChanged() {\n    if UIDevice.current.proximityState {\n        // Датчик обнаруживает близость объекта (телефона к уху)\n        // Здесь можно добавить код для затемнения экрана\n    } else {\n        // Датчик не обнаруживает близость объекта\n        // Здесь можно добавить код для восстановления яркости экрана\n    }\n}",
    "filename": "af422aece9117fabcdf46231d5349e3c_4.swift"
  },
  {
    "conversation_hash": "af422aece9117fabcdf46231d5349e3c",
    "code_index": 6,
    "language": "Swift",
    "libraries": [
      "CoreMotion",
      "SwiftUI"
    ],
    "code": "import SwiftUI\nimport CoreMotion\n\nclass ProximityObserver: ObservableObject {\n    let motionManager = CMMotionManager()\n    \n    @Published var isNearby = false\n    \n    init() {\n        motionManager.startProximityObserver()\n        \n        NotificationCenter.default.addObserver(self, selector: #selector(proximityStateChanged), name: NSNotification.Name(rawValue: \"UIDeviceProximityStateDidChangeNotification\"), object: nil)\n    }\n    \n    @objc func proximityStateChanged() {\n        self.isNearby = UIDevice.current.proximityState\n    }\n    \n    deinit {\n        motionManager.stopProximityObserver()\n    }\n}\n\nstruct ProximitySensorView: View {\n    @ObservedObject var proximityObserver = ProximityObserver()\n    \n    var body: some View {\n        // Здесь вы можете добавить код с визуальными изменениями\n        // в зависимости от значения proximityObserver.isNearby\n        // например, чтобы затемнить экран при приближении к уху\n        // или восстановить яркость экрана в ином случае\n        Text(\"\")\n            .onAppear {\n                UIApplication.shared.isIdleTimerDisabled = true\n            }\n            .onDisappear {\n                UIApplication.shared.isIdleTimerDisabled = false\n            }\n    }\n}",
    "filename": "af422aece9117fabcdf46231d5349e3c_6.swift"
  },
  {
    "conversation_hash": "af422aece9117fabcdf46231d5349e3c",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    var body: some View {\n        // Другой код представления\n        \n        ProximitySensorView()\n    }\n}",
    "filename": "af422aece9117fabcdf46231d5349e3c_7.swift"
  },
  {
    "conversation_hash": "f720f920adf7fc6899fca70918a18025",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "img {\n  width: 100%; /* Чтобы изображение занимало всю доступную ширину */\n  height: auto; /* Пропорциональное изменение высоты */\n  margin: 20px 0; /* Внешний отступ сверху и снизу по 20 пикселей */\n}",
    "filename": "f720f920adf7fc6899fca70918a18025_1.swift"
  },
  {
    "conversation_hash": "4586b536319be2d7a655a626e21aae62",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "UIKit",
      "the"
    ],
    "code": "import UIKit\n\nclass YourViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        NotificationCenter.default.addObserver(self, selector: #selector(proximityStateDidChange), name: UIDevice.proximityStateDidChangeNotification, object: nil)\n        UIDevice.current.isProximityMonitoringEnabled = true\n    }\n\n    @objc func proximityStateDidChange() {\n        if UIDevice.current.proximityState {\n            // Device is close to the user's ear, so adjust screen brightness or make it go dark\n            UIScreen.main.brightness = 0.0\n        } else {\n            // Device is moved away from the user's ear, so restore screen brightness\n            UIScreen.main.brightness = 1.0\n        }\n    }\n\n    deinit {\n        UIDevice.current.isProximityMonitoringEnabled = false\n        NotificationCenter.default.removeObserver(self)\n    }\n}",
    "filename": "4586b536319be2d7a655a626e21aae62_0.swift"
  },
  {
    "conversation_hash": "a2f5875846de998f1ec73787243e5282",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "CocoaSecurity"
    ],
    "code": "// 引入CocoaSecurity库\n   import CocoaSecurity\n\n   // AES加密函数\n   func encryptData(data: Data, key: String, iv: String) throws -> Data? {\n       let keyData = key.data(using: .utf8)\n       let ivData = iv.data(using: .utf8)\n       \n       // 使用CommonCrypto库进行AES加密\n       var encryptedData: Data? = nil\n       data.withUnsafeBytes { (dataBytes: UnsafeRawBufferPointer) -> Void in\n           keyData?.withUnsafeBytes { (keyBytes: UnsafeRawBufferPointer) -> Void in\n               ivData?.withUnsafeBytes { (ivBytes: UnsafeRawBufferPointer) -> Void in\n                   encryptedData = CocoaSecurity.aesEncrypt(dataBytes.bindMemory(to: UInt8.self).baseAddress,\n                                                           key: keyBytes.bindMemory(to: UInt8.self).baseAddress,\n                                                           iv: ivBytes.bindMemory(to: UInt8.self).baseAddress,\n                                                           keySize: kCCKeySizeAES128)\n               }\n           }\n       }\n       \n       return encryptedData\n   }\n\n   // PKCS7填充函数\n   func pkcs7Padding(data: Data, blockSize: Int) -> Data {\n       let paddingLength = blockSize - (data.count % blockSize)\n       var paddedData = data\n       \n       for _ in 0..<paddingLength {\n           paddedData.append(UInt8(paddingLength))\n       }\n       \n       return paddedData\n   }",
    "filename": "a2f5875846de998f1ec73787243e5282_0.swift"
  },
  {
    "conversation_hash": "e9a81db9bf4ec90b0bf9ca2432d866ec",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "extension ProductCardViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return elementsOfProductCard.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let element = elementsOfProductCard[indexPath.item]\n        \n        switch element {\n        case .priceInOtherStoresCell:\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: PriceInOtherStoresCollectionViewCell.identifire, for: indexPath) as! PriceInOtherStoresCollectionViewCell\n            // конфигурация ячейки с данными из product\n            return cell\n        // Добавьте обработку других элементов, если необходимо\n        }\n    }\n}\n\nextension ProductCardViewController: UICollectionViewDelegateFlowLayout {\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let element = elementsOfProductCard[indexPath.item]\n        \n        switch element {\n        case .priceInOtherStoresCell:\n            // Верните размер ячейки для .priceInOtherStoresCell\n        // Добавьте обработку других элементов, если необходимо\n        }\n    }\n}",
    "filename": "e9a81db9bf4ec90b0bf9ca2432d866ec_1.swift"
  },
  {
    "conversation_hash": "aed3072ba290211dd0546d35dbee8bf2",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    Source = Excel.Workbook(File.Contents(\"<path-to-excel-file>\"), true),\n    Table = Source{[Item=\"<sheet-name>\", Kind=\"Sheet\"]}[Data],\n    FileCreatedDate = File.CreationDateTime(\"<path-to-excel-file>\")\nin\n    Table",
    "filename": "aed3072ba290211dd0546d35dbee8bf2_0.swift"
  },
  {
    "conversation_hash": "281080cd2551a8ce6c305b7f163145d3",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    filePath = \"C:\\Path\\To\\Your\\File.xlsx\",\n    querySource = Excel.Workbook(File.Contents(\"C:\\Path\\To\\GetCreationDate.xlsm\"), null, true),\n    getSource = querySource{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    getCrtDate = getSource{1}[Column1],\n    result = #table({\"File Path\", \"Creation Date\"}, {{filePath, getCrtDate}})\nin\n    result",
    "filename": "281080cd2551a8ce6c305b7f163145d3_1.swift"
  },
  {
    "conversation_hash": "e343327f75207baa9453048b83f7a0a2",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "extension MyAPI: TargetType {\n    var baseURL: URL {\n        return URL(string: \"https://api.example.com\")!\n    }\n    \n    var path: String {\n        switch self {\n        case .createUser:\n            return \"/users\"\n        }\n    }\n    \n    var method: Moya.Method {\n        switch self {\n        case .createUser:\n            return .post\n        }\n    }\n    \n    var task: Task {\n        switch self {\n        case .createUser(let name, let email):\n            return .requestParameters(parameters: [\"name\": name, \"email\": email], encoding: JSONEncoding.default)\n        }\n    }\n    \n    var headers: [String: String]? {\n        return [\"Content-Type\": \"application/json\"]\n    }\n}",
    "filename": "e343327f75207baa9453048b83f7a0a2_2.swift"
  },
  {
    "conversation_hash": "5d0fcb74ad09362908eb32531360ecfe",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "enum NetworkError: Error {\n    case invalidURL\n    case requestFailed\n    case responseValidationFailed\n    // Add more error cases as needed\n}",
    "filename": "5d0fcb74ad09362908eb32531360ecfe_1.swift"
  },
  {
    "conversation_hash": "5d0fcb74ad09362908eb32531360ecfe",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "func fetchData() async throws -> Data {\n    let url = URL(string: \"https://api.example.com/data\") // Replace with your API endpoint\n    \n    guard let requestURL = url else {\n        throw NetworkError.invalidURL\n    }\n    \n    do {\n        let (data, _) = try await AF.request(requestURL)\n            .validate()\n            .responseData()\n        \n        return data\n    } catch {\n        throw NetworkError.requestFailed\n    }\n}",
    "filename": "5d0fcb74ad09362908eb32531360ecfe_2.swift"
  },
  {
    "conversation_hash": "5d0fcb74ad09362908eb32531360ecfe",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    @State private var data: Data?\n    @State private var error: NetworkError?\n    \n    var body: some View {\n        VStack {\n            Text(\"Data: \\(data ?? Data())\")\n            Text(\"Error: \\(error?.localizedDescription ?? \"\")\")\n        }\n        .task {\n            do {\n                self.data = try await fetchData()\n            } catch {\n                self.error = error as? NetworkError\n            }\n        }\n    }\n}",
    "filename": "5d0fcb74ad09362908eb32531360ecfe_3.swift"
  },
  {
    "conversation_hash": "5d0fcb74ad09362908eb32531360ecfe",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "enum NetworkError: Error {\n    case invalidURL\n    case requestFailed\n    case responseValidationFailed\n    // Add more error cases as needed\n}",
    "filename": "5d0fcb74ad09362908eb32531360ecfe_5.swift"
  },
  {
    "conversation_hash": "5d0fcb74ad09362908eb32531360ecfe",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "func fetchData() -> AnyPublisher<Data, NetworkError> {\n    let url = URL(string: \"https://api.example.com/data\") // Replace with your API endpoint\n    \n    guard let requestURL = url else {\n        return Fail(error: NetworkError.invalidURL)\n            .eraseToAnyPublisher()\n    }\n    \n    return AF.request(requestURL)\n        .validate()\n        .publishData()\n        .tryMap { response -> Data in\n            guard let data = response.data else {\n                throw NetworkError.responseValidationFailed\n            }\n            return data\n        }\n        .mapError { error -> NetworkError in\n            return NetworkError.requestFailed\n        }\n        .eraseToAnyPublisher()\n}",
    "filename": "5d0fcb74ad09362908eb32531360ecfe_6.swift"
  },
  {
    "conversation_hash": "5d0fcb74ad09362908eb32531360ecfe",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    @State private var data: Data?\n    @State private var error: NetworkError?\n    private var cancellables = Set<AnyCancellable>()\n    \n    var body: some View {\n        VStack {\n            Text(\"Data: \\(data ?? Data())\")\n            Text(\"Error: \\(error?.localizedDescription ?? \"\")\")\n        }\n        .onAppear {\n            fetchData()\n                .sink { completion in\n                    if case let .failure(error) = completion {\n                        self.error = error\n                    }\n                } receiveValue: { data in\n                    self.data = data\n                }\n                .store(in: &cancellables)\n        }\n    }\n}",
    "filename": "5d0fcb74ad09362908eb32531360ecfe_7.swift"
  },
  {
    "conversation_hash": "5d0fcb74ad09362908eb32531360ecfe",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "enum NetworkError: Error {\n    case invalidURL\n    case requestFailed\n    case responseValidationFailed\n    // Add more error cases as needed\n}",
    "filename": "5d0fcb74ad09362908eb32531360ecfe_9.swift"
  },
  {
    "conversation_hash": "5d0fcb74ad09362908eb32531360ecfe",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "func performRequest<T>(_ urlRequest: URLRequestConvertible) async throws -> T {\n    return try await withCheckedThrowingContinuation { continuation in\n        AF.request(urlRequest)\n            .validate()\n            .responseDecodable(of: T.self) { response in\n                switch response.result {\n                case .success(let value):\n                    continuation.resume(returning: value)\n                case .failure(let error):\n                    continuation.resume(throwing: error)\n                }\n            }\n    }\n}",
    "filename": "5d0fcb74ad09362908eb32531360ecfe_10.swift"
  },
  {
    "conversation_hash": "5d0fcb74ad09362908eb32531360ecfe",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    @State private var data: Data?\n    @State private var error: NetworkError?\n    \n    var body: some View {\n        VStack {\n            Text(\"Data: \\(data ?? Data())\")\n            Text(\"Error: \\(error?.localizedDescription ?? \"\")\")\n        }\n        .task {\n            do {\n                let result: Data = try await performRequest(YourRequestStruct())\n                self.data = result\n            } catch {\n                if let networkError = error as? NetworkError {\n                    self.error = networkError\n                } else {\n                    self.error = .requestFailed\n                }\n            }\n        }\n    }\n}",
    "filename": "5d0fcb74ad09362908eb32531360ecfe_11.swift"
  },
  {
    "conversation_hash": "692a729e00ea1a01b3aa87d1f3683823",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    Source = Excel.CurrentWorkbook(){[Name=\"Previous\"]}[Content],\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}, {\"Column2\", type text}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Changed Type\", \"Timestamp\", each DateTime.LocalNow())\nin\n    #\"Added Custom\"",
    "filename": "692a729e00ea1a01b3aa87d1f3683823_3.swift"
  },
  {
    "conversation_hash": "3886ad29e81cfb1a1522392176212fc1",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    previousSource = Table.Column(#\"Previous\", \"Source\"){0},\n    previousLoadTimestamp = Table.Column(#\"Previous\", \"LoadTimestamp\"){0},\n    currentSource = [Source]\nin\n    if currentSource <> previousSource then DateTime.LocalNow() else previousLoadTimestamp",
    "filename": "3886ad29e81cfb1a1522392176212fc1_1.swift"
  },
  {
    "conversation_hash": "3886ad29e81cfb1a1522392176212fc1",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    previousSource = Table.Column(#\"Previous\", \"Source\"){0},\n    previousLoadTimestamp = Table.Column(#\"Previous\", \"LoadTimestamp\"){0},\n    currentSource = [Source]\nin\n    if currentSource <> previousSource then DateTime.LocalNow() else previousLoadTimestamp",
    "filename": "3886ad29e81cfb1a1522392176212fc1_2.swift"
  },
  {
    "conversation_hash": "199c3317e03f95de484afd58831f8e22",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    previousContent = Excel.Workbook(File.Contents(PreviousFile)),\n    previousSheet = previousContent{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    previousTable = previousSheet{[Item=\"Table1\",Kind=\"Table\"]}[Data],\n    currentContent = Excel.Workbook(File.Contents(CurrentFile)),\n    currentSheet = currentContent{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],\n    currentTable = currentSheet{[Item=\"Table1\",Kind=\"Table\"]}[Data]\n  in\n    if Table.IsIdentical(previousTable, currentTable) then DateTime.LocalNow() else null",
    "filename": "199c3317e03f95de484afd58831f8e22_0.swift"
  },
  {
    "conversation_hash": "199c3317e03f95de484afd58831f8e22",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "let\n        previousTable = Excel.Workbook(File.Contents(PreviousFile))[Item=\"Sheet1\", Kind=\"Table1\"][Data],\n        currentTable = Excel.Workbook(File.Contents(CurrentFile))[Item=\"Sheet1\", Kind=\"Table1\"][Data],\n        columnNamesMatch = List.Equals(\n          List.Transform(Table.ColumnNames(previousTable), each _),\n          List.Transform(Table.ColumnNames(currentTable), each _)\n        ),\n        rowCountMatch = Table.RowCount(previousTable) = Table.RowCount(currentTable),\n        timestamp = if columnNamesMatch and rowCountMatch then DateTime.LocalNow() else null\n     in\n        timestamp",
    "filename": "199c3317e03f95de484afd58831f8e22_2.swift"
  },
  {
    "conversation_hash": "199c3317e03f95de484afd58831f8e22",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "let\n        previousFileModifiedDate = DateTimeZone.FixedUtcNow(),\n        timestamp = if File.Contents(PreviousFile)[ContentMetadata][ModifiedDate] <> null and \n                       File.Contents(PreviousFile)[ContentMetadata][ModifiedDate] <> previousFileModifiedDate then \n                       previousFileModifiedDate else null\n     in\n        timestamp",
    "filename": "199c3317e03f95de484afd58831f8e22_3.swift"
  },
  {
    "conversation_hash": "199c3317e03f95de484afd58831f8e22",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "let\n        previousFileModifiedDate = try File.Contents(PreviousFilePath)[ModifiedDate] otherwise #datetime(1900, 1, 1, 0, 0, 0),\n        currentFileModifiedDate = try File.Contents(CurrentFilePath)[ModifiedDate] otherwise #datetime(1900, 1, 1, 0, 0, 0),\n        timestamp = if previousFileModifiedDate <> currentFileModifiedDate then DateTime.LocalNow() else null\n     in\n        timestamp",
    "filename": "199c3317e03f95de484afd58831f8e22_4.swift"
  },
  {
    "conversation_hash": "199c3317e03f95de484afd58831f8e22",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "let\n        GetFileModifiedDate = (filePath) =>\n            let\n                binaryContent = File.Contents(filePath),\n                fileInfo = #table({\"ModifiedDate\"}, {{binaryContent[ModifiedDate]}})\n            in\n                fileInfo\n     in\n        GetFileModifiedDate",
    "filename": "199c3317e03f95de484afd58831f8e22_5.swift"
  },
  {
    "conversation_hash": "199c3317e03f95de484afd58831f8e22",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "let\n        GetFileModifiedDate = GetFileModifiedDate(PreviousFile),\n        previousFileModifiedDate = GetFileModifiedDate[ModifiedDate],\n        currentFileModifiedDate = GetFileModifiedDate(CurrentFile),\n        timestamp = if previousFileModifiedDate <> currentFileModifiedDate then DateTime.LocalNow() else null\n     in\n        timestamp",
    "filename": "199c3317e03f95de484afd58831f8e22_6.swift"
  },
  {
    "conversation_hash": "c8e7ccce56d6dbbb2ab202f7b770188d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "var openVariable: MutableList<Pair<String, Any?>> = mutableListOf()\n\n// Assigning a value of MutableList<Pair<String, Menu<E>?>> type\nval list1: MutableList<Pair<String, Menu<E>?>> = mutableListOf(\n    Pair(\"pair1\", menuValue),\n    Pair(\"pair2\", null)\n)\n\nopenVariable = list1\n\n// Assigning a value of MutableList<Pair<String, String?>> type\nval list2: MutableList<Pair<String, String?>> = mutableListOf(\n    Pair(\"pair1\", \"value1\"),\n    Pair(\"pair2\", null)\n)\n\nopenVariable = list2",
    "filename": "c8e7ccce56d6dbbb2ab202f7b770188d_0.swift"
  },
  {
    "conversation_hash": "e392827486ef6e23294981f519d53479",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import { Entity, Column, VersionColumn } from 'typeorm';\n\n@Entity()\nexport class MyEntity {\n  @Column()\n  name: string;\n\n  // ...\n\n  @VersionColumn()\n  version: number;\n}",
    "filename": "e392827486ef6e23294981f519d53479_0.swift"
  },
  {
    "conversation_hash": "29cc4da8cb3781052363ea0b1ef7337c",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "import { Entity, Column, PrimaryGeneratedColumn, VersionColumn } from 'typeorm';\n\n@Entity()\nexport class YourEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  companyId: number;\n\n  @VersionColumn()\n  version: number;\n}",
    "filename": "29cc4da8cb3781052363ea0b1ef7337c_1.swift"
  },
  {
    "conversation_hash": "e57c9162afcceda1ea47e7800405200e",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "let scnView = SCNView(frame: CGRect(x: 0, y: 0, width: 500, height: 500))\nscnView.scene = scene\nscnView.backgroundColor = UIColor.white\nscnView.autoenablesDefaultLighting = true\n\nPlaygroundPage.current.liveView = scnView",
    "filename": "e57c9162afcceda1ea47e7800405200e_4.swift"
  },
  {
    "conversation_hash": "e57c9162afcceda1ea47e7800405200e",
    "code_index": 5,
    "language": "Swift",
    "libraries": [
      "PlaygroundSupport",
      "SceneKit"
    ],
    "code": "import SceneKit\nimport PlaygroundSupport\n\nlet scene = SCNScene()\n\nlet cubeGeometry = SCNBox(width: 1.0, height: 1.0, length: 1.0, chamferRadius: 0.0)\nlet cubeNode = SCNNode(geometry: cubeGeometry)\nscene.rootNode.addChildNode(cubeNode)\n\nlet redMaterial = SCNMaterial()\nredMaterial.diffuse.contents = UIColor.red\ncubeGeometry.materials = [redMaterial]\n\nlet scnView = SCNView(frame: CGRect(x: 0, y: 0, width: 500, height: 500))\nscnView.scene = scene\nscnView.backgroundColor = UIColor.white\nscnView.autoenablesDefaultLighting = true\n\nPlaygroundPage.current.liveView = scnView",
    "filename": "e57c9162afcceda1ea47e7800405200e_5.swift"
  },
  {
    "conversation_hash": "fe1e1b72bc368f8d5de18fd03b93e3b5",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "func fetchProducts() {\n    if SKPaymentQueue.canMakePayments() {\n        let productsRequest = SKProductsRequest(productIdentifiers: [\"yourProductIdentifier\"])\n        productsRequest.delegate = self\n        productsRequest.start()\n    } else {\n        // 用户禁用了应用内购买功能\n    }\n}",
    "filename": "fe1e1b72bc368f8d5de18fd03b93e3b5_2.swift"
  },
  {
    "conversation_hash": "fe1e1b72bc368f8d5de18fd03b93e3b5",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "func productsRequest(_ request: SKProductsRequest, didReceive response: SKProductsResponse) {\n    guard let product = response.products.first else {\n        // 响应中没有可供购买的商品\n        return\n    }\n    // 根据产品信息进行购买操作\n    let payment = SKPayment(product: product)\n    SKPaymentQueue.default().add(payment)\n}",
    "filename": "fe1e1b72bc368f8d5de18fd03b93e3b5_3.swift"
  },
  {
    "conversation_hash": "fe1e1b72bc368f8d5de18fd03b93e3b5",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "func paymentQueue(_ queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) {\n    for transaction in transactions {\n        switch transaction.transactionState {\n        case .purchased:\n            // 购买成功，处理解锁功能等操作\n            SKPaymentQueue.default().finishTransaction(transaction)\n        case .restored:\n            // 已恢复购买，处理解锁功能等操作\n            SKPaymentQueue.default().finishTransaction(transaction)\n        case .failed:\n            // 购买失败\n            SKPaymentQueue.default().finishTransaction(transaction)\n        default:\n            break\n        }\n    }\n}",
    "filename": "fe1e1b72bc368f8d5de18fd03b93e3b5_4.swift"
  },
  {
    "conversation_hash": "fe1e1b72bc368f8d5de18fd03b93e3b5",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "func paymentQueue(_ queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) {\n    for transaction in transactions {\n        switch transaction.transactionState {\n        case .failed:\n            if let error = transaction.error as NSError? {\n                if error.domain == SKErrorDomain {\n                    if error.code != SKError.paymentCancelled.rawValue {\n                        // 处理购买失败的错误\n                    }\n                } else {\n                    // 处理其他错误\n                }\n            }\n            SKPaymentQueue.default().finishTransaction(transaction)\n        default:\n            break\n        }\n    }\n}",
    "filename": "fe1e1b72bc368f8d5de18fd03b93e3b5_6.swift"
  },
  {
    "conversation_hash": "fe1e1b72bc368f8d5de18fd03b93e3b5",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "func restorePurchases() {\n    SKPaymentQueue.default().restoreCompletedTransactions()\n}\n\nfunc paymentQueueRestoreCompletedTransactionsFinished(_ queue: SKPaymentQueue) {\n    // 恢复购买完成，处理解锁功能等操作\n}",
    "filename": "fe1e1b72bc368f8d5de18fd03b93e3b5_7.swift"
  },
  {
    "conversation_hash": "fe1e1b72bc368f8d5de18fd03b93e3b5",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "func verifyPurchase(with transaction: SKPaymentTransaction) {\n    let receiptURL = Bundle.main.appStoreReceiptURL\n    if let receiptData = try? Data(contentsOf: receiptURL!) {\n        let receiptString = receiptData.base64EncodedString(options: [])\n        // 向服务器发送购买凭据进行验证\n        // 注意：在正式环境中，建议将购买凭据发送给服务器进行验证\n    }\n}",
    "filename": "fe1e1b72bc368f8d5de18fd03b93e3b5_8.swift"
  },
  {
    "conversation_hash": "dea85ecbecd473a8541a396299c20f47",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import { Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';\n\n<Card className=\"mb-3\" style={{ maxWidth: '540px' }}>\n  <div className=\"row g-0\">\n    <div className=\"col-md-4\">\n      <CardImg src=\"...\" className=\"img-fluid rounded-start\" alt=\"...\" />\n    </div>\n    <div className=\"col-md-8\">\n      <CardBody>\n        <CardTitle tag=\"h5\">Card title</CardTitle>\n        <CardText>\n          This is a wider card with supporting text below as a natural lead-in\n          to additional content. This content is a little bit longer.\n        </CardText>\n        <CardText>\n          <small className=\"text-muted\">Last updated 3 mins ago</small>\n        </CardText>\n      </CardBody>\n    </div>\n  </div>\n</Card>",
    "filename": "dea85ecbecd473a8541a396299c20f47_0.swift"
  },
  {
    "conversation_hash": "dea85ecbecd473a8541a396299c20f47",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "import { Card, CardImg, CardBody, CardTitle, CardText } from 'reactstrap';\n\n<Card className=\"mb-3\" style={{ maxWidth: '540px' }}>\n  <div className=\"row g-0\">\n    <div className=\"col-md-4\">\n      <CardImg src=\"...\" className=\"img-fluid rounded-start\" alt=\"...\" />\n    </div>\n    <div className=\"col-md-8\">\n      <CardBody>\n        <CardTitle tag=\"h5\">Card title</CardTitle>\n        <CardText>\n          This is a wider card with supporting text below as a natural lead-in\n          to additional content. This content is a little bit longer.\n        </CardText>\n        <CardText>\n          <small className=\"text-muted\">Last updated 3 mins ago</small>\n        </CardText>\n      </CardBody>\n    </div>\n  </div>\n</Card>",
    "filename": "dea85ecbecd473a8541a396299c20f47_1.swift"
  },
  {
    "conversation_hash": "d34cca7e70c37f7a4a1353774bdf861d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    Source = //your source table,\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}, {\"Customer\", type text}, {\"Product\", type text}}),\n    #\"Grouped Rows\" = Table.Group(#\"Changed Type\", {\"Customer\", \"Product\"}, {{\"Grouped\", each _, type table [Date=nullable date, Customer=nullable text, Product=nullable text]}}),\n    #\"Added Index\" = Table.AddIndexColumn(#\"Grouped Rows\", \"Index\", 0, 1),\n    #\"Expanded Grouped\" = Table.ExpandTableColumn(#\"Added Index\", \"Grouped\", {\"Date\"}, {\"Date\"}),\n    #\"Sorted Rows\" = Table.Sort(#\"Expanded Grouped\",{{\"Date\", Order.Ascending}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Sorted Rows\", \"Group\", each if [Index] = 0 or [Date] - #\"Sorted Rows\"[Date]{[Index]-1} > #duration(1,0,0,0) then 1 + #\"Sorted Rows\"[Index]{[Index]-1} else #\"Sorted Rows\"[Index]{[Index]-1}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Added Custom\",{\"Index\"})\nin\n    #\"Removed Columns\"",
    "filename": "d34cca7e70c37f7a4a1353774bdf861d_0.swift"
  },
  {
    "conversation_hash": "651a2986e73d278ef8f9ca1c8ace415d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    Source = YourSourceTable, // replace with the actual source table name\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Date\", type date}, {\"Customer\", type text}, {\"Product\", type text}, {\"Index\", Int64.Type}}),\n    #\"Sorted Rows\" = Table.Sort(#\"Changed Type\",{{\"Customer\", Order.Ascending}, {\"Product\", Order.Ascending}, {\"Date\", Order.Ascending}}),\n    #\"Added Index\" = Table.AddIndexColumn(#\"Sorted Rows\", \"GroupIndex\", 0, 1),\n    #\"Added Custom\" = Table.AddColumn(#\"Added Index\", \"Group\", each if [GroupIndex] = 0 then 1 else if #\"Added Index\"[Customer]{[GroupIndex]} <> #\"Added Index\"[Customer]{[GroupIndex]-1} then [GroupIndex]+1 else [GroupIndex]),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Added Custom\",{\"GroupIndex\"})\nin\n    #\"Removed Columns\"",
    "filename": "651a2986e73d278ef8f9ca1c8ace415d_0.swift"
  },
  {
    "conversation_hash": "89b1a06944247827faa621616a138e12",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    // Load the table\n    Source = // Your source table here (replace this comment)\n    GroupAdded = Table.AddColumn(Source, \"Group\", each GetGroup([Customer], [Product], [Date]), Int64.Type),\n    Grouped = Table.Group(GroupAdded, {\"Customer\", \"Product\", \"Group\"}, {{\"Dates\", each [Date], type date}}),\n    Result = Table.ExpandTableColumn(Grouped, \"Dates\", {\"Date\"}, {\"Date\"}),\n    IndexAdded = Table.AddIndexColumn(Result, \"Index\", 0, 1, Int64.Type)\nin\n    IndexAdded",
    "filename": "89b1a06944247827faa621616a138e12_0.swift"
  },
  {
    "conversation_hash": "89b1a06944247827faa621616a138e12",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    GetGroup = (customer as text, product as text, date as date) =>\n        let\n            Source = // Your source table here (replace this comment)\n            Filtered = Table.SelectRows(Source, each [Customer] = customer and [Product] = product),\n            Sorted = Table.Sort(Filtered,{{\"Date\", Order.Ascending}}),\n            Grouped = Table.Group(Sorted, {\"Customer\", \"Product\"}, {{\"GroupStart\", each List.Min([Date]), type date}}),\n            Merged = Table.NestedJoin(Sorted, {\"Customer\", \"Product\"}, Grouped, {\"Customer\", \"Product\"}, \"Grouped\", JoinKind.LeftOuter),\n            Added = Table.AddColumn(Merged, \"Group\", each if Date.Day([Date]) - Date.Day([Grouped][GroupStart]{0}) <= 1 then 0 else 1),\n            Result = Table.SelectColumns(Added, {\"Group\"})\n        in\n            Result\nin\n    GetGroup",
    "filename": "89b1a06944247827faa621616a138e12_1.swift"
  },
  {
    "conversation_hash": "4911615a09013872d2d8843487d034c1",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "<style>\n.nodeDraggable {\n  cursor: move;\n}\n</style>",
    "filename": "4911615a09013872d2d8843487d034c1_4.swift"
  },
  {
    "conversation_hash": "e8bf443bf404fb35fd189d94559d2c8f",
    "code_index": 15,
    "language": "Swift",
    "libraries": [],
    "code": "saveRowChanges(country: any) {\n  country.isEditing = false;\n\n  // Handle any necessary logic for saving the changes\n}",
    "filename": "e8bf443bf404fb35fd189d94559d2c8f_15.swift"
  },
  {
    "conversation_hash": "bf36fe1ca6415c580a658a982f3727ab",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "the"
    ],
    "code": "class NetworkManagerTests: XCTestCase {\n    func testFetchData() {\n        // 1. Identify the method that contains the completion handler\n        let networkManager = NetworkManager()\n        \n        // 2. Create sample data for testing\n        let expectedData = \"{\\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 30}\".data(using: .utf8)\n        \n        // 3. Set up any necessary dependencies or mocks\n        \n        // 4. Call the method with the sample data\n        let expectation = self.expectation(description: \"Completion handler invoked\")\n        networkManager.fetchData { result in\n            // 5. Assert the result obtained from the completion handler\n            switch result {\n            case .success(let data):\n                XCTAssertEqual(data, expectedData)\n            case .failure(let error):\n                XCTFail(\"Failed with error: \\(error)\")\n            }\n            \n            // 6. Clean up any resources used\n            expectation.fulfill()\n        }\n        \n        // Wait for the expectation to be fulfilled\n        waitForExpectations(timeout: 5, handler: nil)\n    }\n}",
    "filename": "bf36fe1ca6415c580a658a982f3727ab_0.swift"
  },
  {
    "conversation_hash": "297993cf06b44ea84adfa310720fc378",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "model TonicEstimateRevenue {\n  id              String   @id @default(cuid())\n  date            DateTime\n  domainId        String\n  domainName      String\n  conversions     Int\n  estimate        Float\n  campaignNameRT  String\n  adGroupIdRT     String\n  campaignIdRT    String\n  adGroupNameRT   String\n  keyword         String\n  network         String\n  site            String\n  adName          String\n  conversionTime  DateTime\n  device          String\n  hashId          String\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n}",
    "filename": "297993cf06b44ea84adfa310720fc378_1.swift"
  },
  {
    "conversation_hash": "297993cf06b44ea84adfa310720fc378",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "model Track {\n  id              Int      @id @default(autoincrement())\n  trackId         String\n  campaignId      String\n  domainId        String\n  sourceId        String\n  campaign        String\n  domain          String\n  source          String\n  network         String\n  trackTime       DateTime\n  campaignIdRT    String\n  adGroupIdRT     String\n  adIdRT          String\n  placement       String\n  campaignNameRT  String\n  adGroupNameRT   String\n  adNameRT        String\n  country         String\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n}",
    "filename": "297993cf06b44ea84adfa310720fc378_9.swift"
  },
  {
    "conversation_hash": "6db017b38d98a49bbc4a343ba7a4bcbc",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "toggleCheckbox(country: any) {\n  if (country.selected) {\n    // Checkbox is checked\n    this.selectedBefore = true;\n  } else {\n    // Checkbox is unchecked\n    this.selectedBefore = false;\n    country.code = this.originalCode;\n    country.name = this.originalName;\n    country.description = this.originalDescription;\n  }\n}",
    "filename": "6db017b38d98a49bbc4a343ba7a4bcbc_6.swift"
  },
  {
    "conversation_hash": "6db017b38d98a49bbc4a343ba7a4bcbc",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "getToggledValue(country: any): string {\n  if (country.selected) {\n    return country.code;\n  } else {\n    return this.originalCode;\n  }\n}",
    "filename": "6db017b38d98a49bbc4a343ba7a4bcbc_8.swift"
  },
  {
    "conversation_hash": "7c45dac5ec41148d90a462abd1ad877b",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "model TonicEstimateRevenue {\n  id     Int      @id @default(autoincrement())\n  date   DateTime\n  // ... other fields\n}",
    "filename": "7c45dac5ec41148d90a462abd1ad877b_6.swift"
  },
  {
    "conversation_hash": "7c45dac5ec41148d90a462abd1ad877b",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "model User {\n  id    Int    @id @default(autoincrement())\n  email String\n\n  @@index([email], name: \"idx_users_email\")\n}",
    "filename": "7c45dac5ec41148d90a462abd1ad877b_11.swift"
  },
  {
    "conversation_hash": "45bc5db1d7ae1708d706ceff6072655e",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  { path: \"login\", component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  {\n    path: 'profile', component: ProfileComponent, canActivate: [AuthGuard], children: [\n      { path: 'myprofile', component: MyprofileComponent, outlet: 'profile-content' },\n      { path: 'edit-profile', component: EditProfileComponent, outlet: 'profile-content' },\n      { path: 'my-history', component: MyHistoryComponent, outlet: 'profile-content' },\n      { path: '', redirectTo: '/profile/(profile-content:myprofile)', pathMatch: 'full' }\n    ]\n  },\n  { path: 'movie/:id', component: MovieDetailsComponent },\n  { path: 'movie/:movieID/show/:showID', component: MovieTicketComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { onSameUrlNavigation: 'reload' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }",
    "filename": "45bc5db1d7ae1708d706ceff6072655e_5.swift"
  },
  {
    "conversation_hash": "bee853077732c514dbd4367795bce3c4",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "// Component code\nchangeCategory(category: string) {\n  this.selectedCategory = category;\n\n  // Perform additional logic based on the selected category\n  // ...\n}",
    "filename": "bee853077732c514dbd4367795bce3c4_2.swift"
  },
  {
    "conversation_hash": "d5b54cb24510932601cb7207a1b14973",
    "code_index": 8,
    "language": "Swift",
    "libraries": [
      "App"
    ],
    "code": "import { createApp } from 'vue'\nimport App from './App.vue'\nimport { GoogleOAuth2Init } from 'vue3-google-oauth2'\n\nconst app = createApp(App)\n\nGoogleOAuth2Init({\n  clientId: 'YOUR_CLIENT_ID',\n  scope: 'openid profile email',\n  prompt: 'consent',\n  fetch_basic_profile: true\n})\n\napp.mount('#app')",
    "filename": "d5b54cb24510932601cb7207a1b14973_8.swift"
  },
  {
    "conversation_hash": "3a904ace5d4555ea27f5d724606a5c56",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let\n       Source = <Your Data Source>,\n       PromotedHeaders = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\n       FirstColumnHeader = Record.FieldNames(PromotedHeaders){0},\n       RenamedColumns = Table.RenameColumns(PromotedHeaders, {{FirstColumnHeader, \"ConstantColumnName\"}})\n   in\n       RenamedColumns",
    "filename": "3a904ace5d4555ea27f5d724606a5c56_0.swift"
  },
  {
    "conversation_hash": "fc14db9624f4c1460d47abaf5a4b4565",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "main :: IO ()\nmain = do\n    putStrLn \"Enter first number:\"\n    num1 <- readLn :: IO Int\n    putStrLn \"Enter second number:\"\n    num2 <- readLn :: IO Int\n    let sum = num1 + num2\n    putStrLn $ \"Sum: \" ++ show sum",
    "filename": "fc14db9624f4c1460d47abaf5a4b4565_0.swift"
  },
  {
    "conversation_hash": "1658505fe86cccd59a01ed8043aef4bd",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "func numberOfPreviewItems(in controller: QLPreviewController) -> Int {\n    return 1\n}\n\nfunc previewController(_ controller: QLPreviewController, previewItemAt index: Int) -> QLPreviewItem {\n    let docURL = // URL to your doc file\n    let pdfURL = convertToPDF(with: docURL)\n    return pdfURL as QLPreviewItem\n}",
    "filename": "1658505fe86cccd59a01ed8043aef4bd_3.swift"
  },
  {
    "conversation_hash": "1658505fe86cccd59a01ed8043aef4bd",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "extension UIWebView {\n    func toPDF() -> NSData? {\n        let render = UIPrintPageRenderer()\n        render.addPrintFormatter(self.viewPrintFormatter(), startingAtPageAt: 0)\n        \n        let printArea = CGRect(x: 0, y: 0, width: 595.2, height: 841.8) // A4 size\n        render.setValue(NSValue(cgRect: printArea), forKey: \"paperRect\")\n        render.setValue(NSValue(cgRect: printArea), forKey: \"printableRect\")\n        \n        let pdfData = NSMutableData()\n        UIGraphicsBeginPDFContextToData(pdfData, .zero, nil)\n        \n        for i in 0..<render.numberOfPages {\n            UIGraphicsBeginPDFPage()\n            \n            render.drawPage(at: i, in: UIGraphicsGetPDFContextBounds())\n        }\n        \n        UIGraphicsEndPDFContext()\n        \n        return pdfData\n    }\n}",
    "filename": "1658505fe86cccd59a01ed8043aef4bd_8.swift"
  },
  {
    "conversation_hash": "1658505fe86cccd59a01ed8043aef4bd",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "if let url = URL(string: UIApplication.openSettingsURLString) {\n    if UIApplication.shared.canOpenURL(url) {\n        UIApplication.shared.open(url, options: [:], completionHandler: nil)\n    }\n}",
    "filename": "1658505fe86cccd59a01ed8043aef4bd_10.swift"
  },
  {
    "conversation_hash": "c4e3f0af05998142010da5998b65caa4",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n    // Получаем оригинальное изображение\n    if let image = info[UIImagePickerController.InfoKey.originalImage] as? UIImage {\n        // Делайте что-то с изображением здесь\n    }\n    // Закрываем контроллер выбора изображения\n    picker.dismiss(animated: true, completion: nil)\n}",
    "filename": "c4e3f0af05998142010da5998b65caa4_1.swift"
  },
  {
    "conversation_hash": "282b53e9fd6f282b6b3d2e237bfabcd5",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "Command: xx\nArg: arg1\nArg: arg2\nArg: arg3\nArg: arg4",
    "filename": "282b53e9fd6f282b6b3d2e237bfabcd5_2.swift"
  },
  {
    "conversation_hash": "ffca381432f2f65b1fbab4d618f0f6f3",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "// Activer l'utilisation du scanner QR code\nQRCodeActiver()\n\n// Vérifier si l'utilisation du scanner QR code est activée\nSI QRCodeEstActivé() ALORS\n    // Le scanner QR code est activé\n    Info(\"Le scanner QR code est activé.\")\nSINON\n    // Le scanner QR code n'est pas activé\n    Info(\"Le scanner QR code n'est pas activé.\")\nFIN",
    "filename": "ffca381432f2f65b1fbab4d618f0f6f3_1.swift"
  },
  {
    "conversation_hash": "43476a48dc03aacfb106235cf1ee0380",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "magick \\\n  -size 2000x2000 xc:black \\\n  \\( input1.jpg +repage \\) -geometry +100+100 -composite \\\n  \\( input2.jpg +repage \\) -geometry +600+100 -composite \\\n  \\( input3.jpg +repage \\) -geometry +1100+100 -composite \\\n  \\( input4.jpg +repage \\) -geometry +100+600 -composite \\\n  \\( input5.jpg +repage \\) -geometry +600+600 -composite \\\n  ...\n  output.jpg",
    "filename": "43476a48dc03aacfb106235cf1ee0380_1.swift"
  },
  {
    "conversation_hash": "c14078ed29493b76cc30f3faaf8b2c1b",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "func calculateDistances(for points: [CGPoint]) -> [CGFloat] {\n    var distances = [CGFloat]()\n    \n    for i in 1..<points.count {\n        let previousPoint = points[i-1]\n        let currentPoint = points[i]\n        \n        let distance = sqrt(pow(currentPoint.x - previousPoint.x, 2) + pow(currentPoint.y - previousPoint.y, 2))\n        distances.append(distance)\n    }\n    \n    return distances\n}",
    "filename": "c14078ed29493b76cc30f3faaf8b2c1b_0.swift"
  },
  {
    "conversation_hash": "c14078ed29493b76cc30f3faaf8b2c1b",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "func getMask(imageData: Data) async throws -> UIImage {\n    guard let url = URL(string: \"http://194.182.169.116:22000/prompt2mask\") else {\n        throw NSError(domain: \"Invalid URL\", code: 0, userInfo: nil)\n    }\n    \n    var request = URLRequest(url: url)\n    request.httpMethod = \"POST\"\n    \n    let boundary = \"Boundary-\\(UUID().uuidString)\"\n    let contentType = \"multipart/form-data; boundary=\\(boundary)\"\n    request.setValue(contentType, forHTTPHeaderField: \"Content-Type\")\n    \n    var body = Data()\n    body.append(\"--\\(boundary)\\r\\n\".data(using: .utf8)!)\n    body.append(\"Content-Disposition: form-data; name=\\\"image_file\\\"; filename=\\\"IMG_4771.JPG\\\"\\r\\n\".data(using: .utf8)!)\n    body.append(\"Content-Type: image/jpeg\\r\\n\\r\\n\".data(using: .utf8)!)\n    body.append(imageData)\n    body.append(\"\\r\\n\".data(using: .utf8)!)\n    \n    let prompt = \"shirt\"\n    body.append(\"--\\(boundary)\\r\\n\".data(using: .utf8)!)\n    body.append(\"Content-Disposition: form-data; name=\\\"prompt\\\"\\r\\n\\r\\n\".data(using: .utf8)!)\n    body.append(\"\\(prompt)\\r\\n\".data(using: .utf8)!)\n    \n    body.append(\"--\\(boundary)--\\r\\n\".data(using: .utf8)!)\n    \n    request.httpBody = body\n    \n    let (data, _) = try await URLSession.shared.data(for: request)\n    \n    guard let maskImage = UIImage(data: data) else {\n        throw NSError(domain: \"Failed to convert data to UIImage\", code: 0, userInfo: nil)\n    }\n    \n    return maskImage\n}",
    "filename": "c14078ed29493b76cc30f3faaf8b2c1b_4.swift"
  },
  {
    "conversation_hash": "c14078ed29493b76cc30f3faaf8b2c1b",
    "code_index": 6,
    "language": "Swift",
    "libraries": [
      "image"
    ],
    "code": "func getJPEGData(from image: CIImage) -> Data? {\n    let context = CIContext()\n    \n    guard let cgImage = context.createCGImage(image, from: image.extent) else {\n        return nil\n    }\n    \n    let uiImage = UIImage(cgImage: cgImage)\n    let jpegData = uiImage.jpegData(compressionQuality: 1.0)\n    \n    return jpegData\n}",
    "filename": "c14078ed29493b76cc30f3faaf8b2c1b_6.swift"
  },
  {
    "conversation_hash": "f57847cdeb1bc40efdca65ca586b62d3",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/jackc/pgx/v4\"\n\t\"github.com/jackc/pgx/v4/pgxpool\"\n)",
    "filename": "f57847cdeb1bc40efdca65ca586b62d3_0.swift"
  },
  {
    "conversation_hash": "f57847cdeb1bc40efdca65ca586b62d3",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "import (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/jackc/pgx/v4\"\n)",
    "filename": "f57847cdeb1bc40efdca65ca586b62d3_3.swift"
  },
  {
    "conversation_hash": "506bfe66d067055894b682820ff178f4",
    "code_index": 2,
    "language": "Swift",
    "libraries": [
      "Foundation"
    ],
    "code": "import Foundation\n\nclass FormDataCreator {\n    func createFormDataBody(fileURL: URL, withName name: String, mimeType: String) throws -> Data {\n        var body = Data()\n        \n        let boundary = UUID().uuidString\n        \n        // Добавление заголовков\n        body.append(\"--\\(boundary)\\r\\n\")\n        body.append(\"Content-Disposition: form-data; name=\\\"\\(name)\\\"; filename=\\\"\\(fileURL.lastPathComponent)\\\"\\r\\n\")\n        body.append(\"Content-Type: \\(mimeType)\\r\\n\\r\\n\")\n        \n        // Добавление данных файла\n        let fileData = try Data(contentsOf: fileURL)\n        body.append(fileData)\n        body.append(\"\\r\\n\")\n        \n        // Добавление границы\n        body.append(\"--\\(boundary)--\\r\\n\")\n        \n        return body\n    }\n}",
    "filename": "506bfe66d067055894b682820ff178f4_2.swift"
  },
  {
    "conversation_hash": "4f8977a882248730360c1d3b62140790",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "func performTask() async -> Int {\n    // Выполнить задачу и вернуть результат\n    return 42\n}\n\nTask<Int> {\n    // Вызвать асинхронную функцию и вернуть результат\n    let result = await performTask()\n    return result\n}",
    "filename": "4f8977a882248730360c1d3b62140790_3.swift"
  },
  {
    "conversation_hash": "4f8977a882248730360c1d3b62140790",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "let ids: [String?] = try await withThrowingTaskGroup(of: String?.self, returning: [String?].self) { tg in\n    let resA = tg.add {\n        try await inpaintServerUpload(image: image)\n    }\n}",
    "filename": "4f8977a882248730360c1d3b62140790_8.swift"
  },
  {
    "conversation_hash": "6690dd0cee678204c969fc6fafe86e8d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "new Vue({\n  el: '#app',\n  data: {\n    templateData: {\n      name: '',\n      dateOfBirth: '',\n      dateOfDeath: '',\n      epitaph: ''\n    }\n  },\n  methods: {\n    saveTemplate() {\n      // 实现保存模板的逻辑\n    }\n  }\n})",
    "filename": "6690dd0cee678204c969fc6fafe86e8d_0.swift"
  },
  {
    "conversation_hash": "6690dd0cee678204c969fc6fafe86e8d",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "data: {\n  tombstoneData: {\n    name: '',\n    dateOfBirth: '',\n    dateOfDeath: '',\n    epitaph: ''\n  }\n}",
    "filename": "6690dd0cee678204c969fc6fafe86e8d_3.swift"
  },
  {
    "conversation_hash": "6690dd0cee678204c969fc6fafe86e8d",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "data: {\n  tombstoneData: {\n    name: '',\n    dateOfBirth: '',\n    dateOfDeath: '',\n    epitaph: ''\n  }\n}",
    "filename": "6690dd0cee678204c969fc6fafe86e8d_7.swift"
  },
  {
    "conversation_hash": "b3348d412070931aff5e89efa956768f",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "const store = createStore({\n  state: {\n    // your state properties\n  },\n  mutations: {\n    // your mutations\n  },\n  actions: {\n    // your actions\n  },\n  getters: {\n    // your getters\n  }\n})",
    "filename": "b3348d412070931aff5e89efa956768f_2.swift"
  },
  {
    "conversation_hash": "979aaed809c3cd766f25144930ff0e92",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    Source = SharePoint.Files(\"https://yoursharepointsite.sharepoint.com/sites/yourteam\", [ApiVersion = 15]),\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Folder Path] = \"Shared Documents/Folder/Subfolder\")),\n    #\"Filtered Rows1\" = Table.SelectRows(#\"Filtered Rows\", each Text.StartsWith([Name], \"sourceFilename.xlsx\")),\n    #\"Imported Excel\" = Table.Combine({#\"Filtered Rows1\"[Content]}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Imported Excel\",{{\"Column1\", \"Column1\"}})\nin\n    #\"Renamed Columns\"",
    "filename": "979aaed809c3cd766f25144930ff0e92_0.swift"
  },
  {
    "conversation_hash": "979aaed809c3cd766f25144930ff0e92",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    Source = SharePoint.Files(\"https://yoursharepointsite.sharepoint.com/sites/yourteam\", [ApiVersion = 15]),\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Folder Path] = \"Shared Documents/Folder/Subfolder\")),\n    #\"Filtered Rows1\" = Table.SelectRows(#\"Filtered Rows\", each Text.StartsWith([Name], \"sourceFilename.xlsx\")),\n    #\"Imported Excel\" = Table.Combine({#\"Filtered Rows1\"[Content]}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Imported Excel\",{{\"ExistingColumnName\", \"NewColumnName\"}})\nin\n    #\"Renamed Columns\"",
    "filename": "979aaed809c3cd766f25144930ff0e92_1.swift"
  },
  {
    "conversation_hash": "b3e75d4727a9ae9d47604d8586df25c7",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, forwardRef, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'custom-input',\n  template: `\n    <input type=\"text\" [(ngModel)]=\"value\" (input)=\"onChange($event.target.value)\">\n  `,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CustomInputComponent),\n      multi: true\n    }\n  ]\n})\nexport class CustomInputComponent implements ControlValueAccessor, OnInit {\n  value: string;\n  onChange: any = () => {};\n  onTouched: any = () => {};\n\n  ngOnInit() {}\n\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}",
    "filename": "b3e75d4727a9ae9d47604d8586df25c7_0.swift"
  },
  {
    "conversation_hash": "d91760081ff7eb7bcc457c3cfea5d023",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    ИсходнаяТаблица1 = #\"Ecom Данные из 1С 2021\",\n    ИсходнаяТаблица2 = #\"Ecom Данные из 1С 2022\",\n    ИсходнаяТаблица3 = #\"Ecom Данные из 1С 2023\",\n    ИсходнаяТаблица4 = #\"Фед Данные из 1С 2021\",\n    ИсходнаяТаблица5 = #\"Фед Данные из 1С 2022\",\n    ИсходнаяТаблица6 = #\"Фед Данные из 1С 2023\",\n    Источник = Table.Combine({ИсходнаяТаблица1, ИсходнаяТаблица2, ИсходнаяТаблица3, ИсходнаяТаблица4, ИсходнаяТаблица5, ИсходнаяТаблица6}),\n    #\"Развернутый элемент Ecom План Маржа р 2022\" = Table.ExpandTableColumn(#\"Добавленный запрос1\", \"Ecom План Маржа р 2022\", {\"План маржа\"}, {\"Ecom План Маржа р 2022.План маржа\"}),\n    #\"Объединенные запросы\" = Table.NestedJoin(#\"Развернутый элемент Ecom План Маржа р 2022\",{\"Период месяц\", \"Отдел\", \"Номенклатура\"}, #\"Ecom План Ср  Цена 2022\", {\"Период месяц\", \"Отдел\", \"Номенклатура\"}, \"Ecom План Ср  Цена 2022\", JoinKind.FullOuter)\nin\n    #\"Объединенные запросы\"",
    "filename": "d91760081ff7eb7bcc457c3cfea5d023_3.swift"
  },
  {
    "conversation_hash": "3c785974999f352c401dd0df97ddfeff",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "enum ADSRState {\n    case attack, decay, sustain, release, done\n}\n\nclass ADSREnvelope {\n    var attackTime: Double\n    var decayTime: Double\n    var sustainLevel: Double\n    var releaseTime: Double\n    var releaseLevel: Double\n    \n    private var currentState: ADSRState\n    private var timer: Timer?\n    \n    var amplitude: Double = 0 {\n        didSet {\n            // Clamp amplitude value to be between 0 and 1\n            amplitude = max(0, min(amplitude, 1))\n        }\n    }\n    \n    init(attackTime: Double, decayTime: Double, sustainLevel: Double, releaseTime: Double, releaseLevel: Double) {\n        self.attackTime = attackTime\n        self.decayTime = decayTime\n        self.sustainLevel = sustainLevel\n        self.releaseTime = releaseTime\n        self.releaseLevel = releaseLevel\n        \n        currentState = .done\n    }\n    \n    func trigger() {\n        timer?.invalidate()\n        \n        // Start in attack state\n        currentState = .attack\n        amplitude = 0\n        \n        // Schedule timer for attack phase\n        timer = Timer.scheduledTimer(withTimeInterval: 0.01, repeats: true) { [weak self] _ in\n            self?.processEnvelope()\n        }\n    }\n    \n    private func processEnvelope() {\n        switch currentState {\n        case .attack:\n            amplitude += 1 / (attackTime * 100)\n            \n            // Move to decay state when attack phase is complete\n            if amplitude >= 1 {\n                currentState = .decay\n            }\n            \n        case .decay:\n            amplitude -= (1 - sustainLevel) / (decayTime * 100)\n            \n            // Move to sustain state when decay phase is complete\n            if amplitude <= sustainLevel {\n                currentState = .sustain\n            }\n            \n        case .sustain:\n            // Do nothing, maintain sustain level\n            \n        case .release:\n            amplitude -= releaseLevel / (releaseTime * 100)\n            \n            // Move to done state when release phase is complete\n            if amplitude <= 0 {\n                currentState = .done\n                timer?.invalidate()\n                timer = nil\n            }\n            \n        case .done:\n            // Do nothing\n            break\n        }\n    }\n    \n    func release() {\n        // Move to release state\n        currentState = .release\n    }\n}",
    "filename": "3c785974999f352c401dd0df97ddfeff_0.swift"
  },
  {
    "conversation_hash": "3c785974999f352c401dd0df97ddfeff",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "let envelope = ADSREnvelope(attackTime: 0.5, decayTime: 0.3, sustainLevel: 0.7, releaseTime: 0.2, releaseLevel: 0.0)\n\n// Trigger the envelope\nenvelope.trigger()\n\n// Wait for a while\n\n// Release the envelope\nenvelope.release()",
    "filename": "3c785974999f352c401dd0df97ddfeff_1.swift"
  },
  {
    "conversation_hash": "fed6b0a6f93667639c8cee8978a73d28",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "Data.List"
    ],
    "code": "import Data.List (transpose)\n\ntype Matrix a = [[a]]\n\nremoveMinRowsCols :: (Num a, Ord a) => Matrix a -> Matrix a\nremoveMinRowsCols matrix = removeCols (transpose (removeRows (transpose matrix) minRowIndex)) minColIndex\n  where\n    minRowIndex = findMinIndex (map findMinIndex matrix)\n    minColIndex = findMinIndex (map findMinIndex (transpose matrix))\n\nremoveRows :: (Num a, Ord a) => Matrix a -> Int -> Matrix a\nremoveRows matrix index = take index matrix ++ drop (index + 1) matrix\n\nremoveCols :: (Num a, Ord a) => Matrix a -> Int -> Matrix a\nremoveCols matrix index = transpose (removeRows (transpose matrix) index)\n\nfindMinIndex :: (Num a, Ord a) => [a] -> Int\nfindMinIndex xs = snd (foldl (\\(minVal, minIndex) (val, idx) -> if val < minVal then (val, idx) else (minVal, minIndex)) (head xs, 0) (zip xs [0..]))\n\nmain :: IO ()\nmain = do\n  let matrix = [[5, 10, 15],\n                [7, (-3), 9],\n                [4, 2, (-8)]]\n  let result = removeMinRowsCols matrix\n  putStrLn \"Original Matrix:\"\n  print matrix\n  putStrLn \"Matrix after removal:\"\n  print result",
    "filename": "fed6b0a6f93667639c8cee8978a73d28_0.swift"
  },
  {
    "conversation_hash": "5d47adbb6bc12ede6b4a2a1e47e4c39a",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "if (Mix_PlayingMusic()) {\n    // Music is currently playing\n} else {\n    // No music is currently playing\n}",
    "filename": "5d47adbb6bc12ede6b4a2a1e47e4c39a_10.swift"
  },
  {
    "conversation_hash": "ad7194c074359c65d80dc7b619c17ea6",
    "code_index": 3,
    "language": "Swift",
    "libraries": [
      "CoreImage"
    ],
    "code": "import CoreImage\n\nfunc linearizeImage(image: CIImage) -> CIImage? {\n    // Создаем CIContext\n    let context = CIContext()\n    \n    // Создаем фильтр CILinearToSRGBToneCurve\n    let linearToSRGBFilter = CIFilter(name: \"CILinearToSRGBToneCurve\")\n    linearToSRGBFilter?.setValue(image, forKey: kCIInputImageKey)\n    \n    // Применяем фильтр CILinearToSRGBToneCurve\n    guard let outputImage = linearToSRGBFilter?.outputImage else { return nil }\n    \n    // Преобразуем CIImage в CGImage\n    guard let cgImage = context.createCGImage(outputImage, from: outputImage.extent) else { return nil }\n    \n    // Создаем UIImage из CGImage\n    let outputUIImage = UIImage(cgImage: cgImage)\n    \n    return outputUIImage\n}",
    "filename": "ad7194c074359c65d80dc7b619c17ea6_3.swift"
  },
  {
    "conversation_hash": "6d3315223a270be44f51de104cf87632",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'app-nombre-componente',\n  templateUrl: './nombre-componente.component.html',\n  styleUrls: ['./nombre-componente.component.css']\n})\nexport class NombreComponenteComponent {\n  constructor(private elementRef: ElementRef) { }\n}",
    "filename": "6d3315223a270be44f51de104cf87632_0.swift"
  },
  {
    "conversation_hash": "6d3315223a270be44f51de104cf87632",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, ElementRef, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'app-nombre-componente',\n  templateUrl: './nombre-componente.component.html',\n  styleUrls: ['./nombre-componente.component.css']\n})\nexport class NombreComponenteComponent {\n  @ViewChild('cotizacionForm') cotizacionForm: ElementRef;\n\n  constructor(private elementRef: ElementRef) { }\n}",
    "filename": "6d3315223a270be44f51de104cf87632_2.swift"
  },
  {
    "conversation_hash": "5337ed8065e9d25a4cdeed5d6ff4104d",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "the"
    ],
    "code": "extends Camera3D\n\nvar player : Node\nvar follow_distance : float = 10.0\n\nfunc _ready():\n    player = get_node(\"path/to/player\")\n\nfunc _process(delta: float):\n    if player:\n        var target_position = player.global_transform.origin\n        var cam_position = global_transform.origin\n        \n        # Calculate the direction vector from the camera to the target\n        var direction = target_position - cam_position\n        \n        # Move the camera towards the target based on follow_distance\n        var new_position = cam_position.move_toward(target_position, follow_distance * delta)\n        \n        # Update the camera's position\n        global_transform.origin = new_position\n}",
    "filename": "5337ed8065e9d25a4cdeed5d6ff4104d_1.swift"
  },
  {
    "conversation_hash": "0f600aa3a5c5dd39f146a4a24ec5ddc6",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "extends KinematicBody\n\nexport var rotation_speed: float = 180  # Adjust as necessary\n\nfunc _physics_process(delta: float) -> void:\n    var input_direction = Vector2(\n        Input.get_action_strength(\"ui_right\") - Input.get_action_strength(\"ui_left\"),\n        Input.get_action_strength(\"ui_down\") - Input.get_action_strength(\"ui_up\")\n    ).normalized()\n\n    var movement_direction = Vector3(input_direction.x, 0, input_direction.y)\n    if movement_direction.length_squared() > 0.01:\n        var current_rotation = rotation.y  # Save the current rotation in radians\n        var target_rotation = movement_direction.angle_to(Vector3.FORWARD) - (PI / 2.0)\n        var final_rotation = lerp_angle(current_rotation, target_rotation, rotation_speed * delta)\n        rotation.y = final_rotation\n\nfunc lerp_angle(a: float, b: float, t: float) -> float:\n    var angle = wrapf(b - a, -PI, PI)\n    return wrapf(a + angle * clamp(t, 0, 1), -PI, PI)\n\nfunc wrapf(value: float, min_value: float, max_value: float) -> float:\n    var range = max_value - min_value\n    return fmod((value - min_value), range) + min_value",
    "filename": "0f600aa3a5c5dd39f146a4a24ec5ddc6_6.swift"
  },
  {
    "conversation_hash": "d03065c100e82e65aeedf34d1bee98c3",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "extends Camera3D\n\nexport var sensitivity: float = 0.1\n\nvar is_rotating: bool = false\nvar mouse_delta: Vector2\nvar rotation_angles: Vector2\n\nfunc _ready():\n    Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)\n    set_process_input(true)\n    Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)\n\nfunc _input(event: InputEvent):\n    if event is InputEventMouseMotion:\n        var motion: InputEventMouseMotion = event\n        mouse_delta = Vector2(motion.relative_x, motion.relative_y)\n        is_rotating = true\n\nfunc _physics_process(delta: float):\n    if is_rotating:\n        rotation_angles += mouse_delta * sensitivity\n        set_rotation_degrees(Vector3(deg2rad(rotation_angles.y), deg2rad(rotation_angles.x), 0))\n        is_rotating = false",
    "filename": "d03065c100e82e65aeedf34d1bee98c3_0.swift"
  },
  {
    "conversation_hash": "d03065c100e82e65aeedf34d1bee98c3",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "extends Camera3D\n\nexport var sensitivity = 0.1\n\nvar is_rotating = false\nvar mouse_delta: Vector2\nvar rotation_angles: Vector2\n\nfunc _ready():\n    Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)\n    set_process_input(true)\n    Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)\n\nfunc _input(event: InputEvent):\n    if event is InputEventMouseMotion:\n        var motion: InputEventMouseMotion = event\n        mouse_delta = Vector2(motion.relative_x, motion.relative_y)\n        is_rotating = true\n\nfunc _physics_process(delta):\n    if is_rotating:\n        rotation_angles += mouse_delta * sensitivity\n        set_rotation_degrees(Vector3(deg2rad(rotation_angles.y), deg2rad(rotation_angles.x), 0))\n        is_rotating = false",
    "filename": "d03065c100e82e65aeedf34d1bee98c3_1.swift"
  },
  {
    "conversation_hash": "d03065c100e82e65aeedf34d1bee98c3",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "extends Camera3D\n\nexport var sensitivity = 0.1\n\nvar is_rotating = false\nvar mouse_delta: Vector2\nvar rotation_angles: Vector2\n\nfunc _ready():\n    Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)\n    set_process_input(true)\n    Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)\n\nfunc _input(event: InputEvent):\n    if event is InputEventMouseMotion:\n        var motion: InputEventMouseMotion = event\n        mouse_delta = Vector2(motion.relative_x, motion.relative_y)\n        is_rotating = true\n\nfunc _physics_process(delta):\n    if is_rotating:\n        rotation_angles += mouse_delta * sensitivity\n        set_rotation_degrees(Vector3(deg2rad(rotation_angles.y), deg2rad(rotation_angles.x), 0))\n        is_rotating = false",
    "filename": "d03065c100e82e65aeedf34d1bee98c3_2.swift"
  },
  {
    "conversation_hash": "d03065c100e82e65aeedf34d1bee98c3",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "export var sensitivity = 0.1\n\nvar is_rotating = false\nvar mouse_delta: Vector2\nvar rotation_angles: Vector2\n\nfunc _ready():\n    Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)\n    set_process_input(true)\n    Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)\n\nfunc _input(event: InputEvent):\n    if event is InputEventMouseMotion:\n        var motion: InputEventMouseMotion = event\n        mouse_delta = Vector2(motion.relative_x, motion.relative_y)\n        is_rotating = true\n\nfunc _physics_process(delta):\n    if is_rotating:\n        rotation_angles += mouse_delta * sensitivity\n        set_rotation_degrees(Vector3(deg2rad(rotation_angles.y), deg2rad(rotation_angles.x), 0))\n        is_rotating = false",
    "filename": "d03065c100e82e65aeedf34d1bee98c3_3.swift"
  },
  {
    "conversation_hash": "d7812a53f22cd15c563db3dcd912c331",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "extends Camera3D\n\nvar sensitivity: float = 0.2\nvar rotation_speed: float = 1.0\n\nvar mouse_delta: Vector2 = Vector2.ZERO\nvar custom_rotation: Vector2 = Vector2.ZERO\n\nfunc _ready():\n    set_process_input(true)\n\nfunc _input(event: InputEvent):\n    if event is InputEventMouseMotion:\n        var event_motion = event as InputEventMouseMotion\n        mouse_delta = event_motion.relative / get_viewport_rect().size * sensitivity * rotation_speed\n        custom_rotation += mouse_delta\n        \n        custom_rotation.x = clamp(custom_rotation.x, -90, 90)\n        \n        set_rotation_degrees(Vector3(custom_rotation.x, custom_rotation.y, 0.0))",
    "filename": "d7812a53f22cd15c563db3dcd912c331_0.swift"
  },
  {
    "conversation_hash": "d7812a53f22cd15c563db3dcd912c331",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "extends Camera3D\n\nvar sensitivity: float = 0.2\nvar rotation_speed: float = 1.0\n\nvar mouse_delta: Vector2 = Vector2.ZERO\nvar custom_rotation: Vector2 = Vector2.ZERO\n\nfunc _ready():\n    set_process_input(true)\n\nfunc _input(event: InputEvent):\n    if event is InputEventMouseMotion:\n        var event_motion = event as InputEventMouseMotion\n        mouse_delta = event_motion.relative / get_viewport().get_size() * sensitivity * rotation_speed\n        custom_rotation += mouse_delta\n        \n        custom_rotation.x = clamp(custom_rotation.x, -90, 90)\n        \n        set_rotation_degrees(Vector3(custom_rotation.x, custom_rotation.y, 0.0))",
    "filename": "d7812a53f22cd15c563db3dcd912c331_1.swift"
  },
  {
    "conversation_hash": "90a3c47943e5d28d559b0e4cc585bd4a",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  code1: [\n    {\n      operation: \"update\",\n      hour: 8,\n      short_text: \"none\",\n      cost_object_code: \"code1\",\n      cost_object_name: \"name1\",\n      ID: \"id1\"\n    }\n  ],\n  code2: [\n    {\n      operation: \"update\",\n      hour: 4,\n      short_text: \"none\",\n      cost_object_code: \"code2\",\n      cost_object_name: \"name2\",\n      ID: \"id2\"\n    }\n  ],\n  // more aggregated arrays...\n}",
    "filename": "90a3c47943e5d28d559b0e4cc585bd4a_1.swift"
  },
  {
    "conversation_hash": "b9215f5a29835aa6082b0060909bc18d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "struct Task: Identifiable {\n    var text: String\n    var id = UUID()\n}\n\nstruct ContentView: View {\n    @State var task = \"\"\n    @State var tasks: [Task] = []\n    \n    var body: some View {\n        // Your view code here\n    }\n}",
    "filename": "b9215f5a29835aa6082b0060909bc18d_0.swift"
  },
  {
    "conversation_hash": "b9215f5a29835aa6082b0060909bc18d",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "struct Task: Identifiable {\n    var text: String\n    var id = UUID()\n}\n\nstruct ContentView: View {\n    @State var task = \"\"\n    @State var tasks: [Task] = []\n    @State var isFocused = true\n    \n    var body: some View {\n        TextField(\"New task...\", text: $task)\n            .onSubmit {\n                add()\n            }\n            .focused($isFocused)\n    }\n    \n    func add() {\n        tasks.append(Task(text: task))\n        task = \"\" // Reset the task value if needed\n    }\n}",
    "filename": "b9215f5a29835aa6082b0060909bc18d_2.swift"
  },
  {
    "conversation_hash": "b9215f5a29835aa6082b0060909bc18d",
    "code_index": 3,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nstruct Task: Identifiable {\n    var text: String\n    var id = UUID()\n}\n\nstruct ContentView: View {\n    @State private var task = \"\"\n    @State private var tasks: [Task] = []\n\n    @FocusState private var isFocused: Bool\n\n    var body: some View {\n        VStack {\n            TextField(\"New task...\", text: $task)\n                .focused($isFocused)\n                .onSubmit {\n                    add()\n                }\n            Button(\"Add Task\") {\n                add()\n            }\n        }\n    }\n\n    func add() {\n        tasks.append(Task(text: task))\n        task = \"\" // Reset the task value if needed\n        isFocused = true // Set focus back to the text field\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}",
    "filename": "b9215f5a29835aa6082b0060909bc18d_3.swift"
  },
  {
    "conversation_hash": "9d12d0cce55930c2d9528c58522412c6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "struct Task: Equatable {\n    // ... task properties and methods\n    \n    static func ==(lhs: Task, rhs: Task) -> Bool {\n        // implement your custom logic to compare two tasks for equality\n        return lhs.id == rhs.id\n    }\n}",
    "filename": "9d12d0cce55930c2d9528c58522412c6_0.swift"
  },
  {
    "conversation_hash": "c3549c23c6c0998c3c7de892c891f5a7",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "entry: {\n  module1: './path/to/module1/main.js',\n  module2: './path/to/module2/main.js',\n  // ...\n}",
    "filename": "c3549c23c6c0998c3c7de892c891f5a7_0.swift"
  },
  {
    "conversation_hash": "189be2995cea6aa53b7dc958d8fdb08e",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "db.requests.aggregate([\n  { \n    $group: {\n      _id: \"$ip\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 3\n  }\n])",
    "filename": "189be2995cea6aa53b7dc958d8fdb08e_2.swift"
  },
  {
    "conversation_hash": "5e359e1d75958783118284227de1e5ff",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "db.logs.aggregate([\n  {\n    $group: {\n      _id: \"$ipAddress\",\n      count: { $sum: 1 }\n    }\n  },\n  {\n    $sort: { count: -1 }\n  },\n  {\n    $limit: 3\n  }\n])",
    "filename": "5e359e1d75958783118284227de1e5ff_0.swift"
  },
  {
    "conversation_hash": "5e359e1d75958783118284227de1e5ff",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "[\n  { _id: \"192.168.1.1\", count: 500 },\n  { _id: \"10.0.0.2\", count: 350 },\n  { _id: \"172.16.0.10\", count: 300 }\n]",
    "filename": "5e359e1d75958783118284227de1e5ff_1.swift"
  },
  {
    "conversation_hash": "d2d2259549101b90b11500fdd41cebee",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "extends Node\nclass_name PlayerBase\n\nconst MAX_HEALTH = 200\n\nvar health: int = MAX_HEALTH setget set_health\nvar speed: float = 5.0\nvar jump_strength: float = 4.5\n\nsignal health_changed(health)\n\nfunc _ready() -> void:\n    initialize_ui()\n\nfunc initialize_ui() -> void:\n    var player_lifebar: ProgressBar = get_tree().current_scene.get_node(\"HUD/PlayerLifeBar\")\n    player_lifebar.max_value = MAX_HEALTH\n    player_lifebar.value = health\n\nfunc set_health(value: int) -> void:\n    health = clamp(value, 0, MAX_HEALTH)\n    update_health_ui()\n    emit_signal(\"health_changed\", health)\n\nfunc update_health_ui() -> void:\n    var player_lifebar: ProgressBar = get_tree().current_scene.get_node(\"HUD/PlayerLifeBar\")\n    player_lifebar.value = health\n\nfunc take_damage(damage: int) -> void:\n    set_health(health - damage)\n\nfunc heal(amount: int) -> void:\n    set_health(health + amount)\n\nfunc move(input_dir: Vector2) -> void:\n    pass  # To be implemented by child classes (2D / 3D)\n\nfunc attack() -> void:\n    pass  # To be implemented by child classes (2D / 3D)",
    "filename": "d2d2259549101b90b11500fdd41cebee_0.swift"
  },
  {
    "conversation_hash": "d2d2259549101b90b11500fdd41cebee",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "extends PlayerBase\nclass_name Player2D\n\n# Continue with specific references, properties, and methods for 2D gameplay mechanics.\n\nfunc move(input_dir: Vector2) -> void:\n\t# Include logic for 2D player movement, like applying velocity to a KinematicBody2D.\n\tpass\n\nfunc attack() -> void:\n\t# Include logic for 2D player attack, like spawning bullets or setting 'attacking' flags.\n\tpass\n\n# Additional 2D player-specific methods",
    "filename": "d2d2259549101b90b11500fdd41cebee_4.swift"
  },
  {
    "conversation_hash": "d2d2259549101b90b11500fdd41cebee",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "extends Node\nclass_name PlayerBase\n\nconst MAX_HEALTH = 200\n\nvar health: int = MAX_HEALTH setget set_health\nvar speed: float = 5.0\nvar jump_strength: float = 4.5\n\nsignal health_changed(new_health)\n\nfunc _ready() -> void:\n    initialize_ui()\n\nfunc initialize_ui() -> void:\n    var player_lifebar: ProgressBar = get_tree().current_scene.get_node(\"HUD/PlayerLifeBar\")\n    player_lifebar.max_value = MAX_HEALTH\n    player_lifebar.value = health\n\nfunc set_health(value: int) -> void:\n    health = clamp(value, 0, MAX_HEALTH)\n    update_health_ui()\n    emit_signal(\"health_changed\", health)\n\nfunc update_health_ui() -> void:\n    var player_lifebar: ProgressBar = get_tree().current_scene.get_node(\"HUD/PlayerLifeBar\")\n    player_lifebar.value = health\n\nfunc take_damage(damage: int) -> void:\n    set_health(health - damage)\n\nfunc heal(amount: int) -> void:\n    set_health(health + amount)\n\nfunc move(input_dir: Vector2) -> void:\n    pass  # To be implemented by child classes (2D / 3D)\n\nfunc attack() -> void:\n    pass  # To be implemented by child classes (2D / 3D)",
    "filename": "d2d2259549101b90b11500fdd41cebee_5.swift"
  },
  {
    "conversation_hash": "f2a8d0c440572bfe67bacdc0649f9544",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "var health: int = MAX_HEALTH setget set_health\n   \n   func set_health(value: int) -> void:\n       health = clamp(value, 0, MAX_HEALTH)\n       update_health_ui()\n       emit_signal(\"health_changed\", health)",
    "filename": "f2a8d0c440572bfe67bacdc0649f9544_9.swift"
  },
  {
    "conversation_hash": "f2a8d0c440572bfe67bacdc0649f9544",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "var health: int = MAX_HEALTH setget set_health, get_health\n\nfunc get_health() -> int:\n    return health\n\nfunc set_health(value: int) -> void:\n    health = clamp(value, 0, MAX_HEALTH)\n    update_health_ui()\n    emit_signal(\"health_changed\", health)",
    "filename": "f2a8d0c440572bfe67bacdc0649f9544_11.swift"
  },
  {
    "conversation_hash": "dbdd47bbcfb9132b4800805d4e693f90",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "Player2D",
      "PlayerBase"
    ],
    "code": "extends PlayerBase\nclass_name Player2D\n\nenum State { IDLE, RUN, JUMP, ATTACK }\nvar state = State.IDLE\n\n# Data (now stats will come from PlayerBase health)\nvar bullets_amount: int = 30\nvar attack_animation: String = \"Attack1\"\n@export var movement_data: MovementData\nvar stats: Stats = null  # It's not clear where 'Stats' comes from; you'll need to integrate this\n\n# References from Player2D\n# ...\n\n# Load Scenes\n# ...\n\nfunc _ready():\n\t# Note: You should remove this line if health is now managed by PlayerBase\n\t# If you have a Stats class to integrate, do it here\n\tinitialize_ui()  # Ensures that UI is initialized (from PlayerBase)\n\t\n\tEventManager.bullets_amount = bullets_amount\n\tEventManager.update_bullet_ui.emit()\n\t\n\tset_health(MAX_HEALTH)  # Initialized this way, assuming that stats.health is not required anymore\n\n# Additional methods you've written for Player2D\n# ...\n\nfunc take_damage(damage: int) -> void:\n\tset_health(health - damage)  # Overrides the take_damage method from PlayerBase\n\nfunc heal(amount: int) -> void:\n\tset_health(health + amount)  # Overrides the heal method from PlayerBase\n\n# The rest of your code...\n# ...\n\n# You need to determine how to integrate attack and move methods in your game's logic.\n# If the PlayerBase is designed to provide default logic for 2D and 3D movement, you should ensure that your Player2D methods do not conflict with PlayerBase or otherwise misrepresent the intended hierarchy.",
    "filename": "dbdd47bbcfb9132b4800805d4e693f90_0.swift"
  },
  {
    "conversation_hash": "dbdd47bbcfb9132b4800805d4e693f90",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "PlayerBase"
    ],
    "code": "extends PlayerBase\nclass_name Player2D\n\nenum State { IDLE, RUN, JUMP, ATTACK }\nvar state = State.IDLE\n\n# Player Data Specific to 2D\nvar bullets_amount: int = 30\nvar attack_animation: String = \"Attack1\"\n@export var movement_data: MovementData\n\n# References for 2D\n@onready var animator: AnimatedSprite2D = $AnimatedSprite2D\n# ...More references specific to your 2D setup\n\n# Load Scenes\n# ...\n\n# Overrides and Additional Methods\nfunc _ready() -> void:\n\tinitialize_ui()  # Call the initialization from PlayerBase\n\tEventManager.bullets_amount = bullets_amount\n\tEventManager.update_bullet_ui.emit()\n\t# ...\n\nfunc _physics_process(delta: float) -> void:\n\t# Handle 2D-specific physics here\n\t# ...\n\nfunc take_damage(damage: int) -> void:\n\tset_health(health - damage)\n\nfunc heal(amount: int) -> void:\n\tset_health(health + amount)\n\nfunc move(input_dir: Vector2) -> void:\n\t# Implement 2D movement logic here\n\tpass\n\nfunc attack() -> void:\n\t# Implement 2D attack logic here\n\tpass\n\n# ...Rest of your code",
    "filename": "dbdd47bbcfb9132b4800805d4e693f90_1.swift"
  },
  {
    "conversation_hash": "dbdd47bbcfb9132b4800805d4e693f90",
    "code_index": 2,
    "language": "Swift",
    "libraries": [
      "PlayerBase"
    ],
    "code": "extends PlayerBase\nclass_name Player3D\n\nenum State { IDLE, RUN, JUMP, ATTACK }\nvar state = State.IDLE\n\n# Player Data Specific to 3D\n# ...\n\n# References for 3D\n@onready var animation_player: AnimationPlayer = $AnimationPlayer\n# ...More references specific to your 3D setup\n\n# Load Scenes\n# ...\n\n# Overrides and Additional Methods\nfunc _ready() -> void:\n\tinitialize_ui()  # Call the initialization from PlayerBase\n\t# ...\n\nfunc _physics_process(delta: float) -> void:\n\t# Handle 3D-specific physics here\n\t# ...\n\nfunc take_damage(damage: int) -> void:\n\tset_health(health - damage)\n\nfunc heal(amount: int) -> void:\n\tset_health(health + amount)\n\nfunc move(input_dir: Vector3) -> void:\n\t# Implement 3D movement logic here\n\tpass\n\nfunc attack() -> void:\n\t# Implement 3D attack logic here\n\tpass\n\n# ...Rest of your code",
    "filename": "dbdd47bbcfb9132b4800805d4e693f90_2.swift"
  },
  {
    "conversation_hash": "154bd405e1c98aa7bdaaf112635fed37",
    "code_index": 17,
    "language": "Swift",
    "libraries": [],
    "code": "extends CharacterBody2D\nclass_name PlayerBase\n\n# Define jump_strength variable here\nexport var jump_strength: float = 4.5\n\n# ...\n\n# Make sure there is a method to access jump_strength\nfunc get_jump_strength() -> float:\n    return jump_strength\n\n# ...",
    "filename": "154bd405e1c98aa7bdaaf112635fed37_17.swift"
  },
  {
    "conversation_hash": "885652cf537ceed784e4b5ea2a869757",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": ".buttonPrimary {\n    position: relative; /* добавьте, чтобы задать контекст позиционирования для img */\n    /* остальные стили */\n\n}\n\n.buttonPrimary img {\n    position: absolute;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    visibility: hidden;\n    transition: opacity 0.3s;\n}\n\n.buttonPrimary:hover img {\n    opacity: 1;\n    visibility: visible;\n}",
    "filename": "885652cf537ceed784e4b5ea2a869757_2.swift"
  },
  {
    "conversation_hash": "885652cf537ceed784e4b5ea2a869757",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": ".buttonPrimary {\n    position: relative;\n    /* остальные стили */\n\n}\n\n.buttonPrimary img {\n    position: absolute;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    visibility: hidden;\n    transition: opacity 0.3s;\n}\n\n.buttonPrimary:hover img {\n    opacity: 1;\n    visibility: visible;\n}",
    "filename": "885652cf537ceed784e4b5ea2a869757_3.swift"
  },
  {
    "conversation_hash": "c80a6bb069577600cc5b32d2c6952463",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "extends Node\n\n# Singleton for changing scenes\nvar main_scene_3d = preload(\"res://Scenes/3D/main_scene.tscn\")\nvar main_scene_2d = preload(\"res://Scenes/2D/prototype.tscn\")\n\nfunc change_to_3d(player_2d_position: Vector2):\n\t# Save the 2D position if you need to retain it\n\t# Additional setup can be done here\n\tget_tree().change_scene_to(main_scene_3d)\n\nfunc change_to_2d(player_3d_position: Vector3):\n\t# Save the 3D position if you need to retain it\n\t# Additional setup can be done here\n\tget_tree().change_scene_to(main_scene_2d)",
    "filename": "c80a6bb069577600cc5b32d2c6952463_8.swift"
  },
  {
    "conversation_hash": "c80a6bb069577600cc5b32d2c6952463",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "extends Node\n\n# Singleton for changing scenes\n\nfunc change_to_3d(player_2d_position: Vector2):\n\t# Save the 2D position if you need to retain it\n\t# Additional setup can be done here, such as setting the player’s position\n\tget_tree().change_scene(\"res://demo/Scenes/main_scene.tscn\")\n\nfunc change_to_2d(player_3d_position: Vector3):\n\t# Save the 3D position if you need to retain it\n\t# Additional setup can be done here, such as setting the player’s position\n\tget_tree().change_scene(\"res://Scenes/Levels/prototype.tscn\")",
    "filename": "c80a6bb069577600cc5b32d2c6952463_10.swift"
  },
  {
    "conversation_hash": "e8ac2d3caf025fe77f287529de8c2253",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "for {\n    if someCondition {\n        break\n    }\n}",
    "filename": "e8ac2d3caf025fe77f287529de8c2253_5.swift"
  },
  {
    "conversation_hash": "b98247f093d6f6d65fca6e8e3cf88861",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "Button(action: {\n    // Code to perform when the button is tapped\n    showAlert()\n}, label: {\n    Image(\"square.and.arrow.up\")\n})",
    "filename": "b98247f093d6f6d65fca6e8e3cf88861_4.swift"
  },
  {
    "conversation_hash": "776e5c4ae3a78201f2dc0ae0d3c03d58",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        NavigationView { // wrap content inside a NavigationView\n            VStack {\n                NavigationLink(destination: GameView()) { // use destination parameter instead of label\n                    Label(\"Start game\", systemImage: \"play.fill\")\n                }\n            }\n        }\n    }\n}\n\nstruct GameView: View {\n    var body: some View {\n        Text(\"Game View\")\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}",
    "filename": "776e5c4ae3a78201f2dc0ae0d3c03d58_0.swift"
  },
  {
    "conversation_hash": "fff1da0e72ac676a89c6efcbdde39599",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        NavigationView {\n            NavigationLink(destination: GameView()) {\n                Label(\"Start game\", systemImage: \"play.fill\")\n            }\n        }\n    }\n}\n\nstruct GameView: View {\n    var body: some View {\n        Text(\"Game View\")\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}",
    "filename": "fff1da0e72ac676a89c6efcbdde39599_1.swift"
  },
  {
    "conversation_hash": "b26d19332ee8a93cc2c9d7f6bd5c5dd4",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "repositories {\n       google()\n       mavenLocal()\n       // ...\n   }",
    "filename": "b26d19332ee8a93cc2c9d7f6bd5c5dd4_10.swift"
  },
  {
    "conversation_hash": "31c4e6ec56d2926cca0cfde46ec56770",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "main :: IO ()\nmain = do\n  let nums = [1, 2, 3, 4, 5, 6, 7]\n  putStrLn $ \"Original List: \" ++ show nums\n  putStrLn $ \"Balanced Tree: \" ++ show (balance nums)",
    "filename": "31c4e6ec56d2926cca0cfde46ec56770_11.swift"
  },
  {
    "conversation_hash": "dda174911cce72b6b4897943ee5b0ad2",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    compileSdk 34\n\n    defaultConfig {\n        applicationId \"com.example.mywebviewapp\"\n        minSdk 21\n        targetSdk 34\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n    // ...\n}\n\ndependencies {\n    // ...\n    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'\n}",
    "filename": "dda174911cce72b6b4897943ee5b0ad2_0.swift"
  },
  {
    "conversation_hash": "a05ecde446700e8953f6417e8a8c70c1",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "Wrap(\n  children: [\n    Text(\n      'First line',\n      // Additional properties\n    ),\n    Text(\n      'Second line',\n      // Additional properties\n    ),\n  ],\n)",
    "filename": "a05ecde446700e8953f6417e8a8c70c1_1.swift"
  },
  {
    "conversation_hash": "598b209ff4ea9c72503632b0995b1b5f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "return Container(\n  height: <height>,\n  child: Column(\n    crossAxisAlignment: CrossAxisAlignment.start,\n    children: [\n      TabScreen(\n        padding: EdgeInsets.only(left: 52.w, right: 48.w, top: 52.h),\n        tabBarWidth: 800.w,\n        title: title,\n        tabs: [\n          Tab(text: usbModemLabel),\n          Tab(text: wirelessLabel),\n        ],\n        screens: <Widget>[\n          USBModemMIFI(\n            devices: usbDevices,\n            faqs: usbFaqs,\n            faqTitle: faqTitle,\n          ),\n          HomeWireless(\n            devices: wirelessDevices,\n            faqs: wirelessFaqs,\n            faqTitle: faqTitle,\n            homePlans: homePlans,\n          ),\n        ],\n        isLoading: isLoading,\n      )\n    ],\n  ),\n);",
    "filename": "598b209ff4ea9c72503632b0995b1b5f_0.swift"
  },
  {
    "conversation_hash": "598b209ff4ea9c72503632b0995b1b5f",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "return Container(\n  height: <height>,\n  child: Column(\n    children: [\n      TabScreen(\n        padding: EdgeInsets.only(left: 52.w, right: 48.w, top: 52.h),\n        tabBarWidth: 800.w,\n        title: title,\n        tabs: [\n          Tab(text: usbModemLabel),\n          Tab(text: wirelessLabel),\n        ],\n        screens: <Widget>[\n          USBModemMIFI(\n            devices: usbDevices,\n            faqs: usbFaqs,\n            faqTitle: faqTitle,\n          ),\n          HomeWireless(\n            devices: wirelessDevices,\n            faqs: wirelessFaqs,\n            faqTitle: faqTitle,\n            homePlans: homePlans,\n          ),\n        ],\n        isLoading: isLoading,\n      ),\n      YourAdditionalWidget(),\n    ],\n  ),\n);",
    "filename": "598b209ff4ea9c72503632b0995b1b5f_6.swift"
  },
  {
    "conversation_hash": "61075cf0f1dce2ca2061326fb9f4240f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  width: 230.w,\n  height: 300.h,\n  decoration: BoxDecoration(\n    color: UIColors.lightGrey,\n    borderRadius: BorderRadius.circular(16.sp),\n  ),\n  child: Align(\n    alignment: Alignment.center,\n    child: Text(\n      widget.fbName!,\n      style: TextStyle(\n        fontSize: 32.sp,\n        fontWeight: FontWeight.bold,\n      ),\n    ),\n  ),\n)",
    "filename": "61075cf0f1dce2ca2061326fb9f4240f_0.swift"
  },
  {
    "conversation_hash": "61075cf0f1dce2ca2061326fb9f4240f",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  width: 230.w,\n  height: 300.h,\n  decoration: BoxDecoration(\n    color: UIColors.lightGrey,\n    borderRadius: BorderRadius.circular(16.sp),\n  ),\n  child: Align(\n    alignment: Alignment.center,\n    child: Row(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: [\n        Image.asset(\n          'assets/images/photo.png', // Replace with the path to your photo\n          width: 50.sp, // Adjust the width as per your requirements\n          height: 50.sp, // Adjust the height as per your requirements\n        ),\n        SizedBox(width: 8.sp), // Add some space between the photo and the text\n        Text(\n          widget.fbName!,\n          style: TextStyle(\n            fontSize: 32.sp,\n            fontWeight: FontWeight.bold,\n          ),\n        ),\n      ],\n    ),\n  ),\n)",
    "filename": "61075cf0f1dce2ca2061326fb9f4240f_1.swift"
  },
  {
    "conversation_hash": "61075cf0f1dce2ca2061326fb9f4240f",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  width: 230.w,\n  height: 300.h,\n  decoration: BoxDecoration(\n    color: UIColors.lightGrey,\n    borderRadius: BorderRadius.circular(16.sp),\n  ),\n  child: Align(\n    alignment: Alignment.center,\n    child: Row(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: [\n        Image.network(\n          'https://admin.ecommerce.dceg.vodafone.com.eg/api/asset/content/twitter.png?contextRequest=%7B%22forceCatalogForFetch%22:false,%22applicationId%22:%2201H1PCJWF7Z70Z0JD3FZ9M1BHT%22,%22tenantId%22:%225DF1363059675161A85F576D%22%7D',\n          width: 50.sp, // Adjust the width as per your requirements\n          height: 50.sp, // Adjust the height as per your requirements\n        ),\n        SizedBox(width: 8.sp), // Add some space between the photo and the text\n        Text(\n          widget.fbName!,\n          style: TextStyle(\n            fontSize: 32.sp,\n            fontWeight: FontWeight.bold,\n          ),\n        ),\n      ],\n    ),\n  ),\n)",
    "filename": "61075cf0f1dce2ca2061326fb9f4240f_2.swift"
  },
  {
    "conversation_hash": "61075cf0f1dce2ca2061326fb9f4240f",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  margin: EdgeInsets.only(bottom: 16.sp), // Adjust the margin value as per your requirements\n  child: Text(\n    widget.instaName!,\n    style: TextStyle(\n      fontSize: 32.sp,\n      fontWeight: FontWeight.bold,\n    ),\n  ),\n)",
    "filename": "61075cf0f1dce2ca2061326fb9f4240f_3.swift"
  },
  {
    "conversation_hash": "61075cf0f1dce2ca2061326fb9f4240f",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "Align(\n  alignment: Alignment.bottomCenter,\n  child: Column(\n    mainAxisAlignment: MainAxisAlignment.spaceAround,\n    children: [\n      Image.network(\n        width: 100.w,\n        height: 100.h,\n        getImgURL(widget.instaLogo),\n      ),\n      Padding(\n        padding: EdgeInsets.only(bottom: 8.sp), // Adjust the padding value as per your requirements\n        child: Text(\n          widget.instaName!,\n          style: TextStyle(\n            fontSize: 32.sp,\n            fontWeight: FontWeight.bold,\n          ),\n        ),\n      ),\n    ],\n  ),\n)",
    "filename": "61075cf0f1dce2ca2061326fb9f4240f_4.swift"
  },
  {
    "conversation_hash": "1a4aabb716940e285f48fcf6b0c8e878",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "props: {\n  item: {\n    type: Object,\n    default: null\n  }\n},\ndata() {\n  return {\n    dialog: {\n      form: {\n        id: this.item ? this.item.id : \"\",\n        number: this.item ? this.item.number : \"\",\n        arrows: this.item ? this.item.arrows.join(\",\") : \"\",\n      },\n      visible: false,\n    }\n  }\n},",
    "filename": "1a4aabb716940e285f48fcf6b0c8e878_0.swift"
  },
  {
    "conversation_hash": "87616ddee00a432b0235e2722b3a2434",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "struct SomeView: View {\n    // Доступ к экземпляру через Environment\n    @EnvironmentObject var exampleData: ExampleData\n\n    var body: some View {\n        Text(\"Значение exampleNumber: \\(exampleData.exampleNumber)\")\n            .onTapGesture {\n                exampleData.exampleNumber += 1\n            }\n    }\n}",
    "filename": "87616ddee00a432b0235e2722b3a2434_2.swift"
  },
  {
    "conversation_hash": "87616ddee00a432b0235e2722b3a2434",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "struct BaseView: View {\n    @State var exampleNumber: Int = 7\n\n    // var body: some View { ... }\n}\n\nstruct ContentView: BaseView {\n    var body: some View {\n        Text(\"Пример числа: \\(exampleNumber)\")\n    }\n}",
    "filename": "87616ddee00a432b0235e2722b3a2434_3.swift"
  },
  {
    "conversation_hash": "f7f8d1c46543ca183673a9be06494517",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n        Text(\"Example Number: \\(exampleNumber)\")\n    }\n}",
    "filename": "f7f8d1c46543ca183673a9be06494517_1.swift"
  },
  {
    "conversation_hash": "5d26ecda239a49085e245bb8ee054ffe",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nprotocol ViewStateModifier: View {\n    associatedtype ModifierContent: View\n    \n    @ViewBuilder func modifierBody(content: Self.ModifierContent) -> some View\n}\n\nextension ViewStateModifier {\n    func modifierBody(content: Self.ModifierContent) -> some View {\n        // Default @State parameter implementation\n        content\n            .padding() // Add any default modifier you want\n    }\n    \n    var body: some View {\n        modifierBody(content: self)\n    }\n}",
    "filename": "5d26ecda239a49085e245bb8ee054ffe_0.swift"
  },
  {
    "conversation_hash": "5d26ecda239a49085e245bb8ee054ffe",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View, ViewStateModifier {\n    typealias ModifierContent = self // `self` refers to the conforming view\n    \n    @State private var textField: String = \"\" // Add any default @State properties you want\n    \n    var body: some View {\n        VStack {\n            TextField(\"Enter text\", text: $textField)\n            Text(\"Entered text: \\(textField)\")\n        }\n        .body // Apply the default modifier\n    }\n}",
    "filename": "5d26ecda239a49085e245bb8ee054ffe_1.swift"
  },
  {
    "conversation_hash": "9989fede011a80221b06e9da8288d8ae",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nstruct MyStateViewModifier: ViewModifier {\n    @State private var myState: Bool = false\n    \n    func body(content: Content) -> some View {\n        content\n            // Apply any logic or views that use myState here\n            // For example, if you want to toggle the state when the view is tapped:\n            .onTapGesture {\n                myState.toggle()\n            }\n            // You could also use the state to conditionally modify the content view\n            .opacity(myState ? 0.5 : 1)\n    }\n}\n\nextension View {\n    func withMyState() -> some View {\n        self.modifier(MyStateViewModifier())\n    }\n}\n\nstruct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n            .withMyState() // Using custom view modifier with @State\n    }\n}\n\n@main\nstruct MyApp: App {\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n        }\n    }\n}",
    "filename": "9989fede011a80221b06e9da8288d8ae_0.swift"
  },
  {
    "conversation_hash": "6929a441105f770a576e369a634aa5df",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "return Column(\n  children: [\n    Table(\n      border: TableBorder.symmetric(\n        inside: BorderSide(\n          color: UIColors.aluminium,\n          style: BorderStyle.solid,\n          width: 2.w,\n        ),\n      ),\n      children: [\n        TableRow(\n          decoration: BoxDecoration(\n            border: Border(\n              top: BorderSide(\n                color: UIColors.aluminium,\n                style: BorderStyle.solid,\n                width: 3.w,\n              ),\n              bottom: BorderSide(\n                color: UIColors.aluminium,\n                style: BorderStyle.solid,\n                width: 3.w,\n              ),\n              right: BorderSide(\n                color: UIColors.aluminium,\n                style: BorderStyle.solid,\n                width: 3.w,\n              ),\n              left: BorderSide(\n                color: UIColors.aluminium,\n                style: BorderStyle.solid,\n                width: 3.w,\n              ),\n            ),\n          ),\n          children: [\n            // Fixed row cells\n            Padding(\n              padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 2.h),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                mainAxisAlignment: MainAxisAlignment.start,\n                children: [\n                  SizedBox(height: 5.h),\n                  sectionTitle('Price'),\n                  SizedBox(height: 7.h),\n                  specificationsType('Price'),\n                ],\n              ),\n            ),\n            Padding(\n              padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 2.h),\n              child: TableCell(\n                child: specificationsDetails(0, '300'),\n              ),\n            ),\n            Padding(\n              padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 2.h),\n              child: TableCell(\n                child: specificationsDetails(0, '300'),\n              ),\n            ),\n            Padding(\n              padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 2.h),\n              child: TableCell(\n                child: specificationsDetails(0, '300'),\n              ),\n            ),\n          ],\n        ),\n      ],\n    ),\n    Table(\n      border: TableBorder.symmetric(\n        inside: BorderSide(\n          color: UIColors.aluminium,\n          style: BorderStyle.solid,\n          width: 2.w,\n        ),\n      ),\n      children: [\n        tableRow(0),\n      ],\n    ),\n  ],\n);",
    "filename": "6929a441105f770a576e369a634aa5df_0.swift"
  },
  {
    "conversation_hash": "931af4d4eea583b6509619227f20c73c",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "return Column(\n  children: [\n    Table(\n      border: TableBorder.symmetric(\n        inside: BorderSide(\n          color: UIColors.aluminium,\n          style: BorderStyle.solid,\n          width: 2.w,\n        ),\n      ),\n      children: [\n        TableRow(\n          decoration: BoxDecoration(\n            border: Border(\n              top: BorderSide(\n                color: UIColors.aluminium,\n                style: BorderStyle.solid,\n                width: 3.w,\n              ),\n              bottom: BorderSide(\n                color: UIColors.aluminium,\n                style: BorderStyle.solid,\n                width: 3.w,\n              ),\n              right: BorderSide(\n                color: UIColors.aluminium,\n                style: BorderStyle.solid,\n                width: 3.w,\n              ),\n              left: BorderSide(\n                color: UIColors.aluminium,\n                style: BorderStyle.solid,\n                width: 3.w,\n              ),\n            ),\n          ),\n          children: [\n            Padding(\n              padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 2.h),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                mainAxisAlignment: MainAxisAlignment.start,\n                children: [\n                  SizedBox(height: 5.h),\n                  Text('Price'),\n                  SizedBox(height: 7.h),\n                  Text('Price'),\n                ],\n              ),\n            ),\n            Padding(\n              padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 2.h),\n              child: TableCell(\n                child: Text('300'),\n              ),\n            ),\n            Padding(\n              padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 2.h),\n              child: TableCell(\n                child: Text('300'),\n              ),\n            ),\n            Padding(\n              padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 2.h),\n              child: TableCell(\n                child: Text('300'),\n              ),\n            ),\n          ],\n        ),\n      ],\n    ),\n  ],\n);",
    "filename": "931af4d4eea583b6509619227f20c73c_2.swift"
  },
  {
    "conversation_hash": "e47e8930ed859f52b04b26898682206a",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "import { defineComponent } from 'vue';\n...\nexport default defineComponent({\n  name: \"ArrowsActionDialog\",\n  ...\n  methods: {\n    success() {\n      const newItem: { id: string; number: string } = {\n        id: this.dialog.form.id,\n        number: this.dialog.form.number,\n      };\n      ...\n    },\n  },\n});",
    "filename": "e47e8930ed859f52b04b26898682206a_2.swift"
  },
  {
    "conversation_hash": "e47e8930ed859f52b04b26898682206a",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "methods: {\n  handleEditArrow(item: any) {\n    // ...\n  },\n},",
    "filename": "e47e8930ed859f52b04b26898682206a_5.swift"
  },
  {
    "conversation_hash": "e47e8930ed859f52b04b26898682206a",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "methods: {\n  handleAddArrow() {\n    // ...\n  },\n},",
    "filename": "e47e8930ed859f52b04b26898682206a_6.swift"
  },
  {
    "conversation_hash": "e47e8930ed859f52b04b26898682206a",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "methods: {\n  saveArrowItem(item: any) {\n    // ...\n  },\n},",
    "filename": "e47e8930ed859f52b04b26898682206a_7.swift"
  },
  {
    "conversation_hash": "e47e8930ed859f52b04b26898682206a",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "methods: {\n  handleSaveArrow() {\n    // ...\n  },\n},",
    "filename": "e47e8930ed859f52b04b26898682206a_10.swift"
  },
  {
    "conversation_hash": "953439b942e50afe12d5b91d8421aa10",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  label: \"Связи '+'\",\n  options: [\n    { label: \"Option 1\", value: \"1\" },\n    { label: \"Option 2\", value: \"2\" }\n  ]\n}",
    "filename": "953439b942e50afe12d5b91d8421aa10_5.swift"
  },
  {
    "conversation_hash": "e0be0c35f4d25ed59e13aa4057760a7a",
    "code_index": 18,
    "language": "Swift",
    "libraries": [],
    "code": "allprojects {\n    repositories {\n        google()\n        // Other repositories...\n    }\n}",
    "filename": "e0be0c35f4d25ed59e13aa4057760a7a_18.swift"
  },
  {
    "conversation_hash": "2936e70f6adad8e7ffe884ff6ac6d8e0",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "processInt(int) {\n  let result = int * 0.25\n  // ... resampling logic ...\n  const val = result * 4\n  return val\n}",
    "filename": "2936e70f6adad8e7ffe884ff6ac6d8e0_1.swift"
  },
  {
    "conversation_hash": "2a2623d9a54b0c3c1465e10c0c458471",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {\n    if let url = navigationAction.request.url {\n        let urlStr = url.absoluteString\n        \n        // 判断是否需要拦截某个url，可以根据具体的条件来判断\n        if urlStr.contains(\".js\") || urlStr.contains(\".css\") {\n            // 拦截请求，替换为本地文件\n            if let localFilePath = Bundle.main.path(forResource: \"localFile\", ofType: \"js\"), let localFileURL = URL(fileURLWithPath: localFilePath) {\n                let request = URLRequest(url: localFileURL)\n                webView.load(request)\n                decisionHandler(.cancel) // 取消当前请求\n                return\n            }\n        }\n    }\n    \n    // 其他情况不需要拦截，继续加载\n    decisionHandler(.allow)\n}",
    "filename": "2a2623d9a54b0c3c1465e10c0c458471_1.swift"
  },
  {
    "conversation_hash": "023b110320d411d03ba37ca91b340533",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "Appodeal",
      "SwiftUI"
    ],
    "code": "import SwiftUI\nimport Appodeal\n\nstruct BannerView: UIViewRepresentable {\n    func makeUIView(context: Context) -> UIView {\n        let bannerView = Appodeal.bannerView(with: .banner320x50)\n        bannerView.rootViewController = UIApplication.shared.windows.first?.rootViewController\n        bannerView.loadAd()\n        return bannerView\n    }\n    \n    func updateUIView(_ uiView: UIView, context: Context) {}\n}",
    "filename": "023b110320d411d03ba37ca91b340533_0.swift"
  },
  {
    "conversation_hash": "023b110320d411d03ba37ca91b340533",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        VStack {\n            BannerView()\n            BannerView()\n            BannerView()\n            BannerView()\n            BannerView()\n            BannerView()\n            BannerView()\n        }\n    }\n}",
    "filename": "023b110320d411d03ba37ca91b340533_1.swift"
  },
  {
    "conversation_hash": "ab4b210da7368d15ca7f948dfc475234",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "Text(\n  'Hello, Flutter!',\n  style: TextStyle(\n    color: Colors.blue, // Adding color to the text\n    fontSize: 20, // Customizing font size\n    fontWeight: FontWeight.bold, // Customizing font weight\n    fontStyle: FontStyle.italic, // Customizing font style\n    fontFamily: 'Arial', // Customizing font family\n  ),\n)",
    "filename": "ab4b210da7368d15ca7f948dfc475234_2.swift"
  },
  {
    "conversation_hash": "ab4b210da7368d15ca7f948dfc475234",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "Text(\n  'Underline Text',\n  style: TextStyle(\n    decoration: TextDecoration.underline,\n    decorationColor: Colors.blue,\n    decorationThickness: 2.0,\n  ),\n)",
    "filename": "ab4b210da7368d15ca7f948dfc475234_3.swift"
  },
  {
    "conversation_hash": "a57b499ad1eef3b9879ab37b6e4a5df7",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "import { useStore } from '@/store'\n\nexport default {\n  methods: {\n    incrementCount() {\n      const store = useStore()\n      store.increment() // 调用actions中的increment函数，修改state中的count变量\n    }\n  }\n}",
    "filename": "a57b499ad1eef3b9879ab37b6e4a5df7_3.swift"
  },
  {
    "conversation_hash": "a57b499ad1eef3b9879ab37b6e4a5df7",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "// Cart.vue\n<template>\n  <div>\n    <h2>购物车</h2>\n    <ul>\n      <li v-for=\"(item, index) in cartItems\" :key=\"item.id\">\n        {{ item.name }} - 价格: {{ item.price }}\n        <button @click=\"removeFromCart(index)\">移除</button>\n      </li>\n    </ul>\n    <p>总计: {{ cartTotal }}</p>\n  </div>\n</template>\n\n<script>\nimport { useCartStore } from '@/store/cart'\n\nexport default {\n  computed: {\n    cartItems() {\n      const cartStore = useCartStore()\n      return cartStore.items\n    },\n    cartTotal() {\n      const cartStore = useCartStore()\n      return cartStore.cartTotal\n    }\n  },\n  methods: {\n    addToCart(item) {\n      const cartStore = useCartStore()\n      cartStore.addItem(item)\n    },\n    removeFromCart(index) {\n      const cartStore = useCartStore()\n      cartStore.removeItem(index)\n    }\n  }\n}\n</script>",
    "filename": "a57b499ad1eef3b9879ab37b6e4a5df7_5.swift"
  },
  {
    "conversation_hash": "89ab74bad3ea2bb33d56f1731ade9525",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "plugins {\n    id 'java'\n}\n\ngroup 'com.example.plugin'\nversion '1.0-SNAPSHOT'\n\napply plugin: 'groovy'\napply plugin: 'maven'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation gradleApi()\n    implementation localGroovy()\n\n    implementation 'org.codehaus.groovy:groovy-all:3.0.7'\n    implementation 'com.spotify:docker-client:20.10.11'\n}\n\ndependencies {\n    implementation gradleApi()\n    implementation localGroovy()\n\n    implementation 'org.codehaus.groovy:groovy-all:3.0.7'\n    implementation 'com.spotify:docker-client:20.10.11'\n}\n\njar {\n    dependsOn tasks.createImageTask\n}\n\ntask createImageTask(type: com.example.plugin.tasks.CreateDockerImageTask) {\n    // Configuration for the Docker task\n    imageName = 'my-docker-image'\n    dockerfilePath = 'path/to/Dockerfile'\n    srcDir = 'src/'\n\n    doLast {\n        // Additional configuration when the task is executed\n        println \"Docker image created!\"\n    }\n}",
    "filename": "89ab74bad3ea2bb33d56f1731ade9525_0.swift"
  },
  {
    "conversation_hash": "89ab74bad3ea2bb33d56f1731ade9525",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "plugins {\n    id 'java'\n}\n\ngroup 'com.example.plugin'\nversion '1.0-SNAPSHOT'\n\napply plugin: 'groovy'\napply plugin: 'maven'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation gradleApi()\n    implementation localGroovy()\n\n    implementation 'org.codehaus.groovy:groovy-all:3.0.7'\n    implementation 'com.spotify:docker-client:20.10.11'\n}\n\ndependencies {\n    implementation gradleApi()\n    implementation localGroovy()\n\n    implementation 'org.codehaus.groovy:groovy-all:3.0.7'\n    implementation 'com.spotify:docker-client:20.10.11'\n}\n\njar {\n    dependsOn tasks.createImageTask\n}\n\ntask createImageTask(type: com.example.plugin.tasks.CreateDockerImageTask) {\n    // Configuration for the Docker task\n    imageName = 'my-docker-image'\n    dockerfilePath = 'path/to/Dockerfile'\n    srcDir = 'src/'\n    envVariables = ['VAR1=value1', 'VAR2=value2'] // Optional environment variables\n\n    doLast {\n        // Additional configuration when the task is executed\n        println \"Docker image created!\"\n    }\n}",
    "filename": "89ab74bad3ea2bb33d56f1731ade9525_2.swift"
  },
  {
    "conversation_hash": "39a22273afb1bd1ab8e2c03c765264ec",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  // ... other routes for Module A\n  {\n    path: 'a',\n    component: ComponentA\n  }\n  // Do not include empty path route here\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ARoutingModule {}",
    "filename": "39a22273afb1bd1ab8e2c03c765264ec_0.swift"
  },
  {
    "conversation_hash": "39a22273afb1bd1ab8e2c03c765264ec",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  {\n    path: '',\n    component: ComponentB\n  },\n  // ... other routes for Module B\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BRoutingModule {}",
    "filename": "39a22273afb1bd1ab8e2c03c765264ec_2.swift"
  },
  {
    "conversation_hash": "39a22273afb1bd1ab8e2c03c765264ec",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  {\n    path: '',\n    component: ComponentB\n  },\n  // ... other routes for Module B\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BRoutingModule {}",
    "filename": "39a22273afb1bd1ab8e2c03c765264ec_5.swift"
  },
  {
    "conversation_hash": "39a22273afb1bd1ab8e2c03c765264ec",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  {\n    path: '',\n    component: ComponentB // This is the component you want to load when /module-b is accessed\n  },\n  // ...other Module B specific routes\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BRoutingModule {}",
    "filename": "39a22273afb1bd1ab8e2c03c765264ec_8.swift"
  },
  {
    "conversation_hash": "39a22273afb1bd1ab8e2c03c765264ec",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  {\n    path: '',\n    canActivate: [OktaAuthJsGuard],\n    component: AppComponent,\n    children: [\n      // ...\n      {\n        path: RouteDirection.medicalHistory, // Let's say this is \"medical-history\"\n        loadChildren: () =>\n          import('./components/medical-history-home/medical-history-home.module').then((m) => m.MedicalHistoryHomeModule),\n      },\n      // ...\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule { }",
    "filename": "39a22273afb1bd1ab8e2c03c765264ec_9.swift"
  },
  {
    "conversation_hash": "39a22273afb1bd1ab8e2c03c765264ec",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  {\n    path: '', // The path within the scope of MedicalHistoryHomeModule\n    component: MedicalHistoryHomeComponent // This is the component you want to load for \"medical-history\"\n  },\n  // ... other routes within Module B (MedicalHistoryHomeModule)\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MedicalHistoryHomeRoutingModule { }",
    "filename": "39a22273afb1bd1ab8e2c03c765264ec_10.swift"
  },
  {
    "conversation_hash": "39a22273afb1bd1ab8e2c03c765264ec",
    "code_index": 16,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  {\n    path: '',\n    canActivate: [OktaAuthJsGuard, AuthGuard],\n    canDeactivate: [DeactivateGuardMedicalHistory],\n    component: MedicalHistoryContainerComponent,\n  },\n  // ... other local routes if needed\n];\n\n@NgModule({\n  declarations: [MedicalHistoryContainerComponent],\n  imports: [\n    CommonModule,\n    MedicalHistoryModule,\n    RouterModule.forChild(routes), // forChild for feature module routes\n    // ... other imported modules\n  ],\n})\nexport class MedicalHistoryHomeModule { }",
    "filename": "39a22273afb1bd1ab8e2c03c765264ec_16.swift"
  },
  {
    "conversation_hash": "39a22273afb1bd1ab8e2c03c765264ec",
    "code_index": 19,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  // Do not define an empty path route here, only define paths that are specific for Module A\n  // ...\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ModuleARoutingModule { }",
    "filename": "39a22273afb1bd1ab8e2c03c765264ec_19.swift"
  },
  {
    "conversation_hash": "898d5ec608d4143bb6e1e470013336f8",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "main :: IO ()\nmain = do\n  let n = 4\n  let result = sumSequence n\n  putStrLn $ \"Сумма элементов последовательности при N = \" ++ show n ++ \" равна \" ++ show result",
    "filename": "898d5ec608d4143bb6e1e470013336f8_1.swift"
  },
  {
    "conversation_hash": "0a589fa8f7c064b8813c0701a64ab6b3",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    // Specify your Android dependencies here, for example:\n    implementation 'androidx.appcompat:appcompat:1.2.0'\n    // Other dependencies...\n}",
    "filename": "0a589fa8f7c064b8813c0701a64ab6b3_2.swift"
  },
  {
    "conversation_hash": "daa48c293ff4d43d513ecd3b71982f85",
    "code_index": 10,
    "language": "Swift",
    "libraries": [
      "WebKit"
    ],
    "code": "import WebKit\n\n// ...\n\nlet webView = WKWebView(frame: .zero)\nlet url = URL(string: \"https://www.example.com/postPage\")!\nvar request = URLRequest(url: url)\n\n// 这里设置 HTTP 方法为 POST\nrequest.httpMethod = \"POST\"\n\n// 添加 POST 请求的体。这是 `application/x-www-form-urlencoded` 类型的数据\nlet body: Data = \"key1=value1&key2=value2\".data(using: .utf8)!\nrequest.httpBody = body\n\n// 请求中设置 Content-Type\nrequest.addValue(\"application/x-www-form-urlencoded\", forHTTPHeaderField: \"Content-Type\")\n\n// 加载请求\nwebView.load(request)\n\n// ...\n\n// 将 webView 添加到视图层次结构（视图控制器中）\nview.addSubview(webView)",
    "filename": "daa48c293ff4d43d513ecd3b71982f85_10.swift"
  },
  {
    "conversation_hash": "cbb3ed8b7e6e9b21bfb211e7c4c80df8",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let websiteDataTypes = NSSet(array: [WKWebsiteDataTypeDiskCache, WKWebsiteDataTypeMemoryCache])\n\nlet date = NSDate(timeIntervalSince1970: 0)\n\nWKWebsiteDataStore.default().removeData(ofTypes: websiteDataTypes as! Set<String>, modifiedSince: date as Date, completionHandler:{ })\n\n// 或者移除所有缓存和会话数据\nWKWebsiteDataStore.default().removeData(ofTypes: WKWebsiteDataStore.allWebsiteDataTypes(), modifiedSince: date as Date, completionHandler:{ })",
    "filename": "cbb3ed8b7e6e9b21bfb211e7c4c80df8_0.swift"
  },
  {
    "conversation_hash": "5a22afe24958135763b0700f8acc6b14",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "private var items:Array = [\n    coldload1, coldload2, coldload3, coldload4, coldload5, coldload6, coldload7, coldload8, \n    coldload9, coldload10, coldload11, coldload12, coldload13, coldload14, coldload15, coldload16,\n    coldload17, coldload18, coldload19, coldload20, coldload21, coldload22, coldload23, coldload24\n];",
    "filename": "5a22afe24958135763b0700f8acc6b14_9.swift"
  },
  {
    "conversation_hash": "c861650089faa2bcbd232a712dc77132",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "class ViewController: UIViewController {\n    private var backgroundTimer: BackgroundTimer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        backgroundTimer = BackgroundTimer()\n    }\n\n    @IBAction func restartButtonTapped(_ sender: UIButton) {\n        backgroundTimer?.restartTimer()\n    }\n    \n    deinit {\n        backgroundTimer?.stopTimer()\n    }\n}",
    "filename": "c861650089faa2bcbd232a712dc77132_1.swift"
  },
  {
    "conversation_hash": "56b4bffe40b251eb4e0c485abf4638fd",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "import { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  // Component metadata\n})\nexport class MyComponent {\n  frmRegistro: FormGroup;\n\n  constructor(private fb: FormBuilder) {\n    this.frmRegistro = this.fb.group({\n      nombre: ['', Validators.required],\n      email: ['', Validators.required],\n      direccion: ['', Validators.required]\n    });\n  }\n\n  submit() {\n    // Obtener los valores del formulario\n    const nombre = this.frmRegistro.value.nombre;\n    const email = this.frmRegistro.value.email;\n    const direccion = this.frmRegistro.value.direccion;\n\n    // Insertar los registros en las tablas correspondientes\n    this.insertarRegistroTabla1(nombre, email);\n    this.insertarRegistroTabla2(nombre, direccion);\n\n    // Resto del código\n  }\n\n  insertarRegistroTabla1(nombre: string, email: string) {\n    // Código para insertar en la tabla 1\n  }\n\n  insertarRegistroTabla2(nombre: string, direccion: string) {\n    // Código para insertar en la tabla 2\n  }\n\n  // Resto del componente\n}",
    "filename": "56b4bffe40b251eb4e0c485abf4638fd_4.swift"
  },
  {
    "conversation_hash": "ceb7da5a4635f0afa1976dbf408bed27",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "watch: {\n  someObject: {\n    handler(newValue, oldValue) {\n      // handle the change\n    },\n    deep: true\n  }\n}",
    "filename": "ceb7da5a4635f0afa1976dbf408bed27_7.swift"
  },
  {
    "conversation_hash": "6b60ca8db5c124db0c0112e417ee4807",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "- type: calc\n    func: set\n    param: creatorTemplate\n    format: ''\n    value: 'Template: {{fleet.creator.template}}'\n    label: CREATOR TEMPLATE\n    condition: '{{fleet.creator.template}} != null'\n  - type: calc\n    func: set\n    param: creatorSerpQuery\n    format: ''\n    value: 'SERP Query: {{fleet.creator.serpQuery}}'\n    label: CREATOR SERP QUERY\n    condition: '{{fleet.creator.serpQuery}} != null'\n  - type: calc\n    func: set\n    param: handlerTemplate\n    format: ''\n    value: 'Template: {{fleet.handler.template}}'\n    label: HANDLER TEMPLATE\n    condition: '{{fleet.handler.template}} != null'\n  - type: calc\n    func: set\n    param: handlerWritingStyle\n    format: ''\n    value: 'Writing Style: {{fleet.handler.writingStyle}}'\n    label: HANDLER WRITING STYLE\n    condition: '{{fleet.handler.writingStyle}} != null'\n  - type: calc\n    func: set\n    param: handlerTone\n    format: ''\n    value: 'Tone: {{fleet.handler.tone}}'\n    label: HANDLER TONE\n    condition: '{{fleet.handler.tone}} != null'\n  - type: calc\n    func: set\n    param: handlerPov\n    format: ''\n    value: 'Point of View: {{fleet.handler.pov}}'\n    label: HANDLER POV\n    condition: '{{fleet.handler.pov}} != null'\n  - type: calc\n    func: set\n    param: handlerInjectPrevious\n    format: ''\n    value: 'Inject Previous: {{fleet.handler.injectPrevious}}'\n    label: HANDLER INJECT PREVIOUS\n    condition: '{{fleet.handler.injectPrevious}} != null'\n  - type: calc\n    func: set\n    param: handlerInjectDetails\n    format: ''\n    value: 'Inject Details: {{fleet.handler.injectDetails}}'\n    label: HANDLER INJECT DETAILS\n    condition: '{{fleet.handler.injectDetails}} != null'",
    "filename": "6b60ca8db5c124db0c0112e417ee4807_2.swift"
  },
  {
    "conversation_hash": "3c93d4365d97b3da358b5c37b0e7cd2f",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "allprojects {\n    repositories {\n        google()\n        mavenCentral() // или jcenter(), если Maven Central отсутствует\n    }\n}",
    "filename": "3c93d4365d97b3da358b5c37b0e7cd2f_3.swift"
  },
  {
    "conversation_hash": "0960c5a07b81a3e8bdeb84e5e7e0ce65",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "new ModuleFederationPlugin({\n  remotes: {\n    'microfrontend': 'microfrontend@http://localhost:3000/remoteEntry.js',\n  },\n  shared: ['@angular/core', '@angular/common', '@angular/router'],\n}),",
    "filename": "0960c5a07b81a3e8bdeb84e5e7e0ce65_3.swift"
  },
  {
    "conversation_hash": "27436208245df97c6bd1406e4d66d0ff",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "var bannerItem:Object = {\n    \"id\": \"BANNER_BLUE\",\n    \"count\": 1,\n    \"expireTime\": 0,\n    \"createdTime\": 0,\n    \"updatedTime\": 0\n};",
    "filename": "27436208245df97c6bd1406e4d66d0ff_8.swift"
  },
  {
    "conversation_hash": "8780e9bcab0ebb8745866d6c51d92a03",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "data() {\n  return {\n    // ...\n    row: null, // 或者初始值根据你的需求来定\n    // ...\n  }\n}",
    "filename": "8780e9bcab0ebb8745866d6c51d92a03_3.swift"
  },
  {
    "conversation_hash": "8780e9bcab0ebb8745866d6c51d92a03",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "methods: {\n  row() {\n    // 方法的实现...\n  }\n}",
    "filename": "8780e9bcab0ebb8745866d6c51d92a03_5.swift"
  },
  {
    "conversation_hash": "1ce5af635813d3790c8cd28e4927a333",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "pwa: {\n     workbox: {\n       skipWaiting: true,\n       // ...other options\n     }\n   }",
    "filename": "1ce5af635813d3790c8cd28e4927a333_1.swift"
  },
  {
    "conversation_hash": "1ce5af635813d3790c8cd28e4927a333",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "pwa: {\n     workbox: {\n       clientsClaim: true,\n       // ...other options\n     }\n   }",
    "filename": "1ce5af635813d3790c8cd28e4927a333_2.swift"
  },
  {
    "conversation_hash": "5a19b6d27dc687a0cd752f60e0529df9",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    // Add these lines for Kotlin standard library dependencies\n    minecraft \"com.mojang:minecraft:1.16.5\" // Use the version of Minecraft you are targeting\n    modImplementation \"org.jetbrains.kotlin:kotlin-stdlib\"\n    \n    // Rest of your dependencies...\n}",
    "filename": "5a19b6d27dc687a0cd752f60e0529df9_3.swift"
  },
  {
    "conversation_hash": "aaceff5e1d03fcf60ddc7e1bfedffc82",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": ".card {\n  transition: transform 0.5s ease, box-shadow 0.5s ease;\n}\n\n.card:hover {\n  transform: translateY(-10px);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n}",
    "filename": "aaceff5e1d03fcf60ddc7e1bfedffc82_0.swift"
  },
  {
    "conversation_hash": "2751e405697623e243107ccde17399b7",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "# Example GraphQL query to retrieve asset information along with related time series and events\nquery {\n  assetList(rootExternalIds: [\"main_site_asset\"], depth: 2) {\n    items {\n      externalId\n      name\n      parentExternalId\n      description\n      metadata {\n        key\n        value\n      }\n      timeSeries(limit: 5) {\n        items {\n          externalId\n          name\n          metadata {\n            key\n            value\n          }\n        }\n      }\n      events(limit: 5) {\n        items {\n          externalId\n          startTime\n          endTime\n          type\n          subtype\n          description\n        }\n      }\n    }\n  }\n}",
    "filename": "2751e405697623e243107ccde17399b7_1.swift"
  },
  {
    "conversation_hash": "af85121323570c64084f3c0e6d3818b7",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "template<Addable T> // The type T must satisfy the Addable concept.\nvoid func(T param) {\n    T var = param; // var also satisfies Addable, as its type is T.\n    // ... do something with var\n}",
    "filename": "af85121323570c64084f3c0e6d3818b7_10.swift"
  },
  {
    "conversation_hash": "589bf0f7028231b39292811f4f3e553d",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "plotOptions: {\n    line: {\n        lineWidth: 3, // Increase this to make the line thicker\n    }\n},",
    "filename": "589bf0f7028231b39292811f4f3e553d_4.swift"
  },
  {
    "conversation_hash": "361bb4ff80ac24eabddf4817ded353b5",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  disable: {\n    inline: ['links', 'emphasis'],\n    block: ['heading'],\n  },\n}",
    "filename": "361bb4ff80ac24eabddf4817ded353b5_3.swift"
  },
  {
    "conversation_hash": "c2f0b23cc37b0cecb1dde7645b4a7043",
    "code_index": 18,
    "language": "Swift",
    "libraries": [],
    "code": "import { useRoute } from 'vue-router'\n\nexport default {\n  setup() {\n    const route = useRoute()\n    \n    // 获取路由参数\n    const routeParams = route.params\n    // 获取特定的路由参数，假设参数名为 'id'\n    const id = route.params.id\n    \n    // 获取查询参数\n    const queryParams = route.query\n    // 获取特定的查询参数，假设查询参数名为 'search'\n    const searchQuery = route.query.search\n\n    // 访问哈希值\n    const hashValue = route.hash\n\n    // 你可以直接返回这些值或者使用它们\n    return {\n      id,\n      searchQuery,\n      routeParams,\n      queryParams,\n      hashValue\n    }\n  }\n}",
    "filename": "c2f0b23cc37b0cecb1dde7645b4a7043_18.swift"
  },
  {
    "conversation_hash": "9930d4947deb36527a5fc95aeaa18266",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "const imageVariants = {\n  hover:{\n    scale:1.3,\n    transition:{\n      duration:0.4,\n      ease: [1, 0, 0,1]\n    }\n  },\n  default:{\n    scale:1,\n    transition:{\n      duration:0.4,\n      ease: [1, 0, 0,1]\n    }\n  }\n}",
    "filename": "9930d4947deb36527a5fc95aeaa18266_6.swift"
  },
  {
    "conversation_hash": "821ebb82cba917ff1602d08abd125bc3",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "const tableRowVariant = {\n  open: {\n    maxHeight: 200, // Vous devez évaluer cette valeur en fonction du contenu\n    opacity: 1,\n    y: 0,\n    transition: { duration: 0.5, ease: [1, 0, 0, 1] }\n  },\n  closed: {\n    maxHeight: 0,\n    opacity: 0,\n    y: -20,\n    transition: { duration: 0.5, ease: [1, 0, 0, 1] },\n  },\n}",
    "filename": "821ebb82cba917ff1602d08abd125bc3_2.swift"
  },
  {
    "conversation_hash": "719d8aa5581c0d05d1741ac76ad88e40",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "runApp(MaterialApp(\n  debugShowCheckedModeBanner: false,\n  title: \"Application Quizz\",\n  home: MyWidget(Colors.teal, 40.0),\n));",
    "filename": "719d8aa5581c0d05d1741ac76ad88e40_1.swift"
  },
  {
    "conversation_hash": "719d8aa5581c0d05d1741ac76ad88e40",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "Text(\n  _questions[_currentQuestion].questionText,\n  textDirection: TextDirection.ltr,\n  style: TextStyle(\n    color: Colors.white,\n    fontWeight: FontWeight.bold,\n    fontStyle: FontStyle.italic,\n    fontSize: widget.textsize,  // Vous utilisez la taille du texte ici\n  ),\n),",
    "filename": "719d8aa5581c0d05d1741ac76ad88e40_5.swift"
  },
  {
    "conversation_hash": "a488a0dee44e5526db7357ee65f47422",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "img {\n  width: 200px;       /* 或者其他的宽度 */\n  height: 200px;      /* 或者其他的高度 */\n  object-fit: cover;  /* 可以是 'cover', 'contain', 'fill', 'none', 'scale-down' */\n}",
    "filename": "a488a0dee44e5526db7357ee65f47422_0.swift"
  },
  {
    "conversation_hash": "5704b340d4659380d7958dd0bc73f038",
    "code_index": 2,
    "language": "Swift",
    "libraries": [
      "UIKit"
    ],
    "code": "import UIKit\n\nclass ViewController: UIViewController {\n    @IBOutlet weak var userInputTextField: UITextField!\n    @IBOutlet weak var responseLabel: UILabel!\n    \n    let chatGPT = ChatGPT()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Additional setup\n    }\n    \n    @IBAction func sendButtonTapped(_ sender: UIButton) {\n        guard let inputText = userInputTextField.text else {\n            return\n        }\n        \n        chatGPT.getChatGPTResponse(prompt: inputText) { [weak self] response in\n            DispatchQueue.main.async {\n                self?.responseLabel.text = response\n            }\n        }\n    }\n}",
    "filename": "5704b340d4659380d7958dd0bc73f038_2.swift"
  },
  {
    "conversation_hash": "2424e7f1e49dc8ef27bca05f9e84d47c",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "Foundation"
    ],
    "code": "import Foundation\n\nclass ChatGPTService {\n    func sendMessage(_ message: String, completion: @escaping (String) -> Void) {\n        let url = URL(string: \"https://api.openai.com/v1/engines/davinci-codex/completions\")!\n        var request = URLRequest(url: url)\n        request.addValue(\"Bearer YOUR_OPENAI_API_KEY\", forHTTPHeaderField: \"Authorization\")\n        request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n        request.httpMethod = \"POST\"\n\n        let body: [String: Any] = [\n            \"prompt\": message,\n            \"max_tokens\": 150\n        ]\n        request.httpBody = try? JSONSerialization.data(withJSONObject: body)\n\n        URLSession.shared.dataTask(with: request) { (data, response, error) in\n            if let data = data {\n                let response = try? JSONDecoder().decode(ChatGPTResponse.self, from: data)\n                if let text = response?.choices.first?.text {\n                    DispatchQueue.main.async {\n                        completion(text)\n                    }\n                }\n            }\n        }.resume()\n    }\n}\n\nstruct ChatGPTResponse: Codable {\n    let choices: [Choice]\n    \n    struct Choice: Codable {\n        let text: String\n    }\n}",
    "filename": "2424e7f1e49dc8ef27bca05f9e84d47c_1.swift"
  },
  {
    "conversation_hash": "2424e7f1e49dc8ef27bca05f9e84d47c",
    "code_index": 2,
    "language": "Swift",
    "libraries": [
      "AVFoundation"
    ],
    "code": "import AVFoundation\n\nclass SpeechSynthesizerService {\n    private let synthesizer = AVSpeechSynthesizer()\n    \n    func speak(text: String) {\n        let utterance = AVSpeechUtterance(string: text)\n        utterance.voice = AVSpeechSynthesisVoice(language: \"en-US\")\n        \n        synthesizer.speak(utterance)\n    }\n}",
    "filename": "2424e7f1e49dc8ef27bca05f9e84d47c_2.swift"
  },
  {
    "conversation_hash": "6c73345b85c444224321e63387f4d41f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "// Déclarations des variables\nvar a, b, resultat: entier\n\n// Définition de la fonction max qui renvoie le plus grand de deux entiers\nfonction max(a: entier, b: entier): entier\n    si (a > b) alors\n        retourner a\n    sinon\n        retourner b\n    finsi\nfinfonction\n\n// Programme principal\ndebut\n    Ecrire(\"Donner 2 nombres\")\n    lire(a, b)\n    // Appel de la fonction max et stockage du résultat dans la variable 'resultat'\n    resultat <- max(a, b)\n    Ecrire(\"Le max est :\", resultat)\nfin",
    "filename": "6c73345b85c444224321e63387f4d41f_0.swift"
  },
  {
    "conversation_hash": "151eccab565ec211a3ab3a2d1d554f55",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    StartOfYear = #date(2024, 1, 1),\n    EndOfYear = #date(2024, 12, 31),\n    NumOfDays = Duration.Days(EndOfYear - StartOfYear) + 1,\n    Source = List.Dates(StartOfYear, NumOfDays, #duration(1, 0, 0, 0)),\n    ConvertToTable = Table.FromList(Source, Splitter.SplitByNothing(), {\"Date\"}, null, ExtraValues.Error),\n    ChangeType = Table.TransformColumnTypes(ConvertToTable,{{\"Date\", type date}}),\n    AddMonthColumn = Table.AddColumn(ChangeType, \"MonthName\", each Date.MonthName([Date]), type text),\n    AddWeekColumn = Table.AddColumn(AddMonthColumn, \"WeekNumber\", each Date.WeekOfYear([Date], Day.Saturday), Int64.Type),\n    AddDayOfMonthColumn = Table.AddColumn(AddWeekColumn, \"Day\", each Date.Day([Date]), type number),\n    GroupByMonth = Table.Group(AddDayOfMonthColumn, {\"MonthName\"}, {{\"DaysInMonth\", each List.Max([Day]), type number}}),\n    RemoveDayColumn = Table.RemoveColumns(GroupByMonth,{\"Day\"}),\n    AddYearColumn = Table.AddColumn(RemoveDayColumn, \"Year\", each 2024, Int64.Type),\n    FinalTable = Table.TransformColumnTypes(AddYearColumn,{{\"Year\", type number},{\"MonthName\", type text}, {\"WeekNumber\", Int64.Type}, {\"DaysInMonth\", Int64.Type}})\nin\n    FinalTable",
    "filename": "151eccab565ec211a3ab3a2d1d554f55_1.swift"
  },
  {
    "conversation_hash": "151eccab565ec211a3ab3a2d1d554f55",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "let\n    Year = 2024,\n    StartDate = #date(Year, 1, 1),\n    EndDate = #date(Year, 12, 31),\n    NumberOfDays = Duration.Days(EndDate - StartDate) + 1,\n    AllDates = List.Dates(StartDate, NumberOfDays, #duration(1, 0, 0, 0)),\n    ConvertToTable = Table.FromList(AllDates, Record.FieldValues, {\"Date\"}),\n    AddMonthName = Table.AddColumn(ConvertToTable, \"Month Name\", each Date.MonthName([Date]), type text),\n    AddWeekNumber = Table.AddColumn(AddMonthName, \"Week Number\", each Date.WeekOfYear([Date], FirstDay.Week.Saturday), type number),\n    \n    // Calculating Days in Month by first adding a Month column, then grouping by Month, and adding the count of rows for each month\n    AddMonthNumber = Table.AddColumn(AddWeekNumber, \"Month\", each Date.Month([Date])),\n    DaysInMonthTable = Table.Group(AddMonthNumber, {\"Month\"}, {{\"Days in Month\", each Table.RowCount(_), type number}}),\n    \n    // Merging the DaysInMonthTable back to the original table to pull in the \"Days in Month\" for each row\n    MergeTable = Table.NestedJoin(AddMonthNumber, {\"Month\"}, DaysInMonthTable, {\"Month\"}, \"DaysInMonth\", JoinKind.LeftOuter),\n    ExpandDaysInMonthColumn = Table.ExpandTableColumn(MergeTable, \"DaysInMonth\", {\"Days in Month\"}),\n    \n    // Removing unnecessary columns and reordering to meet your required layout\n    RemoveColumns = Table.RemoveColumns(ExpandDaysInMonthColumn, {\"Month\"}),\n    FinalTable = Table.ReorderColumns(RemoveColumns, {\"Date\", \"Month Name\", \"Week Number\", \"Days in Month\"})\nin\n    FinalTable",
    "filename": "151eccab565ec211a3ab3a2d1d554f55_2.swift"
  },
  {
    "conversation_hash": "1399bf9a03ce4579bb008ccdcce91b62",
    "code_index": 21,
    "language": "Swift",
    "libraries": [],
    "code": "package:\n  name: mypackage\n  version: 1.0.0\n\nbuild:\n  number: 1",
    "filename": "1399bf9a03ce4579bb008ccdcce91b62_21.swift"
  },
  {
    "conversation_hash": "994aeac599550590ccab5f5b9d24b207",
    "code_index": 15,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-sign-up',\n  template: `\n    <form (ngSubmit)=\"onSubmit()\" #f=\"ngForm\">\n      <!-- form fields -->\n    </form>\n  `\n})\nexport class SignUpComponent {\n  @ViewChild('f') signupForm!: NgForm;\n\n  onSubmit() {\n    if (this.signupForm.valid) {\n      // Perform the submission logic\n    }\n  }\n}",
    "filename": "994aeac599550590ccab5f5b9d24b207_15.swift"
  },
  {
    "conversation_hash": "545b8beccb08dc8976edacdf1a098e81",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'shorten'\n})\nexport class ShortenPipe implements PipeTransform {\n  transform(value: any, ...args: any[]): any {\n    // Transformation logic here\n  }\n}",
    "filename": "545b8beccb08dc8976edacdf1a098e81_0.swift"
  },
  {
    "conversation_hash": "c5267fc5236a1c0187578ae70b35f573",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "extends Node2D\n\nexport var nodeDistance: float = 20.0\nexport var stiffness: float = 0.1\nexport var damping: float = 0.98\nexport var gravity: Vector2 = Vector2(0, 100)\n\nvar nodes: Array = []\nvar previousPositions: Array = []\n\nfunc _ready():\n    # Create the initial nodes\n    var numNodes = get_child_count()\n    for i in range(numNodes):\n        var node = get_child(i)\n        nodes.append(node.position)\n        previousPositions.append(node.position)\n\nfunc _process(delta):\n    for i in range(nodes.size()):\n        var node = get_child(i)\n        var currentPosition = node.position\n        var previousPosition = previousPositions[i]\n        var acceleration = gravity\n        \n        var velocity = currentPosition - previousPosition\n        currentPosition += velocity * damping + acceleration * delta * delta\n        node.position = currentPosition\n\n        previousPositions[i] = currentPosition\n    \n    for i in range(nodes.size()):\n        update_point(i)\n\nfunc update_point(index):\n    var node = get_child(index)\n    var currentPosition = node.position\n    var previousPosition = previousPositions[index]\n\n    var offset = currentPosition - previousPosition\n    var targetPosition = previousPosition + offset + (currentPosition - previousPosition) * stiffness\n    \n    var delta = targetPosition - currentPosition\n    currentPosition += delta\n    node.position = currentPosition\n\n    previousPositions[index] = currentPosition",
    "filename": "c5267fc5236a1c0187578ae70b35f573_0.swift"
  },
  {
    "conversation_hash": "5d24f47d93c6f7a1f02a26c2ac7b721e",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "query {\n  user(id: \"1\") {\n    id\n    name\n  }\n}",
    "filename": "5d24f47d93c6f7a1f02a26c2ac7b721e_0.swift"
  },
  {
    "conversation_hash": "ee82e055234b19367198bc1d739f9283",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": ".slidecontainer {\n  width: 100%; /* Container width */\n}\n\n.year-slider {\n  width: 100%; /* Slider width. You can adjust this value according to your layout */\n  margin: 0; /* Remove default margin on sliders */\n}",
    "filename": "ee82e055234b19367198bc1d739f9283_8.swift"
  },
  {
    "conversation_hash": "7d210ff7c7a22a400414b584960b4847",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Note {\n    noteId: unique identifier,\n    applicationId: identifier linking to the application,\n    userId: identifier of the user who wrote the note,\n    content: text content of the note,\n    timestamp: date and time when the note was added\n}",
    "filename": "7d210ff7c7a22a400414b584960b4847_0.swift"
  },
  {
    "conversation_hash": "ca14fcdeab6bc64889ff39b0df26611d",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "let chatgpthistoryObject = {\n    // Adds two line breaks (\\n\\n) at the beginning of the chatGPT message text.\n    message: category_key === 'resume' ? '\\n\\n' + response.data.choices[0].message.content : response.data.choices[0].message.content,\n    // The rest of your object properties...\n}",
    "filename": "ca14fcdeab6bc64889ff39b0df26611d_1.swift"
  },
  {
    "conversation_hash": "b174891a285be8b91318b8489f04a9f0",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "if record.tx_start >= *start - BOUNDARY && record.tx_end <= *end + BOUNDARY {\n    // ...\n} \n// Omit the `else` block if the intention is just to create the entry\n// It will be created on demand when needed in the `if` block.",
    "filename": "b174891a285be8b91318b8489f04a9f0_2.swift"
  },
  {
    "conversation_hash": "a03123e2e53c4d0829233867746ace1e",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "class city(\n  name: string,\n  connections: list[connection]\n).\n\nclass connection(\n  destination: city,\n  distance: float\n).",
    "filename": "a03123e2e53c4d0829233867746ace1e_0.swift"
  },
  {
    "conversation_hash": "eb3f95b517ef473de78187007bcc8331",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "theme: {\n  // ... rest of your config\n  extend: {\n    fontFamily: {\n      sans: ['Monda', 'sans-serif'],\n      // ... any other custom fonts you have\n    },\n    // ... rest of your extend configuration\n  },\n},",
    "filename": "eb3f95b517ef473de78187007bcc8331_2.swift"
  },
  {
    "conversation_hash": "da1a333553d66e14381def145ae79b41",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "'tireur1': {\n    'nom': match.tireur1.nomE,\n    'prenom': match.tireur1.prenomE,\n    'score': match.touchesDonneesTireur1\n},\n'tireur2': {\n    'nom': match.tireur2.nomE,\n    'prenom': match.tireur2.prenomE,\n    'score': match.touchesDonneesTireur2\n}",
    "filename": "da1a333553d66e14381def145ae79b41_4.swift"
  },
  {
    "conversation_hash": "f693023b454b29986f1a28fa60f1cca1",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "// Handling Division by Zero\nif numerator != 0 && denominator == 0\n{\n   Error(\"Division by zero is not allowed\")\n}",
    "filename": "f693023b454b29986f1a28fa60f1cca1_0.swift"
  },
  {
    "conversation_hash": "c119d0f9a73a0ad4458518d6407674bd",
    "code_index": 29,
    "language": "Swift",
    "libraries": [
      "Flutter",
      "GPUPixel",
      "UIKit"
    ],
    "code": "// Swift 示例\n   import Flutter\n   import UIKit\n   import GPUPixel\n\n   public class SwiftGPUPixelPlugin: NSObject, FlutterPlugin {\n     public static func register(with registrar: FlutterPluginRegistrar) {\n       let channel = FlutterMethodChannel(name: \"gpupixel_plugin\", binaryMessenger: registrar.messenger())\n       let instance = SwiftGPUPixelPlugin()\n       registrar.addMethodCallDelegate(instance, channel: channel)\n     }\n\n     public func handle(_ call: FlutterMethodCall, result: @escaping FlutterResult) {\n       if call.method == \"processImage\" {\n         guard let args = call.arguments as? String else {\n           result(FlutterError.init(code: \"INVALID_ARGUMENTS\", message: \"Invalid arguments for image processing\", details: nil))\n           return\n         }\n\n         // 在这里使用 GPUPixel 处理图像\n         // ...\n       } else {\n         result(FlutterMethodNotImplemented)\n       }\n     }\n   }",
    "filename": "c119d0f9a73a0ad4458518d6407674bd_29.swift"
  },
  {
    "conversation_hash": "861e4e74621610b6f3fa7a6dfd5088b1",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  decoration: BoxDecoration(\n    color: Colors.white, // 设置容器颜色\n    boxShadow: [\n      BoxShadow(\n        color: Colors.black.withOpacity(0.15), // 阴影颜色和透明度\n        spreadRadius: 5, // 阴影扩展半径，会使阴影扩展/收缩\n        blurRadius: 10, // 模糊半径，应用于阴影的模糊量\n        offset: Offset(0, 3), // 阴影位置偏移量，横纵坐标偏移\n      )\n    ],\n  ),\n  child: Text('Box with Shadow'),\n)",
    "filename": "861e4e74621610b6f3fa7a6dfd5088b1_1.swift"
  },
  {
    "conversation_hash": "0fdef55a7aeb0aaed54bb5b84a25f03f",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "rs.initiate({\n     _id: \"rs0\",\n     members: [\n       { _id: 0, host: \"<nombre del host o IP del nodo 1>:27017\" },\n       { _id: 1, host: \"<nombre del host o IP del nodo 2>:27017\" },\n       { _id: 2, host: \"<nombre del host o IP del nodo 3>:27017\" }\n     ]\n   })",
    "filename": "0fdef55a7aeb0aaed54bb5b84a25f03f_8.swift"
  },
  {
    "conversation_hash": "c9e8e7c310cc171797166a6790737df8",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "operator: /path/to/operator.jwt\nresolver: {\n  type: full\n  dir: '/path/to/jwt/accounts'\n}",
    "filename": "c9e8e7c310cc171797166a6790737df8_3.swift"
  },
  {
    "conversation_hash": "76767b4c525c79717df5b771fa7fca03",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "let defaults = UserDefaults.standard\nlet locationKey = \"userLocation\"\n\n// Save a location\nlet location = CLLocationCoordinate2D(latitude: 37.33233141, longitude: -122.0312186)\ndefaults.set([location.latitude, location.longitude], forKey: locationKey)\n\n// Retrieve a location\nif let savedLocation = defaults.array(forKey: locationKey) as? [Double],\n    savedLocation.count == 2 {\n    let retrievedLocation = CLLocationCoordinate2D(latitude: savedLocation[0], longitude: savedLocation[1])\n}",
    "filename": "76767b4c525c79717df5b771fa7fca03_0.swift"
  },
  {
    "conversation_hash": "76767b4c525c79717df5b771fa7fca03",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "values"
    ],
    "code": "// Assuming you have a Location entity in Core Data with attributes latitude and longitude\n\n// Save a location\nlet context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext\nlet locationEntity = NSEntityDescription.entity(forEntityName: \"Location\", in: context)!\nlet newLocation = NSManagedObject(entity: locationEntity, insertInto: context)\nnewLocation.setValue(37.33233141, forKey: \"latitude\")\nnewLocation.setValue(-122.0312186, forKey: \"longitude\")\n\ndo {\n    try context.save()\n} catch {\n    // Handle save error\n}\n\n// Retrieve locations\nlet request = NSFetchRequest<NSFetchRequestResult>(entityName: \"Location\")\ndo {\n    let results = try context.fetch(request) as? [NSManagedObject]\n    for result in results ?? [] {\n        let latitude = result.value(forKey: \"latitude\") as! Double\n        let longitude = result.value(forKey: \"longitude\") as! Double\n        // Create location from values\n    }\n} catch {\n    // Handle fetch error\n}",
    "filename": "76767b4c525c79717df5b771fa7fca03_1.swift"
  },
  {
    "conversation_hash": "9193be513fa82207affbcda731fc3d01",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "CoreLocation",
      "Foundation",
      "location"
    ],
    "code": "import CoreLocation\nimport Foundation\n\nstruct CodableLocation: Codable {\n    let latitude: Double\n    let longitude: Double\n    let altitude: Double\n    let timestamp: Date\n    // You can add other relevant properties if needed (like horizontalAccuracy, verticalAccuracy, etc.)\n\n    // Initialize with a CLLocation\n    init(from location: CLLocation) {\n        self.latitude = location.coordinate.latitude\n        self.longitude = location.coordinate.longitude\n        self.altitude = location.altitude\n        self.timestamp = location.timestamp\n    }\n}",
    "filename": "9193be513fa82207affbcda731fc3d01_0.swift"
  },
  {
    "conversation_hash": "753aecffee4ed6619dcdb919ac5ab256",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "protocol Copyable {\n    func copy() -> Self\n}\n\nextension Copyable where Self: AnyObject {\n    func copy() -> Self {\n        return self\n    }\n}\n\nclass MyCopyableClass: Copyable {\n    var value: Int\n    \n    init(value: Int) {\n        self.value = value\n    }\n    \n    func copy() -> Self {\n        return MyCopyableClass(value: self.value) as! Self\n    }\n}",
    "filename": "753aecffee4ed6619dcdb919ac5ab256_0.swift"
  },
  {
    "conversation_hash": "631e13771f0a586b35343b27976f020c",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  decoration: BoxDecoration(\n    borderRadius: BorderRadius.circular(15.0), // 设置圆角的半径\n    image: DecorationImage(\n      image: NetworkImage('https://your-image-url-here'),\n      fit: BoxFit.cover,\n    ),\n  ),\n)",
    "filename": "631e13771f0a586b35343b27976f020c_2.swift"
  },
  {
    "conversation_hash": "631e13771f0a586b35343b27976f020c",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "Container(\n  decoration: BoxDecoration(\n    borderRadius: BorderRadius.circular(15.0), // 设置圆角的半径\n    image: DecorationImage(\n      image: AssetImage('assets/images/my_local_image.jpg'),\n      fit: BoxFit.cover, // 根据你的需要设置合适的填充方式\n    ),\n  ),\n)",
    "filename": "631e13771f0a586b35343b27976f020c_5.swift"
  },
  {
    "conversation_hash": "18df5c57964ddbc26b6dc61deb846fb0",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "func showMarkers(markers: [Marker], value: Float) {\n    // Assuming 'map' is an instance of MKMapView\n    // Remove all current overlays\n    map.removeOverlays(map.overlays)\n    \n    var lineCoords = [CLLocationCoordinate2D]()\n    \n    // Calculate the number of markers to show\n    let numberOfMarkersToShow = Int(value * Float(markers.count))\n        \n    for (index, marker) in markers.enumerated() {\n        if index >= numberOfMarkersToShow {\n            break\n        }\n        \n        // Assuming that you want to use the marker's location and not random values\n        lineCoords.append(marker.coordinate)\n    }\n    \n    let line = MKPolyline(coordinates: lineCoords, count: lineCoords.count)\n    map.addOverlay(line)\n}",
    "filename": "18df5c57964ddbc26b6dc61deb846fb0_0.swift"
  },
  {
    "conversation_hash": "ed69ecd731b14d826c5916fae45d796e",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "func getMapBoundsRegion(for coordinates: [CLLocationCoordinate2D]) -> MKCoordinateRegion {\n    var minLat = 90.0\n    var maxLat = -90.0\n    var minLon = 180.0\n    var maxLon = -180.0\n    \n    for coordinate in coordinates {\n        minLat = min(minLat, coordinate.latitude)\n        maxLat = max(maxLat, coordinate.latitude)\n        minLon = min(minLon, coordinate.longitude)\n        maxLon = max(maxLon, coordinate.longitude)\n    }\n    \n    let centerLat = (minLat + maxLat) / 2\n    let centerLon = (minLon + maxLon) / 2\n    let center = CLLocationCoordinate2D(latitude: centerLat, longitude: centerLon)\n    \n    let latDelta = (maxLat - minLat) * 1.1 // Add some extra space to the edges\n    let lonDelta = (maxLon - minLon) * 1.1 // Add some extra space to the edges\n    \n    let span = MKCoordinateSpan(latitudeDelta: latDelta, longitudeDelta: lonDelta)\n    return MKCoordinateRegion(center: center, span: span)\n}",
    "filename": "ed69ecd731b14d826c5916fae45d796e_1.swift"
  },
  {
    "conversation_hash": "ed69ecd731b14d826c5916fae45d796e",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "let coordinates = [\n    CLLocationCoordinate2D(latitude: 40.7128, longitude: -74.0060),\n    CLLocationCoordinate2D(latitude: 34.0522, longitude: -118.2437),\n    // Add other coordinates here\n]\n\ncenterMapOnCoordinates(mapView: myMapView, coordinates: coordinates)",
    "filename": "ed69ecd731b14d826c5916fae45d796e_3.swift"
  },
  {
    "conversation_hash": "d04fb14f86046fd2b85e4211ffa4f009",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "#animationContainer img {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: auto;\n}",
    "filename": "d04fb14f86046fd2b85e4211ffa4f009_10.swift"
  },
  {
    "conversation_hash": "2a9748ad3d366bb1ea5aa0a6c17ce265",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": ".element {\n  transition: transform 0.3s ease; /* Плавная анимация */\n}\n\n.element:hover {\n  transform: scale(1.1); /* Увеличение размера в 1.1 раза */\n}",
    "filename": "2a9748ad3d366bb1ea5aa0a6c17ce265_0.swift"
  },
  {
    "conversation_hash": "6fb44f4b62092387df921facf733e2b1",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "new Designtime({\n    properties: {\n        content: {\n            manifest: \"url-to-manifest\",\n            config: {\n                destinationName: {\n                    name: \"destinationName\"\n                }\n            }\n        }\n    }\n});",
    "filename": "6fb44f4b62092387df921facf733e2b1_1.swift"
  },
  {
    "conversation_hash": "5cb27e4fca6f953b5d05fffc55ab7f11",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Text(\n  'Your Text Here',\n  style: TextStyle(\n    letterSpacing: -1.0, // negative value for letter spacing\n  ),\n)",
    "filename": "5cb27e4fca6f953b5d05fffc55ab7f11_0.swift"
  },
  {
    "conversation_hash": "98b02df1668ea769a424ac3abd999a16",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "struct MarkerDay {\n    let time: TimeType // Assuming TimeType is a defined type\n    var markers: [Marker]\n\n    init(time: TimeType, markers: [Marker] = []) {\n        self.time = time\n        self.markers = markers\n    }\n}\n\n// Assuming Marker is a defined struct or class.",
    "filename": "98b02df1668ea769a424ac3abd999a16_0.swift"
  },
  {
    "conversation_hash": "9addf46c54ced9d454e5335d54c0fe1d",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "func readDataFromUserDefaults() -> [MyModel]? {\n    if let savedData = UserDefaults.standard.object(forKey: \"myArray\") as? Data {\n        let decoder = JSONDecoder()\n        if let loadedArray = try? decoder.decode([MyModel].self, from: savedData) {\n            return loadedArray\n        }\n    }\n    return nil\n}",
    "filename": "9addf46c54ced9d454e5335d54c0fe1d_1.swift"
  },
  {
    "conversation_hash": "9addf46c54ced9d454e5335d54c0fe1d",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "func writeDataToUserDefaults(_ myArray: [MyModel]) {\n    let encoder = JSONEncoder()\n    if let encodedData = try? encoder.encode(myArray) {\n        UserDefaults.standard.set(encodedData, forKey: \"myArray\")\n    }\n}",
    "filename": "9addf46c54ced9d454e5335d54c0fe1d_2.swift"
  },
  {
    "conversation_hash": "9addf46c54ced9d454e5335d54c0fe1d",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "//retrieve the current array\nvar myArray = readDataFromUserDefaults() ?? []\n\n//modify the specific element\nif let index = myArray.firstIndex(where: { /* your predicate here */ }) {\n    // update the element at the index\n    myArray[index] = /* your updated model */\n}\n\n//write the updated array back to UserDefaults\nwriteDataToUserDefaults(myArray)",
    "filename": "9addf46c54ced9d454e5335d54c0fe1d_3.swift"
  },
  {
    "conversation_hash": "411bf4f7e03e822e10a728620b030251",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "1. Dada la ecuación original: \\( e^{2x} = 7 \\)\n\n2. Tomamos el logaritmo natural de ambos lados: \\( \\ln(e^{2x}) = \\ln(7) \\)\n\n3. Utilizando la propiedad del logaritmo de que \\( \\ln(e^a) = a \\): \\( 2x = \\ln(7) \\)\n\n4. Dividimos ambos lados de la ecuación por 2 para aislar la variable \\( x \\): \\( x = \\frac{\\ln(7)}{2} \\)",
    "filename": "411bf4f7e03e822e10a728620b030251_0.swift"
  },
  {
    "conversation_hash": "67200576435ded6570cd4a459a6654f6",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "// @Summary Add a new listing\n   // @Description add by json listing\n   // @Tags listings\n   // @Accept  json\n   // @Produce  json\n   // @Param listing body Listing true \"Add listing\"\n   // @Success 200 {object} Listing\n   // @Router /listings [post]\n   func postListing(c *gin.Context) {\n     // votre code ici\n   }",
    "filename": "67200576435ded6570cd4a459a6654f6_5.swift"
  },
  {
    "conversation_hash": "377dfaf4b1d23fc9e276e334dd51e592",
    "code_index": 2,
    "language": "Swift",
    "libraries": [
      "UIKit"
    ],
    "code": "import UIKit\n\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var label: UILabel!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    @IBAction func buttonTapped(_ sender: UIButton) {\n        label.text = \"Hello, iOS!\"\n    }\n\n}",
    "filename": "377dfaf4b1d23fc9e276e334dd51e592_2.swift"
  },
  {
    "conversation_hash": "c072ecfe9bbf666b7c760a75e63d54d7",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "// in der AudioAlerts Komponente\n   methods: {\n     play(item) {\n       // ... Logik zum Abspielen des Audios\n     }\n   }",
    "filename": "c072ecfe9bbf666b7c760a75e63d54d7_0.swift"
  },
  {
    "conversation_hash": "b9915816345fb6c562e3d69afda9efb9",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    // ... otras dependencias ...\n\n    // AndroidX\n    implementation 'androidx.appcompat:appcompat:1.6.1'\n    implementation 'androidx.exifinterface:exifinterface:1.3.3' // Asegúrate de usar la versión actual\n\n    // ... más dependencias ...\n}",
    "filename": "b9915816345fb6c562e3d69afda9efb9_4.swift"
  },
  {
    "conversation_hash": "a4ea2a2ec8e98a2f3ebc760c6b9dc143",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "{ /* Your input attributes here */ }:\n\n{\n  # Your modular configuration for app1\n}",
    "filename": "a4ea2a2ec8e98a2f3ebc760c6b9dc143_0.swift"
  },
  {
    "conversation_hash": "90eff45bd0b22bdf9378453eebdac774",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "{ lib, ... }:\n\nlet\n  enableFeature = true; # This might be a configurable option\nin\n[\n  # Always included package\n  pkgs.package1\n]\n++ lib.optionals enableFeature [\n  # Conditionally included package\n  pkgs.package2\n  pkgs.package3\n]",
    "filename": "90eff45bd0b22bdf9378453eebdac774_1.swift"
  },
  {
    "conversation_hash": "aa3b9ebc35c5bfed3234fc31e8f48526",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    // Agregar dependencias Kotlin\n    implementation(\"com.google.android.material:material:1.11.0\")\n    implementation(\"androidx.compose.material3:material3:1.0.1\")\n    implementation(\"androidx.compose.material3:material3-window-size-class:1.0.1\")\n    implementation(\"com.facebook.shimmer:shimmer:0.5.0\")\n}",
    "filename": "aa3b9ebc35c5bfed3234fc31e8f48526_0.swift"
  },
  {
    "conversation_hash": "7a6ac044436fbb86ff343f13a7152f78",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "SettingsTile.switchTile(\n  initialValue: _dark,\n  onToggle: _onToggle,\n  title: const Text('Dark mode'),\n  leading: const Icon(Icons.invert_colors),\n)",
    "filename": "7a6ac044436fbb86ff343f13a7152f78_2.swift"
  },
  {
    "conversation_hash": "49640df5b015b41a3ac5afa2f9df0106",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "{\n       opacity: 1,\n       scrollTrigger: {\n           scrub: 1,\n           start: \"50%\",\n           end: \"60%\",\n       }\n   }",
    "filename": "49640df5b015b41a3ac5afa2f9df0106_2.swift"
  },
  {
    "conversation_hash": "901363d586dba59b78f953e525b3b049",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "Expanded(\n  child: Stack(\n    children: [\n      ClipPath(\n        clipper: BottomRoundClipper(),\n        child: Container(\n          color: Color(0xFFD9D9D9),\n          child: Image.asset(\n            'assets/main.png',\n            fit: BoxFit.cover,\n          ),\n        ),\n      ),\n      Positioned( // Utilisation de Positioned pour positionner le texte au bas du cercle\n        bottom: 10, // Ajustez ceci pour placer le texte plus haut ou plus bas\n        left: 0,\n        right: 0,\n        child: Align( // Align pour centrer le texte\n          alignment: Alignment.center,\n          child: Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 20.0),\n            child: Text(\n              'Votre texte ici',\n              textAlign: TextAlign.center,\n              style: TextStyle(\n                color: Colors.white, // Choisissez une couleur appropriée pour contraster avec le fond\n                fontSize: 18.0, // Ajustez la taille de police au besoin\n                // Ajoutez d'autres styles comme fontWeight si nécessaire\n              ),\n            ),\n          ),\n        ),\n      ),\n    ],\n  ),\n),",
    "filename": "901363d586dba59b78f953e525b3b049_1.swift"
  },
  {
    "conversation_hash": "0b82b49ddfcd647b7e9827d4c9d38f87",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "export default {\n  created() {\n    const meineQueue = this.$app.config.globalProperties.$queue;\n    // Hier können Sie die Warteschlange verwenden\n  }\n}",
    "filename": "0b82b49ddfcd647b7e9827d4c9d38f87_1.swift"
  },
  {
    "conversation_hash": "02b1af464af04fb834e383080e02e793",
    "code_index": 14,
    "language": "Swift",
    "libraries": [],
    "code": "AppBar(\n  title: Text(\"Chats errants\"),\n  actions: <Widget>[\n    IconButton(\n      icon: Icon(Icons.search),\n      onPressed: () {\n        // Implémenter une fonctionnalité de recherche\n      },\n    ),\n  ],\n)",
    "filename": "02b1af464af04fb834e383080e02e793_14.swift"
  },
  {
    "conversation_hash": "8d57cdffb3533ab3bcd693f647913772",
    "code_index": 14,
    "language": "Swift",
    "libraries": [],
    "code": "// Attempting to set a restricted header\nfetch(url, {\n    headers: {\n        \"Content-Length\": \"123\"\n    }\n}",
    "filename": "8d57cdffb3533ab3bcd693f647913772_14.swift"
  },
  {
    "conversation_hash": "bab1cbb94ea33b9703c098e4fba7ddc2",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "import { ReactiveFormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n// autres imports...\n\n@NgModule({\n  declarations: [\n    // vos composants...\n  ],\n  imports: [\n    // autres modules...\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }",
    "filename": "bab1cbb94ea33b9703c098e4fba7ddc2_0.swift"
  },
  {
    "conversation_hash": "95d1344c6ce2413e48336cafce7bba8a",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "var x = 5\nsi (x > 3) {\n    imprime(\"x est plus grand que 3\")\n} sinon {\n    imprime(\"x est 3 ou moins\")\n}",
    "filename": "95d1344c6ce2413e48336cafce7bba8a_10.swift"
  },
  {
    "conversation_hash": "95d1344c6ce2413e48336cafce7bba8a",
    "code_index": 14,
    "language": "Swift",
    "libraries": [],
    "code": "var x = 5\njojoSi (x > 3) {\n    imprime(\"x est plus grand que 3\")\n} jojoSinon {\n    imprime(\"x est 3 ou moins\")\n}",
    "filename": "95d1344c6ce2413e48336cafce7bba8a_14.swift"
  },
  {
    "conversation_hash": "10a0ae2f0ae02b946c326ee4b55dc957",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "Padding(\n  padding: EdgeInsets.fromLTRB(0,6,0,0),\n  child: Flexible( // Utiliser Flexible ici\n    child: Text(titre, style: TextStyle(\n      fontSize: 16,\n      fontFamily: \"NeueRegrade\",\n      fontWeight: FontWeight.w600\n    )),\n  ),\n),\nPadding(\n  padding: EdgeInsets.fromLTRB(0,8,0,0),\n  child: Flexible( // Et aussi ici\n    child: Row(\n      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n      children: <Widget>[\n        SvgPicture.asset('assets/icons/bookmark.svg', width: 18, height: 18,),\n        Text('$prix \\€',\n        style: TextStyle(\n          fontSize: 14,\n          fontFamily: \"NeueRegrade\",\n          fontWeight: FontWeight.w700\n          )\n        ),\n      ],\n    ),\n  ),\n),",
    "filename": "10a0ae2f0ae02b946c326ee4b55dc957_0.swift"
  },
  {
    "conversation_hash": "1fc00205071eae3b3ba88c9389a2f339",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "Column(\n  mainAxisSize: MainAxisSize.min,\n  mainAxisAlignment: MainAxisAlignment.start,\n  children: <Widget>[\n    // Vos widgets ici\n  ],\n)",
    "filename": "1fc00205071eae3b3ba88c9389a2f339_1.swift"
  },
  {
    "conversation_hash": "1fc00205071eae3b3ba88c9389a2f339",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "Expanded(\n  child: ListView(\n    padding: EdgeInsets.zero, // Assurez-vous que ListView n'a pas de padding\n    children: <Widget>[\n      // Vos ListTile\n    ],\n  ),\n)",
    "filename": "1fc00205071eae3b3ba88c9389a2f339_3.swift"
  },
  {
    "conversation_hash": "adb6e1433414f140df6d26cb83d3d9d3",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "UIKit"
    ],
    "code": "import UIKit\n\nclass ViewController: UIViewController {\n\n    // 假定你已经有了一个按钮button\n    var button: UIButton!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // 初始化button，设置frame和初始图片等\n        button = UIButton(frame: CGRect(x: 100, y: 100, width: 100, height: 100))\n        button.setImage(UIImage(named: \"yourImageName\"), for: .normal)\n        button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n        self.view.addSubview(button)\n    }\n\n    @objc func buttonTapped() {\n        // 按钮点击事件，实现图片旋转一圈\n        UIView.animate(withDuration: 1.0, animations: {\n            // 旋转360度\n            self.button.transform = CGAffineTransform(rotationAngle: CGFloat(Double.pi * 2))\n        }) { completed in\n            // 动画完成后，将按钮的transform重置，以便下次旋转不受影响\n            if completed {\n                self.button.transform = CGAffineTransform.identity\n            }\n        }\n    }\n}",
    "filename": "adb6e1433414f140df6d26cb83d3d9d3_1.swift"
  },
  {
    "conversation_hash": "adb6e1433414f140df6d26cb83d3d9d3",
    "code_index": 2,
    "language": "Swift",
    "libraries": [
      "UIKit"
    ],
    "code": "import UIKit\n\nclass ViewController: UIViewController {\n\n    // 假设你已经在 Storyboard 中创建了一个按钮，并连接了这个 IBOutlet\n    @IBOutlet weak var rotateButton: UIButton!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    // 按钮的点击事件\n    @IBAction func rotateButtonTapped(_ sender: UIButton) {\n        // 开始动画\n        UIView.animate(withDuration: 0.5, animations: {\n            // 使用 CGAffineTransform 旋转按钮的 imageView\n            sender.imageView?.transform = CGAffineTransform(rotationAngle: .pi)\n        }) { _ in\n            // 完成后，再旋转回来，形成一个360度旋转\n            UIView.animate(withDuration: 0.5, animations: {\n                sender.imageView?.transform = CGAffineTransform(rotationAngle: .pi * 2)\n            })\n        }\n    }\n}",
    "filename": "adb6e1433414f140df6d26cb83d3d9d3_2.swift"
  },
  {
    "conversation_hash": "64fe8a87a49d880d9448f1934c08c618",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "ARKit",
      "UIKit"
    ],
    "code": "import UIKit\nimport ARKit\n\nclass ViewController: UIViewController, ARSessionDelegate {\n    @IBOutlet var sceneView: ARSCNView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        guard ARFaceTrackingConfiguration.isSupported else {\n            fatalError(\"Face tracking is not supported on this device\")\n        }\n        \n        sceneView.session.delegate = self\n    }\n    \n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        \n        let configuration = ARFaceTrackingConfiguration()\n        sceneView.session.run(configuration)\n    }\n\n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        sceneView.session.pause()\n    }\n}",
    "filename": "64fe8a87a49d880d9448f1934c08c618_0.swift"
  },
  {
    "conversation_hash": "6a762662fd8c955b63078cc00387ddd2",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "{\n      user(id: \"1\") {\n        name\n        age\n        posts {\n          title\n        }\n      }\n    }",
    "filename": "6a762662fd8c955b63078cc00387ddd2_4.swift"
  },
  {
    "conversation_hash": "1075ae3d48da679ff59ae1de6cbc0b73",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "class NoHighlightButton: UIButton {\n    override var isHighlighted: Bool {\n        get { return false }\n        set { }\n    }\n}",
    "filename": "1075ae3d48da679ff59ae1de6cbc0b73_0.swift"
  },
  {
    "conversation_hash": "b7e14675f15ff84be09bd3453b79e324",
    "code_index": 40,
    "language": "Swift",
    "libraries": [],
    "code": "import { Meta, Story, Source, Preview } from '@storybook/addon-docs';\n\n<Meta title=\"Exemple/Composant\" component={MonComposant} />\n\n# Mon Composant\n\nCeci documente mon composant:\n\n<Preview>\n  <Story name=\"Exemple\">\n    <MonComposant />\n  </Story>\n</Preview>\n\nVoici comment l'utiliser :",
    "filename": "b7e14675f15ff84be09bd3453b79e324_40.swift"
  },
  {
    "conversation_hash": "86cf9e8e3d90eba410a8a2709e426d06",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "// Nullable tip olarak tanımla\nvar progressDialog: ProgressDialog? = null\n\n// Kullanırken null kontrolü yap\nprogressDialog?.dismiss()",
    "filename": "86cf9e8e3d90eba410a8a2709e426d06_2.swift"
  },
  {
    "conversation_hash": "b13fe8205617d88e84777387601c1d02",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "Mapbox"
    ],
    "code": "import Mapbox\n\nclass ViewController: UIViewController {\n    var mapView: MGLMapView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        MGLAccountManager.accessToken = \"你的Mapbox访问令牌\"\n        mapView = MGLMapView(frame: view.bounds)\n        view.addSubview(mapView)\n    }\n}",
    "filename": "b13fe8205617d88e84777387601c1d02_1.swift"
  },
  {
    "conversation_hash": "b13fe8205617d88e84777387601c1d02",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "if let route = route, let routeCoordinates = route.coordinates {\n    let polyline = MGLPolylineFeature(coordinates: routeCoordinates, count: UInt(route.coordinateCount))\n    \n    if let source = mapView.style?.source(withIdentifier: \"route-source\") as? MGLShapeSource {\n        source.shape = polyline\n    } else {\n        let source = MGLShapeSource(identifier: \"route-source\", features: [polyline], options: nil)\n        let lineStyle = MGLLineStyleLayer(identifier: \"route-style\", source: source)\n        \n        mapView.style?.addSource(source)\n        mapView.style?.addLayer(lineStyle)\n    }\n}",
    "filename": "b13fe8205617d88e84777387601c1d02_3.swift"
  },
  {
    "conversation_hash": "adcf8e13e8ba134679de6a9bda189e6d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "Flutter",
      "UIKit",
      "the"
    ],
    "code": "import UIKit\nimport Flutter\n\n@UIApplicationMain\n@objc class AppDelegate: FlutterAppDelegate {\n  override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n  ) -> Bool {\n    // Add this line to create a FlutterViewController\n    let controller : FlutterViewController = window?.rootViewController as! FlutterViewController\n    \n    // Define the channel name\n    let printerChannel = FlutterMethodChannel(name: \"com.yourcompany/printer\",\n                                              binaryMessenger: controller.binaryMessenger)\n    \n    // Set up the method channel handler\n    printerChannel.setMethodCallHandler({\n      [weak self] (call: FlutterMethodCall, result: @escaping FlutterResult) -> Void in\n      // This method is called on the channel thread, perform async tasks here\n      \n      // Handle method calls\n      switch call.method {\n      case \"startDiscovery\":\n        self?.startDiscovery(result: result)\n      case \"stopDiscovery\":\n        self?.stopDiscovery(result: result)\n      /* Add more cases for other methods */\n      default:\n        result(FlutterMethodNotImplemented)\n      }\n    })\n\n    GeneratedPluginRegistrant.register(with: self) // Existing line\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions) // Existing line\n  }\n  \n  private func startDiscovery(result: FlutterResult) {\n    // Implement the starting discovery logic here\n    // You should replace this with the actual start logic from the DiscoveryViewController or adapt the logic accordingly\n    result(\"Discovery started\")\n  }\n  \n  private func stopDiscovery(result: FlutterResult) {\n    // Implement the stopping discovery logic here\n    // Replace or adapt logic accordingly\n    result(\"Discovery stopped\")\n  }\n}",
    "filename": "adcf8e13e8ba134679de6a9bda189e6d_0.swift"
  },
  {
    "conversation_hash": "d7ce6a057f3da1899eee7f0462f1f818",
    "code_index": 1,
    "language": "Swift",
    "libraries": [
      "Flutter",
      "UIKit"
    ],
    "code": "import Flutter\nimport UIKit\n\n@UIApplicationMain\n@objc class AppDelegate: FlutterAppDelegate {\n  private var methodChannel: FlutterMethodChannel?\n\n  override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?\n  ) -> Bool {\n    let controller : FlutterViewController = window?.rootViewController as! FlutterViewController\n    methodChannel = FlutterMethodChannel(name: \"com.yourcompany/printer\",\n                                              binaryMessenger: controller.binaryMessenger)\n    \n    methodChannel?.setMethodCallHandler({\n      (call: FlutterMethodCall, result: @escaping FlutterResult) -> Void in\n      // Handle method call\n      if call.method == \"startDiscovery\" {\n        self.startDiscovery(result: result)\n      } else {\n        result(FlutterMethodNotImplemented)\n      }\n    })\n\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n  }\n  \n  private func startDiscovery(result: FlutterResult) {\n    // Implement your discovery logic here\n    // For example: result(\"Discovery Started\")\n  }\n}",
    "filename": "d7ce6a057f3da1899eee7f0462f1f818_1.swift"
  },
  {
    "conversation_hash": "d7ce6a057f3da1899eee7f0462f1f818",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n) -> Bool {\n    GeneratedPluginRegistrant.register(with: self)\n    \n    let controller : FlutterViewController = window?.rootViewController as! FlutterViewController\n    let printerChannel = FlutterMethodChannel(name: \"com.example.printer/channel\",\n                                              binaryMessenger: controller.binaryMessenger)\n    \n    printerChannel.setMethodCallHandler({\n      (call: FlutterMethodCall, result: @escaping FlutterResult) -> Void in\n        if call.method == \"connectAndPrintSample\" {\n            // Implement your printing logic here\n        } else {\n            result(FlutterMethodNotImplemented)\n        }\n    })\n\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n}",
    "filename": "d7ce6a057f3da1899eee7f0462f1f818_6.swift"
  },
  {
    "conversation_hash": "2b489c9dfd3324f16a273f677fb370e7",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "img {\n    transition: transform 0.5s ease;\n}\n\nimg:hover {\n    transform: scale(1.05);\n}",
    "filename": "2b489c9dfd3324f16a273f677fb370e7_3.swift"
  },
  {
    "conversation_hash": "9326c8a548389e84ea450c964be6b395",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "struct ThemeManager {\n    static func applyTheme(theme: Theme) {\n        // 根据选定主题，更新 App UI\n    }\n}",
    "filename": "9326c8a548389e84ea450c964be6b395_0.swift"
  },
  {
    "conversation_hash": "9326c8a548389e84ea450c964be6b395",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "NotificationCenter.default.addObserver(self, selector: #selector(themeChanged), name: .themeChangedNotification, object: nil)\n\n@objc func themeChanged() {\n    // 更新组件主题\n}",
    "filename": "9326c8a548389e84ea450c964be6b395_1.swift"
  },
  {
    "conversation_hash": "151b65b5af1ca3243989b472906f3ba2",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "#map {\n  height: 100%;\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  pointer-events: none;  /* Allow pointer events to pass through */\n}",
    "filename": "151b65b5af1ca3243989b472906f3ba2_1.swift"
  },
  {
    "conversation_hash": "81611b2f7fe296c9e40628afbeb26524",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "import { KeycloakAngularModule, KeycloakService } from 'keycloak-angular';\nimport { keycloakInitializer } from './keycloak-init';\n\n@NgModule({\n    ...\n    imports: [\n        ...\n        KeycloakAngularModule\n    ],\n    providers: [\n        {\n            provide: APP_INITIALIZER,\n            useFactory: keycloakInitializer,\n            multi: true,\n            deps: [KeycloakService]\n        }\n    ],\n    ...\n})\nexport class AppModule { }",
    "filename": "81611b2f7fe296c9e40628afbeb26524_2.swift"
  },
  {
    "conversation_hash": "10b1c385dc032fa3b22568db29ff2d7c",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "import { KeycloakAngularModule, KeycloakService } from 'keycloak-angular';\nimport { initializer } from './app-init';\n\n@NgModule({\n  declarations: [\n    // vos composants\n  ],\n  imports: [\n    // autres modules\n    KeycloakAngularModule\n  ],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initializer,\n      multi: true,\n      deps: [KeycloakService]\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }",
    "filename": "10b1c385dc032fa3b22568db29ff2d7c_5.swift"
  },
  {
    "conversation_hash": "10b1c385dc032fa3b22568db29ff2d7c",
    "code_index": 10,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'ajouter', component: SiteFormComponent },\n  // Ajoutez d'autres routes ici selon vos besoins\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }",
    "filename": "10b1c385dc032fa3b22568db29ff2d7c_10.swift"
  },
  {
    "conversation_hash": "c4ce2fc07bcbbda77ac4a7d8b7dc7c55",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "struct ContentView: View {\n    // Создаём экземпляр DataController\n    @StateObject var dataController = DataController.shared\n    \n    var body: some View {\n        VStack {\n            // Кнопка для удаления всех записей Person\n            Button(\"Удалить все записи\") {\n                dataController.deleteAllPersons()\n            }\n        }\n    }\n}",
    "filename": "c4ce2fc07bcbbda77ac4a7d8b7dc7c55_2.swift"
  },
  {
    "conversation_hash": "c4ce2fc07bcbbda77ac4a7d8b7dc7c55",
    "code_index": 3,
    "language": "Swift",
    "libraries": [
      "CoreData"
    ],
    "code": "import CoreData\n\nstruct PersistenceController {\n    static let shared = PersistenceController()\n\n    let container: NSPersistentContainer\n\n    private init() {\n        container = NSPersistentContainer(name: \"YourModelName\")\n        container.loadPersistentStores { (storeDescription, error) in\n            if let error = error as NSError? {\n                fatalError(\"Не удалось загрузить хранилище: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    // Функция для удаления всех записей из Entity `Person`\n    func deleteAllPersons() {\n        let context = container.viewContext\n        let fetchRequest: NSFetchRequest<NSFetchRequestResult> = NSFetchRequest(entityName: \"Person\")\n        let deleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)\n\n        do {\n            try context.execute(deleteRequest)\n            try context.save()\n        } catch {\n            let nsError = error as NSError\n            fatalError(\"Не удалось удалить объекты: \\(nsError.userInfo)\")\n        }\n    }\n}",
    "filename": "c4ce2fc07bcbbda77ac4a7d8b7dc7c55_3.swift"
  },
  {
    "conversation_hash": "c4ce2fc07bcbbda77ac4a7d8b7dc7c55",
    "code_index": 4,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Button(\"Удалить все записи\") {\n            PersistenceController.shared.deleteAllPersons()\n        }\n    }\n}",
    "filename": "c4ce2fc07bcbbda77ac4a7d8b7dc7c55_4.swift"
  },
  {
    "conversation_hash": "a16fe80445e1c3e6f7e36b0070781ada",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "import { Component, OnInit } from '@angular/core';\nimport { SignalRService } from './signal-r.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  constructor(public signalRService: SignalRService) {}\n\n  ngOnInit() {\n    this.signalRService.startConnection();\n  }\n}",
    "filename": "a16fe80445e1c3e6f7e36b0070781ada_6.swift"
  },
  {
    "conversation_hash": "3ac9e64cb687687d3970be7cd518f2fc",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "global_costmap:\n  global_frame: map\n  robot_base_frame: base_link\n  update_frequency: 5.0\n  publish_frequency: 2.0\n  width: 10.0  # Adjust these values\n  height: 10.0 # Adjust these values\n  resolution: 0.05\n  ...",
    "filename": "3ac9e64cb687687d3970be7cd518f2fc_4.swift"
  },
  {
    "conversation_hash": "53dfaed1f65828dcd984cba8e4083dc0",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "model User {\n  id       Int      @id @default(autoincrement())\n  username String\n  email    String   @unique\n  password String\n}",
    "filename": "53dfaed1f65828dcd984cba8e4083dc0_0.swift"
  },
  {
    "conversation_hash": "53dfaed1f65828dcd984cba8e4083dc0",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "model User {\n  id        Int      @id @default(autoincrement())\n  username  String\n  email     String   @unique\n  password  String\n}",
    "filename": "53dfaed1f65828dcd984cba8e4083dc0_1.swift"
  },
  {
    "conversation_hash": "1782f0c96110bab4573af93f71880855",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "#[derive(Debug)]\nenum Token {\n    Text(String),\n    Variable(String),\n}",
    "filename": "1782f0c96110bab4573af93f71880855_1.swift"
  },
  {
    "conversation_hash": "12c143dd9c510331e97a27765635651d",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "figure img {\n  ...\n  transition: transform 0.5s ease; /* This enables smooth transformation */\n  ...\n}",
    "filename": "12c143dd9c510331e97a27765635651d_1.swift"
  },
  {
    "conversation_hash": "12c143dd9c510331e97a27765635651d",
    "code_index": 15,
    "language": "Swift",
    "libraries": [],
    "code": ".proda:hover figure img {\n  transform: scale(1.1);\n  margin-top: 1rem;\n  transition: transform 0.5s ease; /* Smooth the transformation */\n}",
    "filename": "12c143dd9c510331e97a27765635651d_15.swift"
  },
  {
    "conversation_hash": "bb082e77ee12b96e26963a0c94d1c9ff",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "networks: {\n     development: {\n       host: \"127.0.0.1\",\n       port: 7545, // Match the port number to your Ganache\n       network_id: \"*\" // Match any network id\n     }\n   }",
    "filename": "bb082e77ee12b96e26963a0c94d1c9ff_4.swift"
  },
  {
    "conversation_hash": "44676bb4e3c365d5ac64cdd7ad7a36b6",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "<template>\n  <p>Total Price: {{ totalPrice }}</p>\n</template>\n\n<script>\nimport { ref, computed } from 'vue'\n\nexport default {\n  setup() {\n    const quantity = ref(2)\n    const price = ref(20)\n    const totalPrice = computed(quantity * price)\n\n    return { totalPrice }\n  }\n}\n</script>",
    "filename": "44676bb4e3c365d5ac64cdd7ad7a36b6_3.swift"
  },
  {
    "conversation_hash": "6dd1df70070003eb1508e6377ca7be6b",
    "code_index": 8,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    defaultConfig {\n        applicationId \"com.clearup.android.clearup\"\n        ...\n    }\n}",
    "filename": "6dd1df70070003eb1508e6377ca7be6b_8.swift"
  },
  {
    "conversation_hash": "ce99cb37ece149812765e0d801af7b67",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": ".styledDiv {\n  /* Styles for all div elements */\n}\n\n.lastDiv {\n  /* Styles for the last div element */\n}",
    "filename": "ce99cb37ece149812765e0d801af7b67_3.swift"
  },
  {
    "conversation_hash": "d59b28714271b51d04d8e4be8397b765",
    "code_index": 7,
    "language": "Swift",
    "libraries": [
      "AndroidX"
    ],
    "code": "dependencies {\n    implementation(libs.androidx.core.ktx)\n    implementation(libs.androidx.lifecycle.runtime.ktx)\n    implementation(libs.androidx.activity.compose)\n    implementation(platform(libs.androidx.compose.bom))\n    implementation(libs.androidx.ui)\n    implementation(libs.androidx.ui.graphics)\n    implementation(libs.androidx.ui.tooling.preview)\n    implementation(libs.androidx.material3)\n    implementation(libs.androidx.fragment.ktx) // Switched to Fragment KTX from AndroidX\n    implementation(\"androidx.activity:activity-ktx:1.8.2\")\n    // Removed old support libraries and replaced them with their AndroidX counterparts\n    testImplementation(libs.junit)\n    androidTestImplementation(libs.androidx.junit)\n    androidTestImplementation(libs.androidx.espresso.core)\n    androidTestImplementation(platform(libs.androidx.compose.bom))\n    androidTestImplementation(libs.androidx.ui.test.junit4)\n    debugImplementation(libs.androidx.ui.tooling)\n    debugImplementation(libs.androidx.ui.test.manifest)\n}",
    "filename": "d59b28714271b51d04d8e4be8397b765_7.swift"
  },
  {
    "conversation_hash": "52447392de781c68b5319c709ca943f3",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    defaultConfig {\n        applicationId \"com.example.clearup\"\n        ...\n    }\n}",
    "filename": "52447392de781c68b5319c709ca943f3_11.swift"
  },
  {
    "conversation_hash": "46a895065b6fda6131de78ca5383a120",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "type\n  Key = object\n    code: int\n  \nproc toKey(c: int): Key =\n  if c >= Key.MIN_CODE and c <= Key.MAX_CODE:\n    result.code = c\n  else:\n    result.code = -1  # Set an invalid code for unknown keycodes\n\n# Define the minimum and maximum keycodes\nconst\n  Key.MIN_CODE = 0\n  Key.MAX_CODE = 255\n\n# Define a Key object representing an unknown keycode\nlet Key_None = Key(-1)",
    "filename": "46a895065b6fda6131de78ca5383a120_1.swift"
  },
  {
    "conversation_hash": "7546298e810763793cf6d945ee461726",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "rs.initiate({\n  _id: \"configrs\",\n  configsvr: true,\n  members: [\n    { _id: 0, host: \"config1:27019\" },\n    { _id: 1, host: \"config2:27019\" },\n    { _id: 2, host: \"config3:27019\" }\n  ]\n})",
    "filename": "7546298e810763793cf6d945ee461726_3.swift"
  },
  {
    "conversation_hash": "7546298e810763793cf6d945ee461726",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "rs.initiate({\n  _id: \"shard1\",\n  members: [\n    { _id: 0, host: \"shard1-node1:27018\" },\n    { _id: 1, host: \"shard1-node2:27018\" },\n    { _id: 2, host: \"shard1-node3:27018\" }\n  ]\n})",
    "filename": "7546298e810763793cf6d945ee461726_5.swift"
  },
  {
    "conversation_hash": "c6335421d8f5fef40accf66d2588b05d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [
      "SwiftUI"
    ],
    "code": "import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Text(\"Привет, Мир!\")\n            .padding() // Добавляет отступ вокруг текста\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}",
    "filename": "c6335421d8f5fef40accf66d2588b05d_0.swift"
  },
  {
    "conversation_hash": "1a4b9e8e8e89b6de5809d4d4d4292cbf",
    "code_index": 7,
    "language": "Swift",
    "libraries": [
      "XMonad"
    ],
    "code": "import XMonad\n\nmain = xmonad defaultConfig\n    { terminal    = \"xterm\"\n    , modMask     = mod4Mask\n    }",
    "filename": "1a4b9e8e8e89b6de5809d4d4d4292cbf_7.swift"
  },
  {
    "conversation_hash": "ac8ca055091d9501dc04fbfb8e950a12",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "const categories = {\n  Animaux: {\n    subcategories: {\n      Mammifères: {\n        subsubcategories: ['Domestiques', 'Sauvages', 'Elevage']\n      },\n      Poissons: {\n        subsubcategories: ['Eau douce', 'Eau salée']\n      },\n      // Ajouter d'autres sous-catégories d'animaux ici\n    }\n  },\n  Plantes: {\n    subcategories: {\n      Fleurs: {\n        subsubcategories: ['Roses', 'Tulipes', 'Lys']\n      },\n      Arbres: {\n        subsubcategories: ['Feuillus', 'Conifères']\n      },\n      // Ajouter d'autres sous-catégories de plantes ici\n    }\n  }\n  // Ajouter d'autres catégories principales ici\n};",
    "filename": "ac8ca055091d9501dc04fbfb8e950a12_3.swift"
  },
  {
    "conversation_hash": "ed8e185bf16fdb59787a4437d25ba9d3",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "export default defineComponent({\n  // Komponentenregistrierung usw.\n  data() {\n    return {\n      chartOptions: {\n        scales: {\n          y: {\n            min: 0,\n            max: 100,\n          },\n        },\n      },\n      // Chart-Daten\n    };\n  },\n  methods: {\n    updateScale() {\n      this.chartOptions.scales.y.min = 0; // Neuer Wert\n      this.chartOptions.scales.y.max = 100; // Neuer Wert\n    },\n  },\n});",
    "filename": "ed8e185bf16fdb59787a4437d25ba9d3_6.swift"
  },
  {
    "conversation_hash": "4ea97fc307aec10d9def4260eeb00bb3",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "class DialogTableViewCell: UITableViewCell {\n    let containerView = UIView() // 容器视图\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        // 配置容器视图\n        containerView.frame = self.contentView.bounds\n        self.contentView.addSubview(containerView)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    // 一个函数用来配置并显示WMZDialog\n    func configureDialog() {\n        // 在这里配置WMZDialog\n        \n        // 假设你已经创建和配置了一个WMZDialog的实例，我们称它为dialog\n        // let dialog = ...\n\n        // 然后获取dialog的视图，并添加到容器中\n        // containerView.addSubview(dialog.view)\n    }\n}\n\nclass YourTableViewController: UITableViewController {\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"DialogTableViewCell\", for: indexPath) as! DialogTableViewCell\n        // 配置Cell，例如调用configureDialog\n        cell.configureDialog()\n        return cell\n    }\n}",
    "filename": "4ea97fc307aec10d9def4260eeb00bb3_0.swift"
  },
  {
    "conversation_hash": "75cadd20ead56abec2cd731e97cbaeb3",
    "code_index": 18,
    "language": "Swift",
    "libraries": [],
    "code": "static func is_equal(value1, value2) -> bool:\n\tif value1 == value2:\n\t\treturn true\n\t\n\tif typeof(value1) == TYPE_DICTIONARY and typeof(value2) == TYPE_DICTIONARY:\n\t\tvar enum_keys = value2.keys()\n\t\tfor key in enum_keys:\n\t\t\tif not key in value1 or value1[key] != value2[key]:\n\t\t\t\treturn false\n\t\t# Stellen Sie sicher, dass value1 keine zusätzlichen Schlüssel enthält\n\t\treturn value1.keys().size() == enum_keys.size()\n\t\t\n\treturn false",
    "filename": "75cadd20ead56abec2cd731e97cbaeb3_18.swift"
  },
  {
    "conversation_hash": "75cadd20ead56abec2cd731e97cbaeb3",
    "code_index": 19,
    "language": "Swift",
    "libraries": [],
    "code": "static func is_equal(value1, value2) -> bool:\n    if value1 == value2:\n        return true\n    \n    # Prüft, ob beide Werte Dictionaries sind, ansonsten direkt false zurückgeben.\n    if typeof(value1) == TYPE_DICTIONARY and typeof(value2) == TYPE_DICTIONARY:\n        var enum_keys = value1.keys()\n        for key in enum_keys:\n            # Prüft, ob der Schlüssel in beiden Dictionaries vorhanden ist und dieselben Werte hat.\n            if not key in value2 or value1[key] != value2[key]:\n                return false\n        # Wenn alle Einträge in value1 in value2 vorhanden sind und übereinstimmen, true zurückgeben.\n        return true\n    \n    return false",
    "filename": "75cadd20ead56abec2cd731e97cbaeb3_19.swift"
  },
  {
    "conversation_hash": "75cadd20ead56abec2cd731e97cbaeb3",
    "code_index": 20,
    "language": "Swift",
    "libraries": [],
    "code": "# Datei: MESSAGES.gd\n\nclass_name MESSAGES\nextends Reference  # Verwenden Sie 'Reference' oder eine andere geeignete Basisklasse\n\nconst REQUEST = {\"command\": \"TEST\"}\n\nstatic func is_equal(value1, value2) -> bool:\n    if value1 == value2:\n        return true\n\n    if typeof(value1) == TYPE_DICTIONARY and typeof(value2) == TYPE_DICTIONARY:\n        var enum_keys = value1.keys()\n        for key in enum_keys:\n            if not key in value2 or value1[key] != value2[key]:\n                return false\n        return true\n    \n    return false",
    "filename": "75cadd20ead56abec2cd731e97cbaeb3_20.swift"
  },
  {
    "conversation_hash": "fdc865c49d9536e67fbd5642cf11cf88",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent // Set the LoginComponent as the default route\n  },\n  {\n    path: 'dashboard',\n    component: DashboardComponent\n  },\n  // Add other routes as needed\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }",
    "filename": "fdc865c49d9536e67fbd5642cf11cf88_2.swift"
  },
  {
    "conversation_hash": "52d20221675b47200f1bf362537e7170",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "// Substituir isto\ncollection: j.geometry(),\n\n// Com isto\ncollection: j,",
    "filename": "52d20221675b47200f1bf362537e7170_1.swift"
  },
  {
    "conversation_hash": "852ecdd91411d39fec79769deb3f28d3",
    "code_index": 21,
    "language": "Swift",
    "libraries": [],
    "code": "jetstream {\n  store_dir: \"/path/to/jetstream/store\"\n  max_memory: 1Gi\n  max_storage: 10Gi\n}",
    "filename": "852ecdd91411d39fec79769deb3f28d3_21.swift"
  },
  {
    "conversation_hash": "938759851f957d040299ea06d4345a56",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "class Item:\n    var name: String\n    var damage: int\n    var defense: int\n    \n    func _init(name: String):\n        self.name = name\n        self.damage = generateDamage()\n        self.defense = generateDefense()\n    \n    func generateDamage() -> int:\n        # Сгенерируем урон в зависимости от хэша имени предмета\n        return hash(self.name) % 10 + 1\n    \n    func generateDefense() -> int:\n        # Сгенерируем защиту в зависимости от длины имени предмета\n        return self.name.length() / 2",
    "filename": "938759851f957d040299ea06d4345a56_0.swift"
  },
  {
    "conversation_hash": "938759851f957d040299ea06d4345a56",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "class Sword extends Item:\n    func _init(name: String):\n        super._init(name)\n    \n    func generateDamage() -> int:\n        return hash(self.name + \"sword\") % 10 + 5\n\nclass Shield extends Item:\n    func _init(name: String):\n        super._init(name)\n    \n    func generateDefense() -> int:\n        return self.name.length() * 2",
    "filename": "938759851f957d040299ea06d4345a56_1.swift"
  },
  {
    "conversation_hash": "938759851f957d040299ea06d4345a56",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "class Item:\n    var name: String\n    var damage: int\n    var defense: int\n    \n    func _init(name: String, prefixName: String, suffixName: String):\n        self.name = name\n        self.damage = generateDamage(prefixName, suffixName)\n        self.defense = generateDefense(prefixName, suffixName)\n    \n    func generateDamage(prefixName: String, suffixName: String) -> int:\n        # Сгенерация урона на основе хэшей всех трех имен\n        return (hash(self.name) + hash(prefixName) + hash(suffixName)) % 10 + 1\n    \n    func generateDefense(prefixName: String, suffixName: String) -> int:\n        # Генерация защиты на основе длин всех трех имен\n        return (self.name.length() + prefixName.length() + suffixName.length()) / 3",
    "filename": "938759851f957d040299ea06d4345a56_3.swift"
  },
  {
    "conversation_hash": "938759851f957d040299ea06d4345a56",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "class Sword extends Item:\n    func _init(name: String, prefixName: String, suffixName: String):\n        super._init(name, prefixName, suffixName)\n    \nclass Shield extends Item:\n    func _init(name: String, prefixName: String, suffixName: String):\n        super._init(name, prefixName, suffixName)",
    "filename": "938759851f957d040299ea06d4345a56_4.swift"
  },
  {
    "conversation_hash": "0d8a9ba4de862b30ab8f7a52263bc3bc",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "extends Node\n\nclass_name ItemGenerator\n\nfunc generateItem(name: String):\n    var item = {}\n    \n    # Процесс генерации предмета по имени\n    match name:\n        \"sword\":\n            item = generateSword()\n        \"potion\":\n            item = generatePotion()\n        # Добавьте другие возможные предметы\n\n    return item\n\nfunc generateSword():\n    var sword = {\n        \"name\": \"sword\",\n        \"damage\": rand_range(5, 10),\n        \"durability\": rand_range(50, 100)\n    }\n    return sword\n\nfunc generatePotion():\n    var potion = {\n        \"name\": \"potion\",\n        \"heal_amount\": rand_range(10, 20),\n        \"effect\": \"healing\"\n    }\n    return potion",
    "filename": "0d8a9ba4de862b30ab8f7a52263bc3bc_0.swift"
  },
  {
    "conversation_hash": "0d8a9ba4de862b30ab8f7a52263bc3bc",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "func generateItem(name: String, prefix: String = \"\", postfix: String = \"\"):\n    var item = {}\n    \n    # Объединяем основное имя с префиксом и постфиксом\n    var fullName = prefix + name + postfix\n    \n    # Процесс генерации предмета по имени\n    match name:\n        \"sword\":\n            item = generateSword(fullName)\n        \"potion\":\n            item = generatePotion(fullName)\n        # Добавьте другие возможные предметы\n\n    return item",
    "filename": "0d8a9ba4de862b30ab8f7a52263bc3bc_1.swift"
  },
  {
    "conversation_hash": "0d8a9ba4de862b30ab8f7a52263bc3bc",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "func generateSword(name: String):\n    var sword = {\n        \"name\": name,\n        \"damage\": rand_range(5, 10),\n        \"durability\": rand_range(50, 100)\n    }\n    return sword\n\nfunc generatePotion(name: String):\n    var potion = {\n        \"name\": name,\n        \"heal_amount\": rand_range(10, 20),\n        \"effect\": \"healing\"\n    }\n    return potion",
    "filename": "0d8a9ba4de862b30ab8f7a52263bc3bc_2.swift"
  },
  {
    "conversation_hash": "878468b336ea75ebfc797dac3ddcb0d6",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "extends Node\n\nenum ItemType {\n    WEAPON,\n    ARMOR,\n    CONSUMABLE,\n}\n\nenum ItemRarity {\n    COMMON,\n    UNCOMMON,\n    RARE,\n    EPIC,\n    LEGENDARY,\n}\n\nclass_name ItemGenerator\n\nfunc generateItem(baseName: String) -> Dictionary:\n    var item = {}\n    var rng = RandomNumberGenerator.new()\n    \n    item[\"name\"] = baseName\n    item[\"type\"] = rng.randi_range(0, ItemType.CONSUMABLE)\n    item[\"rarity\"] = rng.randi_range(0, ItemRarity.LEGENDARY)\n    \n    # Добавляем префиксное и постфиксное имя\n    var prefixes = [\"Flaming\", \"Frozen\", \"Thundering\"]\n    var suffixes = [\"of Doom\", \"of Power\", \"of the Ancients\"]\n    \n    item[\"prefix\"] = prefixes[rng.randi() % prefixes.size()]\n    item[\"suffix\"] = suffixes[rng.randi() % suffixes.size()]\n    \n    return item",
    "filename": "878468b336ea75ebfc797dac3ddcb0d6_0.swift"
  },
  {
    "conversation_hash": "878468b336ea75ebfc797dac3ddcb0d6",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "extends Node\n\nclass_name ItemGenerator\n\nfunc generateItem(baseName: String) -> Dictionary:\n    var item = {}\n    var rng = RandomNumberGenerator.new()\n    \n    item[\"name\"] = baseName\n    \n    # Определяем свойства предмета на основе его имени\n    match baseName:\n        \"Sword\":\n            item[\"type\"] = \"Weapon\"\n            item[\"damage\"] = rng.randf_range(10.0, 20.0)\n        \"Shield\":\n            item[\"type\"] = \"Armor\"\n            item[\"defense\"] = rng.randf_range(5.0, 10.0)\n        \"Potion\":\n            item[\"type\"] = \"Consumable\"\n            item[\"effect\"] = \"Healing\"\n            item[\"power\"] = rng.randi_range(20, 50)\n    \n    return item",
    "filename": "878468b336ea75ebfc797dac3ddcb0d6_2.swift"
  },
  {
    "conversation_hash": "aa6c587089135ef711a67d93ffdf1caf",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "listen: 0.0.0.0:4222\n\nserver_name: seednode\n\ncluster {\n  name: mynatscluster\n  listen: 0.0.0.0:6222\n  routes: [\n    nats-route://192.168.0.1:6222,  # Este es el nodo semilla, apuntando a sí mismo.\n    nats-route://192.168.0.2:6222,  # Server 2\n    nats-route://192.168.0.3:6222,  # Server 3\n  ]\n  authorization {\n    user: routeuser\n    password: route_password\n    timeout: 3\n  }\n}\n\njetstream {\n  store_dir: \"/path/to/jetstream/data/seednode\"\n  max_memory: 1GB\n  max_storage: 10GB\n}\n\nleafnodes {\n    port: 7422\n}",
    "filename": "aa6c587089135ef711a67d93ffdf1caf_5.swift"
  },
  {
    "conversation_hash": "4ab35d55452ccee2a42477398b6f7d60",
    "code_index": 14,
    "language": "Swift",
    "libraries": [
      "App",
      "store"
    ],
    "code": "import { createApp } from 'vue'\nimport App from './App.vue'\nimport store from './store'\n\n// Vuex store\nconst app = createApp(App)\napp.use(store)\napp.mount('#app')",
    "filename": "4ab35d55452ccee2a42477398b6f7d60_14.swift"
  },
  {
    "conversation_hash": "7fac9ae49d0158ffdc1591d77d695a1a",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "leafnodes {\n  remotes [{\n    url: \"nats://nats-1.techpre.io:7422\"\n    account: \"AD3WCCDENBGSY5D4EI4RMF7KED6EW5PVUURLVCC6PPX2V2P4SK3SC4PX\"\n  }]\n}",
    "filename": "7fac9ae49d0158ffdc1591d77d695a1a_5.swift"
  },
  {
    "conversation_hash": "7fac9ae49d0158ffdc1591d77d695a1a",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "server_name: leaf1\n\nleafnodes {\n  remotes = [\n    {\n      url: \"nats://primary_cluster_node:7422\"\n    }\n  ]\n}\n\njetstream {\n   store_dir: \"/path/to/jetstream/leaf1\"\n   max_mem: 512MB\n   max_file: 5GB\n}",
    "filename": "7fac9ae49d0158ffdc1591d77d695a1a_9.swift"
  },
  {
    "conversation_hash": "7fac9ae49d0158ffdc1591d77d695a1a",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "cluster {\n  name: \"C1\"\n  host: \"0.0.0.0\"  # Asegura que escucha en todas las IPs disponibles\n  port: 6222       # El puerto para la comunicación del clúster\n  routes: [\"nats-route://nats-cluser.example.com:6222\"] # Suponiendo autodescubrimiento vía DNS\n  # `advertise` es la opción correcta si necesitas que NATS anuncie una dirección IP diferente\n}",
    "filename": "7fac9ae49d0158ffdc1591d77d695a1a_11.swift"
  },
  {
    "conversation_hash": "7bcf54c555fd3ed72662550cf85a613c",
    "code_index": 1,
    "language": "Swift",
    "libraries": [],
    "code": "leafnodes {\n  port: 7422\n  tls {\n    cert_file: \"/etc/letsencrypt/live/nats-2.techpre.io/fullchain.pem\"\n    key_file: \"/etc/letsencrypt/live/nats-2.techpre.io/privkey.pem\"\n  }\n  remotes [{\n    url: \"tls://45.185.17.125:7422\" # Asegúrate de que la URL sea correcta y concuerde con el tipo de conexión (TLS en este caso).\n    # account: ACGZJ7YOW4HOWJYIDC352PNDAOBLEM7RCMCAEN3432ZLDNH5XPOUKFBM\n    # Si interactuarán cuentas, especificar la cuenta correcta aquí.\n  }]\n}",
    "filename": "7bcf54c555fd3ed72662550cf85a613c_1.swift"
  },
  {
    "conversation_hash": "27e49e6a2fd466728e230857c01c79ca",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "interface Infos {\n  percent: string; // This indicates that percent is always a string\n}\n\nconst infos: Infos = {\n  percent: \"80%\",\n};\n\n// This should not cause a TypeScript error if everything is typed correctly\n<View style={[styles.greenBar, { width: infos.percent }]} />",
    "filename": "27e49e6a2fd466728e230857c01c79ca_6.swift"
  },
  {
    "conversation_hash": "d39dfcc5443dadb196b0a540e34582f5",
    "code_index": 21,
    "language": "Swift",
    "libraries": [],
    "code": "navigation: {\n    buttonOptions: {\n        symbolStroke: '#DDDDDD', // 菜单按钮颜色\n        theme: {\n            fill: '#505050' // 菜单按钮背景颜色\n        }\n    }\n},\nexporting: {\n    buttons: {\n        contextButton: {\n            symbolStroke: '#DDDDDD', // 菜单内图标颜色\n            theme: {\n                fill: '#505050' // 菜单背景颜色\n            }\n        }\n    }\n}",
    "filename": "d39dfcc5443dadb196b0a540e34582f5_21.swift"
  },
  {
    "conversation_hash": "8bb29bab778b8d0e60633e630d474301",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": "#[derive(Debug, PartialEq)]\nenum TokenType {\n    // Previous tokens\n    TypeComment(String),\n    Comment(String),  // Let's also capture regular comments for completeness\n    //...\n}",
    "filename": "8bb29bab778b8d0e60633e630d474301_6.swift"
  },
  {
    "conversation_hash": "a6d170d1190053f49abeb4d70da98220",
    "code_index": 65,
    "language": "Swift",
    "libraries": [
      "Update"
    ],
    "code": "import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Update from './Update'; // Assuming this is your component for handling updates\n\n// Inside your component's return statement\n<Router>\n  <Routes>\n    <Route path=\"/update/:annonceId\" element={<Update />} />\n    {/* Other routes */}\n  </Routes>\n</Router>",
    "filename": "a6d170d1190053f49abeb4d70da98220_65.swift"
  },
  {
    "conversation_hash": "0e0ceadc9268386c23fb5085dbfa0ac2",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": ".flexContainer {\n  display: flex;\n  justify-content: space-between;\n}\n\n.rectangularBox {\n  flex: 1;\n  border: 1px solid black;\n  border-radius: 5px;\n  padding: 20px; /* Increase padding for a bigger box */\n  margin: 20px; /* Increase margin for spacing */\n}",
    "filename": "0e0ceadc9268386c23fb5085dbfa0ac2_4.swift"
  },
  {
    "conversation_hash": "0e0ceadc9268386c23fb5085dbfa0ac2",
    "code_index": 6,
    "language": "Swift",
    "libraries": [],
    "code": ".flexContainer {\n  display: flex;\n  justify-content: space-between;\n}\n\n.rectangularBox {\n  flex: 1;\n  border: 1px solid black;\n  border-radius: 5px;\n  padding: 20px;\n  margin: 20px;\n}\n\n.boxText {\n  height: 50px; /* Set a fixed height for the text */\n  overflow: hidden; /* Hide overflowing text */\n}",
    "filename": "0e0ceadc9268386c23fb5085dbfa0ac2_6.swift"
  },
  {
    "conversation_hash": "0e0ceadc9268386c23fb5085dbfa0ac2",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": ".flexContainer {\n  display: flex;\n  justify-content: space-between;\n}\n\n.rectangularBox {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n  border: 1px solid black;\n  border-radius: 5px;\n  padding: 20px;\n  margin: 20px;\n  height: 100px; /* Set a fixed height for the box */\n}\n\n.boxText {\n  overflow: hidden; /* Hide overflowing text */\n}",
    "filename": "0e0ceadc9268386c23fb5085dbfa0ac2_7.swift"
  },
  {
    "conversation_hash": "0e0ceadc9268386c23fb5085dbfa0ac2",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": ".flexContainer {\n  display: flex;\n  justify-content: space-between;\n}\n\n.rectangularBox {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n  border: 1px solid black;\n  border-radius: 5px;\n  padding: 20px;\n  margin: 20px;\n  height: 100px; /* Set a fixed height for the box */\n  overflow: hidden; /* Hide overflowing text */\n}\n\n.boxText {\n  text-align: center; /* Center text horizontally */\n}",
    "filename": "0e0ceadc9268386c23fb5085dbfa0ac2_9.swift"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildFeatures {\n        viewBinding true\n    }\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_2.swift"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    buildFeatures {\n        viewBinding true\n    }\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_3.swift"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 7,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildFeatures {\n        viewBinding true\n    }\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_7.swift"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 9,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildFeatures {\n        viewBinding true\n    }\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_9.swift"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 11,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildFeatures {\n        viewBinding true\n    }\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_11.swift"
  },
  {
    "conversation_hash": "2f54c971f44734aff04da8e37909d3b3",
    "code_index": 14,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildFeatures {\n        viewBinding true\n    }\n}",
    "filename": "2f54c971f44734aff04da8e37909d3b3_14.swift"
  },
  {
    "conversation_hash": "33014b662423c6b7aacf4183b09700f9",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildFeatures {\n        viewBinding true\n    }\n}",
    "filename": "33014b662423c6b7aacf4183b09700f9_3.swift"
  },
  {
    "conversation_hash": "33014b662423c6b7aacf4183b09700f9",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildFeatures {\n        viewBinding true\n    }\n}",
    "filename": "33014b662423c6b7aacf4183b09700f9_5.swift"
  },
  {
    "conversation_hash": "169567b6f8fce147ef1f015907ef7a9f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildFeatures {\n        dataBinding true\n    }\n}",
    "filename": "169567b6f8fce147ef1f015907ef7a9f_0.swift"
  },
  {
    "conversation_hash": "169567b6f8fce147ef1f015907ef7a9f",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildFeatures {\n        viewBinding true\n    }\n}",
    "filename": "169567b6f8fce147ef1f015907ef7a9f_3.swift"
  },
  {
    "conversation_hash": "c2c06c054c33365095d78174633de12b",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "@NgModule({\n  imports: [\n    NgbDropdownModule\n  ]\n})",
    "filename": "c2c06c054c33365095d78174633de12b_3.swift"
  },
  {
    "conversation_hash": "c2c06c054c33365095d78174633de12b",
    "code_index": 12,
    "language": "Swift",
    "libraries": [],
    "code": "const routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'content1', component: Content1Component },\n  { path: 'content2', component: Content2Component },\n  { path: '', pathMatch: 'full', redirectTo: 'home' }, // Default route\n  { path: '**', component: PageNotFoundComponent } // 404 Page\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }",
    "filename": "c2c06c054c33365095d78174633de12b_12.swift"
  },
  {
    "conversation_hash": "92cdc79491151ff8bc61e3d6337e5f01",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    viewBinding {\n        enabled = true\n    }\n}",
    "filename": "92cdc79491151ff8bc61e3d6337e5f01_0.swift"
  },
  {
    "conversation_hash": "bd677706ddaf64bc6db0af38fbb52060",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    buildFeatures {\n        viewBinding = true\n    }\n}",
    "filename": "bd677706ddaf64bc6db0af38fbb52060_0.swift"
  },
  {
    "conversation_hash": "ba39969ab50728b078c0cd0b04e9bc31",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    viewBinding {\n        enabled = true\n    }\n}",
    "filename": "ba39969ab50728b078c0cd0b04e9bc31_0.swift"
  },
  {
    "conversation_hash": "fb794923bc1aca876dc7d7f208a6ac71",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    viewBinding {\n        enabled = true\n    }\n}",
    "filename": "fb794923bc1aca876dc7d7f208a6ac71_0.swift"
  },
  {
    "conversation_hash": "17fa21c04c78c59847c407deb1991d48",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    viewBinding {\n        enabled = true\n    }\n}",
    "filename": "17fa21c04c78c59847c407deb1991d48_0.swift"
  },
  {
    "conversation_hash": "a51eac21e12ab1a58cd3c8b95f8bc767",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    viewBinding {\n        enabled = true\n    }\n}",
    "filename": "a51eac21e12ab1a58cd3c8b95f8bc767_0.swift"
  },
  {
    "conversation_hash": "a51eac21e12ab1a58cd3c8b95f8bc767",
    "code_index": 4,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    viewBinding {\n        enabled = true\n    }\n}",
    "filename": "a51eac21e12ab1a58cd3c8b95f8bc767_4.swift"
  },
  {
    "conversation_hash": "ac590ebe4562aeada764af03e6ca5d6d",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "dependencies {\n    implementation 'org.tensorflow:tensorflow-lite:+' // Use the latest version\n    // For GPU acceleration\n    implementation 'org.tensorflow:tensorflow-lite-gpu:+'\n    // For TensorFlow Lite models that require support for operations not included by default\n    implementation 'org.tensorflow:tensorflow-lite-support:+'\n}",
    "filename": "ac590ebe4562aeada764af03e6ca5d6d_0.swift"
  },
  {
    "conversation_hash": "d508fb64a179712676719edc239fa96f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "android {\n    ...\n    viewBinding {\n        enabled = true\n    }\n}",
    "filename": "d508fb64a179712676719edc239fa96f_0.swift"
  },
  {
    "conversation_hash": "f465178cfeb676da3eb825c0beb45a29",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "{\n  path: 'oms',\n  component: ShellComponent,\n  canActivate: [AuthGuard],\n  children: [\n    {\n      path: 'home',\n      component: HomePageComponent,\n      canActivate: [AuthGuard]\n    },\n    // Add more child routes here if needed\n  ]\n}",
    "filename": "f465178cfeb676da3eb825c0beb45a29_0.swift"
  },
  {
    "conversation_hash": "4d3a97c6f6f738ac7399a3653718e473",
    "code_index": 2,
    "language": "Swift",
    "libraries": [],
    "code": "#ghostinfo {\n  display: none;\n}\n\n#ghostinfo img {\n  display: block;\n}",
    "filename": "4d3a97c6f6f738ac7399a3653718e473_2.swift"
  },
  {
    "conversation_hash": "1bfb408026af1790cc0be81dab13e47f",
    "code_index": 0,
    "language": "Swift",
    "libraries": [],
    "code": "p {\n  visibility: hidden;\n}\n\np:hover {\n  visibility: visible;\n}",
    "filename": "1bfb408026af1790cc0be81dab13e47f_0.swift"
  },
  {
    "conversation_hash": "b86fe399fd4a796c977746a5a24a94b7",
    "code_index": 3,
    "language": "Swift",
    "libraries": [],
    "code": "#image {\n  visibility: hidden;\n}\n\ncircle:hover + #image {\n  visibility: visible;\n}",
    "filename": "b86fe399fd4a796c977746a5a24a94b7_3.swift"
  },
  {
    "conversation_hash": "b86fe399fd4a796c977746a5a24a94b7",
    "code_index": 5,
    "language": "Swift",
    "libraries": [],
    "code": "#image {\n  visibility: hidden;\n}\n\ncircle:target + #image {\n  visibility: visible;\n}",
    "filename": "b86fe399fd4a796c977746a5a24a94b7_5.swift"
  }
]