conversation_hash,code_index,error_line,error_character,error_id,error_message
01be4fc6642ebde592676b1fa24e54c8,2,15,1,files.php.rules.lang.security.injection.tainted-exec,User input is passed to a function that executes a shell command. This can lead to remote code execution.
01be4fc6642ebde592676b1fa24e54c8,2,15,1,files.php.rules.lang.security.tainted-exec,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.
01be4fc6642ebde592676b1fa24e54c8,2,15,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
01be4fc6642ebde592676b1fa24e54c8,2,21,1,files.php.rules.lang.security.injection.tainted-exec,User input is passed to a function that executes a shell command. This can lead to remote code execution.
01be4fc6642ebde592676b1fa24e54c8,2,21,1,files.php.rules.lang.security.tainted-exec,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.
01be4fc6642ebde592676b1fa24e54c8,2,21,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
0568bf729d305348f1f105244f021c5b,0,6,31,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
05ee4f109a2a818d9ee9d3446787b23d,1,12,10,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
087a62dd99a70814aedf28f2b82bee5f,7,2,1,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
0b3679bcce46c7983a9cbd418625f625,0,18,13,files.php.rules.lang.security.php-ssrf,"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Dangerous function file_get_contents with payload ""https://www.google.com/recaptcha/api/siteverify?secret={$recaptcha_secret}&response={$_POST['g-recaptcha-response']}"""
0b3679bcce46c7983a9cbd418625f625,0,19,61,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
136bc3f63d2da6a575426402720283a4,0,15,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
16560fd3786ee183df3feeb163a101da,3,6,4,files.php.rules.lang.security.unlink-use,Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.
16560fd3786ee183df3feeb163a101da,3,6,11,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
18b8d73a681322f643e1a6eedfefc7f8,1,17,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
1930bbebcc2b1692bc1c9bdade437402,14,2,1,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
1930bbebcc2b1692bc1c9bdade437402,5,2,4,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
25196b33b23ff9bca8f63c870e6fc36a,2,10,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
25c9a8748c62e54625838f64d0c3d93e,6,16,21,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25c9a8748c62e54625838f64d0c3d93e,6,16,43,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25c9a8748c62e54625838f64d0c3d93e,6,28,22,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25c9a8748c62e54625838f64d0c3d93e,6,28,43,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25c9a8748c62e54625838f64d0c3d93e,6,33,21,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25c9a8748c62e54625838f64d0c3d93e,6,33,43,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25e10599575b5759a17118ed5ab90585,0,22,8,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
25e10599575b5759a17118ed5ab90585,0,28,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
2b478ec404952be3f14dece5f3a6a683,3,6,9,files.php.rules.lang.security.injection.tainted-exec,User input is passed to a function that executes a shell command. This can lead to remote code execution.
2b478ec404952be3f14dece5f3a6a683,3,6,9,files.php.rules.lang.security.tainted-exec,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.
2b478ec404952be3f14dece5f3a6a683,3,6,9,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
2c2d152d24cede3faaa875f8a6256439,1,12,27,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
2c2d152d24cede3faaa875f8a6256439,1,15,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
3122884a0235ded0ec8dc0c8679ac838,8,2,1,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
325a9f90cf89c970d1ade356e93a4152,0,12,10,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
38d16ac95b4d24966b468842742b6c6f,9,2,1,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
3c49c68654149f5727fd24d34003bc28,9,1,7,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
3f9896dae9ad14cce781d5b1d9137536,0,17,1,files.php.rules.lang.security.curl-ssl-verifypeer-off,SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= false)
43e7600434b622a4afde9c57c4382f90,1,3,1,files.php.rules.lang.security.php-permissive-cors,"Access-Control-Allow-Origin response header is set to ""*"". This will disable CORS Same Origin Policy restrictions."
48676fb30b319a92fc4d2827e4d8f31f,0,2,32,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
507db341abeaa17cfb5795ba874f1cb8,0,34,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
531d4857884658c0c29c9af2851c1d13,1,4,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
531d4857884658c0c29c9af2851c1d13,3,4,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
5bc6e1ac84abc59094de9cd9da13f0dd,0,18,21,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
5bc6e1ac84abc59094de9cd9da13f0dd,0,18,43,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
5bc6e1ac84abc59094de9cd9da13f0dd,0,20,9,files.php.rules.lang.security.file-inclusion,"Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly."
5d2696d5487b2d175ceac9999872263d,3,3,3,files.php.rules.lang.security.php-ssrf,"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Dangerous function curl_init with payload $_GET['url']"
5d2696d5487b2d175ceac9999872263d,3,10,3,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
5f5610e93132a4dd108026b970c7860e,2,7,76,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
5f5610e93132a4dd108026b970c7860e,2,8,71,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
6370c4cbfa472ffa088ff64430bdee5b,4,2,1,files.php.rules.lang.security.php-ssrf,"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Dangerous function readfile with payload $_GET['filename']"
6370c4cbfa472ffa088ff64430bdee5b,4,5,11,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
695e7fc5183ede4e18894eb8eba03caa,3,13,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
6a18172dfbf3632c007b86d66943aa34,0,3,4,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
71a32a65dae8551159a37f69c8747c84,2,12,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
74577c32164a555f5cc9dbc385588744,2,12,14,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
74577c32164a555f5cc9dbc385588744,2,15,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
74577c32164a555f5cc9dbc385588744,2,17,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
7e52515ee4b7cf56e33ee9d88576f47d,0,14,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
81e14ccf7076fbc03a9807929e20abb9,1,16,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
85d4a933aeff8293c482773b82fecd63,0,2,4,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
87e06c38f8adb9651589c8343f3defef,4,33,3,files.php.rules.lang.security.weak-crypto,Detected usage of weak crypto function. Consider using stronger alternatives.
8c27a6cb71f0703b8f9631e0d48ef183,0,12,21,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
8c27a6cb71f0703b8f9631e0d48ef183,0,12,47,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
8c27a6cb71f0703b8f9631e0d48ef183,0,13,9,files.php.rules.lang.security.file-inclusion,"Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly."
8c27a6cb71f0703b8f9631e0d48ef183,0,22,17,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
8c27a6cb71f0703b8f9631e0d48ef183,0,24,39,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
8c27a6cb71f0703b8f9631e0d48ef183,0,26,18,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
94efc9bfc11b031ed5cf2bc0a09455d0,0,6,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
94efc9bfc11b031ed5cf2bc0a09455d0,0,6,11,files.php.rules.lang.security.injection.tainted-exec,User input is passed to a function that executes a shell command. This can lead to remote code execution.
94efc9bfc11b031ed5cf2bc0a09455d0,0,6,11,files.php.rules.lang.security.tainted-exec,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.
9665ef52077fcb6c04815ba47502a9ea,9,2,1,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
97a629d09c986ce1e2d3d2eaa205cc6d,8,2,4,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
9a7b467efa00f6e5262fbdab785dbab1,1,2,6,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
9d92e524965a6360d5341b0607b84923,1,9,7,files.php.rules.lang.security.weak-crypto,Detected usage of weak crypto function. Consider using stronger alternatives.
a72b034a34581280340b8b83d0e2067a,2,13,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
a8b89b944be0c6025d73b4d5d7556f97,12,1,7,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
a8b89b944be0c6025d73b4d5d7556f97,15,2,9,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
a8b89b944be0c6025d73b4d5d7556f97,18,2,6,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
b2c90351894048e465e17770de195190,3,14,13,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
b2c90351894048e465e17770de195190,4,9,13,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
b4064759ba3f651c0dc7143c88d20907,0,50,16,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
ba4e5d6e648136b81842d64c6bbd3419,3,21,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
ba591a610a942431a5ced40a6dd1ce84,1,17,9,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
ba591a610a942431a5ced40a6dd1ce84,1,20,11,files.php.rules.lang.security.unlink-use,Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.
bd4ef272d835cca1f16028fc0df39668,21,29,13,files.php.rules.lang.security.file-inclusion,"Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly."
c07126b1fc6d3f65e654102be177b737,1,17,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
c3f37f0607ed9ef95013a9141f064cea,1,14,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
cbd62b40de6745be97592dc0666c8d65,4,2,1,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
d6f8a442f1e477b1655127edc3c56a63,2,27,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
dcc3f1638da823301084076c4e81cad0,0,34,13,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
dec3fe1c632ad411b29cdd41701ec758,0,2,1,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
e06a4e364dd4288316ed62ca2526eb00,3,7,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
e06a4e364dd4288316ed62ca2526eb00,3,8,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
e5c33e07b50fdc586cdbe419a3104332,4,18,5,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
e74da7378465c90873f8735e85276dfa,1,17,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
ed1bf42728e58f8f83da851df3f48d92,0,16,1,files.php.rules.lang.security.audit.openssl-decrypt-validate,"The function `openssl_decrypt` returns either a string of the decrypted data on success or `false` on failure. If the failure case is not handled, this could lead to undefined behavior in your application. Please handle the case where `openssl_decrypt` returns `false`."
f00482f9383dac1f106172875589f879,1,20,11,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
f00482f9383dac1f106172875589f879,8,15,10,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
f2cf887073e93e9a7cad8e6542f85c98,9,13,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
f53cc0db85038581014b0b166373b6db,10,2,1,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
f53cc0db85038581014b0b166373b6db,5,2,1,files.php.rules.lang.security.phpinfo-use,The 'phpinfo' function may reveal sensitive information about your environment.
f722095f2d0d45cdae6fd025b0057b0b,0,11,5,files.php.rules.lang.security.injection.tainted-exec,User input is passed to a function that executes a shell command. This can lead to remote code execution.
f722095f2d0d45cdae6fd025b0057b0b,0,11,5,files.php.rules.lang.security.tainted-exec,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.
f722095f2d0d45cdae6fd025b0057b0b,0,11,5,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
fa2a2523db179208e35315c5da3c4769,1,14,1,files.php.rules.lang.security.curl-ssl-verifypeer-off,SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= 0)
fbd64e7904ee581518a255d7d1dd4b5f,10,3,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
fbd64e7904ee581518a255d7d1dd4b5f,14,3,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
fbd64e7904ee581518a255d7d1dd4b5f,16,5,3,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
fbd64e7904ee581518a255d7d1dd4b5f,21,6,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
fbd64e7904ee581518a255d7d1dd4b5f,3,5,3,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
fbd64e7904ee581518a255d7d1dd4b5f,5,5,3,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
