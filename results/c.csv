conversation_hash,code_index,error_line,error_character,error_id,error_message
000de7ac199d40df8d53d93bd8fa687d,3,29,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,3,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,3,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,3,72,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,3,74,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,3,104,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,3,116,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,3,124,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,3,129,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
004c0b9ddb270ea7891108cb9852e3c6,0,57,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0087673400f7935d66cd233f45136846,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0087673400f7935d66cd233f45136846,0,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0088db657f19c15fb12c67c8a24aa687,0,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
0088db657f19c15fb12c67c8a24aa687,1,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
0088db657f19c15fb12c67c8a24aa687,1,41,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
011b49c282451ca4ec1eb160eabf21fc,4,20,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
011b49c282451ca4ec1eb160eabf21fc,4,24,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
011b49c282451ca4ec1eb160eabf21fc,4,26,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
011b49c282451ca4ec1eb160eabf21fc,5,20,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
011b49c282451ca4ec1eb160eabf21fc,5,23,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
011b49c282451ca4ec1eb160eabf21fc,5,25,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
01310c8a4fab6dd631998dbab9198e3e,0,5,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
013b51483b308f34e663c9be5ce2392e,0,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
013b51483b308f34e663c9be5ce2392e,0,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0156943a01daf38901b7b87fd9e07e13,1,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,1,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,4,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,4,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,5,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,5,40,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,8,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,8,42,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
015ca39aaac93be75e5005cee7c1c6a7,0,28,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
015ca39aaac93be75e5005cee7c1c6a7,0,31,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
01840e9791e80aa9c818111b294dfd05,2,40,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
01840e9791e80aa9c818111b294dfd05,8,40,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
027f784df98fdd90fb57de47f7e2aa98,0,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
027f784df98fdd90fb57de47f7e2aa98,0,40,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
02d13da67693195d0688b526c4684c11,2,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
02d13da67693195d0688b526c4684c11,2,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
036b262dda3b50279c1809ec100db702,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
036b262dda3b50279c1809ec100db702,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
036b262dda3b50279c1809ec100db702,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
036b262dda3b50279c1809ec100db702,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
036b262dda3b50279c1809ec100db702,6,6,2,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
03b04665937db24f23b78099315efe2d,0,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
03b04665937db24f23b78099315efe2d,0,38,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,0,39,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,0,40,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,0,41,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,1,23,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
03b04665937db24f23b78099315efe2d,1,24,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
03b04665937db24f23b78099315efe2d,1,25,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
03b04665937db24f23b78099315efe2d,1,30,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
03b04665937db24f23b78099315efe2d,1,31,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,1,32,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,1,33,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,1,34,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,2,27,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
03b04665937db24f23b78099315efe2d,2,28,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,2,29,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,2,30,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,2,31,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
049ee8a06a46d97700e4417f33ca7ea2,0,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,0,34,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,1,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,1,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,2,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,2,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,3,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,3,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,4,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,5,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,5,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,5,36,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
04d56387ac25631ede5f3db6bbcb12d0,5,28,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
055d53ff73145d33f4a1089025f185d2,1,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
055d53ff73145d33f4a1089025f185d2,1,19,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
061170e7ca266b75fb217c468381b013,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
061170e7ca266b75fb217c468381b013,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
061170e7ca266b75fb217c468381b013,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
06deed81417403bdebfb34810963a6e7,17,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
06f51911ed4c4b84528de118f76f4dbe,0,50,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
08774c350291c326f7618a1ce2cd077a,1,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
08774c350291c326f7618a1ce2cd077a,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
08774c350291c326f7618a1ce2cd077a,4,11,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
08c94a60ca743a7f1b600a9adcb383f1,0,44,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
08c94a60ca743a7f1b600a9adcb383f1,0,60,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
08fdd75508803c0eb5f3a78d7170e02c,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0930990088dc617aff95308f7f099232,0,49,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0a2c6d126483196e8ff144ea31434857,0,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a88fa79805889b630c606bf6aece1bb,0,43,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
0a9b54f75aa8b81f8ce25b53ac63ab77,0,42,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,1,73,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,11,90,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,12,84,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,13,83,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,17,86,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,2,111,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,21,80,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,23,67,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,25,83,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,26,94,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,29,61,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,3,94,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,31,83,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,32,66,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,34,69,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,36,71,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,37,70,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,4,83,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,40,81,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,42,78,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,43,80,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0a9b54f75aa8b81f8ce25b53ac63ab77,44,59,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0aa0ef20318aaab4393dfbd6276c2629,7,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0abf5d5d3e5ecea7815c1420b1e45e75,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ad3d3549f817556eca75f1c73ebeb0a,1,67,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,1,79,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,1,80,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,1,81,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,1,95,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,1,96,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,1,97,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0b1494f40bc3d2cd282fc359f059b88f,1,7,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0b1494f40bc3d2cd282fc359f059b88f,2,7,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
0c1776df28562fca075b681cf232b188,0,9,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0c1776df28562fca075b681cf232b188,0,10,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0c1776df28562fca075b681cf232b188,0,11,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0c1776df28562fca075b681cf232b188,0,39,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0d5c3d9fb7900eae4aa0507044a19e0d,0,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0d5c3d9fb7900eae4aa0507044a19e0d,0,32,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0d5c3d9fb7900eae4aa0507044a19e0d,1,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0d5c3d9fb7900eae4aa0507044a19e0d,1,32,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ddebfa92e9f5da68a2a28318f91084c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ddebfa92e9f5da68a2a28318f91084c,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0eeb7414b228dea2e49788e6382151f5,0,41,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0eeb7414b228dea2e49788e6382151f5,0,47,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0eeb7414b228dea2e49788e6382151f5,0,52,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0eeb7414b228dea2e49788e6382151f5,0,58,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ef895d41a5c482c770cf7d1d5265c69,0,46,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
0fc4e95e32155bdb91eac7fac558bde4,0,16,4,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0fec4f7d3c7ada52b59a118521557b07,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0fec4f7d3c7ada52b59a118521557b07,0,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ff29c3bae5d17a78293f0fe665a729f,0,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ff962923751ec803709f0ac72dad9e0,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ff962923751ec803709f0ac72dad9e0,0,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,0,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,0,43,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,2,40,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,2,45,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,7,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,7,40,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,9,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,9,55,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
10fff4f88e7e6583f819cb67d9edcf43,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
10fff4f88e7e6583f819cb67d9edcf43,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
11a14f1d2fa140610c518429298c6d82,2,103,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
11a69f0be83d5d2320d3289b7705ceec,0,28,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
11a69f0be83d5d2320d3289b7705ceec,0,77,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1253465347091f7f2b54c6f5cb215ada,0,70,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1253465347091f7f2b54c6f5cb215ada,0,74,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
1253465347091f7f2b54c6f5cb215ada,0,80,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
12656977052a6884e101bec75740330c,2,17,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
12656977052a6884e101bec75740330c,2,23,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
12656977052a6884e101bec75740330c,3,21,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
12656977052a6884e101bec75740330c,3,27,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
12656977052a6884e101bec75740330c,5,21,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
12656977052a6884e101bec75740330c,5,27,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
12dd3afc17847441a44d7c9331e5b222,0,44,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
12dd3afc17847441a44d7c9331e5b222,1,108,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
135d2187131563b0f914af6732b3d039,1,21,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1361c852fbac46c9b60ce0f44f4282eb,0,106,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,0,107,16,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,0,108,12,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,0,116,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1361c852fbac46c9b60ce0f44f4282eb,0,166,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1361c852fbac46c9b60ce0f44f4282eb,0,169,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1361c852fbac46c9b60ce0f44f4282eb,1,29,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,1,30,16,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,1,31,12,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,1,109,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1361c852fbac46c9b60ce0f44f4282eb,1,118,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
13e10838c213de87ef477c2151f386ab,0,48,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
13e10838c213de87ef477c2151f386ab,0,51,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
13e10838c213de87ef477c2151f386ab,0,54,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
13e10838c213de87ef477c2151f386ab,0,57,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
140b37f904e52a0b60ad7aeaec665f4d,1,11,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
140b37f904e52a0b60ad7aeaec665f4d,1,20,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
141d04216aa58888b39e1f22f71b112f,0,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,0,16,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,0,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,1,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,1,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,1,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,1,25,7,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
142c715dc432f7f95e4c2337845ad72b,0,43,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
14e4a8679dd096dec91b3f66ae4dd570,0,5,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
1506cc6a08d319b406e7d53ce7dfa91e,0,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,0,15,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,1,12,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,1,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,1,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,1,48,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,1,54,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,2,12,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,2,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,2,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,2,52,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,2,59,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,3,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,3,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,3,48,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,3,54,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,3,61,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
160143aa38363ef2741d952676c528aa,0,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
16a839dd783502d15490a5d3d426aac1,0,20,26,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
16a839dd783502d15490a5d3d426aac1,0,21,28,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
16a839dd783502d15490a5d3d426aac1,0,45,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
16a839dd783502d15490a5d3d426aac1,0,56,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
16a839dd783502d15490a5d3d426aac1,0,68,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
16a839dd783502d15490a5d3d426aac1,0,72,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
16a839dd783502d15490a5d3d426aac1,0,93,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
16ce1eed4cfe3e956e645366778332bb,7,18,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
16ef43783de45a223c883f0aa596315e,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
16ef43783de45a223c883f0aa596315e,2,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
16ef43783de45a223c883f0aa596315e,4,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
17e4785bacd36198246520dfdcc714b2,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
17e4785bacd36198246520dfdcc714b2,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
19010287ac91dbeb35a469c86b9a709a,0,36,32,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
19010287ac91dbeb35a469c86b9a709a,0,37,26,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
19010287ac91dbeb35a469c86b9a709a,0,43,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1939691812bc0fd015f820337b33a20b,2,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1939691812bc0fd015f820337b33a20b,6,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
19c66ef39b17027d386e70b0ead1a178,0,84,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
19c66ef39b17027d386e70b0ead1a178,0,88,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
19c66ef39b17027d386e70b0ead1a178,0,91,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
19d51dfbd9dd7d1ce62c1e858ef398af,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,0,65,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,0,74,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,1,103,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,1,108,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,2,103,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,2,108,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a2d5c0057db6a29dcdb827aa02cad26,1,9,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1aad15236d172c2e5870f15a4641aafb,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1aad15236d172c2e5870f15a4641aafb,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1aad15236d172c2e5870f15a4641aafb,3,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1aad15236d172c2e5870f15a4641aafb,4,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1aad15236d172c2e5870f15a4641aafb,5,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1b4fcd69831f5462c4e3680fa41721f2,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1c40111a6943be9243cf77bff314d0e1,2,14,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1c40111a6943be9243cf77bff314d0e1,2,21,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1cb7c42ad386af2d83016d764eb0d1ea,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1d33d1d5149acf686434bc86fd33d024,0,82,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1d33d1d5149acf686434bc86fd33d024,0,94,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1d33d1d5149acf686434bc86fd33d024,0,95,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1d33d1d5149acf686434bc86fd33d024,0,96,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1d33d1d5149acf686434bc86fd33d024,0,108,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1d33d1d5149acf686434bc86fd33d024,0,109,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1d33d1d5149acf686434bc86fd33d024,0,110,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1de4d24db6c895e97b2dcbb760d3d771,0,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1de4d24db6c895e97b2dcbb760d3d771,0,96,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1df209439804a0fcbd695029d82384c4,7,8,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
1e4469a3e285734db149ab1d6670d3d9,0,59,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1ef407eaa82c8d9635c5c8354530642d,0,37,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1ef407eaa82c8d9635c5c8354530642d,0,41,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1f091121125884828ea890867f46881c,1,8,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1fd5827c432672fdda747a6dcdddc34b,0,30,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1fd5827c432672fdda747a6dcdddc34b,1,35,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1fd5827c432672fdda747a6dcdddc34b,5,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
205b5e0bfa39979d10bedd2180724ad1,0,21,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
206e93531290b10953ca98d0354bca3c,2,59,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
206e93531290b10953ca98d0354bca3c,2,66,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
206e93531290b10953ca98d0354bca3c,4,95,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
206e93531290b10953ca98d0354bca3c,4,98,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
206e93531290b10953ca98d0354bca3c,5,109,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
206e93531290b10953ca98d0354bca3c,5,112,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
207f5409830d65cc5d734e19b58b656e,0,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
207f5409830d65cc5d734e19b58b656e,0,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
207f5409830d65cc5d734e19b58b656e,2,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
207f5409830d65cc5d734e19b58b656e,2,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
207f5409830d65cc5d734e19b58b656e,3,9,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
20c30b2ff76d7b5bfcd9e2a65af568e0,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
20c30b2ff76d7b5bfcd9e2a65af568e0,0,123,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
20c30b2ff76d7b5bfcd9e2a65af568e0,0,129,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
20c30b2ff76d7b5bfcd9e2a65af568e0,0,133,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
20d081c3ad0c66a27eef999e8eb4232b,2,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
20f021ad6179e70ae61cbf2099005c08,2,62,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
213ccbbb21b12f13ca20e86b8adad529,0,207,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
21b911f7ccb0a790e8e9f5c03e4d20d4,0,29,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21b911f7ccb0a790e8e9f5c03e4d20d4,0,39,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21ecc30a0e248b9f75a6c31309c53483,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21ecc30a0e248b9f75a6c31309c53483,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21ecc30a0e248b9f75a6c31309c53483,0,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21ecc30a0e248b9f75a6c31309c53483,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21ecc30a0e248b9f75a6c31309c53483,0,30,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
225aa33fb54d42c01ef2449fb729c1bd,0,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,0,28,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
225aa33fb54d42c01ef2449fb729c1bd,0,56,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,1,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,1,23,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
225aa33fb54d42c01ef2449fb729c1bd,1,36,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,2,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,2,27,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
225aa33fb54d42c01ef2449fb729c1bd,3,17,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,3,19,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
225aa33fb54d42c01ef2449fb729c1bd,4,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,4,26,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
225aa33fb54d42c01ef2449fb729c1bd,4,56,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,4,58,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
22e5bda28cbd98824360b3d35cece3d4,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
22e5bda28cbd98824360b3d35cece3d4,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
236b3a7e1b48a77e4d67ad46c7f532d4,6,18,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
236b3a7e1b48a77e4d67ad46c7f532d4,6,37,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
236b3a7e1b48a77e4d67ad46c7f532d4,6,42,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
236b3a7e1b48a77e4d67ad46c7f532d4,6,47,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
2440c51434c1fa7bbd963fd4abb2d2c1,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
244ecf03c82aca655948e85213d88370,0,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
244ecf03c82aca655948e85213d88370,1,9,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
24a4a69ce002af2452917b29ccd90fa6,0,5,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
24bbc84a4481608626a0a0b5e88604d9,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2502045ddf3879a616bb1b078a452d40,0,86,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2502045ddf3879a616bb1b078a452d40,0,132,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2502045ddf3879a616bb1b078a452d40,0,153,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
257cfd1a7cf6fe398309a269afe7214c,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
25873bc9d5268a8287145f49f755ad59,0,19,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
258d9c473398506fedc46c2d1943ab62,0,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
258d9c473398506fedc46c2d1943ab62,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
258d9c473398506fedc46c2d1943ab62,1,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
258d9c473398506fedc46c2d1943ab62,1,30,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
258d9c473398506fedc46c2d1943ab62,2,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
258d9c473398506fedc46c2d1943ab62,2,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
264bbe95a6597e28a5b7d30df67ad825,5,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,0,56,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,0,60,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,1,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,2,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,2,19,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,3,75,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,3,79,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,4,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,4,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,5,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,5,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
26e220510579469ff19b48d01e74f5ec,2,122,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
26ee58442fc13e636196e2de320f59d7,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
26ee58442fc13e636196e2de320f59d7,0,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2783c266085dc9a4fcfa820cc2cf146c,0,9,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,0,18,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,2,9,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,2,15,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,2,20,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,2,26,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,2,31,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,2,34,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,21,15,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
27ab4665835321504c23379fd5fd95ad,0,23,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
27ab4665835321504c23379fd5fd95ad,0,116,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
27ab4665835321504c23379fd5fd95ad,0,122,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
27cf3e06f9c10fecb7c1b89ba32a8b88,0,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
27cf3e06f9c10fecb7c1b89ba32a8b88,0,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
282cc9c9cdefa2a2f2f9b8662112ce2c,3,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
283dcea1f618e40982bcc072f6ae9c51,0,85,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
283dcea1f618e40982bcc072f6ae9c51,1,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
283dcea1f618e40982bcc072f6ae9c51,2,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,0,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,2,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,2,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,3,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,4,23,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
286669c68ede1b624b01d49ad0fbc072,4,37,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
286669c68ede1b624b01d49ad0fbc072,4,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,4,52,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
288bb240019125c9be2200fa5aef13d6,7,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
28cc7aa098a6c6d94d5eb54a75a96fc1,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
28cc7aa098a6c6d94d5eb54a75a96fc1,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
28cc7aa098a6c6d94d5eb54a75a96fc1,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
28cc7aa098a6c6d94d5eb54a75a96fc1,2,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
29c767ad7e295bfb43cd8753e74cd323,0,78,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
2b2b7b136b16943561d87d1db964aa2d,4,44,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b2b7b136b16943561d87d1db964aa2d,4,49,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b80bcc6ea1ba03079b6ef16fb07ad2b,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b80bcc6ea1ba03079b6ef16fb07ad2b,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b80bcc6ea1ba03079b6ef16fb07ad2b,0,44,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b80bcc6ea1ba03079b6ef16fb07ad2b,0,52,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2bca2dac55108512d3c5ea622d8efcd5,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2bca2dac55108512d3c5ea622d8efcd5,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2bca2dac55108512d3c5ea622d8efcd5,4,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2bca2dac55108512d3c5ea622d8efcd5,4,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2bca2dac55108512d3c5ea622d8efcd5,4,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2c544107337746b7e9f5f388685b7d45,1,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
2cc8267c80a3563a23313d5439a4f731,0,19,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
2cc8267c80a3563a23313d5439a4f731,0,51,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2d814147b6e3425a632b6c776e0a35ca,0,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2d814147b6e3425a632b6c776e0a35ca,1,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2f743a23de6cb688fb16aea6003118b1,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2f743a23de6cb688fb16aea6003118b1,1,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
308fd17e74abd5dc8b17d1ce4c0813ae,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
308fd17e74abd5dc8b17d1ce4c0813ae,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
308fd17e74abd5dc8b17d1ce4c0813ae,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3188dd05832a3de047c075cede9c3f59,0,8,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3188dd05832a3de047c075cede9c3f59,0,11,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31a2eb0a5a361ff7834974a8e7137208,0,5,2,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31a2eb0a5a361ff7834974a8e7137208,1,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31a2eb0a5a361ff7834974a8e7137208,2,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31d2758120c96f666fbc8f0d9515a3ff,2,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31d2758120c96f666fbc8f0d9515a3ff,3,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31d2758120c96f666fbc8f0d9515a3ff,4,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31d2758120c96f666fbc8f0d9515a3ff,4,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31d2758120c96f666fbc8f0d9515a3ff,4,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31e97c450966934ba6b71a6bd7536da7,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31e97c450966934ba6b71a6bd7536da7,0,26,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
32b17d91e149d491a2ac340642f1a24a,3,63,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
32b17d91e149d491a2ac340642f1a24a,3,73,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
32e195b79f04a7304717e6fb4d20adc4,0,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
32e195b79f04a7304717e6fb4d20adc4,0,54,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3350c26474f1d764aa569b525b32cb7f,0,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
3350c26474f1d764aa569b525b32cb7f,0,53,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
33c729358df9ce2c9e1573a6e51656f1,1,15,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
34dfc7a3ee5582abdfe43f6e05657616,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
34dfc7a3ee5582abdfe43f6e05657616,0,30,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
34dfc7a3ee5582abdfe43f6e05657616,0,100,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
351d926261a9bf66aed07819ab9b8feb,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
351d926261a9bf66aed07819ab9b8feb,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
351d926261a9bf66aed07819ab9b8feb,1,19,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,1,34,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,1,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,1,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,1,40,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,1,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,1,75,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,1,89,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,1,91,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,1,93,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,1,102,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,1,127,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3561b91f12993bb633ef0b8cb4004504,1,37,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
3561b91f12993bb633ef0b8cb4004504,1,40,39,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
3561b91f12993bb633ef0b8cb4004504,1,46,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
357c06aec18a721781ac4cba22a2c3a1,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
357c06aec18a721781ac4cba22a2c3a1,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
357c06aec18a721781ac4cba22a2c3a1,3,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,0,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,1,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,1,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,1,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,2,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35b09559074d51f44e090a5920b5e323,0,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35b09559074d51f44e090a5920b5e323,1,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35b09559074d51f44e090a5920b5e323,4,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35b09559074d51f44e090a5920b5e323,5,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35b09559074d51f44e090a5920b5e323,6,17,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35b09559074d51f44e090a5920b5e323,7,18,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35c9c3a3d4c4fb13c58738bbda5f9503,0,37,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35dae7de5ff9def74dac3e4202dbd9f0,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,1,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
361ba9ce376ee897c0ea55e39f3681e8,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
362f4dcd9d7dad54d092607eddae0392,0,17,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
362f4dcd9d7dad54d092607eddae0392,0,19,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
362f4dcd9d7dad54d092607eddae0392,0,21,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
362f4dcd9d7dad54d092607eddae0392,0,23,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
362f4dcd9d7dad54d092607eddae0392,0,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
362f4dcd9d7dad54d092607eddae0392,0,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
365515d4af829ec5facef62a40a42f39,0,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
365515d4af829ec5facef62a40a42f39,1,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
36700d9cff0e4ca07d931130c1812451,0,10,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
36700d9cff0e4ca07d931130c1812451,1,15,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
36a0315947c8ee96af9d3de47b439389,0,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
36a0315947c8ee96af9d3de47b439389,0,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
36a0315947c8ee96af9d3de47b439389,1,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
36a0315947c8ee96af9d3de47b439389,1,23,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
36a0315947c8ee96af9d3de47b439389,1,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
36a7afad179e80c0b6a169c8890bacbd,0,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
37c990fd8b436b8e8883654e33372429,0,18,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
37c990fd8b436b8e8883654e33372429,0,22,7,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
37c990fd8b436b8e8883654e33372429,0,26,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
37c990fd8b436b8e8883654e33372429,0,29,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
37f49fe6bc258dcd6d831002c7c6043a,0,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
38b129f6365cba7d93438f2a8225341b,10,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
38b129f6365cba7d93438f2a8225341b,20,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
38bdb71b648b457f9363b7593db379e6,1,8,3,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
38bdb71b648b457f9363b7593db379e6,4,8,3,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
38ee0fcadc5f51c7b6897845b4be2579,3,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
397c99353a75bc77cabe4ff18b644733,0,25,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
397c99353a75bc77cabe4ff18b644733,0,30,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
39c4a5a3e61d8d522b0f2931a8c00899,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
39c4a5a3e61d8d522b0f2931a8c00899,1,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a14ec43d3f1646fc3c267ba09563f67,0,15,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a14ec43d3f1646fc3c267ba09563f67,1,13,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a14ec43d3f1646fc3c267ba09563f67,2,33,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a6106b4e487229e58cf1ad110ca95f1,2,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a6106b4e487229e58cf1ad110ca95f1,2,19,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
3a6106b4e487229e58cf1ad110ca95f1,2,21,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a6106b4e487229e58cf1ad110ca95f1,2,23,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,0,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,2,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,4,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,5,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,5,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b59ec4074929c995aa4dc8cdb4fd8f7,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b59ec4074929c995aa4dc8cdb4fd8f7,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b59ec4074929c995aa4dc8cdb4fd8f7,0,29,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b59ec4074929c995aa4dc8cdb4fd8f7,0,38,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,3,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,3,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3db9935d670f393e7baad058d432b77e,2,54,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
3db9935d670f393e7baad058d432b77e,2,55,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
3db9935d670f393e7baad058d432b77e,3,54,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
3db9935d670f393e7baad058d432b77e,3,55,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
3db9935d670f393e7baad058d432b77e,4,54,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
3db9935d670f393e7baad058d432b77e,4,55,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
3e0f4fed541a46ae544a0301afd21d59,1,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
3e0f4fed541a46ae544a0301afd21d59,1,26,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
3e0f4fed541a46ae544a0301afd21d59,2,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
3e0f4fed541a46ae544a0301afd21d59,2,25,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
3e6df08775315f73f0c57117356c72ec,1,26,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
3ec5388c84a854ca95ebd5b3368cdf21,0,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3f115db70a24cbd66a513f46a77e62c9,1,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3f115db70a24cbd66a513f46a77e62c9,2,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3fc12b7f18ecd5b69c6b11589a480d0c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3fc12b7f18ecd5b69c6b11589a480d0c,1,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3fc12b7f18ecd5b69c6b11589a480d0c,2,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3fc12b7f18ecd5b69c6b11589a480d0c,3,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3fc12b7f18ecd5b69c6b11589a480d0c,4,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3fc12b7f18ecd5b69c6b11589a480d0c,6,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3fc12b7f18ecd5b69c6b11589a480d0c,7,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3fc12b7f18ecd5b69c6b11589a480d0c,8,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
404c65c59d350ab661c700e8b8203061,0,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
409d7cb11c91426f0f890ef20b8c944a,0,38,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
409d7cb11c91426f0f890ef20b8c944a,0,56,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
409d7cb11c91426f0f890ef20b8c944a,0,66,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
409d7cb11c91426f0f890ef20b8c944a,0,72,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
409d7cb11c91426f0f890ef20b8c944a,0,79,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
409d7cb11c91426f0f890ef20b8c944a,0,92,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
409d7cb11c91426f0f890ef20b8c944a,0,98,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
409d7cb11c91426f0f890ef20b8c944a,0,116,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,0,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,1,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,1,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,1,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,1,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
41060145d6047c3252c8ad35b69dcdd7,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4133810ac8fab19e7eb707f808f64b10,1,45,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
413983d192999038bf29e473067c64f0,1,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,1,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,1,15,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,1,17,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,1,19,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,1,21,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,1,33,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,0,34,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,0,39,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,0,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,1,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,1,43,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,1,46,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,10,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,10,44,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,10,47,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
41d1cee96508da9b0a25e558e77d10fb,5,53,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
41d1cee96508da9b0a25e558e77d10fb,7,53,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
41efa8a4ad788ac7012ff090061b07e6,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
41f5acd3227257293b2a9d704b0d8f10,2,61,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
41f5acd3227257293b2a9d704b0d8f10,4,83,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
420ea0dad08936b13c0646b88ce0a03e,1,7,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
42a6efdee50b7523a75dee95b172993a,4,164,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
42a6efdee50b7523a75dee95b172993a,4,169,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
42ec741b9a140778d3949fb89c00632c,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
439d0e88175887a7c3607061738d1ce1,1,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
439d0e88175887a7c3607061738d1ce1,2,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
43d4855d9a006d527cf1688df18a7355,0,60,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
442da891e9776478bb6a9f3abbdfd043,0,47,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
442da891e9776478bb6a9f3abbdfd043,0,52,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
442da891e9776478bb6a9f3abbdfd043,0,62,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
442da891e9776478bb6a9f3abbdfd043,0,72,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
451c7e399a3834fa1f1207c1cb10d6cd,1,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
45276b3b65c9708c3cbbcf3bbe442217,0,61,6,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
45276b3b65c9708c3cbbcf3bbe442217,0,62,6,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
45276b3b65c9708c3cbbcf3bbe442217,0,63,6,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
45276b3b65c9708c3cbbcf3bbe442217,0,88,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
4578b45e070acbdece7b719f57671dad,0,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4578b45e070acbdece7b719f57671dad,0,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
46139d5e09b4470b0e5a5ceee4735d16,1,67,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
46139d5e09b4470b0e5a5ceee4735d16,1,70,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
46139d5e09b4470b0e5a5ceee4735d16,1,71,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
46139d5e09b4470b0e5a5ceee4735d16,1,72,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
46139d5e09b4470b0e5a5ceee4735d16,1,73,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
46139d5e09b4470b0e5a5ceee4735d16,1,74,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
46139d5e09b4470b0e5a5ceee4735d16,1,75,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
4687aef3f31a6bfad04446f450c498b7,1,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
4768a83ffc071a2788aa8c63ee8f4f19,0,59,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4768a83ffc071a2788aa8c63ee8f4f19,2,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4768a83ffc071a2788aa8c63ee8f4f19,3,35,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4768a83ffc071a2788aa8c63ee8f4f19,3,40,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
482cce2aa66690520f41f04399e01b6a,0,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,0,44,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,1,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,1,41,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,2,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,2,44,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,2,49,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,3,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,3,32,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,3,36,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4891cf6de4b1c9b48ceb413362183f9c,5,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
48df859c07ffa975bf2e75552eea3d96,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4975690ebdca40dcaa3c9f830f9c1457,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4975690ebdca40dcaa3c9f830f9c1457,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4975690ebdca40dcaa3c9f830f9c1457,2,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4a32fc0fd4bcf21f4a3a41c6fa727cc9,0,15,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
4a32fc0fd4bcf21f4a3a41c6fa727cc9,0,18,18,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
4a32fc0fd4bcf21f4a3a41c6fa727cc9,0,24,16,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
4a32fc0fd4bcf21f4a3a41c6fa727cc9,0,43,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
4a32fc0fd4bcf21f4a3a41c6fa727cc9,0,45,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
4b69a2cd2fd2fcf6465ff4c75018f25c,1,150,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4b8f2ce2c51b052a6821333cbe3ae1e9,4,6,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4cdec0104b382aa3b18ea8f3667a9865,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4d2c16e0cd7e20f8bc3ccf5e67e76bbe,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4d2c16e0cd7e20f8bc3ccf5e67e76bbe,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4d2c16e0cd7e20f8bc3ccf5e67e76bbe,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4db38f031a9efb36a3ba4fa410584b50,0,32,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4db38f031a9efb36a3ba4fa410584b50,0,47,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4dbd78ec9a43746917258865df83ef6c,0,20,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4dbd78ec9a43746917258865df83ef6c,0,31,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4dd4e6d267c3eba2d7323498e69067c4,0,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4e21ffb120f5f540368551f8b4861891,0,72,17,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
4e9721f83c15e45e7e0958bde57d4558,1,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4e9721f83c15e45e7e0958bde57d4558,1,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4e9721f83c15e45e7e0958bde57d4558,2,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4e9721f83c15e45e7e0958bde57d4558,2,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4ed15a480cdbf9c9814cc88d2ef9774c,0,50,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4ed15a480cdbf9c9814cc88d2ef9774c,1,45,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4ed15a480cdbf9c9814cc88d2ef9774c,2,45,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4ed15a480cdbf9c9814cc88d2ef9774c,3,42,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4f173b720a696ce3cf433b59f32cc610,1,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4f173b720a696ce3cf433b59f32cc610,2,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4f2d1273f44c9d61f8268ced2b68105d,2,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4fe36d0b6cc7f218722010b0c592d65e,3,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4fe36d0b6cc7f218722010b0c592d65e,3,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4fe36d0b6cc7f218722010b0c592d65e,3,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
50e8334156f3db9b2bb58831e938a3eb,0,24,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
50e8334156f3db9b2bb58831e938a3eb,1,34,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
50e8334156f3db9b2bb58831e938a3eb,3,42,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
50e8334156f3db9b2bb58831e938a3eb,6,20,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
50e8334156f3db9b2bb58831e938a3eb,6,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
50e8334156f3db9b2bb58831e938a3eb,6,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
50e8334156f3db9b2bb58831e938a3eb,6,52,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
50eab95beb52a2b36b91a5281c0a1e39,0,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
50eab95beb52a2b36b91a5281c0a1e39,0,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
50eab95beb52a2b36b91a5281c0a1e39,0,16,7,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51cb161e054ce8d573b70b7f5b86082d,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51cb161e054ce8d573b70b7f5b86082d,0,39,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51cb161e054ce8d573b70b7f5b86082d,0,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51cb161e054ce8d573b70b7f5b86082d,1,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51cb161e054ce8d573b70b7f5b86082d,1,40,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51cb161e054ce8d573b70b7f5b86082d,1,47,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51d38946913feb8e4963c3382714e389,0,16,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
51d38946913feb8e4963c3382714e389,0,17,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
51f7c0dbff02690be83489c7ca7ffa18,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,1,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,2,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,2,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,2,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5211c563cdd63c3e10a7e3a4244737be,0,7,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5272e8b7fc0c72fd59ff0a75c92e78dc,0,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5288baec3e85e0cf31d64373e55a30bb,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
52d855c774820df1a59d4cc6c58ae7ce,0,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
52d855c774820df1a59d4cc6c58ae7ce,0,34,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
52d855c774820df1a59d4cc6c58ae7ce,0,40,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
52e670d330b774e51382dd6432690f8f,1,56,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
52e670d330b774e51382dd6432690f8f,1,60,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
53e1ccc2500fefbcc64ac8e2c2abc5bb,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
53e1ccc2500fefbcc64ac8e2c2abc5bb,0,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
54b52b4f56d97dc383f2a9758e704e41,0,32,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
550e7b6e3349428b0d8977f6d4432e19,0,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5585e200a243afb541a9eda1e38e31de,2,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5585e200a243afb541a9eda1e38e31de,2,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5585e200a243afb541a9eda1e38e31de,2,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
55881cc7c7b7e825b0b1b8414fbdcd16,0,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
558bd831251c2f320bea1abdac6aff2c,5,5,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
5690951702245e397ba5ab27ba90458f,10,31,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
5690951702245e397ba5ab27ba90458f,9,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
56db010b36ab6967d8d3030524204765,14,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
56e99a0495e20a04a554b20c77686d6f,0,13,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
56e99a0495e20a04a554b20c77686d6f,0,14,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
56e99a0495e20a04a554b20c77686d6f,0,15,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5701f56ebb55add14525281a31aa58ab,1,19,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5701f56ebb55add14525281a31aa58ab,1,20,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
5701f56ebb55add14525281a31aa58ab,1,21,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
5751efec59551e5b260a3a3aa6bd9c1c,3,7,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
5751efec59551e5b260a3a3aa6bd9c1c,6,7,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
5751efec59551e5b260a3a3aa6bd9c1c,9,9,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
581b20168d8c40fcc02b25bf67a4d047,0,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,0,47,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,0,80,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
58a9a60deb0ec5b3c181a386adf6e481,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
58be52be549633c2058f0ae5a53f48e9,0,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
58c9b7847d3ad426b4167286f0026ae1,0,85,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
58c9b7847d3ad426b4167286f0026ae1,0,94,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
598153b645a41d916e81bfea260a0acc,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
598153b645a41d916e81bfea260a0acc,0,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
598153b645a41d916e81bfea260a0acc,0,30,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
5b67ff0b60203af8b73ef9ad3ef2e1ec,1,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5b67ff0b60203af8b73ef9ad3ef2e1ec,1,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5b67ff0b60203af8b73ef9ad3ef2e1ec,2,6,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5b67ff0b60203af8b73ef9ad3ef2e1ec,3,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5b67ff0b60203af8b73ef9ad3ef2e1ec,3,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5b67ff0b60203af8b73ef9ad3ef2e1ec,4,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,0,10,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,3,9,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,5,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,6,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,8,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,9,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,9,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c3cb29a9de42b917d84191e3af86dc2,1,42,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
5c65cdd8d0f6544397352bf6fa2578be,0,112,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c65cdd8d0f6544397352bf6fa2578be,0,137,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c69b557e8f58678041e8566fc172817,4,26,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5d5931598e134d01fc48641fd5415c23,0,44,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5d5931598e134d01fc48641fd5415c23,0,47,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5d5931598e134d01fc48641fd5415c23,0,51,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5dfaed1cf278b6751e13e12948f8890f,0,108,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5dfaed1cf278b6751e13e12948f8890f,0,114,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5e5c1e86c4e9024ae9c09651dcefccf8,0,38,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5e5c1e86c4e9024ae9c09651dcefccf8,0,44,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5e6250f6b7bfd7fadf429001e1eb61b1,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5e93a2e2ef41bcc1505ecc284ab4b0cb,6,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5e93a2e2ef41bcc1505ecc284ab4b0cb,7,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5ea8255bc74a154b62bf8b73937cc802,10,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5eb1af25dd39bf8da4008a77b4a2239b,1,38,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
5eb1af25dd39bf8da4008a77b4a2239b,1,57,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5f5e8d31d79ebdc16dbc4bf39cb99bf9,0,12,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5f5e8d31d79ebdc16dbc4bf39cb99bf9,0,13,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5f5e8d31d79ebdc16dbc4bf39cb99bf9,0,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5fcea9a0ac20696ebdd8e7454a1b15a6,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5fcea9a0ac20696ebdd8e7454a1b15a6,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5fcea9a0ac20696ebdd8e7454a1b15a6,1,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
609344e80ec065a6fc4bdfc2f5ddfd25,0,13,5,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
609344e80ec065a6fc4bdfc2f5ddfd25,0,20,9,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
60d51d848d67c3335aa2ef73e093f34d,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
60d51d848d67c3335aa2ef73e093f34d,0,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
60e449653f5f5374da2daafbfc10f192,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
613a638a0fda7fea78828f3ee1cc5c34,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
61ae265a8997a70444bf560af3a1fc03,7,86,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6231741bd0efdec703f185358324cc5c,20,64,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,0,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,0,41,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,0,43,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,0,54,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,0,63,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,0,65,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,0,67,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,0,77,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,0,98,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,0,165,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,0,185,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,2,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,2,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,2,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,2,52,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,2,84,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,2,90,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,2,93,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,2,130,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,3,11,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
62e6fb0af3d86da09c5131a6cd3810a1,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62e6fb0af3d86da09c5131a6cd3810a1,2,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62e6fb0af3d86da09c5131a6cd3810a1,6,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62e6fb0af3d86da09c5131a6cd3810a1,6,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62e6fb0af3d86da09c5131a6cd3810a1,6,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6353863ed555ffc73d6e6b37d10e179c,0,47,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6353863ed555ffc73d6e6b37d10e179c,1,55,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
635f0472a6ac02242563417747b2e5d1,0,33,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
635f0472a6ac02242563417747b2e5d1,0,59,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
635f0472a6ac02242563417747b2e5d1,1,44,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
63674e6bc412c3fbb58e3f022e4575c5,0,100,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
63674e6bc412c3fbb58e3f022e4575c5,0,101,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
63674e6bc412c3fbb58e3f022e4575c5,0,102,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
6481abec4ed709663abb66d858fe5117,6,66,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6481abec4ed709663abb66d858fe5117,6,78,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
64a11451f55353201eea5c86be874344,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
64a11451f55353201eea5c86be874344,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
64a11451f55353201eea5c86be874344,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
64a11451f55353201eea5c86be874344,4,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
64fb38b02397c203990a9f2da7628dab,0,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
64fb38b02397c203990a9f2da7628dab,2,18,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
659629b2622d25e33885164169548135,0,80,7,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
659629b2622d25e33885164169548135,0,96,7,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
659629b2622d25e33885164169548135,0,171,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
65f889cdc3c48e0c90219571ffa74e72,1,22,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
66024d9c6967202659aa181c29dde74d,1,30,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
6682383e673487757bc7aefe4bc79055,7,10,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
673cd4bc38067b1a68046a79626303ed,0,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,0,34,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,0,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,3,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,6,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,6,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,9,7,20,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,8,22,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,13,18,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,14,20,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,29,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,30,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,37,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,38,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,53,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,9,62,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,9,72,28,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,73,30,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,74,28,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,75,30,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,79,30,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,80,29,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,81,31,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,82,29,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,83,31,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,9,84,28,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
67ed523a5103a20f218c35fdd8712a5d,2,28,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
67ed523a5103a20f218c35fdd8712a5d,2,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
67ed523a5103a20f218c35fdd8712a5d,2,45,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
682fc9dd5457b2d3c25838074fd99f72,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,0,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,0,14,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,0,20,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,2,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,2,14,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,2,20,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,3,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,3,15,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
683fa38a9db63c43b60fc602141a22c8,0,81,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
68acc78e2b9424b3efdaa2b68816496d,1,47,5,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
68acc78e2b9424b3efdaa2b68816496d,1,58,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
68acc78e2b9424b3efdaa2b68816496d,1,74,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
68acc78e2b9424b3efdaa2b68816496d,1,75,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
68acc78e2b9424b3efdaa2b68816496d,1,76,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
692b3ee61e4229012362b68be166334e,24,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
692b3ee61e4229012362b68be166334e,24,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
692b3ee61e4229012362b68be166334e,25,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
692b3ee61e4229012362b68be166334e,26,23,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
692b3ee61e4229012362b68be166334e,27,23,25,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
693182e98402418b794cf6cf30d183da,0,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6a883f171898965184fad73283348d27,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6c00afe61d7d98e423533067b9305c19,0,39,21,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6c00afe61d7d98e423533067b9305c19,1,45,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6c00afe61d7d98e423533067b9305c19,2,44,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6c659b7b37624777840f3a2d060bb183,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6caab6f6c07882fbc311ad581ad39a2e,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6d7d6cbc166d5beb29bf09c71769c6e0,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6d8949cae4c489f87c3f0f370d9cd06a,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,0,51,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,0,56,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,1,60,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,1,65,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,2,65,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,2,70,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,3,61,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,3,66,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,2,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,4,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,4,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,4,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,5,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,5,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6dba5bfd862a7203d9c1186478b5afe6,0,67,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6dba5bfd862a7203d9c1186478b5afe6,0,72,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6dba5bfd862a7203d9c1186478b5afe6,1,87,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6dba5bfd862a7203d9c1186478b5afe6,1,92,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6dbc1c115a40836c13cfa70abb2f0c17,0,9,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6e865e67042af769a19c011b84d1a8e0,0,29,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6e865e67042af769a19c011b84d1a8e0,0,64,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
6e9ea7e4bfe61141fe952721ac108ec2,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f10b48726ee1c01924eca4be3583566,0,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f10b48726ee1c01924eca4be3583566,0,32,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,3,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,4,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,4,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,4,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,4,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,5,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,5,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,5,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,5,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f502f016646e944dc2b8b65b170e8a8,0,100,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,0,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,0,23,28,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,0,24,29,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,0,25,32,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,0,26,30,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,0,27,31,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
708150a31c4effd0aa07a11fc9287ec5,2,32,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7086bd4cd946c38746868817da8bac78,0,9,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7086bd4cd946c38746868817da8bac78,0,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7086bd4cd946c38746868817da8bac78,0,18,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
7086bd4cd946c38746868817da8bac78,0,30,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
7086bd4cd946c38746868817da8bac78,0,32,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
7086bd4cd946c38746868817da8bac78,0,37,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
7086bd4cd946c38746868817da8bac78,0,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7086bd4cd946c38746868817da8bac78,0,62,9,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
7086bd4cd946c38746868817da8bac78,0,73,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
71f070bd474cf9743c6ce1fe872a8e4c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
71f070bd474cf9743c6ce1fe872a8e4c,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
71f070bd474cf9743c6ce1fe872a8e4c,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
71f070bd474cf9743c6ce1fe872a8e4c,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
720113fa54162461ef89bf98c9a3573c,1,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
72b8881edd7adaa0d0de22f5fa3d7a21,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
72c65f36c44dc30b15f18e8aac7bd1d6,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
72fe64b95e4a03b3954f618de99f6b2c,0,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
73307dd71fdd40018bb96872efd37de0,0,27,22,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,0,28,27,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,0,30,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
73307dd71fdd40018bb96872efd37de0,0,92,9,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,0,98,25,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,0,99,25,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,0,100,25,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,0,110,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,0,112,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,0,115,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,0,119,22,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,0,123,21,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,0,128,20,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,0,131,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,0,136,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,0,137,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,0,160,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,0,163,36,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,0,166,34,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,0,173,32,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,0,179,34,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
736ae3c0310d5614f78e0651794f4664,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
736ae3c0310d5614f78e0651794f4664,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
736c4e6d867a236b29e09e8ae076af6a,1,37,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
736c4e6d867a236b29e09e8ae076af6a,2,75,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
737077c00c455a4c5574d4850fedb8c7,2,8,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
737077c00c455a4c5574d4850fedb8c7,3,8,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
73c06850f2a3ea07e9e464bfff398398,0,8,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
73cf9d4c349d3e1404c640d783cdabaf,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
73e6bf413f01e44b7e741cc2278ee2b7,0,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
74a9b1970a6a14b5d69e55b8a36165b8,2,154,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7535458b02df4a32158e292e345b7f6f,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7535458b02df4a32158e292e345b7f6f,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
761fba5af8a4b0adf42d6e573e55730f,0,57,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
761fbd8fafa9d33fa07816232615a7bb,0,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
761fbd8fafa9d33fa07816232615a7bb,0,55,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
76b1c13c1063138853fe2b1448f667cc,8,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
76b1c13c1063138853fe2b1448f667cc,8,28,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
76ce8c5ec84317bdd7f4bb7a51cc5f63,0,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
771935bd04639614c319a1b04164edc7,7,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7756323f6301e695a8733f51290721c3,6,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
77c86fb60381a6cbf5eeedb23c3e9475,0,20,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
77c86fb60381a6cbf5eeedb23c3e9475,0,22,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
77c86fb60381a6cbf5eeedb23c3e9475,0,24,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
77c86fb60381a6cbf5eeedb23c3e9475,0,25,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
77c86fb60381a6cbf5eeedb23c3e9475,0,27,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
77c86fb60381a6cbf5eeedb23c3e9475,0,28,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
77c86fb60381a6cbf5eeedb23c3e9475,0,31,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
77c86fb60381a6cbf5eeedb23c3e9475,0,101,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
77c86fb60381a6cbf5eeedb23c3e9475,0,124,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
782f4eb4df2f1da134545b563ef13718,0,7,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7855d14c2bad1789dd43c992f77afcfb,1,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7855d14c2bad1789dd43c992f77afcfb,2,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7935e5c461c695a9bdb475e5d4269cc6,0,13,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7a748bb4878c0b59852a16ea4e9ee328,0,40,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,0,46,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,1,41,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,1,47,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,1,55,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7a748bb4878c0b59852a16ea4e9ee328,12,41,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,12,47,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,12,56,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7a748bb4878c0b59852a16ea4e9ee328,13,42,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,13,48,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,13,57,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7a748bb4878c0b59852a16ea4e9ee328,16,34,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,16,40,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,19,32,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,19,38,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,22,34,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,22,41,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,3,39,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,3,45,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,3,53,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7a748bb4878c0b59852a16ea4e9ee328,6,39,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,6,45,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,6,53,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7a748bb4878c0b59852a16ea4e9ee328,9,41,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,9,47,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7a748bb4878c0b59852a16ea4e9ee328,9,56,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7aa68541fc0338965e17126836fbe3bf,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7b179a6b85804cd1cca1bf5ebeb96a6c,5,54,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7b472be62ceacbedfbf0f7b464faec11,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7bf34307b8ab5711957067d20e38e163,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c02b8c3f994a1cdc42879c375dd8aa2,5,28,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7c02b8c3f994a1cdc42879c375dd8aa2,5,30,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7c02b8c3f994a1cdc42879c375dd8aa2,5,54,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7c02b8c3f994a1cdc42879c375dd8aa2,7,29,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7c02b8c3f994a1cdc42879c375dd8aa2,7,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7c02b8c3f994a1cdc42879c375dd8aa2,7,55,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7c17a6394f04b4ae8a562c91711d5c9b,0,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,0,88,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,0,90,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,0,102,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,0,128,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,0,130,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,0,132,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,0,162,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,0,164,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c1e97e1a4d1b82418193b63f543fe0a,1,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7c1e97e1a4d1b82418193b63f543fe0a,1,40,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
7c1e97e1a4d1b82418193b63f543fe0a,1,52,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c6f83f4c05ba4895518cfc552920b29,0,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c78b685560653d30312651f8b8db904,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7d36358e720ac05148438939875699e7,0,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7d36358e720ac05148438939875699e7,0,49,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7df871019b9aa3d7170d367e3a262822,2,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7e249cf17748de91fb0a3c5ff9ded1de,2,19,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
7e249cf17748de91fb0a3c5ff9ded1de,2,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7ea6c364853272e5c2d3da15cfe19a07,0,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7ea6c364853272e5c2d3da15cfe19a07,0,59,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7ecede2f4c49a126fdf704f3075ab77b,0,28,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7ed5081cc0c43401b3688042a2383a41,0,19,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7f586887a90724d1df34381f1b715fc6,0,32,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7f7b453cf5cdddea7ddb040632181c38,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7fd00b39a2ab2450d2ae6aa8b7c33502,0,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7fd00b39a2ab2450d2ae6aa8b7c33502,1,40,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7fd00b39a2ab2450d2ae6aa8b7c33502,2,42,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
801af9392a38406d413f1fbc54eea37e,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
801af9392a38406d413f1fbc54eea37e,0,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
801af9392a38406d413f1fbc54eea37e,0,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
801af9392a38406d413f1fbc54eea37e,0,35,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8083488289b73f9d97b75d8f19520163,0,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8083488289b73f9d97b75d8f19520163,0,41,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8083488289b73f9d97b75d8f19520163,0,53,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8083488289b73f9d97b75d8f19520163,1,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8083488289b73f9d97b75d8f19520163,1,34,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8083488289b73f9d97b75d8f19520163,1,43,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8083488289b73f9d97b75d8f19520163,1,57,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
80a5342a2662af0f00e3d56e0895fb50,0,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
80a5342a2662af0f00e3d56e0895fb50,1,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
80f10214d1cd6610342f6fd33dd3479f,23,7,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
80f10214d1cd6610342f6fd33dd3479f,24,7,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
80f67ba5e2c35ba039cac56ce4879216,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
80f67ba5e2c35ba039cac56ce4879216,0,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
80f67ba5e2c35ba039cac56ce4879216,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
80f67ba5e2c35ba039cac56ce4879216,3,16,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
80f67ba5e2c35ba039cac56ce4879216,3,20,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
80fcf5227e75b7381d3cba36c7229770,0,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
80fcf5227e75b7381d3cba36c7229770,1,31,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
81906a3f30a22abac7a6f081c431ac6f,2,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
81906a3f30a22abac7a6f081c431ac6f,2,21,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
81906a3f30a22abac7a6f081c431ac6f,3,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
81906a3f30a22abac7a6f081c431ac6f,4,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
81c824892324f935d635a54d4487c766,2,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
81c824892324f935d635a54d4487c766,2,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
81c824892324f935d635a54d4487c766,2,35,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
82a60f03cc6c6f5d0cedee84fe256b03,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
82a60f03cc6c6f5d0cedee84fe256b03,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8352f44dfbd8788111fc417f6d546461,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8352f44dfbd8788111fc417f6d546461,1,29,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
848fd4f45f62536f833478e0e9763375,1,36,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
84c85c413c692701ebe592fabfaeb353,0,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,0,41,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,0,43,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,0,52,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,0,61,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,0,63,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,0,78,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
84fedf58b3e8f3f0a502769865bfadab,0,79,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
84fedf58b3e8f3f0a502769865bfadab,0,80,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
84fedf58b3e8f3f0a502769865bfadab,0,140,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,0,151,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
85bb9489a7381a0d3747efab67d7521a,6,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
85d1886ad182085a0f771c2c988ebd2b,0,25,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
85d1886ad182085a0f771c2c988ebd2b,1,23,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
85d1886ad182085a0f771c2c988ebd2b,1,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
861749f7c18dc92e8147d1c01cc4d138,0,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
861749f7c18dc92e8147d1c01cc4d138,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
861749f7c18dc92e8147d1c01cc4d138,0,13,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
861749f7c18dc92e8147d1c01cc4d138,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
862ad956613189a712eb1c29f6ab3ec7,2,82,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
862ad956613189a712eb1c29f6ab3ec7,2,86,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
862ad956613189a712eb1c29f6ab3ec7,2,90,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86d611d831f260d687458c047e633281,0,29,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86d611d831f260d687458c047e633281,0,111,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86d611d831f260d687458c047e633281,0,116,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86d611d831f260d687458c047e633281,0,122,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86d611d831f260d687458c047e633281,0,125,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86d611d831f260d687458c047e633281,0,134,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86d611d831f260d687458c047e633281,0,146,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86d611d831f260d687458c047e633281,0,151,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86d611d831f260d687458c047e633281,0,154,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86e7c1c09dd7b2935952f93e6da8d696,0,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86e7c1c09dd7b2935952f93e6da8d696,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86e7c1c09dd7b2935952f93e6da8d696,2,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
870129098fe6a21552cf6a5e7de1a1c3,0,98,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
870129098fe6a21552cf6a5e7de1a1c3,0,100,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
870129098fe6a21552cf6a5e7de1a1c3,0,102,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
874267e7fac8231b4c371978f451970a,1,43,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
874267e7fac8231b4c371978f451970a,2,44,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
875b3fd08c9233f657e7472870e8adba,0,11,7,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87937f508d098af3b2b8460b5db96f5c,0,14,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
87937f508d098af3b2b8460b5db96f5c,0,16,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
87a0d9da24c41bbc9cc28c717b81708d,4,21,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
87ad0ca1b1055c24f5810fe4cd975aae,5,44,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,5,50,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,5,59,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,7,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,7,44,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,7,52,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,8,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,8,53,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,8,63,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
882251f57aa9f3496dec511ab65c3600,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
882251f57aa9f3496dec511ab65c3600,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
882251f57aa9f3496dec511ab65c3600,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,16,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,17,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,18,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,18,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,2,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,2,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,3,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,3,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,4,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,4,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,7,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,7,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
88ceff52035779278c5382cbd9aaa6f1,0,100,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8920a5d046d2193891c133756f9bf301,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
89bf7dfd45b747e5fe1e52e2f95b59ed,0,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
89bf7dfd45b747e5fe1e52e2f95b59ed,0,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
89d63da67b3d34065b5a78cfaccf56e4,9,20,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
8a34b3c5d01e02d3903607c8e295b8fd,0,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8a34b3c5d01e02d3903607c8e295b8fd,0,35,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8a34b3c5d01e02d3903607c8e295b8fd,0,37,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8ae437c31756ba80c7f53465113a11a8,1,17,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8ae437c31756ba80c7f53465113a11a8,1,18,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8ae437c31756ba80c7f53465113a11a8,1,98,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8ae437c31756ba80c7f53465113a11a8,1,99,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8af7c8dbe010d27cb98ab8a414f9c326,0,76,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8af7c8dbe010d27cb98ab8a414f9c326,0,85,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8b02aee33f517fe325585f1c113e7829,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8b02aee33f517fe325585f1c113e7829,1,47,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
8b76aba3a8de6fe8fee168a4526a1fe1,0,64,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8c1935e04e2ce056febc0de6a3103f92,5,14,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8c1935e04e2ce056febc0de6a3103f92,6,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8c54abb337e5213fae34cfe5ad0577bc,0,24,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8c84403efaa2d8a06990b039d89e690c,1,84,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8c84403efaa2d8a06990b039d89e690c,1,88,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8cb4602477b7ceadea7fea3222b5992d,2,35,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8cb4602477b7ceadea7fea3222b5992d,2,40,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8cd41fe2c8efad142ccb46a08ac5ac54,0,47,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8db8eebca572cb25747753c10d6cacad,0,13,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
8db8eebca572cb25747753c10d6cacad,0,23,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
8de60f60588fb4a6449cb2bf1129ea28,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8de60f60588fb4a6449cb2bf1129ea28,0,20,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e136658eef38c2e7c62d2ef65603c3f,0,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e136658eef38c2e7c62d2ef65603c3f,0,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e136658eef38c2e7c62d2ef65603c3f,0,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e33d5df27f2d5a95e611e3c5a805b68,1,15,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8e7e030bd6457568cf881853f88dde65,3,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e7e030bd6457568cf881853f88dde65,3,20,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8e7e030bd6457568cf881853f88dde65,3,39,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e7e030bd6457568cf881853f88dde65,3,41,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8e7e030bd6457568cf881853f88dde65,4,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e7e030bd6457568cf881853f88dde65,4,19,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8e7e030bd6457568cf881853f88dde65,4,38,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e7e030bd6457568cf881853f88dde65,4,40,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8ea3c863c955a576edabf2c121e49b30,0,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8ea3c863c955a576edabf2c121e49b30,1,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8ea3c863c955a576edabf2c121e49b30,1,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8f56a848a72b1500a67177cf5aa08aae,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8f56a848a72b1500a67177cf5aa08aae,2,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8f56a848a72b1500a67177cf5aa08aae,3,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8f56a848a72b1500a67177cf5aa08aae,3,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8fa4cfb0da976f5eabe0c8e5379e506d,0,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8fa4cfb0da976f5eabe0c8e5379e506d,0,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8faeaa96e0e1a2bb3273c8106353a84e,10,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8faeaa96e0e1a2bb3273c8106353a84e,11,8,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8faeaa96e0e1a2bb3273c8106353a84e,12,7,8,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8faeaa96e0e1a2bb3273c8106353a84e,5,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8fdb8a0755cd69e0d562c82a4394119e,1,8,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8fdb8a0755cd69e0d562c82a4394119e,4,8,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9009d9c607d8a611da8a35303dd74b0b,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,5,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,6,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,7,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,8,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9028644da5a842d09b644ebbc1628239,8,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9028644da5a842d09b644ebbc1628239,8,62,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
9028644da5a842d09b644ebbc1628239,9,76,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
90ef951ca6bc25764074d4c861393222,0,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
90ef951ca6bc25764074d4c861393222,0,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
90ef951ca6bc25764074d4c861393222,0,46,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91049aacf1db0b9c7ae6ae326cf6f801,0,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91049aacf1db0b9c7ae6ae326cf6f801,1,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91049aacf1db0b9c7ae6ae326cf6f801,1,47,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91535425f7324b76dfda27ffad32adfe,0,8,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91535425f7324b76dfda27ffad32adfe,0,11,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91535425f7324b76dfda27ffad32adfe,2,9,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91535425f7324b76dfda27ffad32adfe,2,12,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91535425f7324b76dfda27ffad32adfe,3,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91c81ba0fffc2370f24f1ab5677e88d2,2,26,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
91c81ba0fffc2370f24f1ab5677e88d2,2,33,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
91c81ba0fffc2370f24f1ab5677e88d2,2,35,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
91c81ba0fffc2370f24f1ab5677e88d2,2,36,25,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
91d72990897e891012ba05905d83b02c,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9219f2f8a1f4e997fb1d661d097964d2,0,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9219f2f8a1f4e997fb1d661d097964d2,0,27,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
9219f2f8a1f4e997fb1d661d097964d2,0,38,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9219f2f8a1f4e997fb1d661d097964d2,2,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9219f2f8a1f4e997fb1d661d097964d2,2,25,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
9219f2f8a1f4e997fb1d661d097964d2,2,34,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
92321d410b7615e872d070f528d10a3a,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
92321d410b7615e872d070f528d10a3a,0,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
927e7f466dc893afdc2286a2999873e7,0,33,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
927e7f466dc893afdc2286a2999873e7,0,54,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
927e7f466dc893afdc2286a2999873e7,1,33,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
92e94e5ba4d8f5dda48bff2cd0f7a716,1,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
92e94e5ba4d8f5dda48bff2cd0f7a716,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
92e94e5ba4d8f5dda48bff2cd0f7a716,3,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
92e94e5ba4d8f5dda48bff2cd0f7a716,4,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
93a67f053c48474172f4a3e384be720a,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
940d02d2474673f8d17fe9fc6f1416fb,1,73,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
940d02d2474673f8d17fe9fc6f1416fb,1,94,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
948c2d16e5b08c197c2d294ef848dd67,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
948c2d16e5b08c197c2d294ef848dd67,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
948c2d16e5b08c197c2d294ef848dd67,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
948c2d16e5b08c197c2d294ef848dd67,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
94ebe31deea87fec86ad5a262746579c,9,59,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9599294f4bfa5cc07a1bd1b598f4a840,0,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9599294f4bfa5cc07a1bd1b598f4a840,0,42,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9599294f4bfa5cc07a1bd1b598f4a840,0,49,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
95a16e41c28acbfcf607c72f123e14aa,0,17,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
95a16e41c28acbfcf607c72f123e14aa,0,22,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
96454e6a0a729caa86bfc6cb52f9a095,1,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
96454e6a0a729caa86bfc6cb52f9a095,1,47,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
96454e6a0a729caa86bfc6cb52f9a095,3,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
96454e6a0a729caa86bfc6cb52f9a095,3,56,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
96454e6a0a729caa86bfc6cb52f9a095,3,76,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
96d51575431d5657c6ef82deb1f8bb86,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,1,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,1,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,10,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,10,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,10,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,10,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,13,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,13,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,13,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,13,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,2,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,2,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,2,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,3,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,3,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,3,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,4,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,4,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,4,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,7,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,7,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
97a45dc0f8348bbd54c36bf4ba062ef7,0,35,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
97a45dc0f8348bbd54c36bf4ba062ef7,0,40,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
97ae135448200e88eaff4e2f3603741b,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
97ae135448200e88eaff4e2f3603741b,1,44,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
97ae135448200e88eaff4e2f3603741b,1,48,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
97ae135448200e88eaff4e2f3603741b,1,52,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
989419239a085fb87d4ff89227b0a123,2,19,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
989419239a085fb87d4ff89227b0a123,2,20,15,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
98c8ecb5e0d45c0ddebd06d18b7aac3f,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
98c8ecb5e0d45c0ddebd06d18b7aac3f,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
98c8ecb5e0d45c0ddebd06d18b7aac3f,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
98cd6e5d3db868c899cdf98c373b46b7,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
98cd6e5d3db868c899cdf98c373b46b7,0,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99a4e19166d3f5a2d0530ffb45ef3ffa,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99a4e19166d3f5a2d0530ffb45ef3ffa,11,32,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99a4e19166d3f5a2d0530ffb45ef3ffa,3,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99a4e19166d3f5a2d0530ffb45ef3ffa,4,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99a4e19166d3f5a2d0530ffb45ef3ffa,8,24,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99a4e19166d3f5a2d0530ffb45ef3ffa,9,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b22c512e8d1f014270dfd82fdadb5e,6,39,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
99b590d44e97c9f0f3eed80b51a8feb0,4,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,0,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,0,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,0,53,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,0,55,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,0,57,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,0,84,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,0,228,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,1,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,1,57,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,1,100,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,1,119,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,1,121,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,1,123,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99d2e303dce34a02245f58b6e0956efb,1,72,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,1,75,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,1,78,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,1,86,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,1,89,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,1,92,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,1,95,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,1,98,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99dc7bc93c2c49c81298ca5b63c59871,0,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
99dc7bc93c2c49c81298ca5b63c59871,0,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
99dc7bc93c2c49c81298ca5b63c59871,1,20,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
99dc7bc93c2c49c81298ca5b63c59871,1,22,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
99dc7bc93c2c49c81298ca5b63c59871,2,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
99dc7bc93c2c49c81298ca5b63c59871,2,34,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
9a147f5cd07a59d50e66018e7afc3698,2,20,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9a3df9bcd4ec074b780132df75def4c5,0,13,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9aa5590817e0688aeb92a496a681fa01,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9aa5590817e0688aeb92a496a681fa01,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9abccd5fc87f3fc8156c68dc62075f07,3,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9abccd5fc87f3fc8156c68dc62075f07,3,54,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9ad7d3a4d40bd13fc174a2d9d19e41f2,1,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9ad7d3a4d40bd13fc174a2d9d19e41f2,3,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9add6c2caa567731cbfe90e08042c212,1,11,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
9add6c2caa567731cbfe90e08042c212,1,21,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
9b2053875d9b1185f6500b315e69d156,0,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9b2ba82549c5ef1f3194322979daec26,0,15,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9b5fc4fb6c85506308ce478602e7df07,0,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9bc316c4feb0645816d1ab46e1527552,0,42,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9c7e47bf1a747e2857a5b100ccf4847b,0,62,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9c7e47bf1a747e2857a5b100ccf4847b,0,66,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9cd2d6c20e9dce04a8fb426d2dc7d9b5,0,6,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,37,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,63,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,68,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,81,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,100,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,105,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,107,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,109,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,121,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,0,149,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9dc8898313cb22936b99ce98521bee18,0,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9dc8898313cb22936b99ce98521bee18,0,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9e8a4bcc207cffaef1e04ef29491c502,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9e8a4bcc207cffaef1e04ef29491c502,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9e8a4bcc207cffaef1e04ef29491c502,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9e8a4bcc207cffaef1e04ef29491c502,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9f5f191f8dc56df718b08b7892cbb740,0,10,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9f5f191f8dc56df718b08b7892cbb740,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9f5f191f8dc56df718b08b7892cbb740,0,21,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9f5f191f8dc56df718b08b7892cbb740,0,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9fa191527321d4cd1308e9530c6a901e,1,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9fa191527321d4cd1308e9530c6a901e,2,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9fa191527321d4cd1308e9530c6a901e,5,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a00e422a83f5b6a55a9bd9c41dccb52a,1,16,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a04425c2f3eb421d3021363d7651e505,0,18,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a04425c2f3eb421d3021363d7651e505,0,19,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a04425c2f3eb421d3021363d7651e505,0,20,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a04425c2f3eb421d3021363d7651e505,0,21,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a04425c2f3eb421d3021363d7651e505,0,22,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a07fbb56532fa1a5f4c9bfe120eef7ef,0,24,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a25132b44c2ffb6f0df5bedd14aebfc1,0,23,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a25132b44c2ffb6f0df5bedd14aebfc1,0,27,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a25132b44c2ffb6f0df5bedd14aebfc1,0,29,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a3f796b3add955af7737ea919020d27a,0,11,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a3f796b3add955af7737ea919020d27a,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a41e0199f946d0fc950c5b9f4b832464,0,28,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a41e0199f946d0fc950c5b9f4b832464,0,31,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a41e0199f946d0fc950c5b9f4b832464,4,28,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a41e0199f946d0fc950c5b9f4b832464,4,31,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4948f29a94a03e3211e68817d38dc67,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4948f29a94a03e3211e68817d38dc67,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4978adb2c91030982705d9b8f80f1d1,0,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,0,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,0,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,0,62,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,0,64,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,0,72,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,0,146,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,0,158,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a5ed4ede4197b9218160e65f3b1aa1e4,0,49,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a5ed4ede4197b9218160e65f3b1aa1e4,0,74,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
a5ed4ede4197b9218160e65f3b1aa1e4,0,78,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
a5ed4ede4197b9218160e65f3b1aa1e4,0,82,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
a5ed4ede4197b9218160e65f3b1aa1e4,0,86,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
a5ed4ede4197b9218160e65f3b1aa1e4,0,100,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a5ed4ede4197b9218160e65f3b1aa1e4,0,103,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
a5ed4ede4197b9218160e65f3b1aa1e4,0,106,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a62823434c00e3e2dab280d5272f4a79,0,12,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a63d30cd2e8e9d853a229582187639f7,0,36,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a63d30cd2e8e9d853a229582187639f7,0,50,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a688ecf84947ddbc0679d0f95f8ba455,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a688ecf84947ddbc0679d0f95f8ba455,0,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a6fad8cf235e0af1ce38c7382ed39b1b,0,32,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a7bfcbf9f2106f10735be90835490874,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8005a2bf95e9b6dc124a13ef6dbc697,0,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8005a2bf95e9b6dc124a13ef6dbc697,1,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a81e40a1c8a4d805269722ef8de21406,0,33,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a81e40a1c8a4d805269722ef8de21406,1,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a81e40a1c8a4d805269722ef8de21406,1,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8c85549dae0536b6eff9f5e2dd9674b,0,49,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8c85549dae0536b6eff9f5e2dd9674b,1,15,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8c85549dae0536b6eff9f5e2dd9674b,2,18,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a8c85549dae0536b6eff9f5e2dd9674b,2,92,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a8c85549dae0536b6eff9f5e2dd9674b,3,8,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a8c85549dae0536b6eff9f5e2dd9674b,3,53,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8c85549dae0536b6eff9f5e2dd9674b,4,36,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a8c85549dae0536b6eff9f5e2dd9674b,4,58,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8c85549dae0536b6eff9f5e2dd9674b,6,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8c85549dae0536b6eff9f5e2dd9674b,6,60,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8c85549dae0536b6eff9f5e2dd9674b,9,47,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8c85549dae0536b6eff9f5e2dd9674b,9,51,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8e023343a6ca0ca6fccb7976b62ae7f,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8e023343a6ca0ca6fccb7976b62ae7f,0,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8e023343a6ca0ca6fccb7976b62ae7f,1,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8e023343a6ca0ca6fccb7976b62ae7f,1,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a977e534518cfd6fe62ffc6b9ff647c3,0,63,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a977e534518cfd6fe62ffc6b9ff647c3,0,88,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a977e534518cfd6fe62ffc6b9ff647c3,3,64,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a977e534518cfd6fe62ffc6b9ff647c3,3,90,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
aa0a633e04bd99fda908ca2d4ced14d9,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aa0a633e04bd99fda908ca2d4ced14d9,0,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aa0a633e04bd99fda908ca2d4ced14d9,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aaa615b181f36f32c479c62598552939,0,81,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aaa615b181f36f32c479c62598552939,12,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
aaa615b181f36f32c479c62598552939,13,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
aaa615b181f36f32c479c62598552939,13,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
aab39ce15368ac1ce5ff0bd4c88f679d,1,37,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aab39ce15368ac1ce5ff0bd4c88f679d,1,43,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aaf8c48c323accb3194af0a502346c9d,1,146,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aaf8c48c323accb3194af0a502346c9d,1,150,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ab0e5a4af2a3347a26aa34df64eb09f7,7,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ab0e5a4af2a3347a26aa34df64eb09f7,7,41,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ab3ddfd005631148a60adfe5cfaaaae1,0,36,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,4,11,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,4,12,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,4,13,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,4,24,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,4,25,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,4,26,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,4,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aca02d63597ae3ba9591cd9545a0ae55,4,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aca02d63597ae3ba9591cd9545a0ae55,4,47,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,0,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,1,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,1,41,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,2,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,2,41,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,3,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,3,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,3,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,4,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,4,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,4,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
adb0c67b09dfdb1d9c2abecc8e61f6ea,1,11,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
adb0c67b09dfdb1d9c2abecc8e61f6ea,1,14,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
adb0c67b09dfdb1d9c2abecc8e61f6ea,1,16,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
adb0c67b09dfdb1d9c2abecc8e61f6ea,1,18,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
adb0c67b09dfdb1d9c2abecc8e61f6ea,1,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
adb0c67b09dfdb1d9c2abecc8e61f6ea,1,58,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
adb0c67b09dfdb1d9c2abecc8e61f6ea,1,60,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
add65ca03efad84254250a9b8af445f6,2,46,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
add65ca03efad84254250a9b8af445f6,5,45,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
add65ca03efad84254250a9b8af445f6,8,51,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ae4f8f1b514f9e2ff6a8f550270dbd55,0,45,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ae4f8f1b514f9e2ff6a8f550270dbd55,0,62,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ae4f8f1b514f9e2ff6a8f550270dbd55,0,91,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ae5c65b8593faf584677404de7009937,0,32,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae8be92985c45668ba468a064d753ebf,3,10,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
ae9468c3eafb9365cd4fc20a6ce3cd4d,1,64,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,1,71,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,11,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,11,56,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,3,59,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,3,65,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,5,58,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,5,64,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,6,58,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,6,64,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,8,53,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,8,59,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,10,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,12,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,13,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,14,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,15,33,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,16,65,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,16,69,15,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,9,21,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b0ffa49c602b9360706a2f48c3b13c4f,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b0ffa49c602b9360706a2f48c3b13c4f,1,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b0ffa49c602b9360706a2f48c3b13c4f,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b1c83c4840048586d1272a65519b230d,2,8,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b1c83c4840048586d1272a65519b230d,2,12,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b2076a200949658afd1384ce4675a66a,4,15,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b240f1bb785857f6b140aa019ad0b65e,2,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b240f1bb785857f6b140aa019ad0b65e,2,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,5,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,5,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,5,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,5,19,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,5,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,6,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,6,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,6,19,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,6,21,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,6,43,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,7,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,7,26,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,7,28,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,7,32,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,7,34,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,7,66,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b385d5d336ed18952734a3b45a0ecdce,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b39e9f0c9c9190fe338a37c150d64a45,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b39e9f0c9c9190fe338a37c150d64a45,1,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b39e9f0c9c9190fe338a37c150d64a45,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b417d5bf9cfb9c604820ba97a504db57,0,110,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b417d5bf9cfb9c604820ba97a504db57,1,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b4ba858a89164fc68fa5fe6bae04d3d5,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b4ba858a89164fc68fa5fe6bae04d3d5,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b4ba858a89164fc68fa5fe6bae04d3d5,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b4ba858a89164fc68fa5fe6bae04d3d5,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b4ba858a89164fc68fa5fe6bae04d3d5,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b4d979683a374b14db344f4028e4933a,0,34,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,23,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,33,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,70,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,76,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,78,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,94,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,0,203,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,23,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,33,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,70,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,76,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,78,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,94,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,1,203,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b5cdd01a6c59101c0074d7566581b4a9,0,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b5cdd01a6c59101c0074d7566581b4a9,0,18,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b5dccec0dbdc65a0352ec53a35ede99f,0,36,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b5e17291f7979d42346be0c37a9d1662,1,11,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b64e9d9cd19758a3c97bcb56c01dc8c7,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b64e9d9cd19758a3c97bcb56c01dc8c7,0,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b65b84552d2964f208c900425f43ec1b,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b65b84552d2964f208c900425f43ec1b,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b675d4032293e45377b6d15bf1978638,0,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b675d4032293e45377b6d15bf1978638,0,40,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b675d4032293e45377b6d15bf1978638,1,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b6a5d98249daf62766994d103af57b73,3,10,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b6ab288588d60180732c3e083ecb116a,1,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b6ab288588d60180732c3e083ecb116a,1,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b6c575423e2c31fbec96de2336d36fc8,0,14,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b7443a3c07b419ea85d4e2e11c249250,0,33,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,0,34,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,0,41,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,0,42,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,3,33,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,3,34,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,3,46,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,3,47,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b764cbf4651afeba510655095d6952e3,8,21,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b764cbf4651afeba510655095d6952e3,8,35,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b764cbf4651afeba510655095d6952e3,8,60,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b861a84e3580eaebc1487a7088360fb9,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b861a84e3580eaebc1487a7088360fb9,0,14,16,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b89d1ddba5a115f13f945fe6ecfad925,2,16,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,10,22,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,10,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,4,15,15,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b92af856ef58ff19aaaa805eb8142467,4,17,9,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b92af856ef58ff19aaaa805eb8142467,4,19,9,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b92af856ef58ff19aaaa805eb8142467,6,20,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,6,27,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,8,25,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,8,33,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b98ba70ce89adf7034c2bad25921b64b,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b9f2b086b9d0f12e1b1c249c744f3d0a,0,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bb051ae49438b3e46c8a22e5b31a14b9,0,31,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
bb051ae49438b3e46c8a22e5b31a14b9,0,40,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
bb051ae49438b3e46c8a22e5b31a14b9,0,59,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
bb5249f541f81a44f9d48fd70fc9d5c1,3,51,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,3,52,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,3,53,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,3,54,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,3,64,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,3,65,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,3,66,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,3,67,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bbd2598033d2de4d16e9ab3af8351d06,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bbd2598033d2de4d16e9ab3af8351d06,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc4075cee48a260341315d14d66cb8ee,0,33,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc4075cee48a260341315d14d66cb8ee,0,37,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,0,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,1,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,1,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,2,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
be0e198cd97ee22810dc3d1a0e7b8fcb,0,9,12,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
be0e198cd97ee22810dc3d1a0e7b8fcb,0,14,15,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
be762916a5d33da794729bbbccd67d46,0,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bec97a087a10ee2ff77d1e465976f33c,0,28,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bec97a087a10ee2ff77d1e465976f33c,0,31,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bf6be66035dcd12b162bf2c36dcce32b,0,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
bf6be66035dcd12b162bf2c36dcce32b,0,64,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c04c5128574a525bdf3f399a808f77b0,0,8,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c0f20a855d4ed616fff8fd7965d47b9c,1,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c29565d70b255463b712c345f532e2e5,0,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c29565d70b255463b712c345f532e2e5,0,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c29da02cf6e4f64b283cebef91724770,3,10,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
c29da02cf6e4f64b283cebef91724770,3,19,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
c2a3f7cafad92f3584606e24817dd0bc,0,13,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c2a3f7cafad92f3584606e24817dd0bc,0,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c2a3f7cafad92f3584606e24817dd0bc,1,12,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c2a3f7cafad92f3584606e24817dd0bc,1,13,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c2ee098b4cc3ef327899b15182c9c3bd,0,13,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c2ee098b4cc3ef327899b15182c9c3bd,0,19,10,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c3aef905c6b83b7c82814cb0e0a8b931,0,46,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c3aef905c6b83b7c82814cb0e0a8b931,0,47,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c3aef905c6b83b7c82814cb0e0a8b931,0,70,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c3aef905c6b83b7c82814cb0e0a8b931,0,77,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c3ef92bf5469933f29713ed4b08bbc16,3,7,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c4ebcb8be9e37a5b4e5bffd92b555b99,0,42,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c4ebcb8be9e37a5b4e5bffd92b555b99,0,46,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c4f5c9d9402a22537ec6e099c5ceccf0,2,83,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c4f5c9d9402a22537ec6e099c5ceccf0,2,93,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,1,29,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,1,63,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c51af85ef28dc64210871da25f18c721,1,65,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c51af85ef28dc64210871da25f18c721,4,19,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,4,23,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,4,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,4,46,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,4,61,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c51af85ef28dc64210871da25f18c721,4,63,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c59c4fcc2e42c8cda8eb48af5f802180,0,9,4,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c59c4fcc2e42c8cda8eb48af5f802180,1,9,4,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c60e92268456aba1137f2936bc3cd202,0,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c60e92268456aba1137f2936bc3cd202,0,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c65b68320a33856504971b8c3d2e0c8a,4,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,5,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,6,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,6,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,7,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,8,31,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,8,55,21,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,8,81,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,9,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,9,37,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c67627dc3d926f4f9a4bff0532b59345,29,22,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c67627dc3d926f4f9a4bff0532b59345,29,26,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,28,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,33,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,34,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,38,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,40,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,42,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,43,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,44,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,47,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,54,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,55,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,29,62,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c718303092035ac5eec2008431fe183d,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,1,36,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,1,49,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,1,51,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,1,56,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,1,58,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,1,67,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c79cae37385725deefa58379ef7d8aa5,1,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c79cae37385725deefa58379ef7d8aa5,1,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c79cae37385725deefa58379ef7d8aa5,1,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c80dfaf6c2715430e2ac02020ff5ad6d,0,9,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c92e456fbb85e8db6f0a072572a12cdc,10,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c92e456fbb85e8db6f0a072572a12cdc,9,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ca2240628730942bbc7bfcb0fc6305dd,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ca7e6e3e6340e844298a12075399bb6b,0,11,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ca7e6e3e6340e844298a12075399bb6b,0,15,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,0,24,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,0,34,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,0,44,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,0,45,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,0,46,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,0,60,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,0,61,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,0,62,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,0,63,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,0,64,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,0,65,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca85b573bca639ec8d42ce5d8e80ee4d,0,19,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ca85b573bca639ec8d42ce5d8e80ee4d,1,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
caa38fa191ab7a09d7d0ee6e7851a322,0,14,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
caa38fa191ab7a09d7d0ee6e7851a322,2,14,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
cb560ef5c4234481fec4d69d939fadbc,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cb560ef5c4234481fec4d69d939fadbc,1,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cb730aea660237c333be070f87c1aeb9,3,10,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
cbdbbce667d361908d5692e46ee83080,0,11,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
cbdbbce667d361908d5692e46ee83080,0,14,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
cc54053dbd288d03291795f9be01198a,5,35,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
cc6a5acb07573feaabe56c927d3e1992,0,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cce4342f6774033b46574defa1cd54b1,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cce4342f6774033b46574defa1cd54b1,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,0,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,0,29,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,1,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,1,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,1,24,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,1,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ce81534e0fdb781c7058362a127a636c,0,27,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
cfc590857144518a582ec628cdbf0465,0,172,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d0017b5e622a8912536a6bd28a754ec2,0,8,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0017b5e622a8912536a6bd28a754ec2,0,58,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0017b5e622a8912536a6bd28a754ec2,0,61,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0017b5e622a8912536a6bd28a754ec2,1,8,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0017b5e622a8912536a6bd28a754ec2,1,56,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0017b5e622a8912536a6bd28a754ec2,1,59,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d06b358f36444c4a3553df28b16e2e76,0,14,2,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d06b358f36444c4a3553df28b16e2e76,0,146,2,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d06b358f36444c4a3553df28b16e2e76,0,147,25,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d06b358f36444c4a3553df28b16e2e76,0,148,25,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0dd439bf2dc538e5edbc578c060fa73,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0dd439bf2dc538e5edbc578c060fa73,0,19,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0dd439bf2dc538e5edbc578c060fa73,0,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d11654e5281ee6c7058421e18c56fceb,4,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d11654e5281ee6c7058421e18c56fceb,5,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d11654e5281ee6c7058421e18c56fceb,6,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d11654e5281ee6c7058421e18c56fceb,7,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d1592201896919c3425501bd4908fd73,2,13,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1592201896919c3425501bd4908fd73,2,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1592201896919c3425501bd4908fd73,2,15,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1592201896919c3425501bd4908fd73,2,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1592201896919c3425501bd4908fd73,2,17,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1ae945667d37051fe834d0e08860674,0,7,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1ae945667d37051fe834d0e08860674,9,21,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
d1c12bc8775d6147f681b21ebadca0d8,0,88,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d25c4f0ed61873bdccca54c767f1fa86,1,8,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
d280e6597e93c6caf6dea59d6ee7b2f5,10,14,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d280e6597e93c6caf6dea59d6ee7b2f5,13,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d280e6597e93c6caf6dea59d6ee7b2f5,15,14,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d2ae02b6d04790441e49ba1b043d0fb4,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d2bef9d32558e1a9dcaeddc755e00979,0,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d2bef9d32558e1a9dcaeddc755e00979,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d2d7c2b8d480c2e3ca23c829fd272862,1,25,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d2fb00fc13b1e0a6dff7529ed32c9b75,1,57,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d315eacecee8b4dc7cfae4a266925ca6,5,8,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
d3cd08a9e35abedfddec6d648bfb28b4,0,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d3cd08a9e35abedfddec6d648bfb28b4,0,75,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d3cd08a9e35abedfddec6d648bfb28b4,0,77,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d3cd08a9e35abedfddec6d648bfb28b4,2,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d435b335c2211ee48561b7cc1304ca15,3,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d435b335c2211ee48561b7cc1304ca15,4,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d436a037dc8b472dd524437112a0bf58,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d436a037dc8b472dd524437112a0bf58,0,18,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,1,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,1,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,1,40,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,2,70,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,2,72,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,2,74,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d52868e05952c3bc73a243b057c63b8d,0,93,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d57193d22c4f801e03f7e58b5b1fca22,0,8,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d57193d22c4f801e03f7e58b5b1fca22,1,9,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d57193d22c4f801e03f7e58b5b1fca22,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d57193d22c4f801e03f7e58b5b1fca22,3,9,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d57193d22c4f801e03f7e58b5b1fca22,4,11,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d5b05983f74ea62985b599b770b5c2bc,0,130,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d5b05983f74ea62985b599b770b5c2bc,0,134,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d5b05983f74ea62985b599b770b5c2bc,0,137,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d5c647370466e3183bcf44896c4f0edf,0,50,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d5c647370466e3183bcf44896c4f0edf,0,68,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d5c647370466e3183bcf44896c4f0edf,0,82,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d80481f8acd0fb412ea7ce4c77b24979,0,34,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d80481f8acd0fb412ea7ce4c77b24979,0,43,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d80481f8acd0fb412ea7ce4c77b24979,0,49,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d80481f8acd0fb412ea7ce4c77b24979,0,59,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d80481f8acd0fb412ea7ce4c77b24979,0,92,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d80a62f79a09f195143ff2f903fcf603,0,17,5,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d80a62f79a09f195143ff2f903fcf603,1,82,5,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d81f352e1a8188fda6f5f494487ca5cb,0,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d887002da7179c699ca4f53c470c8662,0,34,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d887002da7179c699ca4f53c470c8662,0,66,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d887002da7179c699ca4f53c470c8662,0,119,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d8a58e963645e813e68be57ea07f1d6a,0,33,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d8a58e963645e813e68be57ea07f1d6a,1,28,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,1,35,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,2,34,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d8a58e963645e813e68be57ea07f1d6a,3,31,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,3,41,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,4,35,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d8a58e963645e813e68be57ea07f1d6a,4,56,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d8a58e963645e813e68be57ea07f1d6a,5,32,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,5,40,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,6,35,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d8a58e963645e813e68be57ea07f1d6a,6,56,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d8a58e963645e813e68be57ea07f1d6a,7,32,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,7,40,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,9,32,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,9,40,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d91354d19cd6ea3bda9ea6a17e1f25e6,1,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d98bda3e2efbe9081ab610dd45560249,0,101,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d98bda3e2efbe9081ab610dd45560249,0,117,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d9c2ccc8746c6248ec205387dd2ad7d4,0,32,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
da1e31616bb10d231acdd15df37a9d89,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
da1e31616bb10d231acdd15df37a9d89,0,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
da799728bb3fef381bd26ba5b7b5800c,0,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
da799728bb3fef381bd26ba5b7b5800c,0,52,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
dab5c818ee4929f2c27adebc258c50fd,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dab5c818ee4929f2c27adebc258c50fd,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dab5c818ee4929f2c27adebc258c50fd,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dab5c818ee4929f2c27adebc258c50fd,1,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dab5c818ee4929f2c27adebc258c50fd,2,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dab5c818ee4929f2c27adebc258c50fd,2,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dacbe7ec782ed958951e194bc17f4332,1,8,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db2c0c7ca066f64163c15caed0956085,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db2c0c7ca066f64163c15caed0956085,1,44,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db419e48853062a292428409c4193840,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db419e48853062a292428409c4193840,2,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db4a6297ee2fcc794555d9b52429fe10,1,15,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
db8aabc32be87684e781a2bd28384c60,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,0,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,1,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,11,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,11,22,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,12,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,12,23,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,13,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,13,21,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,2,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,3,18,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,6,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,6,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,8,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,8,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dc1309dd99a29c67bf6627679c92c7e6,0,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dc1309dd99a29c67bf6627679c92c7e6,0,34,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dc6eb239ed19a809b819d4e625de4f13,5,17,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dc6eb239ed19a809b819d4e625de4f13,5,24,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dc6eb239ed19a809b819d4e625de4f13,5,51,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dc6eb239ed19a809b819d4e625de4f13,5,56,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dc6eb239ed19a809b819d4e625de4f13,5,77,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dc6eb239ed19a809b819d4e625de4f13,5,82,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dca0d479d337133991f2081ccfda36b3,0,97,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
dca0d479d337133991f2081ccfda36b3,1,99,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
dcff6328f6fff264138176967f495a8d,6,78,29,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
dcff6328f6fff264138176967f495a8d,6,81,27,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
dd026350d0a358002d3f8ee3dbfe8304,0,38,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd026350d0a358002d3f8ee3dbfe8304,0,39,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
dd026350d0a358002d3f8ee3dbfe8304,0,44,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd026350d0a358002d3f8ee3dbfe8304,0,60,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
dd026350d0a358002d3f8ee3dbfe8304,0,63,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd2c7328ee893a05a30c5e2bfe321b54,1,48,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd8fb3d1910b4e308d94aa90b22e957a,1,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd8fb3d1910b4e308d94aa90b22e957a,1,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd8fb3d1910b4e308d94aa90b22e957a,3,9,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd8fb3d1910b4e308d94aa90b22e957a,3,14,7,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
de625de137421cd3f679940191847b3e,0,6,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
deb85b8deef50ac454aad911dab03fc2,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
deb85b8deef50ac454aad911dab03fc2,0,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
deb85b8deef50ac454aad911dab03fc2,1,43,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
deb85b8deef50ac454aad911dab03fc2,1,47,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
def084ccc7b7ad6a8913283e3d7ac433,0,88,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
defdd6f7a6611933416ce23541bb828c,0,37,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
defdd6f7a6611933416ce23541bb828c,0,43,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
defdd6f7a6611933416ce23541bb828c,0,45,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
defdd6f7a6611933416ce23541bb828c,0,49,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
defdd6f7a6611933416ce23541bb828c,0,51,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
defdd6f7a6611933416ce23541bb828c,0,54,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
defdd6f7a6611933416ce23541bb828c,0,56,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
df7c0692638ccab78801af94f5638415,0,60,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
df9155dbe904ff5f170926c4d47e1f2a,6,18,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dffd34f444c2c2bb9f92c8d11bfae736,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,1,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,1,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e02fa59820ee4deb0e4219de60506032,0,40,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e02fa59820ee4deb0e4219de60506032,1,44,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e02fa59820ee4deb0e4219de60506032,1,48,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e02fa59820ee4deb0e4219de60506032,1,53,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e02fa59820ee4deb0e4219de60506032,1,54,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e1319bb5ee029e54dd9531abea134fd9,2,10,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e20f72936fe84e1d9b527c3ca8338833,0,22,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e20f72936fe84e1d9b527c3ca8338833,0,28,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e2113d95a19464f9025fce929c4db4ea,0,71,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e272bb92214bbf412fb7e1594ba09b0a,0,124,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e272bb92214bbf412fb7e1594ba09b0a,1,103,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e272bb92214bbf412fb7e1594ba09b0a,1,105,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e272bb92214bbf412fb7e1594ba09b0a,1,107,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e272bb92214bbf412fb7e1594ba09b0a,1,128,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e302aeecc48de85f29932977cc4c3e31,0,75,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e3116be471fde85fe817f035872f3298,0,214,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,0,219,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,0,224,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,0,229,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,0,231,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,0,242,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,0,247,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e331122b5f3c3d0cf862927cd9c9a92f,0,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e331122b5f3c3d0cf862927cd9c9a92f,0,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e334036bb958753fec18a0316ba60985,1,27,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
e376094ffd1c8aa8b6ec5d4da464dbf6,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e376094ffd1c8aa8b6ec5d4da464dbf6,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e376094ffd1c8aa8b6ec5d4da464dbf6,0,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e376094ffd1c8aa8b6ec5d4da464dbf6,0,29,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e37e72514e722575a485fd5e83bd4a88,0,18,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e37e72514e722575a485fd5e83bd4a88,0,88,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e37e72514e722575a485fd5e83bd4a88,0,95,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e432db7d2ce3ec328cf04e57f50b7b79,1,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e4f63b3815369ab27edb0a3ba459a6ce,3,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e554f3771477661b5288263d47bbf34a,0,17,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e554f3771477661b5288263d47bbf34a,0,35,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e554f3771477661b5288263d47bbf34a,0,55,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e554f3771477661b5288263d47bbf34a,0,83,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e554f3771477661b5288263d47bbf34a,7,33,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e554f3771477661b5288263d47bbf34a,7,40,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e554f3771477661b5288263d47bbf34a,7,52,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e5688d4e8c8342670dfccd6fd8c72b93,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e59cd57171402638f2594a5f6c9dcb4f,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e59cd57171402638f2594a5f6c9dcb4f,1,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e5e03f870081e696cc81d77211374df0,0,55,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e5e03f870081e696cc81d77211374df0,0,64,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e634b8c76b6fc0c6c9b1670409e5ba0e,0,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e634b8c76b6fc0c6c9b1670409e5ba0e,0,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e634b8c76b6fc0c6c9b1670409e5ba0e,0,30,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e634b8c76b6fc0c6c9b1670409e5ba0e,0,113,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e634b8c76b6fc0c6c9b1670409e5ba0e,0,175,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e64df1a0354c9adc45194e42c7b03b47,11,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e64df1a0354c9adc45194e42c7b03b47,11,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e64df1a0354c9adc45194e42c7b03b47,7,7,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e64df1a0354c9adc45194e42c7b03b47,8,8,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,1,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,3,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,3,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,7,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,7,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,9,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,9,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e73e272d398bb99425beb6a3b5d8fd08,0,98,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e7485846638be2a9c90bcbc302eda7c8,4,18,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7485846638be2a9c90bcbc302eda7c8,4,70,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7485846638be2a9c90bcbc302eda7c8,6,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7485846638be2a9c90bcbc302eda7c8,6,66,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7485846638be2a9c90bcbc302eda7c8,6,100,25,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7625385af8c588da5c870c81ffcbaec,0,41,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e7625385af8c588da5c870c81ffcbaec,0,46,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e7ca928f05198e19be3732a0f0f5950e,1,58,21,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e7ca928f05198e19be3732a0f0f5950e,1,70,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7ca928f05198e19be3732a0f0f5950e,4,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e89c737b6f73772ef681e3f9a46f1fcb,0,69,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e89c737b6f73772ef681e3f9a46f1fcb,0,70,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e89c737b6f73772ef681e3f9a46f1fcb,0,71,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e8b1ad52ad20929574865af411bac740,0,18,28,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e96367e59cf28e54c97aaf888a4a29ab,0,28,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e96367e59cf28e54c97aaf888a4a29ab,0,31,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ea3390a7c01bf907ca9448eab1f1aa65,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
eaa0578409262d2c3c7a1e189436c5ab,1,38,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
eaa0578409262d2c3c7a1e189436c5ab,3,44,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
eaa0578409262d2c3c7a1e189436c5ab,3,47,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
eaa0578409262d2c3c7a1e189436c5ab,4,28,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
eaa0578409262d2c3c7a1e189436c5ab,4,31,25,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
eab4448cb316de8d7a0623d26aa49874,0,55,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
eab4448cb316de8d7a0623d26aa49874,0,67,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
eab4448cb316de8d7a0623d26aa49874,0,77,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
eae274d515d7eb9547cc51521d417aef,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
eb4115fa6dff17dc8611a6c08827ca86,2,18,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ebfa867c845ed635ee3c3d07a2bb8fb1,3,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ece85c7dca7be940d7fe85eaac6faaea,0,6,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
edecb273ca9a355d61190f8270bdcdd7,10,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
edecb273ca9a355d61190f8270bdcdd7,10,37,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
edecb273ca9a355d61190f8270bdcdd7,11,28,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
edecb273ca9a355d61190f8270bdcdd7,11,38,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ef07f9bb72e962da1c3b27611306ca1c,0,42,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f0c72071039e791abc69206405221af9,0,28,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f0c72071039e791abc69206405221af9,0,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
f0c72071039e791abc69206405221af9,1,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f0c72071039e791abc69206405221af9,1,25,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
f0c72071039e791abc69206405221af9,1,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f143b0c40e97546ccd6072f1078a0220,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f143b0c40e97546ccd6072f1078a0220,0,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f145f1de14163d651a1e12681432bbe5,2,107,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f145f1de14163d651a1e12681432bbe5,2,109,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f145f1de14163d651a1e12681432bbe5,2,113,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f14f0a8981de6ca1d52625804430b9e6,0,30,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f14f0a8981de6ca1d52625804430b9e6,0,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
f15c3e810a0bcca8f0818638af918444,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f19188ecc9cad9e2529a8301015c069b,1,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f19188ecc9cad9e2529a8301015c069b,2,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f19188ecc9cad9e2529a8301015c069b,2,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f2e67323a8043c90a877016f398cb3eb,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f3bb6e70c042b8183d9d2bc311c23140,0,7,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f3db98bbd4442b87c6f5c17667ca9415,0,12,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f3db98bbd4442b87c6f5c17667ca9415,1,12,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f3db98bbd4442b87c6f5c17667ca9415,2,17,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f3db98bbd4442b87c6f5c17667ca9415,2,18,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f3db98bbd4442b87c6f5c17667ca9415,2,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f559728c375541c8c0efbb6db4793363,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f559728c375541c8c0efbb6db4793363,1,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f643f2453fc3092429b2372dc4eae820,0,174,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f643f2453fc3092429b2372dc4eae820,1,190,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f6cf1260ea6aea3c2ac661850bcd20c8,0,66,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
f700e53eff569107a01e34265a9a85b1,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f700e53eff569107a01e34265a9a85b1,0,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f71eec85d2487dc4ba657da925655977,0,6,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f71eec85d2487dc4ba657da925655977,1,6,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8aa95d9a19893e7050d66f1a2872057,0,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8aa95d9a19893e7050d66f1a2872057,0,55,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8aa95d9a19893e7050d66f1a2872057,0,64,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8aa95d9a19893e7050d66f1a2872057,1,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8aa95d9a19893e7050d66f1a2872057,1,30,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8c91190d1d8e9b6218f59ab6c0b0983,0,35,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
f936782c81465f2755d45fc973ea40e4,1,20,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f936782c81465f2755d45fc973ea40e4,1,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f973cab061768a53da86420d038579d5,4,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f9f20466887d9accd2b09c35e14fac11,0,60,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,0,78,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,0,104,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,0,105,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,0,106,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,1,90,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,1,91,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,1,92,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,2,66,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,2,67,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,2,68,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,3,28,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
fa24b9a9f5b24f9a9ce05ed7fe8ff046,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fa24b9a9f5b24f9a9ce05ed7fe8ff046,0,21,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fa978ed5d628f61bf63e921a2546fc0d,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fa978ed5d628f61bf63e921a2546fc0d,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fa978ed5d628f61bf63e921a2546fc0d,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
faa8c2cda8aa81c0a77c717241dac10c,0,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
fabe5f9c01d2399e89d209ff19ec0057,2,8,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
fabe5f9c01d2399e89d209ff19ec0057,2,11,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
fabe5f9c01d2399e89d209ff19ec0057,2,14,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
fabe5f9c01d2399e89d209ff19ec0057,2,15,15,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
fabe5f9c01d2399e89d209ff19ec0057,2,16,26,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
fb00dbfa22d77e405902bcbf36ac2d8d,20,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
fb00dbfa22d77e405902bcbf36ac2d8d,20,23,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
fb00dbfa22d77e405902bcbf36ac2d8d,21,29,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
fb00dbfa22d77e405902bcbf36ac2d8d,21,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
fb00dbfa22d77e405902bcbf36ac2d8d,23,23,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
fb00dbfa22d77e405902bcbf36ac2d8d,6,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
fb00dbfa22d77e405902bcbf36ac2d8d,6,23,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
fb0971680efb737634dddc4c1c2d2826,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fb0971680efb737634dddc4c1c2d2826,0,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fbd39537f2eb53fb9c550705942d423b,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc14db9624f4c1460d47abaf5a4b4565,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc14db9624f4c1460d47abaf5a4b4565,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,0,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,0,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,0,37,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,0,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,0,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,1,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,1,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,1,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,1,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,1,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc5dc5a25ec9191a00819d0fa8ecbf09,2,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc5dc5a25ec9191a00819d0fa8ecbf09,2,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc76468759090063c98e5153db1c39e4,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc76468759090063c98e5153db1c39e4,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fce597393b4e6d76e0f67a28d357a0dc,0,119,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fce597393b4e6d76e0f67a28d357a0dc,0,121,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fce597393b4e6d76e0f67a28d357a0dc,0,123,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd3478c8fb1e73587a20c86c15bd9acc,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd463df88fa4503310aafebe7fab9ffc,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd463df88fa4503310aafebe7fab9ffc,0,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,1,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,2,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,3,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,3,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,4,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
feb2c75044c310bd06d3f134f0e62031,0,35,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
feb2c75044c310bd06d3f134f0e62031,0,58,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ff3e6f0542ec21b2440bf17a029488ac,0,70,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ff54ff48572573deec70f2228bea5a05,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ff54ff48572573deec70f2228bea5a05,3,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ff54ff48572573deec70f2228bea5a05,3,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ff54ff48572573deec70f2228bea5a05,3,19,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ff724fef7804da8994d5450869fa8aab,0,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
