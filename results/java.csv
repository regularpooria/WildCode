conversation_hash,code_index,error_line,error_character,error_id,error_message
020d4eeb2aa22328a1cf5947564b7798,35,6,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
023e8d8ac6297a4f9b63db78283d0974,4,120,46,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,1,38,36,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,1,41,30,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,1,44,34,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,1,47,35,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,1,50,35,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,1,53,40,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
056c2b7f7f486cdd871a5078a836d508,0,17,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
056c2b7f7f486cdd871a5078a836d508,1,16,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
056c2b7f7f486cdd871a5078a836d508,2,21,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
0571f220c0641b8843cd1c69941f9b92,1,45,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
0571f220c0641b8843cd1c69941f9b92,1,71,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
06882404b7f259ba8fbbe41875ea5314,3,10,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
06ac3ad39fc850bcfabe99e11829f561,2,45,13,files.java.rules.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature ""http://apache.org/xml/features/disallow-doctype-decl"" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features ""http://xml.org/sax/features/external-general-entities"" and ""http://xml.org/sax/features/external-parameter-entities"" to false."
081f0d0b9bdfc78dfb41a29f81ff36a7,1,12,14,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
0b7e60ee78f56ea4ea40a586da334163,0,7,58,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
0ccadd1792935c44bb017bdd0c8a18e4,0,7,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
0ccadd1792935c44bb017bdd0c8a18e4,1,7,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
0ccadd1792935c44bb017bdd0c8a18e4,4,7,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
0ccadd1792935c44bb017bdd0c8a18e4,5,23,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
0e9475e261d195f10c1de5c181ffa349,0,10,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
0e9475e261d195f10c1de5c181ffa349,1,13,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
10a1b82752ca064c385bbb8f17ade3bc,23,79,9,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
10a1b82752ca064c385bbb8f17ade3bc,23,84,16,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
137933aff79aee4d177c245a6dadee51,0,9,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
158795eeb893bf97841e575a2523a014,1,26,9,files.java.rules.lang.security.audit.cookie-missing-httponly,A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
158795eeb893bf97841e575a2523a014,1,26,9,files.java.rules.lang.security.audit.cookie-missing-secure-flag,A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'
187a303178ee56917c211123bc90d2a9,6,28,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
187a303178ee56917c211123bc90d2a9,8,48,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1a424db31f7e34ffaff9d1a18b57942e,1,4,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1a424db31f7e34ffaff9d1a18b57942e,2,4,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1be0e481a5e245c7d4110d911b5e181d,1,11,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1e86dd4286af623fb28eeff533bdebdc,0,12,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1e86dd4286af623fb28eeff533bdebdc,0,42,25,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
1e86dd4286af623fb28eeff533bdebdc,1,10,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1e86dd4286af623fb28eeff533bdebdc,1,35,21,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
1f53ed72d4d8af0859bc445f6d3673ca,0,10,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1f53ed72d4d8af0859bc445f6d3673ca,5,59,38,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
1fe2948bd6633ee13cd8966bd875bb1d,0,15,37,files.java.rules.lang.security.audit.crypto.desede-is-deprecated,Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.
1fe2948bd6633ee13cd8966bd875bb1d,0,15,62,files.java.rules.lang.security.audit.crypto.des-is-deprecated,DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.
1fe2948bd6633ee13cd8966bd875bb1d,0,20,42,files.java.rules.lang.security.audit.crypto.des-is-deprecated,DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.
20d71807b9f354ef82a86b8fbc97a4b4,0,77,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
20d71807b9f354ef82a86b8fbc97a4b4,0,139,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
20d71807b9f354ef82a86b8fbc97a4b4,0,173,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
20d71807b9f354ef82a86b8fbc97a4b4,1,63,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
23de945c7921711739ad1cd8ff5fc355,1,121,46,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
23de945c7921711739ad1cd8ff5fc355,6,123,46,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
27911ed9474aeff70189c51d0f4c6843,4,25,21,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
29bce683318c5caec26a230a5fa5466d,0,34,38,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
29bce683318c5caec26a230a5fa5466d,0,59,32,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
2a180bef54f919faa69b2ed07ce4a67c,0,12,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2a180bef54f919faa69b2ed07ce4a67c,0,34,17,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
2a180bef54f919faa69b2ed07ce4a67c,6,15,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2a180bef54f919faa69b2ed07ce4a67c,6,45,17,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
2d1b470dea58e5026eef9dc92311bc6b,0,42,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2d1b470dea58e5026eef9dc92311bc6b,1,40,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2eca86bf8011491ee936b703be36d2b0,1,25,22,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
2ee3debcc43a49871ec011e390c03e83,0,8,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2ee3debcc43a49871ec011e390c03e83,1,13,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2ee91f2ea721a8fce5965217ff10554c,5,9,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2ee91f2ea721a8fce5965217ff10554c,6,8,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2fc9e661bdc85b19e7428e65549e9ac3,0,137,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2fc9e661bdc85b19e7428e65549e9ac3,1,148,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
33b75e99879b4bd35e14447346b6ebf5,0,41,34,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
33b75e99879b4bd35e14447346b6ebf5,1,41,34,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
35f906e02becf4db09818092f6002672,5,12,33,files.java.rules.lang.security.audit.command-injection-process-builder,A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
36ce6058180dc19b6546bcd2568cb85c,1,14,48,files.java.rules.lang.security.audit.cbc-padding-oracle,"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."
36e28a5e1605c5f94269aad99417b6d1,0,15,9,files.java.rules.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature ""http://apache.org/xml/features/disallow-doctype-decl"" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features ""http://xml.org/sax/features/external-general-entities"" and ""http://xml.org/sax/features/external-parameter-entities"" to false."
36e28a5e1605c5f94269aad99417b6d1,0,36,9,files.java.rules.lang.security.audit.xxe.transformerfactory-dtds-not-disabled,"DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes ""accessExternalDTD"" and ""accessExternalStylesheet"" to """"."
374755891b4cac2f779c79f88f171eca,2,9,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
37fec562eebf31312ea41e742f3ad365,0,13,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
3be983247f539bbc974fccf7c4372d58,11,24,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
3be983247f539bbc974fccf7c4372d58,4,17,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
3df0dab6da4d5d90b2df561804993bee,0,7,54,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
3e57d69104299d1a51a6c83128bd6526,0,23,33,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
43dd1cbf3f1939bbdf418d158908d20b,4,10,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
48d4aa5a6c453317f4abe041b4460ff0,2,19,13,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
4a2f9d143480ee30301983ac1fa5f21f,6,16,31,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4b576c3ad7fb0010cf426ccea6f77adc,1,32,38,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4b576c3ad7fb0010cf426ccea6f77adc,2,29,38,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d478e6802397168a93e17806701b546,5,11,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,0,10,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,1,25,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,3,10,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,4,25,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,5,10,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,6,27,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,7,10,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,8,28,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4e26e8683b5cf70b5cf00e4af5be35aa,0,10,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
58a4ea1087b66f313f257439586e18d4,3,27,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5aca47b467de285189f8dcd13033974f,0,10,23,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5aca47b467de285189f8dcd13033974f,1,9,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5aca47b467de285189f8dcd13033974f,9,20,9,files.java.rules.lang.security.audit.crypto.ecb-cipher,"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."
5aca47b467de285189f8dcd13033974f,9,20,25,files.java.rules.lang.security.audit.crypto.use-of-aes-ecb,"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(""AES/CBC/PKCS7PADDING""). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
5aca47b467de285189f8dcd13033974f,9,27,9,files.java.rules.lang.security.audit.crypto.ecb-cipher,"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."
5aca47b467de285189f8dcd13033974f,9,27,25,files.java.rules.lang.security.audit.crypto.use-of-aes-ecb,"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(""AES/CBC/PKCS7PADDING""). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
5d88b53049b7f7b39f5ed4f2bb932987,6,16,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
5d88b53049b7f7b39f5ed4f2bb932987,6,18,58,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
5d88b53049b7f7b39f5ed4f2bb932987,8,16,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
6301a3ea5a73c771697b5a33336a13ee,0,6,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,1,6,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,2,7,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,3,6,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,4,7,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,5,7,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,6,6,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
63f117b0f480fccf2bc596689814faf4,0,14,22,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
66697ed0c18248780d802e923e275b4e,0,8,58,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
67901c78b4898b6e827598dbf01a1628,0,9,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
67901c78b4898b6e827598dbf01a1628,1,12,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
68370cc6ab3891899ce283de8d2ffc72,0,36,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
690f5d08f66ca140947ca2ad3055eb91,3,11,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
690f5d08f66ca140947ca2ad3055eb91,4,12,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
69bf76c1fa0af0d7821caecdc74e0e42,0,15,25,files.java.rules.lang.security.audit.command-injection-process-builder,A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
6e14947c935cd6c0683df3b356a2f55e,2,21,9,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
730557624254f5b33ac7bab336962f43,2,17,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
730557624254f5b33ac7bab336962f43,3,16,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
730557624254f5b33ac7bab336962f43,4,17,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
730557624254f5b33ac7bab336962f43,5,16,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
745a5fdd50ed6209a77776ecaf59b8fd,0,118,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
745a5fdd50ed6209a77776ecaf59b8fd,1,135,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
74664080e87465acfb2dca20355eaf1c,0,9,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
74664080e87465acfb2dca20355eaf1c,1,11,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
74664080e87465acfb2dca20355eaf1c,1,13,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
75c081be266865398494d506df9973b6,3,12,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
75c081be266865398494d506df9973b6,5,13,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
78951f2f539ea903b136a36d7616b368,5,25,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
79664803ada58854c7925c22d5ce73e8,0,48,23,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
7a4ad3bce87682f2c008fd0632bdef04,0,16,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
7c77734623da93eb87591d6dbc161b54,8,33,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
7cfc5e7f05582a66b91909652342b709,1,11,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,1,22,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,1,28,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,2,11,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,2,21,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,3,11,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,3,21,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7dcaa342a190b35552a6bc444666f0e3,0,83,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
7dcaa342a190b35552a6bc444666f0e3,1,67,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
7e334b9a448147aafe67b16bbcd3c201,2,11,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
7eed0566cfb5154d44933f6d6b359bbc,0,21,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8076a877c45379e03598cc67baa715f1,0,8,24,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8076a877c45379e03598cc67baa715f1,1,11,24,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8076a877c45379e03598cc67baa715f1,2,12,24,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8076a877c45379e03598cc67baa715f1,3,13,24,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8136fda6374b8b7211623a16dabf0ac4,0,63,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
84c8dbf33ace65b81b2a95aea9e04ff4,0,26,13,files.java.rules.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature ""http://apache.org/xml/features/disallow-doctype-decl"" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features ""http://xml.org/sax/features/external-general-entities"" and ""http://xml.org/sax/features/external-parameter-entities"" to false."
8507efebe521d065da6ccf4132c632db,0,12,37,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
8507efebe521d065da6ccf4132c632db,0,14,17,files.java.rules.lang.security.audit.crypto.ssl.insecure-trust-manager,"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information."
87845fe3501922f0d23e48932fe54e52,0,8,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
87845fe3501922f0d23e48932fe54e52,1,7,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
87845fe3501922f0d23e48932fe54e52,2,9,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
893abf31777738410a6f9f4ef3445aa1,4,17,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
898a914a7ab92fb28d46216ca359a861,1,35,17,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
898a914a7ab92fb28d46216ca359a861,1,41,17,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
898a914a7ab92fb28d46216ca359a861,1,62,39,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
898a914a7ab92fb28d46216ca359a861,1,96,35,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
898a914a7ab92fb28d46216ca359a861,1,108,21,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
8bd252a6686e70907a52d46ae9a54fa9,0,44,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8d8750ee30bea85a7bf976aa8c900fb0,0,12,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8d8750ee30bea85a7bf976aa8c900fb0,0,44,21,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
9042a9055ebe4eb4f2aecbcdfa569777,0,39,9,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
908efbc83f60e0b3798e4ab8fb75cc3a,0,12,25,files.java.rules.lang.security.audit.crypto.use-of-default-aes,"Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(""AES/CBC/PKCS7PADDING""). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
908efbc83f60e0b3798e4ab8fb75cc3a,0,20,25,files.java.rules.lang.security.audit.crypto.use-of-default-aes,"Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(""AES/CBC/PKCS7PADDING""). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
941707f9921aa9ff949f0d720b58c33f,0,13,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
941707f9921aa9ff949f0d720b58c33f,1,12,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
95b23e396cd0951cd3bc73605befad5c,6,11,34,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
95b23e396cd0951cd3bc73605befad5c,9,15,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
97b66cb863cda194dca0d4fd436d683d,4,24,33,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
99ad7378ec4267576aa2592938a01760,0,137,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
99ad7378ec4267576aa2592938a01760,0,139,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
99ad7378ec4267576aa2592938a01760,0,269,17,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
9d89f6a66c2a3c66961d2463a804e639,3,96,46,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
9d89f6a66c2a3c66961d2463a804e639,8,117,46,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
a26ba3518c4ed960b4ab9200ad0478d2,1,18,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a26ba3518c4ed960b4ab9200ad0478d2,3,8,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a26ba3518c4ed960b4ab9200ad0478d2,4,24,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a26ba3518c4ed960b4ab9200ad0478d2,5,10,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a26ba3518c4ed960b4ab9200ad0478d2,6,20,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a338831467c3b2bfa5d0f0c404f25625,0,16,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a338831467c3b2bfa5d0f0c404f25625,0,44,33,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
a338831467c3b2bfa5d0f0c404f25625,0,50,42,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
a338831467c3b2bfa5d0f0c404f25625,0,53,42,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
a338831467c3b2bfa5d0f0c404f25625,0,56,42,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
a97d42b64be9a5fc3e9ed0cfb0624bca,0,30,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
aa29876ac06b2ddbd22210da34e3936c,0,6,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
aa29876ac06b2ddbd22210da34e3936c,0,9,58,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
ac08316b54e604412d56ddaf99cceba3,0,15,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
ac08316b54e604412d56ddaf99cceba3,1,52,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b00c1def6965e3da23eb712b47e9c6af,2,12,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b08597dca0d4e965e1c98a73b519e5bd,0,8,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b08597dca0d4e965e1c98a73b519e5bd,2,10,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b09916f177a4de2c32a0c2b2a5f24294,0,21,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b11f8c7364bc74409d74ebe232d6f0a7,0,13,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b1db43786526b92ad04eca238020f8ef,4,16,9,files.java.rules.lang.security.use-snakeyaml-constructor,"Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments, which is vulnerable to deserialization attacks. Use the one-argument Yaml(...) constructor instead, with SafeConstructor or a custom Constructor as the argument."
b1db43786526b92ad04eca238020f8ef,6,14,9,files.java.rules.lang.security.use-snakeyaml-constructor,"Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments, which is vulnerable to deserialization attacks. Use the one-argument Yaml(...) constructor instead, with SafeConstructor or a custom Constructor as the argument."
b1db43786526b92ad04eca238020f8ef,8,14,9,files.java.rules.lang.security.use-snakeyaml-constructor,"Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments, which is vulnerable to deserialization attacks. Use the one-argument Yaml(...) constructor instead, with SafeConstructor or a custom Constructor as the argument."
b2a3a8b5f91441afd03df1910a853550,1,43,8,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b2a3a8b5f91441afd03df1910a853550,2,117,8,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b3a866b6f359d675053b9d75f5aeadea,0,15,62,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
b3a866b6f359d675053b9d75f5aeadea,1,16,62,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
b4795a02dec5a1d1a7f49d5c2bad907a,0,11,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,0,40,25,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b4795a02dec5a1d1a7f49d5c2bad907a,1,9,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,1,34,21,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b4795a02dec5a1d1a7f49d5c2bad907a,10,7,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,11,7,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,12,7,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,13,11,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,13,41,25,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b4795a02dec5a1d1a7f49d5c2bad907a,14,9,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,14,38,21,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b4795a02dec5a1d1a7f49d5c2bad907a,8,11,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,8,41,25,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b4795a02dec5a1d1a7f49d5c2bad907a,9,7,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b48a17e4fa598d17c846bb5b4ac9badc,0,8,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b7392d11fd4fb15e24e085a10c7757f4,3,8,58,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
b7574f32bdf05e84d47b7e437f7cb933,0,33,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b7574f32bdf05e84d47b7e437f7cb933,1,15,18,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
ba48cc1d28e938e7be7418ee862326ff,1,25,41,files.java.rules.lang.security.audit.command-injection-process-builder,A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
bbbdb68fd62ecd14d556368b593f22c0,6,65,9,files.java.rules.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated,"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead."
c4ba71c9eb5d239be5dd5dae99c340af,1,14,33,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
c79bffd3b0b5a2cebdab9004e573c5ce,0,9,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
c79bffd3b0b5a2cebdab9004e573c5ce,1,8,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
c7acdfd10c2290a9ada3f50e1a6c642c,2,31,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
c8658bb4d6d5ff797784acb4436c0e24,1,23,26,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
c8658bb4d6d5ff797784acb4436c0e24,1,61,34,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
c8658bb4d6d5ff797784acb4436c0e24,1,67,34,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
c8cafabd7ac95c79baff84669d3a0f79,0,9,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
c8e03d074de50b384dc8ed91a91adecb,14,46,28,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
caa2bcabe57588fd16261169149f8087,1,31,17,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
d24ac928749b633363fb7600af76ad84,2,8,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
d29d773758e5d36b03e5dbcf99de62b1,0,11,23,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
dddf90a36eee535201e2b45fc0172159,0,25,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
df499cc10053b58c551a253830a09db1,5,14,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e31f90d60bd757b99eb634081f88fe15,1,17,29,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
e43d382d17d5a0bff9c6d7a65a91109c,0,14,31,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
e43d382d17d5a0bff9c6d7a65a91109c,1,16,31,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
e5af6348942c98b39acd05f6ce0b6dc3,0,18,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e5af6348942c98b39acd05f6ce0b6dc3,0,30,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e5af6348942c98b39acd05f6ce0b6dc3,1,16,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e64093cbb0d0d6d6df51d2d4c9696f14,3,58,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e64093cbb0d0d6d6df51d2d4c9696f14,4,49,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e72c53e0a097e887f931e0ad961cc3c0,1,25,13,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
e72c53e0a097e887f931e0ad961cc3c0,3,37,13,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
e7bf3e2f2827905118e7e85c90cf1316,1,21,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e7bf3e2f2827905118e7e85c90cf1316,3,21,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
eb1fbe19065814c8f4da8857c7751d1d,10,10,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
eba0dbd1c2006936205bd3269636fd4f,1,8,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
eba0dbd1c2006936205bd3269636fd4f,2,8,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f1956b0fae9d0875ac26146a513c9f7b,1,9,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f1956b0fae9d0875ac26146a513c9f7b,2,10,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f2fe009c4134926a654d455645a00dda,1,16,13,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
f3f47eb35ecbfdf1a6de0db230e37585,2,100,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f3f47eb35ecbfdf1a6de0db230e37585,4,13,14,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
f3f47eb35ecbfdf1a6de0db230e37585,6,18,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f3f47eb35ecbfdf1a6de0db230e37585,7,23,14,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
f47c058f6a49ba493643d81b94011f4f,0,20,9,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
f47c058f6a49ba493643d81b94011f4f,1,19,9,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
f5f8c0d1e131d173ce366c8eb90cb931,0,144,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f5f8c0d1e131d173ce366c8eb90cb931,1,92,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f72f6f77ef3f47d74ab941f13618be74,0,74,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f81c291e5708d17a4ec5f2a33ed00274,0,8,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f81c291e5708d17a4ec5f2a33ed00274,2,11,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f81c291e5708d17a4ec5f2a33ed00274,2,14,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
f82cb1f0394bfab2864cb4ef02d6f9e7,8,30,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f82cb1f0394bfab2864cb4ef02d6f9e7,8,31,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
fa8c08d158cdd7113d89a60f87302a32,1,43,30,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
fa8c08d158cdd7113d89a60f87302a32,2,44,30,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
fda7762e2fc2c39c4dad909bdb22dc09,8,47,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
fe73289ea2b9c405e2d8e81e4e900b30,1,57,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
fe73289ea2b9c405e2d8e81e4e900b30,1,58,53,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
fece5f00a65888573e26b6afa18ceabf,2,54,41,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
