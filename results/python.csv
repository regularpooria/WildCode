conversation_hash,code_index,error_line,error_character,error_id,error_message
000016088f8432f403c3e46049c4e892,0,4,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
000016088f8432f403c3e46049c4e892,0,7,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
0050802a1c66cf6ed3b8749c28d9f5ed,3,13,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0050802a1c66cf6ed3b8749c28d9f5ed,3,26,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
00656ecf0343ee679515693d81eabeeb,1,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
007275f88060ad984743c14e09cf0254,1,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0087b3f4a1f3f3db7bc053b4158e27d4,8,53,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0098bb9111bdc2fe5e51e15e8f322c0f,2,5,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
0098bb9111bdc2fe5e51e15e8f322c0f,3,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
0098bb9111bdc2fe5e51e15e8f322c0f,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
0098bb9111bdc2fe5e51e15e8f322c0f,5,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
0098bb9111bdc2fe5e51e15e8f322c0f,6,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
00e03621fed8c06ec055ef48b7bbff16,1,22,20,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
011bb676fcb7a4773996c1944bd9798b,0,10,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
015b4d60a08ce481dbda0b0b0bd1411f,4,77,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
015c16125832426c37211215f75c90ce,0,4,6,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
015e24530c08b0f109f17b1880cbab85,1,12,19,files.python.rules.fastapi.security.wildcard-cors,CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.
015e24530c08b0f109f17b1880cbab85,13,18,19,files.python.rules.fastapi.security.wildcard-cors,CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.
01af3607475bceb735c6209d3ec65c82,4,17,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
01b87738d9934ee1dd1eb1d26ce457cf,0,82,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
01b87738d9934ee1dd1eb1d26ce457cf,2,85,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
01b87738d9934ee1dd1eb1d26ce457cf,4,50,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
01b87738d9934ee1dd1eb1d26ce457cf,5,22,52,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
01d5fe91c759ad79a0903f576c80d845,0,75,34,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
01d5fe91c759ad79a0903f576c80d845,0,84,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
03f1d75fc1c3b18e809d5f19b3eda9c8,1,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
03f1e1432504dc45181756fd8594ef85,2,12,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
04131176925001ad2a2e8ec51afb8088,0,12,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0421b13aef5e88059bebc4d1b69209e2,0,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0439d40e18dc72b981c78485c0592136,4,16,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
04466523f056ba9a5936ef81f28f4052,3,17,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0491d0e60a628a5a2bb902eb012f8572,1,3,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0491d0e60a628a5a2bb902eb012f8572,5,3,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
05041e01b9450df796614f66dfcea4e4,1,18,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
05041e01b9450df796614f66dfcea4e4,2,14,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
050da46038e6350c4ba5296eb731435c,2,7,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
052d2c21b8d8e74402aefc29ce1d87c8,3,10,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0531922e446a1e816a50673680b8a3ac,0,23,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
0552126e672f89e7486f994784a4a916,3,6,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
055f707103d48010d0f500ed60c54a34,1,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
058f33787f8ac4b9cfabcb0e316c4eae,0,17,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
05a0e3829b71e9b037146193e803cdbf,1,30,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
05b85e3360a8b8cb70198d596a38ab62,0,15,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
05b85e3360a8b8cb70198d596a38ab62,0,27,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
05b85e3360a8b8cb70198d596a38ab62,1,19,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
05b85e3360a8b8cb70198d596a38ab62,1,32,41,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
05caef54c55560ac37db00915f998135,25,3,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
05caef54c55560ac37db00915f998135,26,14,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
05caef54c55560ac37db00915f998135,30,75,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
05ff37d84ff28f13b44fe16496d6b1d7,1,81,19,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
067e77740ae7e1a1be1285d7b7e5e82b,0,7,35,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0696a7cff1b31822142d46d96b438eab,6,9,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0696a7cff1b31822142d46d96b438eab,6,24,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
06a268595de6326844568ec217288c8d,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
06a268595de6326844568ec217288c8d,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
06cced611e2f9c58d6243bbcb6871efd,10,7,10,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
06cced611e2f9c58d6243bbcb6871efd,12,7,10,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
071e87589bb1fe6c555cced1fda58df7,2,19,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,2,25,52,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,3,21,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,3,36,56,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,4,20,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,4,40,52,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,8,11,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
071e87589bb1fe6c555cced1fda58df7,8,11,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
0727b059a643482d607b881c05cb5e3f,2,19,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0727b059a643482d607b881c05cb5e3f,4,18,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0727b059a643482d607b881c05cb5e3f,6,22,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
072cab40ff97780c0216dffddf5d53df,0,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0769d62db34cc1ed2933b95fc5f3096f,1,22,19,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0769d62db34cc1ed2933b95fc5f3096f,1,22,124,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
0797c74dbcfd330a70e01d3c4fe598d1,27,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0797c74dbcfd330a70e01d3c4fe598d1,30,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0797c74dbcfd330a70e01d3c4fe598d1,32,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0797c74dbcfd330a70e01d3c4fe598d1,33,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0797c74dbcfd330a70e01d3c4fe598d1,34,44,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
07a7a0cbdc11981c216d5ac94f0164c5,0,8,21,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
07a7a0cbdc11981c216d5ac94f0164c5,0,18,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
07a7a0cbdc11981c216d5ac94f0164c5,0,18,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
07a7a0cbdc11981c216d5ac94f0164c5,1,9,21,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
07a7a0cbdc11981c216d5ac94f0164c5,1,24,19,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
07a946e8c30c9653406178ef325ea578,0,13,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
07a946e8c30c9653406178ef325ea578,1,14,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
07a946e8c30c9653406178ef325ea578,1,18,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
07ec9514baa959d7cdc273552e787175,1,15,13,files.python.rules.flask.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
07ec9514baa959d7cdc273552e787175,1,16,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
07ec9514baa959d7cdc273552e787175,1,16,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
07ec9514baa959d7cdc273552e787175,1,46,13,files.python.rules.django.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries."
07ec9514baa959d7cdc273552e787175,1,46,13,files.python.rules.flask.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
07ec9514baa959d7cdc273552e787175,1,51,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
07ec9514baa959d7cdc273552e787175,1,51,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
07f2e5fdcaff4d9018597aee6c217079,0,72,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
07f2e5fdcaff4d9018597aee6c217079,10,42,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
07f2e5fdcaff4d9018597aee6c217079,13,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
07f2e5fdcaff4d9018597aee6c217079,19,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
07f2e5fdcaff4d9018597aee6c217079,20,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
07f2e5fdcaff4d9018597aee6c217079,3,21,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
07f2e5fdcaff4d9018597aee6c217079,6,28,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
082f1a74a615195ac692bf7d13905cf4,0,14,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
086c78e7913bdec188f7aa3c0956718e,19,5,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
08a8f727899587684ec52dd46c7887c8,11,2,14,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
08a8f727899587684ec52dd46c7887c8,15,7,5,files.python.rules.flask.security.response-contains-unsanitized-input,"Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/)."
08a8f727899587684ec52dd46c7887c8,15,8,16,files.python.rules.flask.security.audit.xss.make-response-with-unknown-content,"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`."
08b441c163dcf5eb48a4415e716d8a62,11,12,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
08b441c163dcf5eb48a4415e716d8a62,5,11,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
08b441c163dcf5eb48a4415e716d8a62,9,10,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
08c5f4691db506e113100118d948cb2c,12,50,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
08c5f4691db506e113100118d948cb2c,13,52,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
08c5f4691db506e113100118d948cb2c,15,9,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
08c5f4691db506e113100118d948cb2c,15,29,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
08c5f4691db506e113100118d948cb2c,17,9,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
08c5f4691db506e113100118d948cb2c,17,30,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
08c5f4691db506e113100118d948cb2c,18,10,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
08c5f4691db506e113100118d948cb2c,18,36,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
08c5f4691db506e113100118d948cb2c,5,46,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
08c5f4691db506e113100118d948cb2c,6,49,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
08c5f4691db506e113100118d948cb2c,8,9,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
08c5f4691db506e113100118d948cb2c,8,32,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
08ec99bc070d103265dfab051810f3ba,0,29,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
08ec99bc070d103265dfab051810f3ba,0,72,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
08ec99bc070d103265dfab051810f3ba,0,93,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
08f91b4c5ad2a1a0e278a9e289d3015f,0,43,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
08f91b4c5ad2a1a0e278a9e289d3015f,1,43,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
09022c8f72a3c80e120fb5c5a2f98818,1,34,15,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
095b3dbd5ce242cb4f7874b1a0e05b81,17,4,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
096a8da28067d6342bf61bfdc648b7f5,1,30,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
09960a27488c0fd67051891f0384cf62,0,21,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
0a1e391f1946e7bdea6114f783ff7b04,0,4,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0a1e391f1946e7bdea6114f783ff7b04,0,4,41,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
0a52bae9ccd848f7cf434c29404f3880,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0a8e17fe9eb5de8d43305878418f5df1,3,7,28,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0ae964b029c318c6fc5f5fbf1c63d0d4,1,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0ae964b029c318c6fc5f5fbf1c63d0d4,4,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0aeeadcfac65fc923f3a52ec3ff8617a,11,18,12,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
0aeeadcfac65fc923f3a52ec3ff8617a,7,18,12,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
0b15d5dbd9691ad00ad7969d1b99423d,10,35,16,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0b15d5dbd9691ad00ad7969d1b99423d,15,7,16,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0b242222bc5375b8cacdf419f90b9c8c,0,35,13,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
0b242222bc5375b8cacdf419f90b9c8c,0,42,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
0b798c9c171b72164d39f21a8035c258,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
0b798c9c171b72164d39f21a8035c258,0,29,32,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
0bdef87ed822e04345d800dbbb1228db,13,15,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0c1b4a1af42f87b56fe123df9c60bed0,1,31,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
0c1b4a1af42f87b56fe123df9c60bed0,1,31,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
0c1ec84a322ea00fb2d2bb070fb01699,0,31,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0c1ec84a322ea00fb2d2bb070fb01699,0,31,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
0c211f9991df4cc34cd7c8d90d050ec0,0,7,20,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
0c4b341225386f9dabfc6ce8a9a5d126,0,8,11,files.python.rules.flask.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead."
0c4b341225386f9dabfc6ce8a9a5d126,0,9,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
0c4b341225386f9dabfc6ce8a9a5d126,0,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0c89baa25b543203e70f83b0a5bc498f,5,97,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0cb78168c15480ef5bafb4e92e3f603d,0,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0d12bd7dab8c4816199043ea2c0e945b,0,9,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
0d12bd7dab8c4816199043ea2c0e945b,0,13,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
0d3d4762e3f0a9194a32b2fd28ab8205,5,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0d43bd1f9584f9c433a9a9d3fc21731f,2,24,17,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0d76dec372861be7f0bbebfa8405d9bc,2,27,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0d93fe532a9929c00c7595e8d5adbfbd,4,13,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0da05729e4476734b96b2decb86b2005,11,59,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0e1aff7f68992a88b37a51893f470f69,0,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0e51207fcd17de037a2e46054be89f72,4,20,15,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
0e51207fcd17de037a2e46054be89f72,4,29,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
0e51207fcd17de037a2e46054be89f72,4,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0e566809391715c8f9737fcf62ccfb87,1,25,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,10,17,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,2,25,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,3,27,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,4,33,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,5,28,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,6,26,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,7,41,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,8,41,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0ef0aba1f997623e37c5e7315e5798d5,15,77,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0f017f8f97648b1c844461868405ddee,22,17,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
0f017f8f97648b1c844461868405ddee,22,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0f02b3f505bb9faa6f39fea93df6d22a,1,38,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0f2aee9f1a95e1d6618f3249070da5d1,0,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0f4ca00dfd960951f744c80b03ecb662,0,8,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
0f7303a6e3a27c07c7018379fbf18bbd,3,6,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
0f7303a6e3a27c07c7018379fbf18bbd,4,13,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
0fa19bbe87cdb0ced6ff4902482b338b,1,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0fd6c29f554ffff422575c8d376c72db,0,35,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0fd6c29f554ffff422575c8d376c72db,10,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0fe222cef756241a8bd2bcb115b5cc4f,0,12,8,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
100de9f0635feadf6b5366344a41460d,3,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
100de9f0635feadf6b5366344a41460d,6,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
10735e93a339e05b57ec4ba2015da22d,1,35,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
10821b2b6696e135d53919f5fa3ad4a1,0,5,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
10c0b97c8174a43322581b9540331b0a,2,21,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
1156e003cbee673da08c5a3cb021f98d,0,47,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
11a1d1819016dbdec9cd11320c23fcc5,0,5,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,0,5,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,0,8,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,0,8,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,10,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,10,6,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,10,11,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,10,11,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,2,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
11a1d1819016dbdec9cd11320c23fcc5,2,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,2,6,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,2,10,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,2,10,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,4,5,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,4,5,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,4,8,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,4,8,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,6,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
11a1d1819016dbdec9cd11320c23fcc5,6,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,6,6,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,6,10,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,6,10,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11bebf6aac186731ad0507d52062c347,0,12,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
11c140f6801e33e70b77f04a15e469af,16,12,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1213a3ab45dacad93c4b6ae024a303a5,0,11,1,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
1213a3ab45dacad93c4b6ae024a303a5,0,30,12,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
1213a3ab45dacad93c4b6ae024a303a5,0,30,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
12150905ba0b61c5a539e50a4b5cbde0,0,11,23,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
12164b2389a8732b0bdeb7108b1cc15a,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
12164b2389a8732b0bdeb7108b1cc15a,1,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
12164b2389a8732b0bdeb7108b1cc15a,11,18,24,files.python.rules.django.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead."
12164b2389a8732b0bdeb7108b1cc15a,11,18,24,files.python.rules.flask.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead."
12164b2389a8732b0bdeb7108b1cc15a,11,34,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
12164b2389a8732b0bdeb7108b1cc15a,4,48,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
12164b2389a8732b0bdeb7108b1cc15a,7,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1218c2a6df88565f9b6e306c63a9edbc,1,25,89,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
1218c2a6df88565f9b6e306c63a9edbc,1,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1232fe40ef898071cfae2bd6ecc11a82,5,8,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
1232fe40ef898071cfae2bd6ecc11a82,8,6,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
12902020da0187ce2a106f076ceee8d8,1,31,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
12902020da0187ce2a106f076ceee8d8,3,37,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1291192be08f9f4ca82facf564ffd02a,8,5,4,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
12d102c685d00274321a4e6ea9f2da66,2,22,7,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
12d102c685d00274321a4e6ea9f2da66,5,23,9,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
12d102c685d00274321a4e6ea9f2da66,8,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
12d102c685d00274321a4e6ea9f2da66,8,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
12d614082b8c3609042c409730e97a6d,0,14,31,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
12d614082b8c3609042c409730e97a6d,1,12,15,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
12e8be0f2b5385bcea4d2d9ef222c4f3,0,10,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
131501cefc97ba18ff380d0021869026,1,13,22,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
138dd75d7f1ed9703624b41e3cfd70d3,0,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,1,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,2,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,3,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,4,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,5,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,6,5,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
13c22a6d7e27cc9d86235b51e9200b2c,11,58,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
13c22a6d7e27cc9d86235b51e9200b2c,15,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
13c22a6d7e27cc9d86235b51e9200b2c,20,78,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
13c67f4d21bfb6a9a4858c78ca81962b,3,13,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
140bbdce5017e00fb266813748eb3c89,6,5,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
140bbdce5017e00fb266813748eb3c89,7,5,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
140fd6c30bb9391e7985905fb09d4111,6,30,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
140fd6c30bb9391e7985905fb09d4111,6,30,110,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
140fd6c30bb9391e7985905fb09d4111,6,46,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
140fd6c30bb9391e7985905fb09d4111,6,46,33,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
1445f776b3ae46390d93e99c0cb9225a,1,25,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
1445f776b3ae46390d93e99c0cb9225a,1,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
144f8415e7532d4c8b41b4a5df062790,10,1,36,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
144f8415e7532d4c8b41b4a5df062790,3,1,41,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
144f8415e7532d4c8b41b4a5df062790,3,1,146,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
147426f8c8688df8c5ead510bed1bbbe,2,13,5,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
1486873c00ebf5938f81ec270e260240,2,33,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
1486873c00ebf5938f81ec270e260240,2,33,5,files.python.rules.lang.security.audit.sqli.psycopg-sqli,"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"
1486873c00ebf5938f81ec270e260240,2,33,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
1495c7b2ad9bb67b0c553733ef315bc0,21,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1495c7b2ad9bb67b0c553733ef315bc0,21,51,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
151e1e1f8de955ebd247b62bfcc39d1c,1,20,5,files.python.rules.lang.security.audit.hardcoded-password-default-argument,Hardcoded password is used as a default argument to '__init__'. This could be dangerous if a real password is not supplied.
1598d2c1a790ce9797b0a2b3e45068e6,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1598d2c1a790ce9797b0a2b3e45068e6,0,36,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
1598d2c1a790ce9797b0a2b3e45068e6,13,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1598d2c1a790ce9797b0a2b3e45068e6,13,44,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
1598d2c1a790ce9797b0a2b3e45068e6,14,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1598d2c1a790ce9797b0a2b3e45068e6,14,46,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
1598d2c1a790ce9797b0a2b3e45068e6,14,99,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
1598d2c1a790ce9797b0a2b3e45068e6,2,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1598d2c1a790ce9797b0a2b3e45068e6,2,28,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
1598d2c1a790ce9797b0a2b3e45068e6,2,70,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
1598d2c1a790ce9797b0a2b3e45068e6,2,70,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
1598d2c1a790ce9797b0a2b3e45068e6,2,78,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
1598d2c1a790ce9797b0a2b3e45068e6,22,11,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
1598d2c1a790ce9797b0a2b3e45068e6,22,21,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
1598d2c1a790ce9797b0a2b3e45068e6,23,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1598d2c1a790ce9797b0a2b3e45068e6,24,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1598d2c1a790ce9797b0a2b3e45068e6,24,38,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
1598d2c1a790ce9797b0a2b3e45068e6,24,87,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
1598d2c1a790ce9797b0a2b3e45068e6,8,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1598d2c1a790ce9797b0a2b3e45068e6,8,13,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
1598d2c1a790ce9797b0a2b3e45068e6,8,19,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
1598d2c1a790ce9797b0a2b3e45068e6,8,29,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
1598d2c1a790ce9797b0a2b3e45068e6,8,44,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
159b8a4837d08c112df898049e2f80c7,1,38,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
15b04fd5b857122360dd87db08f66da1,8,23,14,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
15c0ea647abe941bd7ce97061f41d890,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
15f5b0a74a11bdb3378ae5cc6cf35063,1,67,17,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
15fed3e125d53fb63e0517b5274de6e3,0,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
160cb740c935ae985290da401686c6d4,11,30,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
160cb740c935ae985290da401686c6d4,5,26,9,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1617cb4dead6cfe676a7ddb7bada7a92,1,18,13,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
1617cb4dead6cfe676a7ddb7bada7a92,1,46,49,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
1617cb4dead6cfe676a7ddb7bada7a92,1,47,13,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
1617cb4dead6cfe676a7ddb7bada7a92,1,64,52,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
1617cb4dead6cfe676a7ddb7bada7a92,1,65,53,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
1617cb4dead6cfe676a7ddb7bada7a92,1,66,21,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
1675a21beaeef040ebf53bc627666f07,0,11,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
170258db9c53f43741863909a9111472,2,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
171480342ad539977043feccee0cc2ce,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
17681277cdffff1f2b16f6d82b5ed64f,6,17,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
1779bafa9a5b5e041eba6b0ab247fb73,0,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1808a488c4e4341a0e2617b3259062a2,0,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,11,9,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,12,9,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,2,8,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,3,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,4,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,5,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,6,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,7,3,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
181148e90f04e0ba023fe6c5357a040a,1,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
183c8dd99b6c14145aa0bb85b7e41fe9,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,11,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,12,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,13,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,8,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1863d24bd7ce368e769e12db556ffdc7,1,22,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
18d5cf38e0af842573102afc7078964d,0,14,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
18d5cf38e0af842573102afc7078964d,0,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
18d6c09042d89db27a4f3066bd15c63f,0,10,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
18d6c09042d89db27a4f3066bd15c63f,0,12,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
18d6c09042d89db27a4f3066bd15c63f,0,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
18d6c09042d89db27a4f3066bd15c63f,1,9,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
18d6c09042d89db27a4f3066bd15c63f,1,25,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
18d6c09042d89db27a4f3066bd15c63f,1,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
18d805a9e98f470e46a347cb108fef21,1,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1911de496c77890ce84e9d4390032a8e,0,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1911de496c77890ce84e9d4390032a8e,1,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1911de496c77890ce84e9d4390032a8e,2,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
194b9ec0cf30141ebe639949c767c214,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
197e0ed36ead63a5e842a1ca211666d3,0,4,11,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
197e0ed36ead63a5e842a1ca211666d3,1,4,11,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
198a0923db21dc6579e535ac805ce05b,1,5,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
19b1d134c9faebca4597c4ca814465dd,0,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
19ba1d05a332c28eddf8cfe62e24eb4d,0,21,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1a24482515ea0a61b62f4293de5801b1,0,92,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
1a24482515ea0a61b62f4293de5801b1,1,89,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
1a33dae06312cbcf66d7e5f4bea8df60,12,13,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
1a33dae06312cbcf66d7e5f4bea8df60,12,15,21,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
1a58493d1f97f0be3322cf63d4d27806,1,10,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1a58493d1f97f0be3322cf63d4d27806,1,31,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1a58493d1f97f0be3322cf63d4d27806,2,40,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1a58493d1f97f0be3322cf63d4d27806,4,27,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1ab364935c1553061fa1808390a9f405,1,4,12,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
1ad19033b3a04ce2cba397f432dab5f6,0,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1ad811c692d74dc7acf55f7fa70b5390,3,8,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1adc8a97beab48b3cee08eb0c4e4d8cf,0,10,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
1b381132a49cc8374edf41d395596f69,22,16,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1b4b6ff52af0630d77f37ba738b7de17,0,17,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1b78ba0657f6b2d4597af69487fcbf90,0,12,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
1b7ef6074a3a09e9052b036886d5b4e4,10,2,46,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
1b7ef6074a3a09e9052b036886d5b4e4,12,2,46,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
1b7ef6074a3a09e9052b036886d5b4e4,15,3,46,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
1b7ef6074a3a09e9052b036886d5b4e4,3,3,12,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
1b7ef6074a3a09e9052b036886d5b4e4,6,2,47,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
1b81a18da77db5e55947f180f97f7ff0,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1b81a18da77db5e55947f180f97f7ff0,5,82,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1bcb4836ea83ff3eb8332764a6ece201,1,13,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1bcb4836ea83ff3eb8332764a6ece201,2,19,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1bcb4836ea83ff3eb8332764a6ece201,3,23,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1bcb4836ea83ff3eb8332764a6ece201,4,27,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1bcb4836ea83ff3eb8332764a6ece201,5,27,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1c784c5e052fcaa632d4d796924e26d0,3,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
1c784c5e052fcaa632d4d796924e26d0,3,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1ca5f5661979d34b28bedda6346cac1e,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1cd766558976e7c92dca3fbe520f004f,0,46,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1ce623e85ed477cfb8b04dc2fe51ee9a,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1ce623e85ed477cfb8b04dc2fe51ee9a,6,21,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1cfee6818606d41b2402f40d538c8a15,0,20,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
1cfee6818606d41b2402f40d538c8a15,0,20,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
1d1a30830ae38f9aa50dccccea2c6d4c,3,43,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1e3347caa1e704df86ded5eb0e8618a1,32,22,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1e3347caa1e704df86ded5eb0e8618a1,39,24,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1e3347caa1e704df86ded5eb0e8618a1,50,12,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1e420c5070f682b6fae223c439e1560e,1,96,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1e420c5070f682b6fae223c439e1560e,4,89,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1e420c5070f682b6fae223c439e1560e,4,114,17,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1e5113aebac9a4151719d144122e322a,0,11,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1e6dd22af0024655c902c0683875e36d,1,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1e6dd22af0024655c902c0683875e36d,1,13,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1ea5a67122e1b181a0e91131c243a22d,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1eac6108f43e0d4d0bff41fd94c2c716,0,32,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
1ead2230663989d779ceacb34f635e68,3,23,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1ead2230663989d779ceacb34f635e68,4,23,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1eb8239d09546c81ce131c4e4218712e,0,12,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1eb8239d09546c81ce131c4e4218712e,0,12,37,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
1eb8239d09546c81ce131c4e4218712e,1,16,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1eb8239d09546c81ce131c4e4218712e,1,16,41,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
1eb8239d09546c81ce131c4e4218712e,2,15,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1eb8239d09546c81ce131c4e4218712e,2,15,40,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
1eff67239e54262969d9b43614fc8c9c,0,6,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1eff67239e54262969d9b43614fc8c9c,0,29,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
1eff67239e54262969d9b43614fc8c9c,1,6,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1eff67239e54262969d9b43614fc8c9c,1,34,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
1f141247c9e645f48ee0dde3405e39c3,6,9,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
1f68d03defa261c18bff815ec0a13069,0,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1f68d03defa261c18bff815ec0a13069,1,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1f68d03defa261c18bff815ec0a13069,2,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1f93c8e89982636df0b4d0a911b23009,4,19,12,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1f93c8e89982636df0b4d0a911b23009,5,20,12,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1fb3ed24aa3eb27439010c55b46fb1e7,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1fdb33a634c4fc51c69162f132a8568c,0,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1fdb33a634c4fc51c69162f132a8568c,2,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
1fdb33a634c4fc51c69162f132a8568c,2,30,59,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
1fed398aafa7f80f97e717be59550d7e,3,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1fed398aafa7f80f97e717be59550d7e,4,19,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1fed398aafa7f80f97e717be59550d7e,5,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
203800e0de7011d50c92e4d291496825,0,14,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
204e44d7c683f4b79bca661f0d98316e,0,14,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
204e44d7c683f4b79bca661f0d98316e,1,14,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
20c2407e94f3fc0408321444bc225890,0,26,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
20da8d26f10b2ff3b28377cb657d7ec4,30,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
21451e876722a315c30ef4da9f74071d,0,14,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
21451e876722a315c30ef4da9f74071d,0,14,79,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
21451e876722a315c30ef4da9f74071d,1,4,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
21451e876722a315c30ef4da9f74071d,1,4,79,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
21451e876722a315c30ef4da9f74071d,2,13,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
21451e876722a315c30ef4da9f74071d,2,13,95,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
21451e876722a315c30ef4da9f74071d,3,13,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
21451e876722a315c30ef4da9f74071d,3,13,95,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
21451e876722a315c30ef4da9f74071d,4,13,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
21451e876722a315c30ef4da9f74071d,4,13,95,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2161534409b8112213697f1519563897,10,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2169d194ef4d3bc0eeb83da6ca380dcf,10,41,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2169d194ef4d3bc0eeb83da6ca380dcf,10,80,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2169d194ef4d3bc0eeb83da6ca380dcf,11,69,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2169d194ef4d3bc0eeb83da6ca380dcf,11,111,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2169d194ef4d3bc0eeb83da6ca380dcf,13,68,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2169d194ef4d3bc0eeb83da6ca380dcf,13,108,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2169d194ef4d3bc0eeb83da6ca380dcf,14,20,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2169d194ef4d3bc0eeb83da6ca380dcf,6,29,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2169d194ef4d3bc0eeb83da6ca380dcf,9,20,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
216b1e9795d720d93e077b599af404e4,20,40,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
217a24ee845d0c8be48ddc8d7dc34d6b,28,7,1,files.python.rules.lang.security.audit.regex_dos,"Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2."
2181473d756735614667095650792403,1,20,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2181473d756735614667095650792403,1,20,35,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2181473d756735614667095650792403,2,20,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2181473d756735614667095650792403,2,20,35,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2181473d756735614667095650792403,5,8,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2181473d756735614667095650792403,5,8,31,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2181473d756735614667095650792403,6,19,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2181473d756735614667095650792403,6,19,31,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
21819bb7fa0dbc0f7a5a115588e29587,0,22,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
21819bb7fa0dbc0f7a5a115588e29587,0,30,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
218217fd88745f76ad4ae9ad5123f6eb,0,75,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
218217fd88745f76ad4ae9ad5123f6eb,1,75,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2230747e98b527c027481bce2147f150,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
2234ae8e7c4666a04cc5b8297e56dcfd,0,24,28,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2234ae8e7c4666a04cc5b8297e56dcfd,0,35,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2234ae8e7c4666a04cc5b8297e56dcfd,1,15,28,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2234ae8e7c4666a04cc5b8297e56dcfd,1,19,17,files.python.rules.flask.security.injection.csv-writer-injection,"Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2234ae8e7c4666a04cc5b8297e56dcfd,1,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2234ae8e7c4666a04cc5b8297e56dcfd,2,15,28,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2234ae8e7c4666a04cc5b8297e56dcfd,2,19,17,files.python.rules.flask.security.injection.csv-writer-injection,"Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2234ae8e7c4666a04cc5b8297e56dcfd,2,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2234ae8e7c4666a04cc5b8297e56dcfd,4,11,31,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2234ae8e7c4666a04cc5b8297e56dcfd,5,14,28,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2234ae8e7c4666a04cc5b8297e56dcfd,5,20,17,files.python.rules.flask.security.injection.csv-writer-injection,"Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2234ae8e7c4666a04cc5b8297e56dcfd,5,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2234ae8e7c4666a04cc5b8297e56dcfd,6,24,28,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2234ae8e7c4666a04cc5b8297e56dcfd,6,35,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2234ae8e7c4666a04cc5b8297e56dcfd,7,24,28,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2234ae8e7c4666a04cc5b8297e56dcfd,7,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
22352a62a0c0a59c419336fc8e7fda51,2,22,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
226ace372ea506e678b19de825dc1d4f,0,46,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
22a69acc6a4e6791a0780286f6f32dec,3,40,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
22a69acc6a4e6791a0780286f6f32dec,3,40,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
22a69acc6a4e6791a0780286f6f32dec,3,43,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
22a69acc6a4e6791a0780286f6f32dec,3,43,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
22a69acc6a4e6791a0780286f6f32dec,3,72,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2342cd0fc0fa241b3057c8e41fb98a5a,0,22,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2342cd0fc0fa241b3057c8e41fb98a5a,1,29,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2369ff9a9fbaa703daef9d23a6802779,0,85,35,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
236ae535ce56e24bec3231370176460c,10,97,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
236ae535ce56e24bec3231370176460c,2,98,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
236ae535ce56e24bec3231370176460c,3,91,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
236ae535ce56e24bec3231370176460c,6,85,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
236ae535ce56e24bec3231370176460c,8,91,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
236b3a7e1b48a77e4d67ad46c7f532d4,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
237e2f94625ca03706299f93d1ff1166,0,30,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
237e2f94625ca03706299f93d1ff1166,1,30,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
237e2f94625ca03706299f93d1ff1166,2,27,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
237f36af4bb9de17cc59687c2da06c1f,0,36,11,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2383f820b484d0dcc2db4d2deec7238d,2,33,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
2383f820b484d0dcc2db4d2deec7238d,2,33,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
23ce8f6e2f48c1ea04758a3c8e1ec738,1,16,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
23df7f6cc674fffa8090ca40c13e8c35,1,17,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
23df7f6cc674fffa8090ca40c13e8c35,3,30,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
23df7f6cc674fffa8090ca40c13e8c35,4,31,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
23f3d6ed08f673de3d2f735c4b44f435,1,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
23f564c0cfc6e999731d9e344e7607c8,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
23f564c0cfc6e999731d9e344e7607c8,0,11,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
23fddc68f9b41ee4635001d5e3674a6e,1,5,25,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
23fddc68f9b41ee4635001d5e3674a6e,5,4,11,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
23fddc68f9b41ee4635001d5e3674a6e,5,4,11,files.python.rules.jinja2.security.audit.missing-autoescape-disabled,"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
23fddc68f9b41ee4635001d5e3674a6e,5,6,25,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
244ac7321a7638711b58c0f01e295fa8,0,49,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
24729ace563afb5b527083d6386735cc,0,2,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2496dddae46bbb2211fe73e24e61a6c5,2,21,18,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
2496dddae46bbb2211fe73e24e61a6c5,3,16,18,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
249d9d81149225865ae98f7e5098e5b1,14,18,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
249d9d81149225865ae98f7e5098e5b1,16,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
249d9d81149225865ae98f7e5098e5b1,2,21,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
249d9d81149225865ae98f7e5098e5b1,20,17,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
24bf2fcf0199383f3dd4f2b1107d7b01,0,12,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
24bf2fcf0199383f3dd4f2b1107d7b01,0,20,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
24bf2fcf0199383f3dd4f2b1107d7b01,0,28,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
24e0a1e174869a9c23d32e6eede7be2f,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
25061dce36d9e9e4f546c79293ce605e,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
25061dce36d9e9e4f546c79293ce605e,3,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
25061dce36d9e9e4f546c79293ce605e,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
252123cd10f54bbb9141b2edd13a9ef3,1,14,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
252123cd10f54bbb9141b2edd13a9ef3,2,16,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2530475b9d1c7b915f07e25650648661,3,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
2530475b9d1c7b915f07e25650648661,3,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2530475b9d1c7b915f07e25650648661,8,6,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
2530475b9d1c7b915f07e25650648661,8,60,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
25c48b488af13e746afde996fa8b6263,0,10,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
25c903c9e9c3e773007662d823a6c03e,0,56,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
25c903c9e9c3e773007662d823a6c03e,1,57,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
25f2dd141b4a52ea27e942f28d9f18ad,0,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2613f8943a4a2d90c2062fe696567ce4,1,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
2613f8943a4a2d90c2062fe696567ce4,1,9,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
2613f8943a4a2d90c2062fe696567ce4,2,12,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
2613f8943a4a2d90c2062fe696567ce4,2,15,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
2613f8943a4a2d90c2062fe696567ce4,3,19,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
2613f8943a4a2d90c2062fe696567ce4,3,23,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
263c5867a3fa6b9abe71e10034aabbad,6,25,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2646df483d8163e68c606f9511d96b9d,0,12,9,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
2646df483d8163e68c606f9511d96b9d,0,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
266a4862aa7ecaa966c0f2acb428de6c,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
269a1b0b28223c70bf25fff42e38ac8b,0,11,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
269e150391383aff92866eabb7c1bb59,2,7,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
269e150391383aff92866eabb7c1bb59,2,11,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
26c616ca4a69d73eb1f8dfdcdb329265,3,19,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
26d31a703c6b39fb7546501e1259f725,0,18,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
26ee58442fc13e636196e2de320f59d7,1,5,21,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
27051de45c3f43e7496c7842411eff4e,0,25,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
27051de45c3f43e7496c7842411eff4e,0,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2718329149bdd9df33f4abd35de57013,4,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
271a16a0e70496b23b3904d619dae972,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
271a16a0e70496b23b3904d619dae972,1,9,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
271a16a0e70496b23b3904d619dae972,2,14,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
274e46d200918c705edd2115f9648820,4,7,20,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
2761546fafe579bf61c0c58400cc7efd,0,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
2761546fafe579bf61c0c58400cc7efd,0,33,132,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
2761546fafe579bf61c0c58400cc7efd,0,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
27869b4d1a06e5ed01966ae99211aa7a,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
27d081c6b5bd6f39c5216e171c1f2f00,0,5,5,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
27dee74dfed81eacfa97086d2473f3a1,0,12,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
2856f19fc9a8af2d987e7abdcd7bb439,1,24,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2856f19fc9a8af2d987e7abdcd7bb439,3,46,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2856f19fc9a8af2d987e7abdcd7bb439,3,60,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2862788d8c7eed4439258f72d8d1ff8a,0,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
28e1417e9ebd4b1c33aaca60e9f0b9e8,1,19,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
28e1417e9ebd4b1c33aaca60e9f0b9e8,1,19,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
2915dcb3c3117bf7528d4b6c4fa58248,1,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
291a624c5bc3bbcc1d63606800a0287a,0,8,10,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
2978d6e5b80403c0d8e23be07dc02f7c,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
29815453ef2d227b0203da6d3d190486,1,30,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
29815453ef2d227b0203da6d3d190486,1,30,13,files.python.rules.lang.security.audit.sqli.psycopg-sqli,"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"
29815453ef2d227b0203da6d3d190486,1,30,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
29815453ef2d227b0203da6d3d190486,2,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
29815453ef2d227b0203da6d3d190486,2,11,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
29f05e809c3c1d9f9aed836ad4d33a4c,2,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2a1605f1983c35b02e181b9207045f4d,15,11,9,files.python.rules.django.security.audit.unvalidated-password,The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
2a599b3dd43e7e3db26ab50607232f18,0,17,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
2a8d0b9aa99858a64a06721526041e9c,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
2ac8e3f785dcfd13f8cfa701ef43f9f9,13,13,53,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2ac8e3f785dcfd13f8cfa701ef43f9f9,6,7,61,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2b01616fadc6156e317b9f272c3a4310,1,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2b0e0ebcf316703ec78877dcacb7ca99,0,15,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2b0e0ebcf316703ec78877dcacb7ca99,1,15,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2b241be64147f42f703f8cc637cc4db1,2,5,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2b249d5dc71a2dab07974e2ae94fb257,2,6,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2b249d5dc71a2dab07974e2ae94fb257,2,6,37,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2b30640eca6817b2683e524181f05b4e,3,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
2b30640eca6817b2683e524181f05b4e,8,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
2b491257ecf4d2479538f13166c16ac9,3,30,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
2b491257ecf4d2479538f13166c16ac9,3,30,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2b4c0e4688a6e1160a827a2f00a2abe4,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2b775946e5d2f61c39848499297a205f,0,79,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2bdbadada33404909e376662c37fd682,0,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2bdbadada33404909e376662c37fd682,0,112,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2bdbadada33404909e376662c37fd682,1,52,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2c1c482a49363aa69c69cb4f0b8765b4,0,58,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2c3066684fdc87279f1e2bec3bf84d43,6,16,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2c83fa348767fd2b9eceaa24c5d6dfb7,4,12,8,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2cdb441de54c12020c3430fd605889bf,0,53,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2cdb441de54c12020c3430fd605889bf,1,53,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2cdb441de54c12020c3430fd605889bf,2,53,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2d60b86dc4359bea2f471d2b1ab7a342,2,25,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2dad023372fd870e82c66b8a98c049db,0,34,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2dad023372fd870e82c66b8a98c049db,4,18,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2dde549559da364ec39fc142da26116c,0,42,36,files.python.rules.flask.security.injection.tainted-url-host,"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
2dde549559da364ec39fc142da26116c,0,65,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
2de351cd4a3390c969db21576401bd69,0,7,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,1,7,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,2,7,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,3,7,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,4,9,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,5,9,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,6,7,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de6f9bd9de92edbf3047092f342cdfd,1,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2de6f9bd9de92edbf3047092f342cdfd,4,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2dff820e9276183746300e5ef8379591,0,6,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2dff820e9276183746300e5ef8379591,0,7,32,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2e2dd977bd04991a520b5ce8f614a445,0,12,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2e493552bb4dc3932f76edc39d1845e8,1,4,7,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
2e493552bb4dc3932f76edc39d1845e8,1,4,7,files.python.rules.jinja2.security.audit.missing-autoescape-disabled,"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
2e493552bb4dc3932f76edc39d1845e8,1,19,10,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
2e493552bb4dc3932f76edc39d1845e8,3,4,7,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
2e493552bb4dc3932f76edc39d1845e8,3,4,7,files.python.rules.jinja2.security.audit.missing-autoescape-disabled,"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
2e493552bb4dc3932f76edc39d1845e8,3,17,10,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
2e4fce886d9bc1fccee5ba4572a9ef5a,0,70,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2e4fce886d9bc1fccee5ba4572a9ef5a,3,20,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2e4fce886d9bc1fccee5ba4572a9ef5a,6,11,30,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2e6eff00b3479d48fa87ffed414be996,0,22,9,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
2eb17956ea92ee90f912a974369cf82e,4,8,12,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2eedd2b2f5f1a1dd1c95c2eaea9948b3,1,18,26,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2f17dbaf56eae2596e862d38d3499022,1,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2f3c57a917b653a0aeafb407341a8632,2,8,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2f84f669b2394d07cf576aa5340ac7c9,0,19,17,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2f84f669b2394d07cf576aa5340ac7c9,0,19,59,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2ff74926f285750ac82efb6366400831,0,5,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
30149c1aae961cc3b3a36a12e2ffdb79,2,8,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
302d2a21eebb5e5054e8a4bd9b51ca21,0,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
302d2a21eebb5e5054e8a4bd9b51ca21,1,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3041cd444bb906f4ffacb2d4cb3f1cad,3,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
305b5f10cd8843fa7c2e8b3476e243ca,1,12,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
305d827510baf7e046dbd68a634199df,3,11,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
30c8e8461a03a4872918d8cdfc30bc39,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
31898f3bdc665555ccf7e8b743f6534b,1,60,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
31898f3bdc665555ccf7e8b743f6534b,5,59,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
31bcfddea96f56e087aa5c85f935be3b,29,10,9,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
31bcfddea96f56e087aa5c85f935be3b,29,12,9,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
31bcfddea96f56e087aa5c85f935be3b,3,10,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
31cf95af562ea4c5033a25123da28df6,0,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
31f63cb4d70a9a9744e93f07d9dccde2,1,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
32081511a55092f33ad45fca313e37a4,4,4,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
32081511a55092f33ad45fca313e37a4,5,4,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
32180b0ffd420f96c9418ad849d7e691,0,28,16,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
32180b0ffd420f96c9418ad849d7e691,0,65,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
321e81733590103d72480945ceb69adb,0,4,8,files.python.rules.lang.security.audit.httpsconnection-detected,"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information."
328a7c99f44d2afa7959aa406869b77d,0,13,21,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
32ae04933f0413bc42db0c96903c6fe0,4,11,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
32e2e604863dde86f3c26886a66aeb4c,0,32,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
32fd503d90d37b58ff93a1fb6345e72f,1,40,16,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
330f973bf7ab9f3196374c2e40f923d0,13,3,4,files.python.rules.django.security.audit.no-csrf-exempt,"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator."
333421ab548999575f67ef6ca75d680b,12,31,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
337d359d900d1f6ce4ee55a86e7c153c,1,16,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
338b0b532ff1be5ff2d9c326f570ba52,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
33cef0f52341c99c0cc3742bffbf15e3,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
33cef0f52341c99c0cc3742bffbf15e3,0,53,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
345556ee5886615633ec4526271da7f1,0,9,9,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
345556ee5886615633ec4526271da7f1,1,15,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
345556ee5886615633ec4526271da7f1,2,10,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
345556ee5886615633ec4526271da7f1,3,10,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
3491097d700479eee616446816e79035,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
3491097d700479eee616446816e79035,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
3491097d700479eee616446816e79035,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
34f3df7eb87b584ac19a5311d547cba3,0,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
34f70816e5e92ea21a7d7f0af92d1e5a,1,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
34f70816e5e92ea21a7d7f0af92d1e5a,2,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
3530fd7758ad515abeef73b9fc07258f,2,12,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
3530fd7758ad515abeef73b9fc07258f,2,17,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
3530fd7758ad515abeef73b9fc07258f,2,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3541bcc78046720f8010b42e72f1db06,2,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
35948d4d66306fb5911f57656388f358,48,7,15,files.python.rules.sqlalchemy.security.audit.avoid-sqlalchemy-text,"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
35e771af32c98e9a619eb82019854ad4,0,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3613ca1b58f336d5c31920fc4ce6df2c,0,46,21,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
367d53a18839f6457c4717257d7a7f62,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
367d53a18839f6457c4717257d7a7f62,1,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
36b5e45d3c83accf783d056df1aab0db,0,9,5,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
36b5e45d3c83accf783d056df1aab0db,0,25,20,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
36b5e45d3c83accf783d056df1aab0db,0,25,52,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
36bc73cfab2986312b806b3617cc0c25,1,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
36d3f914330437480cab2ee36df9735c,2,11,3,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
36d62742195db502327a66abb540ebe9,0,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
36d62742195db502327a66abb540ebe9,0,6,61,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
36d62742195db502327a66abb540ebe9,0,20,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
36d62742195db502327a66abb540ebe9,0,20,46,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
36e226da169adeb7ab5e164466f2bb77,2,10,8,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
36e226da169adeb7ab5e164466f2bb77,3,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
36e226da169adeb7ab5e164466f2bb77,4,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
372f8f2d26bdf445e5dcb2c87e5538a3,0,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
373b13490561fe8871072e502a8faa13,2,17,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
373b13490561fe8871072e502a8faa13,3,27,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
373b13490561fe8871072e502a8faa13,4,32,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
373b13490561fe8871072e502a8faa13,8,29,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
376e1720b0e53a84e8a32c7806e9306a,1,22,9,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
377959d7003cafbdabe3eb218d9a45e2,2,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
37825f55d5137c5a55022d16223e7f65,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
37825f55d5137c5a55022d16223e7f65,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
382d3be09f18d02be2d7b6c0d4783610,1,8,15,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
384177396e3b619926494580d436547a,0,15,9,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
38495ab20fab880c32e5bcf962f06730,0,30,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
387695a0692d74f50503ceffeeaa4780,1,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
38e770e36c49bb4470bf7ae41836a8c7,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
38ec1941ef82b61867de08b7da773d28,0,66,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
38ec1941ef82b61867de08b7da773d28,0,66,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
39039e28c2c619ab0e3706c3ac839b58,1,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
39039e28c2c619ab0e3706c3ac839b58,1,8,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
39039e28c2c619ab0e3706c3ac839b58,3,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
39039e28c2c619ab0e3706c3ac839b58,3,7,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
393347c92d00af56cd92b73dbc50e855,0,20,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
393347c92d00af56cd92b73dbc50e855,0,20,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
39524fdf98db4e396170dba29a809583,0,40,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
39524fdf98db4e396170dba29a809583,0,90,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
395bf3ec7573a52dce503f9618184453,1,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
395bf3ec7573a52dce503f9618184453,3,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,0,23,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,1,23,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,2,23,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,3,23,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,4,24,20,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,5,24,20,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,7,24,20,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
39757e0b3763a9dce3562f5209bb6128,6,8,16,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
398cc71e89239bf74472622b56910f89,6,21,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
398cc71e89239bf74472622b56910f89,7,39,16,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
3998806dc39e3d3db1b6c03a41ac2278,3,10,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3998806dc39e3d3db1b6c03a41ac2278,3,17,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
39c7d8f6bc229b9077cff43e22a02985,0,30,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3a070c6f1c7e5374a50ace2cb45f1544,5,16,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
3a1a571990569a2395bf393a3e7d2605,1,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3a1a571990569a2395bf393a3e7d2605,10,25,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
3a1a571990569a2395bf393a3e7d2605,10,25,9,files.python.rules.lang.security.audit.sqli.psycopg-sqli,"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"
3a1a571990569a2395bf393a3e7d2605,10,25,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
3a32ab800e668826a0cf50c15ceb81f7,0,10,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
3aa194f4e3c3478a1d3d5a28eca1662a,0,38,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3ab106ed64f5b04caed9b3c61bee36a7,0,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
3ab106ed64f5b04caed9b3c61bee36a7,3,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
3ab106ed64f5b04caed9b3c61bee36a7,5,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
3ac7ddedf4bec29b9fe167abfed5ee37,2,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3adf532106a274d8571a7d7cd9b5d246,1,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3b3b645bd3e7b9096d2d7745e904b86a,2,4,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
3b3e98b8799d16959cb499c23da25f82,1,10,20,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
3b3e98b8799d16959cb499c23da25f82,3,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3b9dcc80486b041066804824021584eb,0,6,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3b9dcc80486b041066804824021584eb,0,10,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3b9dcc80486b041066804824021584eb,2,4,6,files.python.rules.lang.security.deserialization.avoid-shelve,"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3b9dcc80486b041066804824021584eb,2,9,6,files.python.rules.lang.security.deserialization.avoid-shelve,"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3bda3fc5b49a671fd81b09083ceacada,2,25,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
3be5e927994e2cb1c237d38129bb9c1f,13,19,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
3be5e927994e2cb1c237d38129bb9c1f,14,17,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
3c5b4b4dddfdbddad5d1fc6b277d7385,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3ca0753332b771d5eab711937836bdaa,7,5,15,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
3ca4062f2b8df235dc8ca938c323b108,4,53,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3cac528662de405b72df82df327fd98c,0,6,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
3d0d31d3a8042747011e47226b0fd992,0,74,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d0d31d3a8042747011e47226b0fd992,1,118,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d0d31d3a8042747011e47226b0fd992,2,31,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d0d31d3a8042747011e47226b0fd992,3,59,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d1b67268069d2ad102f1e0a022aec57,0,4,5,files.python.rules.lang.security.audit.regex_dos,"Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2."
3d2d4d86f1d88df9f485f691ad26c9d8,0,18,15,files.python.rules.lang.security.audit.dangerous-asyncio-create-exec-audit,"Detected 'create_subprocess_exec' function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
3d5b4f248ef3d8bc4e3ea37e63823207,0,11,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d5f82476f3112760455f9b355146621,0,8,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d75950e3376cb84db25c278f4f01526,1,8,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
3d75950e3376cb84db25c278f4f01526,1,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3d77df38c33230fd54d480631e8653e6,1,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3d8761fa2a3b07d53461a42b5a78073f,3,6,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
3dca8fb089f4ba02cab912b049b5edeb,1,57,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3dca8fb089f4ba02cab912b049b5edeb,10,8,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
3dca8fb089f4ba02cab912b049b5edeb,10,98,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3df2133092cb1039b8fe01fdf41f810b,0,44,23,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3df2133092cb1039b8fe01fdf41f810b,1,48,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3df2133092cb1039b8fe01fdf41f810b,2,51,23,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3df2133092cb1039b8fe01fdf41f810b,3,55,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3df2133092cb1039b8fe01fdf41f810b,4,41,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3df2133092cb1039b8fe01fdf41f810b,5,55,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3e0e1299106a0c49bbf45394ab809938,18,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3e28df4db7ca6653fdae7a22aa5718ed,1,59,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3e3327e71ecedebdc7874fa01f65b9df,1,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3eb4fffd79fcd665893ba3b876b95402,1,21,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3f019fdef8cdff0add9a8d5c09bd6112,10,10,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3f242c92f24efae055b28fe740bb9f98,2,10,11,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3f411c13c8357d06adc4329409872716,4,11,16,files.python.rules.flask.security.xss.audit.explicit-unescape-with-markup,"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'."
3f56f9636c6d265312a0d5111c7e3406,0,9,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3f571ceeb33c0db9c8eafc75409a5d64,0,13,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3f6fea1e023b028a6a566cf9f31f8c49,1,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3f7ef631f35c403cf17924ffaa6a19b5,4,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3f7ef631f35c403cf17924ffaa6a19b5,5,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3f7ef631f35c403cf17924ffaa6a19b5,7,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3fad62a94c410a9d7bafd368bbc4ce0d,4,82,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
3fad62a94c410a9d7bafd368bbc4ce0d,6,82,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
3fc12d4360de273e02d3148e76a1f210,0,21,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
3fd569a9aa45889e2bb153747843013b,0,22,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3fd569a9aa45889e2bb153747843013b,0,24,38,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3fd569a9aa45889e2bb153747843013b,0,59,14,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
404106d6dd6a51a313c8b97f3a794306,0,64,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
404c485b15c0da3ad8a8a864361abe15,3,8,10,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
405d3a01244e902a3bb60d0f3dafafd3,0,6,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
405d3a01244e902a3bb60d0f3dafafd3,0,14,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
40a26b800ee287d88f9e8105d4d0eff6,18,4,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
40ba02db20d91f19ddfd1495ad33bcc8,0,8,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
40ba02db20d91f19ddfd1495ad33bcc8,1,8,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
40ba02db20d91f19ddfd1495ad33bcc8,2,7,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
40ba02db20d91f19ddfd1495ad33bcc8,3,15,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
40bd3bbb791d3271ad9006aa70e60e18,0,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
40fb57a04d70fcf0e97d8c1b660025c3,0,19,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
418c1f4878b2dda5bf72762dd50f1ce7,1,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
418d5d20ded75d8f64bee48e80d09bd8,1,36,10,files.python.rules.cryptography.security.crypto-mode-without-authentication,An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. 
418d5d20ded75d8f64bee48e80d09bd8,3,10,10,files.python.rules.pycryptodome.security.crypto-mode-without-authentication,An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. 
42039f92fce547ac7158a23f1778bec4,0,8,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
421396387b9219a67aba1574783e32c6,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
421396387b9219a67aba1574783e32c6,1,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
421396387b9219a67aba1574783e32c6,3,41,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
421396387b9219a67aba1574783e32c6,3,44,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
421396387b9219a67aba1574783e32c6,5,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
421396387b9219a67aba1574783e32c6,7,74,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
423697e9daf9480f5465fd862130a569,0,23,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
42dbab507b5093b82acedaca854a2396,0,26,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
42dbab507b5093b82acedaca854a2396,1,25,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
42dbab507b5093b82acedaca854a2396,2,26,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
42dbab507b5093b82acedaca854a2396,3,26,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
42dbab507b5093b82acedaca854a2396,4,25,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
42dbab507b5093b82acedaca854a2396,8,25,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
4313db1e0e977be0d90d16f3c9385534,2,63,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
4313db1e0e977be0d90d16f3c9385534,2,135,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
4343a0f5454356bf7f35d15d1c218707,0,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4343a0f5454356bf7f35d15d1c218707,0,9,46,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
4343a0f5454356bf7f35d15d1c218707,1,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4343a0f5454356bf7f35d15d1c218707,1,9,46,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
4343a0f5454356bf7f35d15d1c218707,2,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4343a0f5454356bf7f35d15d1c218707,2,6,61,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
4343a0f5454356bf7f35d15d1c218707,2,20,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4343a0f5454356bf7f35d15d1c218707,2,20,46,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
4343a0f5454356bf7f35d15d1c218707,4,17,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
4357c7ade7a6e1a352655a88905898aa,1,12,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
4357c7ade7a6e1a352655a88905898aa,2,12,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
4357c7ade7a6e1a352655a88905898aa,3,8,23,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
4372d1fdb234b8ef174e1b9fce7933b8,0,10,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
439470e1b770244464ae919c4f58d6a9,0,55,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
439470e1b770244464ae919c4f58d6a9,1,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
43a0231d89541b234c915209b8e9d338,4,2,40,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
43ed191322ff5d59f59c93d93e6b1d7f,0,5,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
43ed191322ff5d59f59c93d93e6b1d7f,1,12,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
43fc9a9abf92cc0889b67bb98b9484d8,2,22,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
441700cbb20740a220e682023c9b5b84,6,80,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
441af5eb46f953458e8027634e671928,0,15,19,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
441af5eb46f953458e8027634e671928,1,15,31,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
441af5eb46f953458e8027634e671928,3,10,19,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
444eb08f01e328285a2cd4260fcaf812,0,25,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
44a9f629e3a4e9bb7b665684de4c5d65,3,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
44a9f629e3a4e9bb7b665684de4c5d65,4,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
44e8c6296d1166897a961f1c04bc6a45,1,11,15,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
44e906f528d70bcb0af3ea874a585de5,14,7,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
44e906f528d70bcb0af3ea874a585de5,2,8,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
44e906f528d70bcb0af3ea874a585de5,23,9,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
44e906f528d70bcb0af3ea874a585de5,28,5,5,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
44e906f528d70bcb0af3ea874a585de5,33,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
44e906f528d70bcb0af3ea874a585de5,9,4,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
44f2ffb86933115e278259da06573e78,2,31,13,files.python.rules.django.security.audit.unvalidated-password,The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
44fa76b36d45883d8f1ca751f9c300e3,1,23,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
44fa76b36d45883d8f1ca751f9c300e3,1,23,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
450d4bc728a0228828538e5f40876a59,3,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
4559c506b020c8d3a068c4b486ce4f40,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
45790f4dc104b9a5fd1907c32f3db40b,1,30,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
45790f4dc104b9a5fd1907c32f3db40b,4,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
458259f12b769d25783c495c233a24d1,4,38,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
458259f12b769d25783c495c233a24d1,49,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
458259f12b769d25783c495c233a24d1,51,62,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
458259f12b769d25783c495c233a24d1,53,48,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
45851bc6a99147649c0ef795089c8940,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
45acc7158a368635cedc4fa84da1c4a5,0,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
45acc7158a368635cedc4fa84da1c4a5,0,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
45cb7272a887daf67f2781daf8dd3282,0,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
460f48f9a58ab9266c397dafa0f83ad8,24,72,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
460f48f9a58ab9266c397dafa0f83ad8,27,85,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
460f48f9a58ab9266c397dafa0f83ad8,29,29,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
460f48f9a58ab9266c397dafa0f83ad8,31,54,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
460f48f9a58ab9266c397dafa0f83ad8,34,84,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
460f48f9a58ab9266c397dafa0f83ad8,7,32,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
466bee3e3040b5f980f8ebf4d5549120,6,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
466bee3e3040b5f980f8ebf4d5549120,7,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
468b773f65361bbde16f978f67f21179,0,13,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
46ad016522323325eb23bd1291fdcddd,12,85,39,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
46ad016522323325eb23bd1291fdcddd,3,85,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
46ad016522323325eb23bd1291fdcddd,6,13,35,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
46ad016522323325eb23bd1291fdcddd,7,17,39,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
46ad016522323325eb23bd1291fdcddd,8,21,35,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
46bf7ef1e18caab09d9f428bdd70e2db,5,9,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
46bf7ef1e18caab09d9f428bdd70e2db,6,9,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
46c823bcf23ba7ed9f7c43342fc9316c,2,51,21,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
46e87c2bcf46052a06ec77419278ff67,0,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4709d3275bb1fc200c7e41ebd381eb8f,5,16,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
4709d3275bb1fc200c7e41ebd381eb8f,8,16,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
472b4ef7a6736e82e37cd478aedab63c,1,57,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,13,9,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,17,9,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,17,30,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,2,14,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,20,4,16,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,22,32,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,28,28,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,3,9,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,6,14,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
474721b803b4a3a170b9aeeb29df0a58,10,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
474721b803b4a3a170b9aeeb29df0a58,11,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
474721b803b4a3a170b9aeeb29df0a58,13,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
474721b803b4a3a170b9aeeb29df0a58,16,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
474721b803b4a3a170b9aeeb29df0a58,7,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
474721b803b4a3a170b9aeeb29df0a58,9,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4780701198d85d5b2fc77bb7ba2d7c67,4,8,14,files.python.rules.sqlalchemy.security.audit.avoid-sqlalchemy-text,"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
47975b1fdb7db624a4231e6b1de17e11,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
47975b1fdb7db624a4231e6b1de17e11,1,6,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
47975b1fdb7db624a4231e6b1de17e11,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
47975b1fdb7db624a4231e6b1de17e11,8,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
47975b1fdb7db624a4231e6b1de17e11,9,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
47c74c54fbf68c9eff5b33543d18928a,1,40,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
48237ed9a9ba5f73985e6ce1735888a7,0,2,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
48237ed9a9ba5f73985e6ce1735888a7,6,2,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
482515d73fe502cd732f0f72f27f3ef0,0,29,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
482be619c21036f1aac1a8fad9173930,1,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
486848f510890e172822021fc8605867,1,34,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
486848f510890e172822021fc8605867,1,43,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
48bac31f817fd10297f4f2e878fe3b94,2,23,27,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
48cf92a14aaf8405e52aa24d58236dac,0,16,31,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
48cf92a14aaf8405e52aa24d58236dac,1,16,31,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
48d2ea33a8780a403222904f5e22ef8d,3,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
48ef0a12cc03eefc72a9de65b75d792c,5,25,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
490a5760443935ae9eab5726fe0ba036,2,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
491059f720125a9bff55a6af8947a76d,1,5,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
4923192acb2593081f1eb858be1b2b64,12,47,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4923192acb2593081f1eb858be1b2b64,3,33,4,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4923192acb2593081f1eb858be1b2b64,5,37,4,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4923192acb2593081f1eb858be1b2b64,7,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
49498ee70e272ef5bc0f1784f4d33de7,12,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
49498ee70e272ef5bc0f1784f4d33de7,14,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
49498ee70e272ef5bc0f1784f4d33de7,5,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
49498ee70e272ef5bc0f1784f4d33de7,8,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
495ed51d3cf9a8aca28550d3bad7b562,3,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
495ed51d3cf9a8aca28550d3bad7b562,5,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
4963d5f8d1836884b5bd6012ee46285c,0,113,68,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
49a20b04368b28b523ffe37b840364cb,2,2,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
49c0df374598065aa1151bafc6c64961,0,21,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
49e5efc802c5f0b162e7f6f6d5fb5b4b,0,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4a46f9b617deb62fdcf55aed47bb77da,1,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4a659854f16b6431d7c2f31d966738c5,0,19,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
4a7fc5eda52813dce01316e1989682ce,3,10,17,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
4b0e4c94df2c8a6e7c741f1be8678b65,0,44,27,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
4b2ead37d49c6ed86bbfcb68b8ce5171,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4b2ead37d49c6ed86bbfcb68b8ce5171,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4b2ead37d49c6ed86bbfcb68b8ce5171,6,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4b5ec6c3c07f85dd10b812467da7012d,0,6,12,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
4b7f4879789c441812a8c8b5f0e3677f,9,57,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
4be22855d6da67094ac4ded60e278926,0,27,38,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
4c63c536f0833c850f388216a32ea610,1,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4d1f251ed7d6e12bb505335fb2fb8454,1,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4d8a833fd1b8b07590f5e5cd7d6be481,0,6,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4db31c59c653e60bf8eaa2972a74e510,0,6,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4dc6682cc6da9b790ba0de509d9ef8bd,10,12,10,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,11,12,10,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,12,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,13,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,14,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,15,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,16,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dd05076271f6fea56348f3d06aecdfc,0,9,8,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4e019464dd989a0e3ddff41392b4a5af,2,3,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4e019464dd989a0e3ddff41392b4a5af,4,26,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4ef3528eb1000cd2f56b0e1b2ce41e82,2,34,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4f2a82f104a2d6276dad0fbb72943745,1,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4f68ee0387ea23f828b5945eaaa9d745,6,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4f8c605c751cd418a08229216333c9db,0,15,6,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
4fccfcd4e34ea4e92504506a8563773b,1,98,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
50733215eede8dde97cfb49e0331ea0c,1,38,31,files.python.rules.sqlalchemy.security.audit.avoid-sqlalchemy-text,"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
50afad8893a1fe48b1ad8c8557ada703,0,14,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
50d79dcbb3907994a6af798f4d96435a,0,10,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
50fd518f120761d6830e7455f51561d7,0,7,6,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
50fd518f120761d6830e7455f51561d7,1,9,14,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
511736bd10e242379b692c710d65e409,4,28,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
511736bd10e242379b692c710d65e409,4,51,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
511736bd10e242379b692c710d65e409,4,70,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5123b3ecd79c605c49f469fba9dd4fe5,0,24,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5123b3ecd79c605c49f469fba9dd4fe5,1,24,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5132e7982855279eb2298c31376adb09,1,25,2,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
51954e25d3421f85126c76daa2e686fa,0,20,20,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
51954e25d3421f85126c76daa2e686fa,0,20,57,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
51b484483587feed127894563b28f52b,5,9,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
51ca870f11b599ce2e27253b1b70b373,2,44,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
51d750f3b0bcd875765f177ef4da5be4,0,3,8,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5242a75257d056f7a6c22407c3350712,1,7,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5244ff050fbe3fbad392f3c2d6e624a0,1,21,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5244ff050fbe3fbad392f3c2d6e624a0,1,26,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
52701c1a87745ec2b1598a4c2e30f569,0,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5276c2d7339e7e30b3d0415ad8b6237e,0,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
527dea3215212fb4ad45467597874737,0,23,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
527dea3215212fb4ad45467597874737,0,23,50,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
527dea3215212fb4ad45467597874737,0,28,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
527dea3215212fb4ad45467597874737,0,28,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
52986108142b86ad1533c26e9a58f4b9,0,15,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
52986108142b86ad1533c26e9a58f4b9,1,8,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
52986108142b86ad1533c26e9a58f4b9,2,8,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
52986108142b86ad1533c26e9a58f4b9,3,8,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
52986108142b86ad1533c26e9a58f4b9,4,12,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
52a042f02f801d54248a8d453cdba1e6,1,68,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
52a042f02f801d54248a8d453cdba1e6,1,68,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
52b29ce6678a99e558b71d739992ae66,0,40,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
52b29ce6678a99e558b71d739992ae66,0,43,24,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
52f23022750eba58d4669d19741cf9de,3,7,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
530dfd8681be129ff0a976f3799f5206,0,34,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
530dfd8681be129ff0a976f3799f5206,0,34,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
530dfd8681be129ff0a976f3799f5206,0,64,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
530dfd8681be129ff0a976f3799f5206,0,64,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
530dfd8681be129ff0a976f3799f5206,0,88,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
530dfd8681be129ff0a976f3799f5206,0,88,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5330e24319c93c5503489c0f8bf46c5a,0,40,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5330e24319c93c5503489c0f8bf46c5a,0,114,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,3,5,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,4,6,29,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,5,6,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,5,21,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,6,6,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,6,21,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,7,6,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,7,23,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,8,6,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,8,24,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
535274e7b40382518f8ded82e5c55ace,1,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
535fb88098355b301d74279471380175,1,12,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
538f5f066a976003cc167ddff84bc901,4,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
539511400908cc1aa3f3decbec1b2279,16,9,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
539511400908cc1aa3f3decbec1b2279,6,9,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
53b16f614ebbb7484c46bc5a004ee5a9,0,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
53b16f614ebbb7484c46bc5a004ee5a9,0,13,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
53b16f614ebbb7484c46bc5a004ee5a9,1,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
53b16f614ebbb7484c46bc5a004ee5a9,1,13,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
53c03f76e3ae6bfb8bf5042d224ea87f,0,9,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
53e03ad2a48a570d87ddfd1b1c63923e,2,15,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
53f35c0d49a0d90ab086128f4a7df209,0,48,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
53f35c0d49a0d90ab086128f4a7df209,0,58,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
53f54ae7393f6f99424612ca22fa6762,0,23,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
53f54ae7393f6f99424612ca22fa6762,1,21,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
53f54ae7393f6f99424612ca22fa6762,2,21,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54148cde5b724518e3846bec082fc443,10,12,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54148cde5b724518e3846bec082fc443,11,12,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54148cde5b724518e3846bec082fc443,6,12,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54148cde5b724518e3846bec082fc443,9,12,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
542738c8fa4748a4d2662055f60d9732,0,4,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
543d8b24767aaafa6c7a638ecc5e4679,0,11,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
546544891c71eae3d2532432b9f3fb0a,1,11,15,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
546609f9de39af9e7c6ed05dee08a9f8,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
546609f9de39af9e7c6ed05dee08a9f8,1,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
546609f9de39af9e7c6ed05dee08a9f8,2,17,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
549493f944d2acfdb8e62718a125b6ea,1,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
54a21065706eaf16bc724e713502eccf,0,15,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
54b5b77cadbaf88a08ca61095013e9ff,0,64,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
54c0991226758771e0e248759dc42751,0,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54cea4011973f99123c23a54cfe19fd8,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
54ddae8575254b745ec86ed5e18301b4,0,14,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
54e1cd95e51ec2b6f129a28ae560f069,1,14,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
54e1cd95e51ec2b6f129a28ae560f069,1,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
54e1cd95e51ec2b6f129a28ae560f069,5,34,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
54e1cd95e51ec2b6f129a28ae560f069,6,44,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
54e1cd95e51ec2b6f129a28ae560f069,8,81,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
54e1cd95e51ec2b6f129a28ae560f069,9,86,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
550126c04993117f72d4b7cb26c25347,0,11,13,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
550126c04993117f72d4b7cb26c25347,0,11,13,files.python.rules.lang.security.audit.dangerous-system-call-tainted-env-args,"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
550126c04993117f72d4b7cb26c25347,0,14,13,files.python.rules.lang.security.audit.dangerous-os-exec-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
550126c04993117f72d4b7cb26c25347,0,14,13,files.python.rules.lang.security.audit.dangerous-os-exec-tainted-env-args,Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.
550126c04993117f72d4b7cb26c25347,0,18,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
550126c04993117f72d4b7cb26c25347,0,18,9,files.python.rules.lang.security.audit.dangerous-system-call-tainted-env-args,"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
552e349c9ca491823dd3a6988aedea24,0,5,11,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
557e219181684ab6bf7bdcd3ac549662,0,31,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
558599d8d1d6e1913a1e2e0af15e036c,0,34,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
55f330cda73045bb9f7b589a0013968a,0,20,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5601d062ea7fc8423c559d8776fd6d55,0,29,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
56abe4aceae4aa3cd377d6a807d3d3cd,0,12,6,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
56b9ba54905434aa26d81857fd97a954,3,4,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
56b9ba54905434aa26d81857fd97a954,3,6,12,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
5767e27c200ec0bfdfc7cb973395a867,0,7,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5767e27c200ec0bfdfc7cb973395a867,0,18,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
5767e27c200ec0bfdfc7cb973395a867,0,21,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5775ddbbb823286c8fc894a45cc181f7,0,16,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5775ddbbb823286c8fc894a45cc181f7,0,16,42,files.python.rules.lang.security.audit.dangerous-subprocess-use-tainted-env-args,Detected subprocess function 'check_output' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.quote()'.
5775ddbbb823286c8fc894a45cc181f7,0,16,79,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
57b46e24377b8051cfc74865625c25e1,1,16,9,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
57b46e24377b8051cfc74865625c25e1,3,10,25,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
57d83b8600238c2998b6817ec5d73f5f,0,4,16,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
57db8e1d675cb8d7f97ff708ee15a62d,0,11,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
57fe6249ed72790485402fc3a8a664eb,7,27,15,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5831a6f2066b2e1e316dfd9ef69da083,1,24,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5831a6f2066b2e1e316dfd9ef69da083,2,43,29,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
584b43432ca5256ccd5926b15c84cec4,0,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5867e5b9cb27b09df30de6fd8f936363,0,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
58791c3bb42a90f73d113f0df5074606,0,6,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5889925790a997da97fd3cfb2d9ac7d0,0,59,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5889925790a997da97fd3cfb2d9ac7d0,3,56,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5925233f90db7c093d7c9f9424b08fc0,5,6,12,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
5925233f90db7c093d7c9f9424b08fc0,5,10,28,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
592b75c57cd9b685edffa76efc0e1969,0,10,8,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
597adfa1fd33277b3c63628cddebb4b4,4,7,6,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
5a2772bf61ff06ef74ab4c8542aeef62,14,11,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
5a2772bf61ff06ef74ab4c8542aeef62,16,7,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
5a62f0b6be9e950044be3c94a3ebee2c,8,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5a6918619b92803127ca370f932cd787,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
5a6918619b92803127ca370f932cd787,0,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
5a6918619b92803127ca370f932cd787,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
5a6918619b92803127ca370f932cd787,2,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
5a80f001fa204d525097750d889e0ce9,2,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5ac1dcad20b05c36e4733520ed1a27d8,0,28,13,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
5ad5209cbc52e2010990d79ad83f4c33,0,14,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
5ad5209cbc52e2010990d79ad83f4c33,1,9,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
5b71370a72574ab2be8c1d5bb201fc8d,0,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5b71370a72574ab2be8c1d5bb201fc8d,1,33,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5b71370a72574ab2be8c1d5bb201fc8d,3,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5b71370a72574ab2be8c1d5bb201fc8d,4,32,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5b8096ff27c04a8a58da3c01e1056fc6,7,6,32,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5b91b360698a9ec42bd1041fe7ce22e6,0,75,34,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5b91b360698a9ec42bd1041fe7ce22e6,0,84,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5bae98c39f88a6c8768a8a902fd1e1e5,1,14,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5bcfbb8e940c26a4eac52a4cafabd1cc,2,15,29,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
5c3327cb49e123578de874a1096dd5f7,1,20,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5c3327cb49e123578de874a1096dd5f7,2,14,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5c3327cb49e123578de874a1096dd5f7,7,13,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5c68bc977244ddb8e243a517f7daeccd,0,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5c732a78c3e0c33557ebf5d802e1d847,3,2,18,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
5c732a78c3e0c33557ebf5d802e1d847,4,14,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
5c732a78c3e0c33557ebf5d802e1d847,5,17,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
5c8ed6c5d80ab6a5286492cab9f62ceb,0,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5cfce3ecc5a686e84ab948433459c6b5,6,5,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5cfce3ecc5a686e84ab948433459c6b5,7,25,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5cfce3ecc5a686e84ab948433459c6b5,8,25,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5d48ebc0a189ebe0fbb1030a6b09562e,0,22,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5d81326db371e344f94a5cf5d044c9b8,3,15,13,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
5d91c3564b992f0d3b3116e5a5827a9b,0,35,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5d91c3564b992f0d3b3116e5a5827a9b,0,35,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5d91c3564b992f0d3b3116e5a5827a9b,0,66,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5d91c3564b992f0d3b3116e5a5827a9b,0,66,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5d91c3564b992f0d3b3116e5a5827a9b,0,89,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5d91c3564b992f0d3b3116e5a5827a9b,0,89,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5db4249950e083f8dd046c99a7c1a592,0,36,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
5db4249950e083f8dd046c99a7c1a592,1,30,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
5db4249950e083f8dd046c99a7c1a592,2,36,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
5de04e01be2ba0c39f6b29fc048e2386,1,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5dfc6dbffc241876824923f96206f49c,0,25,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
5e06c610623e0aea069c86d8cdba4a76,0,21,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5e06c610623e0aea069c86d8cdba4a76,0,48,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5e06c610623e0aea069c86d8cdba4a76,0,116,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5e06c610623e0aea069c86d8cdba4a76,0,138,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5e06c610623e0aea069c86d8cdba4a76,0,156,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5e0f20feb36ff010f64626bc813bdb96,5,65,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5e26948d86dad61d05157db8b3516c99,0,43,41,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
5e4ecad376bde8956927e87c3b083598,1,13,24,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
5e78c81ad7bd5a74e0b0b687d56551f6,4,26,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
5e8a4e85defea0ccc062ea5d27681ad3,0,17,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5e8a4e85defea0ccc062ea5d27681ad3,0,17,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5e8a4e85defea0ccc062ea5d27681ad3,0,25,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5e8a4e85defea0ccc062ea5d27681ad3,0,25,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5e9306512659987390f905f0072e5cf4,2,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5eb6f727cad78abe8db5a654aab92fcf,0,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5ebd864ba99b423db7dfef029d970f45,1,11,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5ebd864ba99b423db7dfef029d970f45,1,11,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5f0e1918865ae5af72f37cc04538e019,1,31,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
5f0e1918865ae5af72f37cc04538e019,2,30,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
5f2aa5df0d5e05b5c9a14b8355b97de5,0,73,23,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
5f6421e68c42b6891ae2fef9a531276d,1,44,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5f6421e68c42b6891ae2fef9a531276d,4,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5f794802584cf72519433dd8bc93f89b,1,19,5,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
5f794802584cf72519433dd8bc93f89b,1,32,16,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
5f794802584cf72519433dd8bc93f89b,1,32,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5f794802584cf72519433dd8bc93f89b,1,36,5,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
5f794802584cf72519433dd8bc93f89b,1,48,16,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
5f794802584cf72519433dd8bc93f89b,1,48,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5fafa7fae07f1c704608ae95dfd22eb9,7,10,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5fdb57759df8f789d35981f92a2e4d55,0,7,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
5fe6c7cc70ceb5ae6bd5458041f5920f,0,10,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5fedd5d45090ff17c668c8800f10839d,0,42,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5fedd5d45090ff17c668c8800f10839d,0,78,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6069de427c584982b27e0fae403c24bd,1,14,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
6069de427c584982b27e0fae403c24bd,1,14,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
6069de427c584982b27e0fae403c24bd,1,21,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
6069de427c584982b27e0fae403c24bd,1,21,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
609687c97b8a7892b82d82305aa0fa1c,1,9,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
60a3252642fbd1ea2446ff73f9ea6c90,1,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
60a3252642fbd1ea2446ff73f9ea6c90,1,40,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
60d73aff95af53cff5935147778fe7c1,10,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
611274505a289f4dbfc6a2c4b05bd168,7,3,8,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
617594d047161eaebc30d75dcf0517cd,1,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
617594d047161eaebc30d75dcf0517cd,6,63,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6193331b9d526dfb9bf187b92cbeca5d,0,48,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
61a1e0538595b706964e960f409131d3,5,7,16,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
61a1e0538595b706964e960f409131d3,5,11,12,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
61c54ef730617f6038b994737de75866,0,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
61ee933ae5b90e4286e1b35de194048a,0,69,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
6209c3c639b74b999811cc3467c61645,0,26,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
623c34a8ceaf176885ed9fe40002f71a,2,23,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
623c34a8ceaf176885ed9fe40002f71a,8,25,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
6273b052e330b669d0dcc975c27b934e,0,19,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
62a35efed9eb149d9a802cfbc9c355d0,1,14,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
62a35efed9eb149d9a802cfbc9c355d0,13,18,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
62a35efed9eb149d9a802cfbc9c355d0,4,14,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
62ee6957a718485052c8c86ebe48993c,2,7,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
63354c46ec5250ffd94fd52aa7416f1d,1,53,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
63db3afcb2d6f9eb3f77fd82ac94fa8d,0,7,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
64145a62decf6b3185f72c49ca22e32a,1,23,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
64145a62decf6b3185f72c49ca22e32a,2,20,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
64145a62decf6b3185f72c49ca22e32a,3,26,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6418d7f4dcad2e2d9b74910ac9f595a8,0,6,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6456c38c947b7cb00896b166f19b65ba,0,9,1,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
6456c38c947b7cb00896b166f19b65ba,0,10,12,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
6456c38c947b7cb00896b166f19b65ba,0,10,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6456c38c947b7cb00896b166f19b65ba,0,19,42,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
64a529bf162f8c44dc3539a9b62cfca0,0,17,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
64a529bf162f8c44dc3539a9b62cfca0,1,6,23,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
64a529bf162f8c44dc3539a9b62cfca0,1,21,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
64a529bf162f8c44dc3539a9b62cfca0,2,14,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
64ec0eb2954f18c931ea3701a061c4b1,0,24,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
64ec0eb2954f18c931ea3701a061c4b1,0,32,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6662d10367e2051d1146dbd16b7141db,1,21,13,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
66d7e3770b22efe966bc7f0a6e5a2907,2,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
66da86835b5e6d87a877f9a641df19e0,1,5,5,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
66da86835b5e6d87a877f9a641df19e0,1,14,24,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
673d519bce06cd0843f6a26a1538d6c2,2,12,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6749db5df472e1e985f2d69087d9f421,1,2,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6776a1d3bf1d8a3fef15c07edf708955,1,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
6776a1d3bf1d8a3fef15c07edf708955,1,73,24,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
6782fea5e48ef24163e7ff64c5312bd6,0,10,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6782fea5e48ef24163e7ff64c5312bd6,0,15,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6782fea5e48ef24163e7ff64c5312bd6,0,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
67b3060f6691a7aea47084b382dabb85,0,34,19,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
67b3060f6691a7aea47084b382dabb85,0,34,19,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
67b3060f6691a7aea47084b382dabb85,1,33,19,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
67b3060f6691a7aea47084b382dabb85,1,33,19,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
67b3060f6691a7aea47084b382dabb85,2,36,19,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
67b3060f6691a7aea47084b382dabb85,2,36,19,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
67d123e381043cbb680cdc1990c7bb87,1,18,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
6804de4ab5e072c7f576ec2381362abc,0,52,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
684ccad3e362430a3bd96c41e7eb3a2c,0,47,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
684ccad3e362430a3bd96c41e7eb3a2c,14,47,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
684ccad3e362430a3bd96c41e7eb3a2c,5,47,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
684ccad3e362430a3bd96c41e7eb3a2c,9,47,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
685af46c01fa14a930f966463f3d0758,0,42,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
6864114368c880a575a2be81f45db816,1,59,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
6864114368c880a575a2be81f45db816,1,59,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
68fd652df48dedbd4b335adcb3be0aec,0,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
68fd652df48dedbd4b335adcb3be0aec,0,63,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
690919db5a08fa50a541b387a6bc5d25,1,11,16,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
690f7d993eaad488dfa73fc899c83127,14,10,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6947b0aa99d2bbf139dc903aab3864bc,0,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6967bcde90af29c1e0ddf09d34e03e44,12,50,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6967bcde90af29c1e0ddf09d34e03e44,13,50,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6967bcde90af29c1e0ddf09d34e03e44,3,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6967bcde90af29c1e0ddf09d34e03e44,7,50,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
696f5bb7a0090c9410f5e9369fcf2020,0,15,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
696f5bb7a0090c9410f5e9369fcf2020,2,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
696f5bb7a0090c9410f5e9369fcf2020,4,14,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
699c66cf8b9647ee3312655c616cfa34,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
69aef455c5f359e6a26696f14f6b9955,2,28,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
69eecb230ed7504ff3e8b4b66de45289,0,15,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,12,20,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,15,25,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,18,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,21,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,3,22,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,6,29,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,9,29,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
6a27c8c1103865cf59c225ab737e7b46,1,15,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
6a27c8c1103865cf59c225ab737e7b46,1,16,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
6a27c8c1103865cf59c225ab737e7b46,1,18,11,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
6a27c8c1103865cf59c225ab737e7b46,1,18,24,files.python.rules.django.security.injection.tainted-url-host,"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
6a27c8c1103865cf59c225ab737e7b46,1,18,24,files.python.rules.flask.security.injection.tainted-url-host,"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
6a27c8c1103865cf59c225ab737e7b46,1,18,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6a27c8c1103865cf59c225ab737e7b46,1,23,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
6a27c8c1103865cf59c225ab737e7b46,1,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6a27c8c1103865cf59c225ab737e7b46,4,51,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
6a27c8c1103865cf59c225ab737e7b46,6,66,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
6a2fad7ed656904cc85e8a298845ee39,2,67,9,files.python.rules.lang.security.audit.insecure-file-permissions,These permissions `0o755` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.
6a2fad7ed656904cc85e8a298845ee39,2,91,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6a5b33fc5996b3074e1068b66f62365b,0,11,72,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
6a5b33fc5996b3074e1068b66f62365b,0,11,103,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
6a6479823718eca0f3378d4b918b6a4b,0,8,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
6a6479823718eca0f3378d4b918b6a4b,1,9,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
6a7e7821c55c59f8da89f40cd6810090,0,11,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6b2c634d4e8600047e8ec26d15e213fb,2,20,31,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6b2c634d4e8600047e8ec26d15e213fb,33,6,12,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6b66fc592e16a7b2b9765e397e547895,0,5,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
6b66fc592e16a7b2b9765e397e547895,2,5,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
6b6c55f7039b198b7964e19026579d79,1,5,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6c0c0d7a62bf420334e18a38bfd83999,0,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6c3626a9dec1a9ec3523eaac8f1b1a41,0,17,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6c3626a9dec1a9ec3523eaac8f1b1a41,0,27,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6cbca72b9606bf9df87c539ee38bbec9,9,99,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6cd408ab72e283e4d8ed52be9cf419f2,0,11,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6cf59d6666241ff98bd1b07e0ec3d44a,0,12,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6d2b944c19cb8924f509ed5a16cbfbbb,7,9,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6d4b877d52a67609060a023b41935418,0,10,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve,Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
6d4b877d52a67609060a023b41935418,0,13,9,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
6d5f8d5936c73fb00a419b3fdba8ff1d,1,17,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6d5f8d5936c73fb00a419b3fdba8ff1d,2,10,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6d5f8d5936c73fb00a419b3fdba8ff1d,3,17,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6d8d533f99112c4349c91086a11f8a66,9,25,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
6dba242213447a9249e59c2e422acaf7,0,35,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
6dba242213447a9249e59c2e422acaf7,0,35,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
6dba242213447a9249e59c2e422acaf7,0,57,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
6dba242213447a9249e59c2e422acaf7,0,57,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
6dcb21308f0ccd663c02f1fad9ab4766,4,70,41,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
6dcb21308f0ccd663c02f1fad9ab4766,6,78,41,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
6dd580f76edced00e2f2fa2bc2fe3b98,0,51,47,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6dd580f76edced00e2f2fa2bc2fe3b98,0,55,32,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6dd580f76edced00e2f2fa2bc2fe3b98,0,63,13,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6dd580f76edced00e2f2fa2bc2fe3b98,0,66,20,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6decb3ffb03ff4c7fbf12a1da225b687,1,84,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6e135345998cc822e84fa1e77c378ba6,0,35,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6e135345998cc822e84fa1e77c378ba6,0,46,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6e84a6f3a831a77de96cbc6ef41e2b32,0,13,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6e8d5b629b56742dcbd1989940601a2d,1,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6e8d5b629b56742dcbd1989940601a2d,5,42,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6e8d5b629b56742dcbd1989940601a2d,6,52,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6e8d5b629b56742dcbd1989940601a2d,8,63,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6efd5c28c5861646b4ff7508077f3c03,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6f3f1946ea4e32d4287377787517a558,3,35,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6f8d60aae075ffb37c51dda897e5f85c,0,5,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
6f8d60aae075ffb37c51dda897e5f85c,0,27,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
6fad504d6b779f7c366eaa9aaad3080d,1,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,19,15,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,22,30,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,23,57,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,24,55,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,25,60,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,26,54,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,28,48,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,6,37,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
6fd606290fe3cb0ff03ea56df8ce7c9e,0,8,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6fd606290fe3cb0ff03ea56df8ce7c9e,1,14,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6fd606290fe3cb0ff03ea56df8ce7c9e,3,12,8,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
70188def460bad208f9585bcc2b83dc7,9,13,6,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
7043e8af74fad9da547703737507852c,0,95,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7043e8af74fad9da547703737507852c,0,95,53,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
7043e8af74fad9da547703737507852c,1,95,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
704de4087b57e8ce4b66dc109c42038e,0,13,29,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
708a180878ddea4c6860add4aea98a10,4,68,29,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
708a180878ddea4c6860add4aea98a10,4,90,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
708a180878ddea4c6860add4aea98a10,4,97,29,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
708a180878ddea4c6860add4aea98a10,4,107,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
708e4f852295012a750d0bee028cc1a0,0,46,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
71105a56839d34839b7148824e18b6fb,13,10,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
7118361abf1ef696134e30ed6fc83430,0,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7118361abf1ef696134e30ed6fc83430,1,44,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7118361abf1ef696134e30ed6fc83430,2,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7118361abf1ef696134e30ed6fc83430,3,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7118361abf1ef696134e30ed6fc83430,4,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7118361abf1ef696134e30ed6fc83430,5,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7121386da7b0aaf0832722a7861854ab,1,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7142d75545016c617465058e62ccfdbd,5,54,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7154acf527a700620b0c2d9fa2106064,1,6,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
7162ce2e08d1e9875bc12266a0ca46f7,14,18,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
7162ce2e08d1e9875bc12266a0ca46f7,14,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
716a4662e2e5868d4da5ff973b1a6c7e,1,55,34,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
71ab94bef39f524b342689f3c7434260,0,5,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
71fa5845c4ef6c0e287b606503a8f625,4,4,104,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
72145d0f40ba6597db62704d73adf72c,0,8,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
72145d0f40ba6597db62704d73adf72c,0,9,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
72145d0f40ba6597db62704d73adf72c,0,13,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
722ab465b3eef8054ab753c1276dc54f,3,8,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
722ab465b3eef8054ab753c1276dc54f,3,10,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
722ab465b3eef8054ab753c1276dc54f,3,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
722ab465b3eef8054ab753c1276dc54f,5,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72516c25161fbfdc8a943a05c562e544,2,14,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
72516c25161fbfdc8a943a05c562e544,3,14,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
726cc614e16aa1114602e0a8107b8d8e,4,5,5,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
727b04a20e0710904bf555817a39852a,0,14,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
727b04a20e0710904bf555817a39852a,0,16,20,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
727b04a20e0710904bf555817a39852a,1,16,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
727b04a20e0710904bf555817a39852a,1,18,20,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
72eeb554576942cce4827ac7b2e97fec,0,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72eeb554576942cce4827ac7b2e97fec,1,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72eeb554576942cce4827ac7b2e97fec,2,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72eeb554576942cce4827ac7b2e97fec,3,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72eeb554576942cce4827ac7b2e97fec,6,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72f7bffb999e4871440b072c0b00806a,0,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
736660101ca55bb291e9f9e0177ba5c1,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7379cdcee96aff710276b88ccaa347e4,8,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
73959b2fdfd9a90f520ea74818eaa37a,6,31,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
73d63792cdfdf39954ecd1dc2a88f56d,3,13,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
73d63792cdfdf39954ecd1dc2a88f56d,3,13,40,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
73ec7a8ca09da7f4cf026fe44ad60a6a,2,11,12,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
73ec7a8ca09da7f4cf026fe44ad60a6a,2,12,12,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
73ec7a8ca09da7f4cf026fe44ad60a6a,2,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
74009e0993b8936a85260756a4c85fe6,1,7,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
74009e0993b8936a85260756a4c85fe6,1,11,22,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
74009e0993b8936a85260756a4c85fe6,11,13,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
74009e0993b8936a85260756a4c85fe6,11,18,22,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
74009e0993b8936a85260756a4c85fe6,13,14,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
74009e0993b8936a85260756a4c85fe6,13,19,22,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
74009e0993b8936a85260756a4c85fe6,13,25,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
74009e0993b8936a85260756a4c85fe6,14,13,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
74009e0993b8936a85260756a4c85fe6,14,18,22,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
74009e0993b8936a85260756a4c85fe6,14,24,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
740924ecbfb0336d8f12e85d3f2c7c84,0,29,13,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
740924ecbfb0336d8f12e85d3f2c7c84,2,24,13,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
741383457f41e8120b82c821fd664688,2,19,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
741383457f41e8120b82c821fd664688,2,19,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
741383457f41e8120b82c821fd664688,4,19,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
741383457f41e8120b82c821fd664688,4,19,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
74e31dbe8ea9aec3d4fecd5bf16997c5,0,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
74e31dbe8ea9aec3d4fecd5bf16997c5,0,16,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
74e31dbe8ea9aec3d4fecd5bf16997c5,1,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
75011c33d1e621510c48e5d80b1cdc00,1,14,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
75011c33d1e621510c48e5d80b1cdc00,1,22,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
75011c33d1e621510c48e5d80b1cdc00,1,23,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
75011c33d1e621510c48e5d80b1cdc00,1,24,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
75011c33d1e621510c48e5d80b1cdc00,1,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
75011c33d1e621510c48e5d80b1cdc00,4,16,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
75011c33d1e621510c48e5d80b1cdc00,4,43,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
751fe90ade739e6c9832b453f4d6f168,1,8,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
751fe90ade739e6c9832b453f4d6f168,2,8,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
75402876c28958aac9f1aad3870838bf,3,8,11,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
75402876c28958aac9f1aad3870838bf,4,7,11,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
75472ec8aad1bb4481f8528d0d583291,0,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7549487b6d0ece1261a7172d9ffdf01a,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
7549487b6d0ece1261a7172d9ffdf01a,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
7549487b6d0ece1261a7172d9ffdf01a,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
7599c44989c8b6b1660eed1e15263a6a,1,5,5,files.python.rules.django.security.injection.open-redirect,Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.
7599c44989c8b6b1660eed1e15263a6a,1,5,12,files.python.rules.django.security.injection.open-redirect,Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.
763951d9952e25a87647515b269dea04,1,28,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
766463cf4fddd505d5c3c4a6b4d67edb,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
76a20d3fd9053a006ee37355e8c4a753,10,6,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
76a20d3fd9053a006ee37355e8c4a753,10,6,76,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
76a20d3fd9053a006ee37355e8c4a753,8,5,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
76a20d3fd9053a006ee37355e8c4a753,8,5,76,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
76b2489c3f102cd1c48d27adae5a1c39,1,5,4,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
76b2489c3f102cd1c48d27adae5a1c39,1,8,13,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
76b2489c3f102cd1c48d27adae5a1c39,1,8,13,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
76b2489c3f102cd1c48d27adae5a1c39,18,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
76cf36faa23a210aecbd51a69daf5786,0,12,19,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
76cf36faa23a210aecbd51a69daf5786,0,22,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
76eb0a15e970ab1f0c6ae2cb5d051d9c,3,3,17,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
76eb0a15e970ab1f0c6ae2cb5d051d9c,5,3,17,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
76fe7cd5e927bb5077a7e6911736dadd,2,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
774796b76e580a9e21419b056a8e0be3,0,69,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
774796b76e580a9e21419b056a8e0be3,1,61,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
774796b76e580a9e21419b056a8e0be3,10,33,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
774796b76e580a9e21419b056a8e0be3,11,37,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
774796b76e580a9e21419b056a8e0be3,12,41,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
774796b76e580a9e21419b056a8e0be3,15,46,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
774796b76e580a9e21419b056a8e0be3,2,66,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
774796b76e580a9e21419b056a8e0be3,3,42,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
774796b76e580a9e21419b056a8e0be3,5,27,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
774796b76e580a9e21419b056a8e0be3,6,26,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
774796b76e580a9e21419b056a8e0be3,8,36,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
774796b76e580a9e21419b056a8e0be3,9,44,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
775d5e115558f781bd1ca735e5349eb9,0,18,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
776326585186d6c757451aa8f4cb5084,1,4,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
776326585186d6c757451aa8f4cb5084,2,4,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
777f72959c8a33f616cab0e960f06d49,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
777f72959c8a33f616cab0e960f06d49,0,5,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
78016cd5c2e0d089b534294c93f88a7c,4,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
789e23239075a25af03a4bef33602af1,0,40,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
789e23239075a25af03a4bef33602af1,0,61,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'getoutput' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
78cdfd80d6b2a3521302d3138e13a94d,1,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
78cdfd80d6b2a3521302d3138e13a94d,22,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
78cdfd80d6b2a3521302d3138e13a94d,27,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
78cdfd80d6b2a3521302d3138e13a94d,29,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
78cdfd80d6b2a3521302d3138e13a94d,30,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
78cdfd80d6b2a3521302d3138e13a94d,32,40,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7915f0e98b4071084185da19dbf46471,1,107,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7915f0e98b4071084185da19dbf46471,4,72,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7915f0e98b4071084185da19dbf46471,6,81,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7915f0e98b4071084185da19dbf46471,7,85,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
792ddc55b2c5f727b912031877ffb253,0,23,20,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
795572c67388c0b796841fc1ef1b52c7,1,14,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
796c9109ff427f681c68ab6a7523c580,1,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
796c9109ff427f681c68ab6a7523c580,5,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
79c8f50fa9bb1f7a0db9fbcb5582b785,1,14,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
79c8f50fa9bb1f7a0db9fbcb5582b785,4,11,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
79c9905926d291f2e19ba600f0ba6933,1,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
79d99a928d57937954fb59b3a43760f9,16,11,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
79df3b75a0dd1ab16c0d7959d0a70acc,0,8,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
79f88545926b0ac38226e3eb2be38022,0,6,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
79f88545926b0ac38226e3eb2be38022,0,25,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
7a0f5bbc73ca590846d790c06b38e6d2,1,15,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7a2d6e6310c1acfcbc61764291ad9414,4,12,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7a6736bd4b91019e97f8ac35fad22eb7,0,21,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7a7068b1040b163a503a2a4e8fdc3f60,0,57,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7a7068b1040b163a503a2a4e8fdc3f60,0,57,35,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
7a7068b1040b163a503a2a4e8fdc3f60,1,46,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7a7068b1040b163a503a2a4e8fdc3f60,1,46,53,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
7afeec5aaf9a33b502baf9eb12c6bffa,1,60,18,files.python.rules.cryptography.security.crypto-mode-without-authentication,An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. 
7b605c6091eda5e335ae78a0dc88d7a1,1,20,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
7b605c6091eda5e335ae78a0dc88d7a1,1,20,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
7b605c6091eda5e335ae78a0dc88d7a1,1,64,12,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
7b605c6091eda5e335ae78a0dc88d7a1,1,64,12,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
7b94e81225c734ad1db862322bb45745,12,15,8,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7b94e81225c734ad1db862322bb45745,13,38,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7b94e81225c734ad1db862322bb45745,13,44,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7b94e81225c734ad1db862322bb45745,15,28,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7b94e81225c734ad1db862322bb45745,15,28,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
7bf727b0a925cfea3c8fe6b2bdb86ceb,0,3,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
7bf727b0a925cfea3c8fe6b2bdb86ceb,0,5,12,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
7bf727b0a925cfea3c8fe6b2bdb86ceb,1,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7c1aef70d0912a5f8bf8a14f977fcfb0,0,8,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
7c1aef70d0912a5f8bf8a14f977fcfb0,0,44,13,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
7c1aef70d0912a5f8bf8a14f977fcfb0,0,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7c2b23429c97aa345ecf1fdf77b4f951,3,10,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
7c5e0b53c0dfce0fbd19ceea0eea6de0,0,10,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7c6bef5f814a65f147f3d6cd3f81ea86,2,16,27,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7c6bef5f814a65f147f3d6cd3f81ea86,3,16,27,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7c6bef5f814a65f147f3d6cd3f81ea86,4,27,27,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7c74369a1b0f248e1b61f22443d43d24,0,12,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7c74369a1b0f248e1b61f22443d43d24,0,31,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7c784d73ae53675d73e1e121db65bacd,1,4,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7c784d73ae53675d73e1e121db65bacd,1,7,13,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7c784d73ae53675d73e1e121db65bacd,2,4,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7c784d73ae53675d73e1e121db65bacd,2,7,13,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7c89779533ed376c065b56e581765b6c,0,17,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7cd628ce46513f43843d1dec4d66ce0f,0,31,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
7cfa4dd6e83fdc4fd397da16aaa384d8,1,39,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7cfa4dd6e83fdc4fd397da16aaa384d8,1,68,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7cfa4dd6e83fdc4fd397da16aaa384d8,2,10,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7cfa4dd6e83fdc4fd397da16aaa384d8,2,18,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7cff0f95b819cf4cd9bbdbfb3ff46301,1,24,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
7cff0f95b819cf4cd9bbdbfb3ff46301,6,24,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
7d2403357b6e876ac22f6f4207e33091,17,24,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7d9778b46859048ca1242c1b09aaf3fc,13,42,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7d9778b46859048ca1242c1b09aaf3fc,15,47,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7d9778b46859048ca1242c1b09aaf3fc,22,15,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
7d9778b46859048ca1242c1b09aaf3fc,5,44,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7e63768eb611cadbc57ca1d7287547a1,0,27,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
7e967c9f030f8e7d5d59f818df66bab9,0,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7eddc864a0c505700919f2a04659ee6f,1,80,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7eddc864a0c505700919f2a04659ee6f,2,82,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7ee9a75c75d301eb99e37180ce6b5e9a,5,42,9,files.python.rules.lang.security.audit.sqli.psycopg-sqli,"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"
7ee9a75c75d301eb99e37180ce6b5e9a,5,42,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
7f668dbb060ee4166eb4f92074e569f1,18,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7f793d6c01996d99be1ef6039008514c,1,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7f793d6c01996d99be1ef6039008514c,5,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7fe1d5e294be2f24c2220b24d19c0933,0,17,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,1,18,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,10,32,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,11,30,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,13,14,28,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7fe1d5e294be2f24c2220b24d19c0933,13,34,28,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7fe1d5e294be2f24c2220b24d19c0933,2,10,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,2,27,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,3,82,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,4,30,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,5,41,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,7,30,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,8,38,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,9,76,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe930cecb3afb2215394db21f1e03f1,3,4,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_DEBUG,Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable
80555e4ec0fee8ad0df0157c34b87b5e,0,3,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
80aa528e7776a82ddcafbb00833c7883,0,6,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
80aa528e7776a82ddcafbb00833c7883,2,42,40,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
80b19ba869f8e9014fa5f50cf160fbdd,2,8,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
80b19ba869f8e9014fa5f50cf160fbdd,3,9,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
80b19ba869f8e9014fa5f50cf160fbdd,4,4,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
80b19ba869f8e9014fa5f50cf160fbdd,5,11,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
80f19d445be6f889efe9675bc827d0d9,0,10,25,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
80f19d445be6f889efe9675bc827d0d9,1,10,25,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
810cbba33f767276fec477fe2c2168b1,0,17,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
810cbba33f767276fec477fe2c2168b1,0,91,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
810cbba33f767276fec477fe2c2168b1,1,49,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
81224daee30c5980a491aca3b8ee0f5b,0,16,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
81224daee30c5980a491aca3b8ee0f5b,8,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
814f583621bc449b68ebd42f87ddfedf,0,38,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
814f583621bc449b68ebd42f87ddfedf,1,14,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
81587f2bdb4b6ba1c02544e464124e28,0,20,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
815943e89b9c71639c6f7e6a94b56b6c,8,17,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
815943e89b9c71639c6f7e6a94b56b6c,9,12,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
8181ef7acc6edd78057ffe786f3befe0,2,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
81970d1844f7cf5a397355ee050dcad3,0,68,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
81970d1844f7cf5a397355ee050dcad3,1,61,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
81970d1844f7cf5a397355ee050dcad3,2,63,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
81970d1844f7cf5a397355ee050dcad3,3,59,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
81970d1844f7cf5a397355ee050dcad3,4,61,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
81b6163dd9413c0783268415c30485d4,0,12,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
81b6f63eb14442f4df7c480bebac32db,6,42,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
81b6f63eb14442f4df7c480bebac32db,6,42,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
81b6f63eb14442f4df7c480bebac32db,8,48,16,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
81b6f63eb14442f4df7c480bebac32db,8,49,16,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
81b6f63eb14442f4df7c480bebac32db,8,67,20,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
81b6f63eb14442f4df7c480bebac32db,8,68,20,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
81b6f63eb14442f4df7c480bebac32db,8,89,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
81b6f63eb14442f4df7c480bebac32db,8,89,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
81bb4f5f12a23d30cc1f13a4609348d3,1,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
81c3800170be608f97ab73c69d44fe25,16,5,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
825966cda2700c2ba63e03b08c5e6a6e,0,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
827ada4ff64986bca67379cb5a5206b9,0,40,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
827f87db84ac676ad7e91d0ea359693d,1,27,8,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
82d5e386cba9e0fbdc8368b6a1e340be,0,24,16,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
82d5e386cba9e0fbdc8368b6a1e340be,0,26,15,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
82eadb932f2172d036da0d2b12c58ce3,0,60,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
82eadb932f2172d036da0d2b12c58ce3,0,60,43,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
82eadb932f2172d036da0d2b12c58ce3,0,86,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
82f1b88b5aaa6cf806f1d3c6ff453518,1,44,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
82f1b88b5aaa6cf806f1d3c6ff453518,1,44,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
831334664e310679c37d6baa26594db2,1,51,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
831334664e310679c37d6baa26594db2,1,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
838d262ec6e753929412c778103b09c0,0,41,26,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
838d262ec6e753929412c778103b09c0,0,84,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
83f68cae10f5d6eea037f315685c7ad0,2,15,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
84455103d53b2b30bae153af0708dfd0,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
84cbf27bc45864eaeddca6b6fa9ce3ed,1,37,12,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
850fd2da6ab94d309cf3702db3bc1066,3,8,6,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
856d841ba0e58bdc620a8a36c778ba90,1,6,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
8570b0c597390b80694fe7d02deb0ef1,2,30,23,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
8570b0c597390b80694fe7d02deb0ef1,3,32,23,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
8576f44937d3e1bb0237f83c978de2ba,0,8,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
85c9b780b348fa036d19a775a4820308,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
85c9b780b348fa036d19a775a4820308,0,52,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
86664deba506e7e367175918ddd581e1,1,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
86774e566e385455395b1247469055db,4,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
86f2a25416ffebf56dc7700691d6444d,14,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
874b0d514e6f846ef12decabddd3c4b0,7,8,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
87bb0974dacd78bea80204c0fd3a83f2,0,94,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
87c57b0fa657b9635e6d8d4d44d68ec7,0,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
88033ab65485270c5dd8e05d83ea0dd5,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
88033ab65485270c5dd8e05d83ea0dd5,0,14,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
8846a2ce64a1cbda9901f1ea7cb581fc,0,60,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8878ee40ecdbc091696a79d93d6cd5dc,3,3,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
889a5128afb79cb869ff3bd4bd8beb73,14,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
889a5128afb79cb869ff3bd4bd8beb73,7,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
891d6164ded43fc1f0ae70020f35eb35,0,16,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
891d6164ded43fc1f0ae70020f35eb35,0,18,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
891d6164ded43fc1f0ae70020f35eb35,0,20,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
891d6164ded43fc1f0ae70020f35eb35,0,22,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
891d6164ded43fc1f0ae70020f35eb35,0,24,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
891d6164ded43fc1f0ae70020f35eb35,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
89727908d5b78d95b41fdfce81c53619,0,70,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
89727908d5b78d95b41fdfce81c53619,0,89,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
89e306b0b93fc6c636efb0e3b5955e53,2,12,24,files.python.rules.lang.security.deserialization.avoid-dill,"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
89e306b0b93fc6c636efb0e3b5955e53,2,12,35,files.python.rules.lang.security.deserialization.avoid-dill,"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
89f3d17a27176463ff312c752f487245,2,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8a013c43091ab199bc645a51cbea5761,1,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8a50bd6293e37ce1263109a8ddad70b4,2,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
8a683eab747c0b0dd02d099ccf5c2264,11,25,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
8a7610013cfaa57ec74b78e5d180ae71,3,4,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8a7610013cfaa57ec74b78e5d180ae71,4,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8a895d73b0862d6952c505adb453d3f3,33,20,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8a9b7032c979b0d00f594a90095d78ed,1,7,20,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8a9b7032c979b0d00f594a90095d78ed,1,12,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8ab3ae72d24a9729a660a64905b6c4b2,1,8,12,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8adeab0e60b6af2571a2c839fe348310,0,52,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
8adeab0e60b6af2571a2c839fe348310,1,53,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
8b4bfe7b52a1e9e06719c5fccaca4ad4,0,6,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
8b65fd164a5c64c088181a2623a7bba2,0,14,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
8b65fd164a5c64c088181a2623a7bba2,1,14,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
8bdab7f77330b651dbbe44f8e7ebaa51,0,21,18,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bdab7f77330b651dbbe44f8e7ebaa51,0,34,24,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bdab7f77330b651dbbe44f8e7ebaa51,0,52,22,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bdab7f77330b651dbbe44f8e7ebaa51,1,21,18,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bdab7f77330b651dbbe44f8e7ebaa51,1,34,24,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bdab7f77330b651dbbe44f8e7ebaa51,1,52,22,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bf7db4e5f41c8c348a3afecc7f50d4e,0,15,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8c167343130f426f89a2046478d93381,0,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8c2d46aff7dccf3d627a32b97ec6eb4e,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
8c2d46aff7dccf3d627a32b97ec6eb4e,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
8c442b8f205f50811a012a3bbe7d93f6,2,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
8d4b9bd0af376135aa621fd5abec422d,2,38,19,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8d4b9bd0af376135aa621fd5abec422d,2,38,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8d4b9bd0af376135aa621fd5abec422d,3,38,19,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8d4b9bd0af376135aa621fd5abec422d,3,38,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8d4b9bd0af376135aa621fd5abec422d,3,45,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8d4b9bd0af376135aa621fd5abec422d,3,45,46,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8d4b9bd0af376135aa621fd5abec422d,6,27,24,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8d4b9bd0af376135aa621fd5abec422d,6,27,52,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8d4b9bd0af376135aa621fd5abec422d,6,35,77,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8d9ce5c551ac29189521e3fae4faab20,0,10,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
8db3f7ceaabc72da66f650fb6d36f31b,5,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8ddc42c8c9ad5bba50e15f7dc6c7d004,1,8,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8df1521b9379e0ab23bb65fdf56d2e5b,11,13,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
8df1521b9379e0ab23bb65fdf56d2e5b,18,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8e2496d7dff48e66bbcd9a470edf4b8f,4,9,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8e2496d7dff48e66bbcd9a470edf4b8f,4,9,57,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8e536fa9ae900bdeffa9a377be9bee62,0,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8e536fa9ae900bdeffa9a377be9bee62,0,7,79,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8e87343eb8808d229d4665a005a49c77,1,32,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
8e87343eb8808d229d4665a005a49c77,1,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8e87343eb8808d229d4665a005a49c77,4,70,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
8e87343eb8808d229d4665a005a49c77,4,70,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8ea6e2385849505fb4f9b74b98222559,2,5,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
8ecdb9cf8609bfa19e2904ade88de345,1,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8ecdb9cf8609bfa19e2904ade88de345,5,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8f16263c31cff0f26a0b700daae9a66a,0,11,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8f410464f75f9802f3f02fdb1fbe36bd,3,52,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8f4f2ac2eaa137ecfabf5bef6fb263c0,12,6,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
8f4f2ac2eaa137ecfabf5bef6fb263c0,14,6,11,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
8fa9d76b6d248817498e03abc595bb4f,0,6,14,files.python.rules.pycryptodome.security.crypto-mode-without-authentication,An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. 
8fb5e5fedbd85e9b0ad5e4f5a3aa3ddb,0,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
90161981f149009a9402825f2efe4e19,2,10,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
90261c5e2952f785ee38acc756d009e5,5,13,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
90261c5e2952f785ee38acc756d009e5,6,14,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
90261c5e2952f785ee38acc756d009e5,7,14,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
90261c5e2952f785ee38acc756d009e5,8,15,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
90261c5e2952f785ee38acc756d009e5,9,15,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
905af0a5dc848276b4b2651234bf834a,0,25,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
90a469cb9507ba6da344ed4898ad339d,0,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9137b0a588be4ad445cca0683b1581d6,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
915465a94fd183a74e23f8dfe0a2dad4,7,31,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
91710ccb4bb416226064702d7600f683,0,7,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
91755ff0ffba13c375c8e305bf0fe060,0,16,28,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
91841c8815d093fc649a3aae6be77b67,0,5,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
91a4ce14db3b43d4c86068314a474e41,5,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
91a50f673c18c70eeb54cc073fc13115,0,10,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
91a50f673c18c70eeb54cc073fc13115,1,16,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
91d4bf042c6ee223c297df88a6573ef9,0,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
921da9a84e8e75c170f69c2124de24c6,2,26,11,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
922a0b22e20c0dfa8fc086fb33721e9a,2,10,19,files.python.rules.fastapi.security.wildcard-cors,CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.
9231a25087a61497d056170a19428ba6,4,49,4,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9231a25087a61497d056170a19428ba6,5,54,4,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
92788623ca43a31d7c831d858678b649,1,82,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
92788623ca43a31d7c831d858678b649,1,150,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9295012a3f58ee0ccbd41ca28d272ef1,1,42,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
929f1b3106c0cbc1440f9d81626f8171,0,33,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
92ba6da864cf188d9e69f89399038d22,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
92f7e06470f3ffbe062aaa2f3539e951,1,35,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9332de848d92ac3d7747ffa3b75df198,0,8,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9332de848d92ac3d7747ffa3b75df198,1,6,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
93c8e04ba8ade45ac3607e668cc01100,1,20,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
93e26c71ab03bdddeaa367f00cf5b25d,0,136,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
945223baefc2349fe9d2a68a58878b0b,0,11,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
94d3a0c272935dcb4c9b790cba0f6906,1,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
94d9697214849297f7a9b307cc6dc2bc,1,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9501b9ed28b5ef12ecd6858ffb559b05,1,14,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9501b9ed28b5ef12ecd6858ffb559b05,2,15,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9506eb2b9d06a3e81a23c058cb584799,0,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9526bfdf54a62a801c2480b9e712b412,1,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
95729c406479dd6df777235bac4c51a6,0,14,8,files.python.rules.lang.security.audit.httpsconnection-detected,"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information."
957efbd47267aecdefcd5e40d9cde591,0,13,15,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
9599c68b5a59a80040f4ade4b9b4127c,0,45,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
9599c68b5a59a80040f4ade4b9b4127c,2,45,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
9599c68b5a59a80040f4ade4b9b4127c,5,44,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
959a487f7290f4eb0a3f3324253a107b,0,12,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
95c4bcfc963c3f4770b3a5f43edec11d,0,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
95c4bcfc963c3f4770b3a5f43edec11d,1,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
95c4bcfc963c3f4770b3a5f43edec11d,4,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
95cd003538987d6802b99f7174e51a8b,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
95e0b270859ddefc938c60c44af5271d,5,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
95f77894430ac1abf27838408adb91fe,3,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
96329ed6f5dbcfb9ceb14593da6492b6,10,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9661c7f270c5ad1db118374282bb249b,15,19,26,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9661c7f270c5ad1db118374282bb249b,15,19,60,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
96c129b6431f63eeac4093c99e539d36,0,34,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
96d14a15fbb78be3bad7d5b98a3e910d,0,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
96d14a15fbb78be3bad7d5b98a3e910d,0,5,87,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
96d14a15fbb78be3bad7d5b98a3e910d,0,10,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
96d14a15fbb78be3bad7d5b98a3e910d,0,10,56,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
96e214b375a4d9c59b94f3b1e7de33a5,39,2,4,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
96ee3bf29c6dd3fa6dfaff6004281c3f,2,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
96f8e63efaafa6967d9e896d733fc189,1,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
96f90fc766ec532bd24c1032bc470446,0,20,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,1,20,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,2,24,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,3,24,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,4,25,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,5,31,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,6,31,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,7,33,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
972ff3cc73a4023df49c3e1ea8d86152,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
972ff3cc73a4023df49c3e1ea8d86152,0,27,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
972ff3cc73a4023df49c3e1ea8d86152,0,31,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
972ff3cc73a4023df49c3e1ea8d86152,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
972ff3cc73a4023df49c3e1ea8d86152,1,38,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
972ff3cc73a4023df49c3e1ea8d86152,1,41,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
9747662aad3602818afe0c2bab1bbdb0,6,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
976334173a829ff85b4b1854a7a6f153,0,22,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
976334173a829ff85b4b1854a7a6f153,1,22,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
97ce5c7016ddd39ed01b805993097cfd,1,48,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
98503105adc77468fdfc46e38a275de4,0,7,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9854c8ad8f827bd4cc9b1527a0b74065,0,14,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9854c8ad8f827bd4cc9b1527a0b74065,0,15,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9877d9dc2f0809d8991103562a845b30,0,10,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
98a1869d6583102aa4719af91c49d709,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9925c6e9f7d0d4be153fc37382ab42e4,7,8,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9925c6e9f7d0d4be153fc37382ab42e4,7,8,45,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
993cddeab0df003642a676e06963bcc7,1,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
993cddeab0df003642a676e06963bcc7,16,44,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
993cddeab0df003642a676e06963bcc7,18,39,16,files.python.rules.flask.security.audit.xss.make-response-with-unknown-content,"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`."
993cddeab0df003642a676e06963bcc7,18,46,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
993cddeab0df003642a676e06963bcc7,23,55,9,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
993cddeab0df003642a676e06963bcc7,26,49,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
993cddeab0df003642a676e06963bcc7,26,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
993cddeab0df003642a676e06963bcc7,29,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
993cddeab0df003642a676e06963bcc7,3,48,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
993cddeab0df003642a676e06963bcc7,6,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
993cddeab0df003642a676e06963bcc7,9,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9955336451d2a6c8b5f556f45ddd2c56,6,12,16,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
9959de82b9bdc5376182ba279ff01a70,0,19,18,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
9959de82b9bdc5376182ba279ff01a70,0,31,17,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
9969f505238564db7277bd53a14d8d3c,0,41,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9969f505238564db7277bd53a14d8d3c,2,36,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
99f1b6bbf85fc079298080e01fc45de5,10,14,16,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
9a07b061affeef77e25953bfcedba547,0,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9a4b21b4251cfcdb6253f66aa46b63bb,0,34,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
9a6f604fa1f77893cadf6ef001a62d1a,3,9,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9a7d4181a5e54d4cf0261da63ae6cca3,1,27,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
9aa9d7310017c040cceeb8d608b08d15,6,30,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9ac3262082a870e089b976ba2127fcc8,0,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9b12d0ad354b4f918fc4fc140a2db721,0,11,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9b3363351a2f5c83ab042786479b640f,1,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9b3363351a2f5c83ab042786479b640f,1,97,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9b3531abd93d963513115a4edec6a919,1,11,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b3531abd93d963513115a4edec6a919,2,10,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b3531abd93d963513115a4edec6a919,3,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b3531abd93d963513115a4edec6a919,4,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b3531abd93d963513115a4edec6a919,4,21,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b3531abd93d963513115a4edec6a919,5,16,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b8158378b4755d4167295e37088fe48,1,32,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9b9b68a212ed72c7f2131a50d2bafed5,12,3,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9bb81e1212362f45e3c3d0013ea5c819,0,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9bb81e1212362f45e3c3d0013ea5c819,0,7,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
9bb81e1212362f45e3c3d0013ea5c819,4,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9bb81e1212362f45e3c3d0013ea5c819,4,7,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
9bf531b048d0a8939d81050004872938,1,19,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9bf7c98b1bfe5a531fc01092496f8319,5,8,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9bf7c98b1bfe5a531fc01092496f8319,8,8,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9c0a7ab07c2bd177ccfca4548c1456f2,0,5,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
9c0a7ab07c2bd177ccfca4548c1456f2,1,5,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
9c108c0e3b77ed07a97e6797b5ec8441,10,25,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c108c0e3b77ed07a97e6797b5ec8441,12,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c108c0e3b77ed07a97e6797b5ec8441,13,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c108c0e3b77ed07a97e6797b5ec8441,7,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c108c0e3b77ed07a97e6797b5ec8441,8,15,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c108c0e3b77ed07a97e6797b5ec8441,9,16,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c61cc01d6d25b2ebf00af079398865d,3,63,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9c61cc01d6d25b2ebf00af079398865d,4,67,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9c61cc01d6d25b2ebf00af079398865d,5,58,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9c61cc01d6d25b2ebf00af079398865d,6,63,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9c6f4d395be8bc4757b5f50670b8d4ae,0,44,13,files.python.rules.flask.security.audit.secure-set-cookie,"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration."
9c6f4d395be8bc4757b5f50670b8d4ae,0,58,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9c6f4d395be8bc4757b5f50670b8d4ae,1,8,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
9c6f4d395be8bc4757b5f50670b8d4ae,1,43,35,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
9c6f4d395be8bc4757b5f50670b8d4ae,1,53,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9c8860cea4c1e4dca245d0c85bd144ac,5,10,25,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
9c8860cea4c1e4dca245d0c85bd144ac,5,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9c8860cea4c1e4dca245d0c85bd144ac,7,10,25,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
9c8860cea4c1e4dca245d0c85bd144ac,7,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9c9084a75c6df444591cbb4986e4f618,0,11,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9c9084a75c6df444591cbb4986e4f618,15,16,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9c94fa342060e892d5beaf4ab02600dc,0,12,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c9cb3cfbff2ba5840232a8eab707a5b,0,26,20,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9c9f58f66a43f81d32c558482eaa4eaf,0,16,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9cb7a518d66ff5129713bce79f38cee1,0,12,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9cb7a518d66ff5129713bce79f38cee1,0,35,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
9cb7a518d66ff5129713bce79f38cee1,1,19,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
9ccb94b876c1bf9b9b35101ca7abc70f,0,39,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9ccb94b876c1bf9b9b35101ca7abc70f,1,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9ccb94b876c1bf9b9b35101ca7abc70f,5,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9cdaa3fc451662485d2a26ad61409502,0,5,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9cdaa3fc451662485d2a26ad61409502,0,5,94,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
9cdaa3fc451662485d2a26ad61409502,5,25,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
9cec3c205ca1b2c8fda98825cc93e62c,1,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9cec3c205ca1b2c8fda98825cc93e62c,1,26,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9cedcbfe439674415cab1425fe1e9821,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
9d394d96dfaefb97ccab899e9667c710,0,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9d394d96dfaefb97ccab899e9667c710,2,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9d5c3c8038688d69194263c951b868ac,0,14,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9d7874aa01a17e2edb50f1b95d11aea8,0,75,34,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9d7874aa01a17e2edb50f1b95d11aea8,0,84,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9d8ea374a276d7ba2da4609acdadd1c5,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
9d8ea374a276d7ba2da4609acdadd1c5,6,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
9dc8739d2d140f102aafce1e060c1881,0,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9dc8739d2d140f102aafce1e060c1881,2,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9dc8739d2d140f102aafce1e060c1881,5,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9e1546d2ae3720c75caae9bb328a9f53,0,12,14,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
9e2f34b7573c154d210214aeba971f8f,2,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9e2f34b7573c154d210214aeba971f8f,5,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9e6390e94dfffce99b6251a7064f789d,2,6,20,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9e6390e94dfffce99b6251a7064f789d,2,12,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9e95173da52c443646e879ac288bdb8d,1,4,10,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,10,26,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,11,31,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,4,27,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,5,28,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,6,42,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,7,32,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,8,35,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9ec62b8067c2e874f35699287a13bd67,2,10,12,files.python.rules.django.security.audit.unvalidated-password,The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
9f0504c7bc2113acf724088a5fec3d2e,0,9,16,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9f0504c7bc2113acf724088a5fec3d2e,0,15,39,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9f20aa75c59163efa6f5a81befaf4b47,0,57,15,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9fa67319006d9c48e6215b24fc954377,0,19,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9fc56c7c66347a7f57e961bdfdecd42f,0,12,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9ffb16abe964454426282f5b5c7a26fd,17,9,8,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
a05421e7eb8a3dc062fc8c675e963778,1,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
a05421e7eb8a3dc062fc8c675e963778,1,10,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
a05421e7eb8a3dc062fc8c675e963778,5,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
a05421e7eb8a3dc062fc8c675e963778,5,14,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
a063dcb866e031e15dfa38ecc7296f39,0,3,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
a063dcb866e031e15dfa38ecc7296f39,1,3,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
a0b4a9d9525048f6b4a31b15504d8d44,1,10,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
a0f78af2d78cb4c7b4a0f07191fdf5c5,0,10,12,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a0f78af2d78cb4c7b4a0f07191fdf5c5,1,10,12,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a128fc1c25b54b42d54fb61e20f5b349,0,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a157a15c4dba41bffa2f9b510a46a71d,0,31,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a157a15c4dba41bffa2f9b510a46a71d,1,32,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a161bb6ec4c87900ffc4f18aa6f2a4d7,2,7,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,2,12,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,3,17,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,3,25,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,4,21,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,4,25,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,5,45,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,5,53,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,7,52,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a17dda7b46d16c9625a3540823992f0a,1,42,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a1e367a4df4ecdd586fb5ee5a403d517,0,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a1e367a4df4ecdd586fb5ee5a403d517,1,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a1fa11004a35f604402fd6a52b067272,0,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
a1fa11004a35f604402fd6a52b067272,0,58,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a1fc91c8b0e2f880bafab878cb373fc0,0,5,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
a1fd46d5f3aef1e335eb0df494fd724f,0,8,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a1fd46d5f3aef1e335eb0df494fd724f,2,11,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a1fd46d5f3aef1e335eb0df494fd724f,3,11,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a1fd46d5f3aef1e335eb0df494fd724f,7,6,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
a1fd46d5f3aef1e335eb0df494fd724f,7,11,20,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
a22f9737a58fbffb882db096d49cd52a,1,19,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
a22f9737a58fbffb882db096d49cd52a,2,19,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
a29630042220b522dc575c8e8c653932,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a2b2cf1d3cb7f0f3cf3a6902c7acb1d1,1,31,21,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
a2e231af54c8249adde814d28a28b46f,7,37,22,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a2e231af54c8249adde814d28a28b46f,8,37,22,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a37f84630bb6e60d9ab93ec48f196e6a,0,10,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
a392f70322e5f113bbfcfec882250204,8,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a4065bff261c66a42e617a961d3451a9,4,7,23,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
a430063e3a16050cc76c6c7ee7c8ddc7,2,14,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a430063e3a16050cc76c6c7ee7c8ddc7,3,14,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a430063e3a16050cc76c6c7ee7c8ddc7,4,14,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a430063e3a16050cc76c6c7ee7c8ddc7,5,14,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a430063e3a16050cc76c6c7ee7c8ddc7,6,17,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a495e834c89d044f28c923f5bbff3adc,6,13,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
a4b3425d1af2adfea6b31f793931c288,10,27,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
a4b3425d1af2adfea6b31f793931c288,14,25,24,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a4b3425d1af2adfea6b31f793931c288,14,26,19,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a4b3425d1af2adfea6b31f793931c288,14,27,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a4b3425d1af2adfea6b31f793931c288,15,15,24,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a4b3425d1af2adfea6b31f793931c288,15,16,19,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a4b3425d1af2adfea6b31f793931c288,15,17,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a4bc0baaedd4b4c35c133e23e45faad9,1,43,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
a4c3714be1f933fa84d8130751a13980,2,17,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a4c3714be1f933fa84d8130751a13980,2,97,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a4c3714be1f933fa84d8130751a13980,6,17,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a4c3714be1f933fa84d8130751a13980,6,103,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a542bdfc95e8cc8da6b079681485de24,10,4,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
a542bdfc95e8cc8da6b079681485de24,10,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a542bdfc95e8cc8da6b079681485de24,8,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a57366464f4439a1c8c179a814be27e0,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
a5767f094e4d5ba0c14d57a8a114165e,5,27,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
a5767f094e4d5ba0c14d57a8a114165e,5,32,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
a5767f094e4d5ba0c14d57a8a114165e,5,36,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
a5767f094e4d5ba0c14d57a8a114165e,5,58,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a5767f094e4d5ba0c14d57a8a114165e,7,33,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
a5767f094e4d5ba0c14d57a8a114165e,7,38,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
a5767f094e4d5ba0c14d57a8a114165e,7,50,9,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
a5767f094e4d5ba0c14d57a8a114165e,7,52,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
a5767f094e4d5ba0c14d57a8a114165e,7,54,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
a5912d063eedb5a2b510aa67d2fd5193,0,4,5,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
a59822b16173c02376572f2ab6724ec1,10,48,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a59822b16173c02376572f2ab6724ec1,10,57,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a59822b16173c02376572f2ab6724ec1,9,46,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a59822b16173c02376572f2ab6724ec1,9,55,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a59d6f0f7e4af5d401d7b94a041156af,0,10,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
a59d6f0f7e4af5d401d7b94a041156af,0,15,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
a59d6f0f7e4af5d401d7b94a041156af,0,16,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
a5ac1e9b598a93faa131b1d917d996c7,5,13,10,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
a5aed7cb6398d7525266281e8620adc8,0,32,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a5ff8610389f207c439a8b4fa42fcc98,4,12,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
a5ff8610389f207c439a8b4fa42fcc98,4,12,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
a64c44ac9a34757216dec210b8764b4d,0,30,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
a6945980fd0c4eab624820b59cd255a7,3,40,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a6b3f1d4719079ddb3ce5e48fe2aca29,1,5,14,files.python.rules.pycryptodome.security.insecure-cipher-algorithm-des,"Detected DES cipher or Triple DES algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use a secure symmetric cipher from the cryptodome package instead. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."
a6b3f1d4719079ddb3ce5e48fe2aca29,1,10,14,files.python.rules.pycryptodome.security.insecure-cipher-algorithm-des,"Detected DES cipher or Triple DES algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use a secure symmetric cipher from the cryptodome package instead. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."
a6b6d33e78d482853a0b91aab89c178f,6,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a6d170d1190053f49abeb4d70da98220,0,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a6d170d1190053f49abeb4d70da98220,22,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a6d170d1190053f49abeb4d70da98220,30,50,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a6d170d1190053f49abeb4d70da98220,31,56,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a6d170d1190053f49abeb4d70da98220,32,59,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a725cc27f7ab30ada9010f855e2432c4,0,11,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
a7b539b5fdf0d9927831d2cda16fcb45,1,5,7,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a7b539b5fdf0d9927831d2cda16fcb45,1,9,8,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a7b539b5fdf0d9927831d2cda16fcb45,2,5,11,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a7b539b5fdf0d9927831d2cda16fcb45,2,11,12,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a81929a6d11429199ca98f1f5eff3e14,1,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a84c85d6ef9fd0dba13a75e4a4ff2b79,0,21,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a9586b3e87673f3504d89daae56c19e0,4,16,15,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
a9586b3e87673f3504d89daae56c19e0,7,9,24,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
a993868510279e37ea54d9e505e3506c,2,8,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a9c6797080d488b9111d59b331c5f809,0,10,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a9e75255c7cf973217d9b9cde846a3b2,0,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aa029281044a5160260717a7e025009d,0,8,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
aa029281044a5160260717a7e025009d,0,8,40,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
aa46bcca415e7c0e17caa7b354b17b69,2,21,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
aa51deaa61459ce12618c408f01348fc,2,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aa9f673b7f83b4b33e7965a194587f8d,0,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aa9f673b7f83b4b33e7965a194587f8d,2,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aaaeb197dc725eb166b9f7a40d2410c9,6,7,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
aaaeb197dc725eb166b9f7a40d2410c9,6,7,104,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
aaaeb197dc725eb166b9f7a40d2410c9,8,37,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
aaaeb197dc725eb166b9f7a40d2410c9,8,37,104,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
aaaeb197dc725eb166b9f7a40d2410c9,8,66,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
aaaeb197dc725eb166b9f7a40d2410c9,8,66,74,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
aab52c9aab04e9786422b810ed59c7bf,5,36,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
aab52c9aab04e9786422b810ed59c7bf,5,36,25,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
aabb68c23cd62f07d92b6914ab160917,0,7,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
aac208f8923bf71e7ab49de642e84d56,0,26,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
aac208f8923bf71e7ab49de642e84d56,0,71,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
aac208f8923bf71e7ab49de642e84d56,0,83,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
aac208f8923bf71e7ab49de642e84d56,0,84,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
aac208f8923bf71e7ab49de642e84d56,0,85,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
aad31fcf3e16d32e22f23942510f87f6,0,58,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aae825fb221fde8a15e45e5f723c8ebd,0,14,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
aaed4ee3cd22070a0167c4fd10de4960,6,15,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ab0c78a4096ceb2957c18a54da973227,0,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ab22a8405c535115eb86c12fb4ce3a0a,3,16,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
ab62c5a23c94a006a82a019a89bc0c10,0,7,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
ab62c5a23c94a006a82a019a89bc0c10,2,18,15,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
ab86eed329fa4147c90a08c7cebbf51e,1,25,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ab86eed329fa4147c90a08c7cebbf51e,3,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ab86eed329fa4147c90a08c7cebbf51e,6,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ab87703004e4fef20967461a532272de,1,94,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ab87703004e4fef20967461a532272de,66,6,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
abd82a99caa9b60dd05d8c4b19f838d2,16,4,51,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
abe409662d65350a075367fd6261eca4,0,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
abfa5b20c998aefaf5b1a1eff5296842,1,30,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
abfa5b20c998aefaf5b1a1eff5296842,1,30,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
ac2f8eb072e711ce524f67cdf332cbc9,0,29,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
ac2f8eb072e711ce524f67cdf332cbc9,1,26,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
ac2f8eb072e711ce524f67cdf332cbc9,2,21,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
ac2f8eb072e711ce524f67cdf332cbc9,3,41,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
ac2fe664082fad3dc8adbe56212aead7,1,29,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
ac2fe664082fad3dc8adbe56212aead7,10,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ac2fe664082fad3dc8adbe56212aead7,5,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ac2fe664082fad3dc8adbe56212aead7,8,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ac367417d9c3abdb1bb4f6b36f6919f7,0,74,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ac41bf689ffa79f53487bac508e3427d,6,26,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ac41bf689ffa79f53487bac508e3427d,6,32,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ac41bf689ffa79f53487bac508e3427d,7,4,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ac8aed108f054a6574623198b4813d37,2,44,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
ac8aed108f054a6574623198b4813d37,4,44,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
acb0788f03a2176898244b5125841990,3,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
acb0788f03a2176898244b5125841990,3,25,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
acf7498aa2773a667c50bfa44d199adb,5,20,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ad04c723593596d6a550b9afb317a08c,0,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad6638ac9c3457225fb8d1ae768aa8d6,0,19,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ad84e9d4cb7b0267736d4be9e8623e6b,1,61,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad9286f1041a7076af5f232ff26912f0,12,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad9286f1041a7076af5f232ff26912f0,17,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad9286f1041a7076af5f232ff26912f0,19,5,7,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
ad9286f1041a7076af5f232ff26912f0,19,5,7,files.python.rules.jinja2.security.audit.missing-autoescape-disabled,"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
ad9286f1041a7076af5f232ff26912f0,19,15,10,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
ad9286f1041a7076af5f232ff26912f0,21,5,7,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
ad9286f1041a7076af5f232ff26912f0,21,5,7,files.python.rules.jinja2.security.audit.missing-autoescape-disabled,"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
ad9286f1041a7076af5f232ff26912f0,21,16,10,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
ad9286f1041a7076af5f232ff26912f0,22,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad9286f1041a7076af5f232ff26912f0,24,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad9286f1041a7076af5f232ff26912f0,26,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad9e2c23a3cade7e998bf11409f48cb9,0,13,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ada81f27faeda7e99885c17d94996ee0,1,58,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
adf184bae043a3be1ca18aedb4268f50,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
adf184bae043a3be1ca18aedb4268f50,1,14,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ae0b079ac61a4ff8f8ca8c4b600e4258,0,18,18,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
ae383484b60543df995fadbb4cbe90ae,0,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ae4375f8c1a7676bcc86f7ac61daa003,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
ae4375f8c1a7676bcc86f7ac61daa003,0,23,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
aed47243af388365d2b09a765e0e5645,0,56,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aed47243af388365d2b09a765e0e5645,1,20,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
aed47243af388365d2b09a765e0e5645,1,23,24,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
aed47243af388365d2b09a765e0e5645,1,40,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aed47243af388365d2b09a765e0e5645,2,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
af068ca2470253f2aeb6c7951518df0f,13,15,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
af10bc41ce78faaf1ab5031cb79e0774,0,13,18,files.python.rules.lang.security.audit.dangerous-asyncio-create-exec-audit,"Detected 'create_subprocess_exec' function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
af10bc41ce78faaf1ab5031cb79e0774,1,21,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
afa90b841fd649f7d47cc0af12e606be,8,10,9,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
afe21c03c7cd39ea3b82986f39edb8b4,25,45,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b00ca0392d84872b6fe8c770f630bf92,0,8,20,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b098aedd87f855a65391bf4442c98b71,0,11,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b09c7a8b79f728c5e12dc7bc48e2184c,1,80,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b0b7bf7e0cd0ec76df0ef60f602c87fa,2,10,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b0b7bf7e0cd0ec76df0ef60f602c87fa,8,21,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b107e1391ff1d2e109b7a644f0fb8f1e,0,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
b178e98eda6b5214bbd21dd6d0301c87,0,12,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,1,12,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,2,13,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,3,13,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,4,16,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,5,13,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,7,15,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b178e98eda6b5214bbd21dd6d0301c87,8,16,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b17b15422d6ab3ed9b937fba794733fe,7,27,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b1ac3ea82e8247486a00bf6ec473d5ae,0,39,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
b1ac3ea82e8247486a00bf6ec473d5ae,0,39,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
b1ac3ea82e8247486a00bf6ec473d5ae,0,45,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
b1ac3ea82e8247486a00bf6ec473d5ae,0,45,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
b1ac3ea82e8247486a00bf6ec473d5ae,1,26,35,files.python.rules.sqlalchemy.security.audit.avoid-sqlalchemy-text,"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
b1ac3ea82e8247486a00bf6ec473d5ae,1,52,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
b1ac3ea82e8247486a00bf6ec473d5ae,1,55,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
b1ac3ea82e8247486a00bf6ec473d5ae,1,55,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
b1fd9e64717f424886fab50f9833e6e6,0,75,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b1fd9e64717f424886fab50f9833e6e6,1,76,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b2faf3b6f636fb5195c0d7fb33566446,1,16,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b30a50494884e8f68cd1b7be0339c4f9,1,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b34043702435fac520b51376130b27b1,1,18,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
b3781317927acffd66aa781e4883f45a,6,68,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b3c9c2daa20a40a00aa880078ab5f5d0,0,6,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b3c9c2daa20a40a00aa880078ab5f5d0,0,43,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b3c9c2daa20a40a00aa880078ab5f5d0,0,53,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b3d1b7cd39bb7a259af297afc6bbbc8c,1,7,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b3d1b7cd39bb7a259af297afc6bbbc8c,2,7,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b3d1b7cd39bb7a259af297afc6bbbc8c,3,7,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b3f92c4cf43d10ceebc28ede218cd00e,0,27,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b47052fbc2efd5b9ed908720c9bf0540,1,18,8,files.python.rules.lang.security.audit.ssl-wrap-socket-is-deprecated,"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket."
b47052fbc2efd5b9ed908720c9bf0540,2,72,3,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b47052fbc2efd5b9ed908720c9bf0540,2,89,8,files.python.rules.lang.security.audit.ssl-wrap-socket-is-deprecated,"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket."
b47d990d9a49cf8934c0ba3c0a809061,14,13,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b47d990d9a49cf8934c0ba3c0a809061,5,16,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b47d990d9a49cf8934c0ba3c0a809061,7,13,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b48d9808363d3cc86d599a711c27becf,3,25,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b4b44d586250f06ce3a3c85a2c7904cb,0,11,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b4bc4952158a1795ecf4635ba3173f84,1,4,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b4bc4952158a1795ecf4635ba3173f84,1,6,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b4bc4952158a1795ecf4635ba3173f84,13,54,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b4bc4952158a1795ecf4635ba3173f84,13,56,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b4bc4952158a1795ecf4635ba3173f84,4,20,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b4bc4952158a1795ecf4635ba3173f84,4,22,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b4e1de8adcbfe54aece79822f639801a,0,25,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b4e656b17f2561134ec856d110615455,0,6,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b4e656b17f2561134ec856d110615455,1,7,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
b4f7867329968dacdeda69adb1e62b72,0,2,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b4f7867329968dacdeda69adb1e62b72,1,13,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b4f885b26a9d2cc3a14bcb85136fe7b6,6,21,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b4f885b26a9d2cc3a14bcb85136fe7b6,6,21,38,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
b541bfb0344fb22647fc007531a70656,1,16,10,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
b541bfb0344fb22647fc007531a70656,1,16,10,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
b54f200139ef134936efb91c1db01694,10,4,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b561f84f17dda4d8a97373e976b38cd8,3,44,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b5d103bc1223f46e7765dd6fe46499e7,0,17,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b641eb94a55f42fdbe39b8b67deaab2d,0,52,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b6a72df9bb80f974f2734798075566eb,1,24,21,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
b6a72df9bb80f974f2734798075566eb,6,37,21,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
b6bd771fdd2428580f1af14302ac82b7,0,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6bd771fdd2428580f1af14302ac82b7,1,36,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6bd771fdd2428580f1af14302ac82b7,2,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6bd771fdd2428580f1af14302ac82b7,3,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6bd771fdd2428580f1af14302ac82b7,4,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6de5fbc195083eb3feb506b32a31796,1,4,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6de5fbc195083eb3feb506b32a31796,3,4,5,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b6ebd263ea345b42865351ddecb3b18b,1,11,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b6ebd263ea345b42865351ddecb3b18b,3,8,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b6ec2f34d6a0f7456b1d1f3eb0fa46fb,3,30,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
b6f72dc8e8a3074594d64c4f65a9efd6,0,9,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b6f72dc8e8a3074594d64c4f65a9efd6,1,4,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
b6f72dc8e8a3074594d64c4f65a9efd6,1,5,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
b6f72dc8e8a3074594d64c4f65a9efd6,1,10,11,files.python.rules.django.security.injection.tainted-url-host,"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
b6f72dc8e8a3074594d64c4f65a9efd6,1,12,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b79be184c8397a1a3339265821d6f76e,1,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b7a4c610e81f8f0ae0e0cb6e853a5d7a,1,13,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b7a4c610e81f8f0ae0e0cb6e853a5d7a,1,24,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b7bb17442089e8981df8821af88684e1,0,19,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
b7e8bae74df4c90b983baa0320ab1ac6,1,15,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
b7e8bae74df4c90b983baa0320ab1ac6,1,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b7e8bae74df4c90b983baa0320ab1ac6,16,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b7e8bae74df4c90b983baa0320ab1ac6,18,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b7e8bae74df4c90b983baa0320ab1ac6,7,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b7f0e5cfdee20991985cb4afe1576bc8,0,7,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b817b4aae995c5c0eae3fafd4fc3de85,1,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b840e288650a5c56c4437654782db5ed,16,2,17,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b863c1c67cb6ff8824bca53bdccd2808,1,12,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
b863c1c67cb6ff8824bca53bdccd2808,3,19,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
b9411c26e2050f18f144329ea61b58b5,0,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
b9411c26e2050f18f144329ea61b58b5,0,12,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
b947aae2fbd28d6b67936ec4a51daff4,1,4,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b98bbffcc64298f9961ec5f708258b3c,0,11,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b98bbffcc64298f9961ec5f708258b3c,8,11,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b99e9ec812c3ea1e99eb518bc7cf24a8,1,48,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b99e9ec812c3ea1e99eb518bc7cf24a8,3,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b9dca8cfdb1d875fee67bb10128c7f17,0,14,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ba5a29e2fd5d4b2951c7ed46819a37a1,3,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ba9ebe7d6767720cd33962e30e4c1570,0,6,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
bad75b2f7559351c31b84964fd789408,2,20,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
baef4522395a2963596361b6d9028729,0,11,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bb020fa5db7b2c5ef2a69aea7c7e8d87,4,6,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
bb020fa5db7b2c5ef2a69aea7c7e8d87,5,55,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
bb07391eeecb1b85c8eeb7f7c738a814,1,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bb07391eeecb1b85c8eeb7f7c738a814,3,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bb07391eeecb1b85c8eeb7f7c738a814,5,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bb07391eeecb1b85c8eeb7f7c738a814,6,17,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bb17931e9beba1771993804558ec15e2,0,109,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bb17931e9beba1771993804558ec15e2,10,14,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bb17931e9beba1771993804558ec15e2,4,17,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bb1a4595cb2de4c7b3efb2c30e0ee1f3,0,13,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
bb1a4595cb2de4c7b3efb2c30e0ee1f3,0,13,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
bb28fee64905eb7d2a648669b9b16c85,0,27,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bb6973e2cb394582e2593fc06037f535,0,52,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bb6973e2cb394582e2593fc06037f535,1,54,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bb6973e2cb394582e2593fc06037f535,2,68,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bb6973e2cb394582e2593fc06037f535,3,66,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
bb7d6c4ec0b239aea275c619e463fe08,0,18,17,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bbd4cb9930e7ae79dc0ff12c3e266b5a,1,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bbd4cb9930e7ae79dc0ff12c3e266b5a,11,25,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bbd4cb9930e7ae79dc0ff12c3e266b5a,6,25,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bbf512a7f28b0512874ea51ddd8419ee,0,6,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
bc0ec73baebbf21227fd45fc27372348,0,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bc4499cbfdd34783bfd549ab14db5464,1,7,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
bc60163461bfe9cba8d81851bd8f224d,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bc6fbba345f4e1cd7869bd0ef9d84933,2,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bc9d65dceb6eae998161c18c17774b97,0,20,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bc9d65dceb6eae998161c18c17774b97,0,20,40,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bc9d65dceb6eae998161c18c17774b97,1,23,18,files.python.rules.flask.security.injection.subprocess-injection,"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
bc9d65dceb6eae998161c18c17774b97,1,23,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bc9d65dceb6eae998161c18c17774b97,1,23,42,files.python.rules.lang.security.dangerous-subprocess-use,Detected subprocess function 'check_output' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.
bc9d65dceb6eae998161c18c17774b97,1,23,64,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bcce63e0964923fa92bf1c65c91d4c7a,2,13,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
bd093c28abf90f6f2bc6a5bfb4e8e8c4,0,6,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
bd2b89d84a1322ac8b3d3abf929edc1a,11,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bd53d7b39b96fb0685224bc1c8c5d9eb,1,39,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
bd78a42dd547e35f2bec083f68409671,0,18,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
bd78a42dd547e35f2bec083f68409671,0,18,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
bd78a42dd547e35f2bec083f68409671,0,22,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
bd9155003f531916a4aa53844c28ada2,0,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bd9155003f531916a4aa53844c28ada2,1,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bd9155003f531916a4aa53844c28ada2,2,33,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bd9155003f531916a4aa53844c28ada2,3,32,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bdd27701c7eccad037645e910b1929cc,10,12,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,10,12,37,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,11,24,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,11,24,94,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,11,40,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,11,42,23,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,12,19,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,12,19,94,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,13,7,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,13,7,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,14,8,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,14,8,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,15,7,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,15,7,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,16,7,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,16,7,45,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,17,6,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,17,6,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,18,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,18,7,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,3,9,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
bdd27701c7eccad037645e910b1929cc,4,25,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,4,25,37,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,4,55,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,4,55,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
be535e1f4e3ba20f259e13ba2e131764,0,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
be535e1f4e3ba20f259e13ba2e131764,0,15,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
be535e1f4e3ba20f259e13ba2e131764,0,20,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
be6f6c7b4cb192652c106876c8c3e102,0,22,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bf91092d337e42a04cca579d4a6a6d7d,0,14,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
bfbc738cccede35b155af2e71ea1c80c,6,21,43,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
bfbc738cccede35b155af2e71ea1c80c,6,23,41,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
bfc4f6c01cae086cd671bd47eb403e7c,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
bfc4f6c01cae086cd671bd47eb403e7c,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
bfc640e97521fe02662a91f772630fac,3,9,19,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c01654763508e67bcbde57e68c68abe5,1,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c01654763508e67bcbde57e68c68abe5,1,9,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c01654763508e67bcbde57e68c68abe5,1,14,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c01654763508e67bcbde57e68c68abe5,1,14,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c0d39e32bb8774adb042ca804ac4264d,15,5,15,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
c113a3f24c15b24e47eadfaf6e4523a4,6,4,15,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
c113a3f24c15b24e47eadfaf6e4523a4,6,14,19,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
c1b18c2441a3f677c35c36e07bba6597,0,60,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c1b18c2441a3f677c35c36e07bba6597,4,69,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c1bbd3987de22a5429ffed3f8b6fbc81,0,5,11,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
c1bbd3987de22a5429ffed3f8b6fbc81,2,29,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c1bbd3987de22a5429ffed3f8b6fbc81,3,42,22,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c1d923b062dbeda2c679ef9958cbcbad,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c20ea1f555458c0da0ca0c79d7af1a18,8,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c2532b1e50af303c3d6ca3a3d4700d6e,1,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c2532b1e50af303c3d6ca3a3d4700d6e,5,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c2d4936c60424edaaa2a6c96507541a4,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c2f19e0fca5476ae1bba3831ccb1faf7,12,11,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c2f19e0fca5476ae1bba3831ccb1faf7,6,11,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c3016f13743bd4e2a67fac435bd48b2c,2,6,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
c3016f13743bd4e2a67fac435bd48b2c,2,81,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c30d652795feb0692a49c54f7832dde5,4,32,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c35356275fa6177e77006916bd6ae734,1,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c35356275fa6177e77006916bd6ae734,15,59,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c35356275fa6177e77006916bd6ae734,16,66,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c35356275fa6177e77006916bd6ae734,5,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c40b569af7c8890c2cc552163283d9f9,0,15,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c41d2aedc595c4eab5487e8df5e94c3f,1,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4223382156c6fd6d6710acf32b8812e,4,48,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c4223382156c6fd6d6710acf32b8812e,5,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c4479b000be99fe944b8f3a80094193e,0,5,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
c4479b000be99fe944b8f3a80094193e,0,133,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4479b000be99fe944b8f3a80094193e,0,133,15,files.python.rules.lang.security.audit.md5-used-as-password,It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.
c4479b000be99fe944b8f3a80094193e,0,134,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4479b000be99fe944b8f3a80094193e,0,135,20,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4685ccab1e22d8b4b0a906781b8db24,0,14,22,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,0,23,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,10,9,29,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4685ccab1e22d8b4b0a906781b8db24,10,14,24,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4685ccab1e22d8b4b0a906781b8db24,10,14,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,10,21,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,13,16,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,13,27,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,7,5,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4685ccab1e22d8b4b0a906781b8db24,9,6,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c49ecb26a7ec9cbd99768c61681aa9aa,0,29,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
c4e1bf9d54654d640cbba2fd2c7fd7bc,1,6,12,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,5,13,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,5,15,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,6,14,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,6,16,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,7,14,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,7,16,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c50263f4afeba3a8b9b1bceb277b7238,0,13,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c5215ee85b2899ba6a4643fa2cef4f8a,4,11,12,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
c5215ee85b2899ba6a4643fa2cef4f8a,5,7,5,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
c52c957f064cfa78ebf3e9b563db8af9,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c52c957f064cfa78ebf3e9b563db8af9,1,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c548ac13e23270a51a569e59daf66a31,3,14,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
c548ac13e23270a51a569e59daf66a31,3,14,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
c55237cd653a43a064c35308874eecc4,0,19,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c55237cd653a43a064c35308874eecc4,1,23,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c571f81592f11d0ba4713bf8d1a6096d,1,14,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c5b06d7408fa3f9a9c0441c3a0426bd7,1,13,36,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c5b06d7408fa3f9a9c0441c3a0426bd7,2,9,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c5b06d7408fa3f9a9c0441c3a0426bd7,2,9,61,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c5b06d7408fa3f9a9c0441c3a0426bd7,2,26,25,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c5b06d7408fa3f9a9c0441c3a0426bd7,2,26,67,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c5b06d7408fa3f9a9c0441c3a0426bd7,2,28,24,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c5b06d7408fa3f9a9c0441c3a0426bd7,2,28,65,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c5da69d53709967e4d05975bbe927789,2,17,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c5da69d53709967e4d05975bbe927789,3,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
c5da69d53709967e4d05975bbe927789,5,16,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c5faa7f3410e8d88c62c5230b01758a9,5,22,17,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
c6187a7070887d24058a375c4ddb51a1,0,8,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
c6187a7070887d24058a375c4ddb51a1,1,8,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
c6187a7070887d24058a375c4ddb51a1,1,17,32,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
c6187a7070887d24058a375c4ddb51a1,1,24,32,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
c6291f055d964cfbde9ae50006e9c949,5,13,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
c6291f055d964cfbde9ae50006e9c949,6,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
c6291f055d964cfbde9ae50006e9c949,6,26,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
c6291f055d964cfbde9ae50006e9c949,6,37,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
c6291f055d964cfbde9ae50006e9c949,7,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
c6291f055d964cfbde9ae50006e9c949,7,26,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
c6291f055d964cfbde9ae50006e9c949,7,53,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
c71538548832c81eff0d98e83640bfae,4,11,10,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
c72ce5c8f97f86b84e3e55a76ae89a38,0,20,15,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
c72ce5c8f97f86b84e3e55a76ae89a38,0,30,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
c774e496eba328cd5ef0ef6a45b48e91,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c774e496eba328cd5ef0ef6a45b48e91,1,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c774e496eba328cd5ef0ef6a45b48e91,2,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c774e496eba328cd5ef0ef6a45b48e91,3,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c774e496eba328cd5ef0ef6a45b48e91,4,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c78cca3caa0f395111f8b5e899bf8dff,10,39,16,files.python.rules.flask.security.audit.xss.make-response-with-unknown-content,"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`."
c78cca3caa0f395111f8b5e899bf8dff,7,19,16,files.python.rules.flask.security.audit.xss.make-response-with-unknown-content,"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`."
c792fb62770391b17ebc73f1bb6b7161,0,12,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c792fb62770391b17ebc73f1bb6b7161,0,46,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c7d2b8045ac1ba8028a6386c7595408b,0,4,14,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c86c2c1019a4c6120856f15c2bb733d6,7,49,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86ebb0585e69c2b2b07e2ee8feaef49,2,4,14,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
c86f2eb087533539723b3efff503bdc3,0,36,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86f2eb087533539723b3efff503bdc3,1,36,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86f2eb087533539723b3efff503bdc3,2,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86f2eb087533539723b3efff503bdc3,3,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86f2eb087533539723b3efff503bdc3,4,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86f2eb087533539723b3efff503bdc3,5,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c89b708896b4ec510f5fbddd65d05e4f,2,21,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
c89b708896b4ec510f5fbddd65d05e4f,3,31,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
c89b708896b4ec510f5fbddd65d05e4f,8,24,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
c8d2c4173699896081115c05496adb0c,11,40,13,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
c8d2c4173699896081115c05496adb0c,11,50,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
c903a5b9d9c18acf77c5cbc331407910,0,19,16,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c903a5b9d9c18acf77c5cbc331407910,0,19,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c913445d76c9d3168d1e7f59dd25a107,2,12,9,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
c913445d76c9d3168d1e7f59dd25a107,3,17,9,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
c93f0dd316a77aac40bc1eb77b1cfcc2,10,8,5,files.python.rules.flask.security.audit.secure-set-cookie,"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration."
c93f0dd316a77aac40bc1eb77b1cfcc2,10,14,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
c969e99106c57729a67748a4b5a4916b,2,11,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c969e99106c57729a67748a4b5a4916b,6,54,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c972a5bd6115c09c6fd45f6d883e14a8,1,7,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
c98aafd345b3262af1bdf724faafe3b5,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
c98aafd345b3262af1bdf724faafe3b5,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
c9a810e860af5a4add42c33afea31f63,12,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ca589b134ad4fe1a8829c8f4581881a3,3,9,5,files.python.rules.django.security.injection.path-traversal.path-traversal-open,"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library."
ca75c3ec8762ac64af5084daea2f80cc,0,98,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
cad6590e1069da88a3c35cd5ff2555ef,0,9,19,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
cb0634c956ef6b706ba610f9370b2685,1,64,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cb24e897b48d90cd2202e056c855955d,0,18,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cb8dd8c97121d90093b2293624f2905a,1,28,34,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
cbb16b936e876becdb22be26c121e5d3,0,28,27,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
cbc0f1ea44e8fe69f5eef83aa865aee2,1,26,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cbc0f1ea44e8fe69f5eef83aa865aee2,1,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cbc0f1ea44e8fe69f5eef83aa865aee2,4,37,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cbc4c682f522c164063f6df4ba6b1a13,0,9,8,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
cbc4c682f522c164063f6df4ba6b1a13,0,13,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
cbf5cf4b8255f414b7a44378fbfce488,2,63,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cbf5cf4b8255f414b7a44378fbfce488,2,67,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cbf5cf4b8255f414b7a44378fbfce488,2,71,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cbf739cacfe5320b97f2b1bcf5d80cd0,13,7,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cc2a0db8b4fec20ebf56538fd64df220,18,4,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
cc2a0db8b4fec20ebf56538fd64df220,18,7,12,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
cc2a0db8b4fec20ebf56538fd64df220,25,9,3,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
cc6aa4803e636354054856fe9b27ec23,1,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
cc6ed4123ed1544e5a906ad961df82f0,1,22,14,files.python.rules.cryptography.security.crypto-mode-without-authentication,An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. 
cc75acaecbfd3f29c1f72dfc1b2f3b2e,1,78,45,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
cc75acaecbfd3f29c1f72dfc1b2f3b2e,3,78,45,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ccae01be1a22c10e6f7fca268692c094,0,34,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
cce9b35bee558165301ed75dd715ce63,17,4,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
cce9b35bee558165301ed75dd715ce63,19,49,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ccffa8cd371f70023fec036d7214d4c9,4,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
cd04294b769fae88ddd0a3bac7912e2c,0,30,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
cd04294b769fae88ddd0a3bac7912e2c,1,16,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
cd04294b769fae88ddd0a3bac7912e2c,2,25,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
cd1406113fb5f2783038d3d6b50c6cc7,0,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
cd43867c05d49d73931fe154f2737dff,1,10,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
cd74cdc99457333f586df955a02e83ed,0,31,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cd74cdc99457333f586df955a02e83ed,1,29,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cdcd3639f6724db079fdaa22f2f20be6,24,5,5,files.python.rules.django.security.injection.reflected-data-httpresponse,"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."
cdcd3639f6724db079fdaa22f2f20be6,24,10,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
cdf31a31d7e0443fd37279a20eeb2fff,10,26,41,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
cdf31a31d7e0443fd37279a20eeb2fff,8,19,34,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
cdfbd26f49d2920c253fb3defd5fed30,2,7,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ce26f7fc369618d1544640dc28ddd4e1,4,8,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ce85c108d5dd92e069face1778cc2222,0,11,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
ce85c108d5dd92e069face1778cc2222,1,8,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
ce85c108d5dd92e069face1778cc2222,2,8,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
ce85c108d5dd92e069face1778cc2222,4,9,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
ce85c108d5dd92e069face1778cc2222,5,8,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
ceb70a6a2e5400c4baf8323e2266f3d4,1,82,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cfff80260df65ab88857ff538d652d09,0,50,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d0148db7b9c22295fb709a20dd7f682d,0,19,16,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d0148db7b9c22295fb709a20dd7f682d,0,19,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
d0b000eb6f1e981bd17d9f4fcfecb77b,0,6,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d0dcc68777296a0281fed1c27f7d135e,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d0e973a00d5394a553ab12ec41c02308,6,56,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d0f6066339e4bc5a4c9a7c5e6355517d,1,48,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d14088da3831ec5a9a109a9a182a03a2,0,40,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d1a0e7644402ee638d3e05b41922f89f,2,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d1a0e7644402ee638d3e05b41922f89f,22,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d1a0e7644402ee638d3e05b41922f89f,26,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d1a0e7644402ee638d3e05b41922f89f,5,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d1d9f34f826d2d7032c6c118176787cc,0,57,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d1d9f34f826d2d7032c6c118176787cc,1,57,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d1d9f34f826d2d7032c6c118176787cc,3,57,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d1d9f34f826d2d7032c6c118176787cc,4,46,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d1dd1c3877c08b53228d9e52c00c8b29,0,10,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d1eb5d07bf92ed64c08e83df0bcdf81a,0,16,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d2259c809c3d3580860b18e200441d5f,5,68,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d25865e9dd493eb9d9794a275cbcbd9f,0,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d280e6597e93c6caf6dea59d6ee7b2f5,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
d28b0bf445b584f9368c61d279bd67a1,3,5,1,files.python.rules.lang.security.audit.regex_dos,"Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2."
d28b0bf445b584f9368c61d279bd67a1,4,5,1,files.python.rules.lang.security.audit.regex_dos,"Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2."
d2b4550847e75ee142a71e56abbf98e6,1,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d2debc255c2c77a4021f218b89eff91d,0,8,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
d2f35dae00cb211e4abb03a5177fa076,4,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d325fc8c0a8ffd31845cdbc7995e2a2b,0,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
d335a32e2f121d886b3aa89db0389d6f,0,11,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d335a32e2f121d886b3aa89db0389d6f,3,11,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d335a32e2f121d886b3aa89db0389d6f,5,11,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d368a51ed2709c0e7b1b7733fb0d073b,6,70,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d3a911f570dbf00b9d3cc2bab9b1b6c1,23,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d3a911f570dbf00b9d3cc2bab9b1b6c1,35,22,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d3ce8c6d1bdf119dd413d0667faf5f56,1,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d3ce8c6d1bdf119dd413d0667faf5f56,10,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d3ce8c6d1bdf119dd413d0667faf5f56,11,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d3ce8c6d1bdf119dd413d0667faf5f56,12,25,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d3ce8c6d1bdf119dd413d0667faf5f56,5,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d3f334e2ed589ca8d011e2c1acedd3fe,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d3f334e2ed589ca8d011e2c1acedd3fe,0,25,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d3f334e2ed589ca8d011e2c1acedd3fe,1,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d3f334e2ed589ca8d011e2c1acedd3fe,1,12,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d44cf106b2bf1b3e8bf45ff4413098ee,0,20,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d4b1cdb9b711fa87e31739bf4bc03efa,0,62,20,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
d4d37fe2a2f21e4647a542905cf859c7,1,95,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
d4d37fe2a2f21e4647a542905cf859c7,1,95,5,files.python.rules.lang.security.audit.dangerous-system-call-tainted-env-args,"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
d4d532ae33a419f967c3a52b10233f8a,1,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d4ea0ed84fbb4b1d30da3f3a9d602607,0,39,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
d50625b7d4060f0882d39b836271a898,1,15,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
d50625b7d4060f0882d39b836271a898,2,16,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
d51401121767b78149f700a80a421712,8,13,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d5262a3b3fe2ea60477f46176bb2a512,1,7,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
d5262a3b3fe2ea60477f46176bb2a512,1,12,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
d5262a3b3fe2ea60477f46176bb2a512,1,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d565bd3914a9b1dc5732c8edf4f475c8,1,23,30,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,2,24,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,2,39,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,3,37,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,3,50,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,4,37,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,4,50,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d5a43ae609ac1bf133ceb3cad5224115,1,40,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d5d124e6849b1af30624cf0d5f16477c,5,5,5,files.python.rules.django.security.audit.django-secure-set-cookie,"Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None."
d5d124e6849b1af30624cf0d5f16477c,6,4,5,files.python.rules.django.security.injection.reflected-data-httpresponse,"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."
d5d124e6849b1af30624cf0d5f16477c,6,5,16,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
d62cce4a2f0134c0ae9230a0082a02b6,0,24,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d62fcaccd0a353fbb6af9835df89d44e,0,129,25,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d63a81f4184a907befb6a1d934a1a0c3,0,20,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d643c3675c73971ee06679238e95f925,9,12,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d65a2c26d22d7c4dd7ce69cffcd8f9ad,0,11,19,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
d6635d7949109eb11cebcf7bc8b24003,0,3,28,files.python.rules.lang.security.audit.weak-ssl-version,"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher."
d6635d7949109eb11cebcf7bc8b24003,0,5,30,files.python.rules.lang.security.audit.weak-ssl-version,"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher."
d66d177142ecd305916b87714e7e1aee,0,52,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d693db7745ba991d03d8173387b75a5b,1,62,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d69c91c7410c51a8a9dd4db3e8e6f0e2,0,17,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
d69fa8805f29c28e3c9ed030fa694c20,2,4,7,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
d6d72fc62565eb449c885b5708952db2,0,11,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d6d72fc62565eb449c885b5708952db2,2,19,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d721f3b3f3401cb989182a953502d1ea,1,30,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d721f3b3f3401cb989182a953502d1ea,1,30,64,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
d721f3b3f3401cb989182a953502d1ea,1,45,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d721f3b3f3401cb989182a953502d1ea,1,45,41,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
d723bc009fcf42b08afc670e268c9f4e,0,17,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d723bc009fcf42b08afc670e268c9f4e,2,21,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d723bc009fcf42b08afc670e268c9f4e,4,14,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d723bc009fcf42b08afc670e268c9f4e,7,14,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d736d65b0668fe5d7e6e25b60d066527,0,13,16,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d736d65b0668fe5d7e6e25b60d066527,1,13,20,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d736d65b0668fe5d7e6e25b60d066527,2,13,20,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d7affa0b1c894ceaffacba9515a6a836,0,16,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d80356fdea584d83340ffdf919241388,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d80356fdea584d83340ffdf919241388,2,11,14,files.python.rules.lang.security.audit.httpsconnection-detected,"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information."
d8154fc22e97bb7ca15885c9a4c186bd,1,8,37,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d86ba61c8a03435405bc2ff666221821,10,6,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d86ba61c8a03435405bc2ff666221821,8,6,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d8d9d403450739f8f85c46eaa86bcf28,0,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d9b6ed88fbff69b0a5dc1b40cfb85bb5,2,13,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d9df8c21c7b3ba1109d6f25e3d278734,3,9,11,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d9df8c21c7b3ba1109d6f25e3d278734,3,16,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
da16cbc3505cd2856556368ed426a4f2,4,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
da391b7cb631e6770df7f31231298d5d,0,17,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
da494f96a39be38522ea016f142b96ee,0,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dac37107907c53e65b812271b2a88572,0,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dac37107907c53e65b812271b2a88572,1,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dac37107907c53e65b812271b2a88572,2,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dac37107907c53e65b812271b2a88572,3,56,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,3,76,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,3,79,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dac37107907c53e65b812271b2a88572,4,56,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,4,76,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,4,79,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dac37107907c53e65b812271b2a88572,5,56,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,5,76,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,5,79,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dae258942603f7dd85e3ad84ffa6de09,1,7,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
dae258942603f7dd85e3ad84ffa6de09,1,13,20,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
db2ca7cbd89e32a8f42328507a8d0da8,11,55,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
db2ca7cbd89e32a8f42328507a8d0da8,11,55,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
db40508d443dddaa50cbcb0aa2939e98,1,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dbc0c4f7e106db88ee4145f14bbb7640,7,8,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
dc296b0cd95194fd7cd7a4be730322ac,0,21,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
dc296b0cd95194fd7cd7a4be730322ac,0,32,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
dc76ed037b0710b6a8d2f681b2c54020,4,23,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
dc76ed037b0710b6a8d2f681b2c54020,5,31,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
dc76ed037b0710b6a8d2f681b2c54020,7,25,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
dc76ed037b0710b6a8d2f681b2c54020,8,27,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
dc76ed037b0710b6a8d2f681b2c54020,9,14,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
dc8f8bf9d45a98e1b3aa3f57c5c05bab,12,14,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
dc8f8bf9d45a98e1b3aa3f57c5c05bab,6,9,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
dc8f8bf9d45a98e1b3aa3f57c5c05bab,6,18,17,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
dc9b4a03ae6d35bae9d4d0624ed84914,0,23,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
dce737b62d58a8795abada6cccc2cb19,8,12,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
dd0b65ad526095dd611a99289c3d1fa4,0,25,28,files.python.rules.sqlalchemy.security.audit.avoid-sqlalchemy-text,"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
dd151ff216a2018fe4b8af72e7c70492,3,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dd1ac1b60ece2f11c842af3bce8ae524,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
dd3274e94dda27646c019fa548455081,14,21,1,files.python.rules.lang.security.audit.insecure-file-permissions,These permissions `0o755` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.
dd3d069706ed055402499e7bd1ff8d9c,7,45,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
dd3d069706ed055402499e7bd1ff8d9c,7,45,5,files.python.rules.lang.security.audit.sqli.psycopg-sqli,"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"
dd3d069706ed055402499e7bd1ff8d9c,7,45,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
dd42a864f91ddaaeafbc45667656f3b8,0,32,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
dd42a864f91ddaaeafbc45667656f3b8,2,15,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
dd471e2b479fbfaa2c3dedb1ea39c4d8,1,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
dd471e2b479fbfaa2c3dedb1ea39c4d8,2,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
dd471e2b479fbfaa2c3dedb1ea39c4d8,3,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
dd7aedd55cc013e1e4f8238d59b698da,0,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ddad9eedff758a8982d3a9802027ac16,2,23,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
ddad9eedff758a8982d3a9802027ac16,4,20,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
de0d06e32b38fce9ad16c2bb6d562145,1,8,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
de0d06e32b38fce9ad16c2bb6d562145,2,15,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
de0d06e32b38fce9ad16c2bb6d562145,3,7,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
de18262029052fe01473049ec58ea24e,0,5,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
de311bc8e7bf6bac4b2cf0b53eacde6a,10,54,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
de311bc8e7bf6bac4b2cf0b53eacde6a,11,56,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
de311bc8e7bf6bac4b2cf0b53eacde6a,11,67,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
de311bc8e7bf6bac4b2cf0b53eacde6a,6,53,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
de311bc8e7bf6bac4b2cf0b53eacde6a,8,54,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
de3de23c8912cea88d23b1adff577f35,1,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
de52af94a94a12793e2aedfeb324f057,0,8,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
de827de5debf9dffbf8aae0eedaeed07,14,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
de827de5debf9dffbf8aae0eedaeed07,17,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
de827de5debf9dffbf8aae0eedaeed07,18,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
ded3a89c2ec9a9207ace569348d846b2,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ded3a89c2ec9a9207ace569348d846b2,0,83,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ded3a89c2ec9a9207ace569348d846b2,1,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ded3a89c2ec9a9207ace569348d846b2,1,82,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ded3a89c2ec9a9207ace569348d846b2,2,25,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ded3a89c2ec9a9207ace569348d846b2,3,33,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
df6514eb765bed3b633f1345706c3417,0,19,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
df6514eb765bed3b633f1345706c3417,1,23,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
df6514eb765bed3b633f1345706c3417,2,23,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
df6514eb765bed3b633f1345706c3417,3,23,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
df9c3c96d9e7b22a387572b2e241b431,0,15,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e08b8d5dc8e356ad37ed4755afc216c3,0,4,10,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
e0d63c65e30aeb6ede28bd84ddb6c152,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e0e8631175ed1af6faf612c3b5c34d30,0,15,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e0e8631175ed1af6faf612c3b5c34d30,1,15,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e0e8631175ed1af6faf612c3b5c34d30,4,76,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e0e8631175ed1af6faf612c3b5c34d30,5,83,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e0e8631175ed1af6faf612c3b5c34d30,6,91,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e116e642df00b6c91e2d22cbc69e7334,1,30,13,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
e116e642df00b6c91e2d22cbc69e7334,1,30,20,files.python.rules.django.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead."
e116e642df00b6c91e2d22cbc69e7334,1,30,20,files.python.rules.flask.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead."
e116e642df00b6c91e2d22cbc69e7334,1,52,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e1595d6782bbc2064ea5b4031a3ec528,1,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e1595d6782bbc2064ea5b4031a3ec528,2,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e19a6da55fbc1ec0ed306e05f07daacd,0,7,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e19a6da55fbc1ec0ed306e05f07daacd,0,12,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e1abd279dbe5200b2cd9004d27075ad9,0,12,17,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e284e042a286be51ddd187a93435f91a,7,6,20,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
e28f8b617e8e5d8a6f087b91d79c1c83,5,17,28,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
e2b4d116a8122ac9efa70630bcdd1d44,5,10,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e2bb254dd9523f610e0bfb70adfa08a9,1,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e2dace9d939f3c80bf925b3f3425384f,0,3,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e2dace9d939f3c80bf925b3f3425384f,1,4,23,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e2fcbf483a3b9f554f3afaf794ce946d,17,10,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
e34956f72a372d73627e747e791058f1,0,22,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e34956f72a372d73627e747e791058f1,1,28,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e34956f72a372d73627e747e791058f1,1,28,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e388a753d296e4a4c40f17e229c5a15d,4,21,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e388a753d296e4a4c40f17e229c5a15d,4,21,40,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e39f94a452031461327f6bef2f915f70,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
e3f5ed609076909dbfb88ee866cdbbac,4,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e3f5ed609076909dbfb88ee866cdbbac,5,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e3f5ed609076909dbfb88ee866cdbbac,6,33,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e4867bddca73d419a53c54cac1242403,1,15,40,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
e49c072bb715bab12541807192fa3410,0,7,143,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e4f666b7660778038d6a0dc246cef154,1,26,22,files.python.rules.django.security.injection.command.subprocess-injection,"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
e4f666b7660778038d6a0dc246cef154,1,26,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,10,16,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,11,16,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,3,15,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,5,12,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,6,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
e4f666b7660778038d6a0dc246cef154,6,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,7,16,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,9,16,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5400d3292dd24d094a013d86f088338,0,30,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5400d3292dd24d094a013d86f088338,0,30,84,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e5400d3292dd24d094a013d86f088338,0,37,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5400d3292dd24d094a013d86f088338,0,37,74,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e5400d3292dd24d094a013d86f088338,1,58,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5400d3292dd24d094a013d86f088338,1,58,84,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e5400d3292dd24d094a013d86f088338,1,64,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5400d3292dd24d094a013d86f088338,1,64,74,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e564dc2b54b976c916151adbd65c2c5e,1,21,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
e564dc2b54b976c916151adbd65c2c5e,1,22,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
e564dc2b54b976c916151adbd65c2c5e,1,26,18,files.python.rules.django.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries."
e564dc2b54b976c916151adbd65c2c5e,1,26,18,files.python.rules.flask.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
e564dc2b54b976c916151adbd65c2c5e,1,29,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e564dc2b54b976c916151adbd65c2c5e,1,29,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e564dc2b54b976c916151adbd65c2c5e,1,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e564dc2b54b976c916151adbd65c2c5e,4,19,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
e564dc2b54b976c916151adbd65c2c5e,4,20,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
e564dc2b54b976c916151adbd65c2c5e,4,23,18,files.python.rules.django.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries."
e564dc2b54b976c916151adbd65c2c5e,4,23,18,files.python.rules.flask.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
e564dc2b54b976c916151adbd65c2c5e,4,25,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e564dc2b54b976c916151adbd65c2c5e,4,25,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e564dc2b54b976c916151adbd65c2c5e,4,34,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e5cb9ede028c32adb954d3d220377841,0,33,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5d935a71115a4b901b255e633ab85bf,12,6,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5d935a71115a4b901b255e633ab85bf,18,4,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5d935a71115a4b901b255e633ab85bf,8,2,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5d935a71115a4b901b255e633ab85bf,9,2,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5f4664683215e06627f243c475b5e5b,10,12,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e62ed0be9b9c29f83bb67b2991185416,1,3,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e62ed0be9b9c29f83bb67b2991185416,2,6,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e6462036e6267065a91ddb3e959a6ae0,0,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e653cf623869321f839d4f457e7def11,2,8,27,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
e653cf623869321f839d4f457e7def11,2,8,27,files.python.rules.lang.security.audit.md5-used-as-password,It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.
e66b1bd4e5d17c38c7cfc2237e99f161,0,6,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e67da501ad43e0e13868644da4f2fb7b,1,5,15,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
e69eac92f0905ae5933aef825cb9cb9a,0,14,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e6e150a0d5b7f5ade792d70e9d8575b4,0,52,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,1,67,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,2,62,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,2,95,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,2,97,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,2,99,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,2,101,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,2,103,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6f6b41d445ef2c19134b34d8c6631e2,6,41,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
e6f6b41d445ef2c19134b34d8c6631e2,6,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e70136ad6fdb67721cc00d87f77ec3e0,0,9,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e70136ad6fdb67721cc00d87f77ec3e0,0,16,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e7262fc8a84d5af68f571817b7bbcd5f,0,23,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e751357d721dbf614c0b2d638932e6ec,2,8,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,2,9,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,2,10,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,2,11,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,2,31,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
e751357d721dbf614c0b2d638932e6ec,5,8,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,5,9,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,5,10,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,5,11,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,5,46,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
e751357d721dbf614c0b2d638932e6ec,7,49,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
e75aa720ec2a2f81d4c1b9b2754df60b,11,9,3,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e75aa720ec2a2f81d4c1b9b2754df60b,11,9,3,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e75aa720ec2a2f81d4c1b9b2754df60b,11,34,13,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
e75aa720ec2a2f81d4c1b9b2754df60b,12,42,3,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e75aa720ec2a2f81d4c1b9b2754df60b,12,42,3,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e75aa720ec2a2f81d4c1b9b2754df60b,12,57,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e75aa720ec2a2f81d4c1b9b2754df60b,12,57,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e75aa720ec2a2f81d4c1b9b2754df60b,12,115,13,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
e75aa720ec2a2f81d4c1b9b2754df60b,12,129,3,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e7cc3fb7568af489fb231e71105f9136,0,58,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e7fe9e96a3706cabfd8c07057b8e0386,1,5,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
e82f9fc811770d3d3f07bfca2c7b340d,4,48,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e852f0991f0b9faa06f35a448bf040e2,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e88bb3dc3d2334e68feaff49b59dbcab,0,31,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e88bb3dc3d2334e68feaff49b59dbcab,0,43,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e88bb3dc3d2334e68feaff49b59dbcab,1,29,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e88bb3dc3d2334e68feaff49b59dbcab,1,40,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e89d626216fabb72a7cdfc6d6d0951f6,1,8,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e89d626216fabb72a7cdfc6d6d0951f6,1,8,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e8c10c75f593e27c6fdbbd305461c4d8,0,28,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e8c10c75f593e27c6fdbbd305461c4d8,0,28,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e8c10c75f593e27c6fdbbd305461c4d8,0,34,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e8c10c75f593e27c6fdbbd305461c4d8,1,35,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e8c10c75f593e27c6fdbbd305461c4d8,1,35,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e8c10c75f593e27c6fdbbd305461c4d8,1,44,17,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e8f0151ef93e6efaafddf2a15d48218f,0,20,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e8f0151ef93e6efaafddf2a15d48218f,1,14,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e8f0151ef93e6efaafddf2a15d48218f,2,16,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e908bb5f830bab215dfd081177cbcae7,17,36,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e913458340b802684ea0ca62f524f80d,0,2,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e932fa6b70b6cb0e3a0f2e28cb8bd843,6,27,64,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
e932fa6b70b6cb0e3a0f2e28cb8bd843,6,27,93,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
e932fa6b70b6cb0e3a0f2e28cb8bd843,6,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e945a699ed042c6d0938d7e57869f160,0,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e945a699ed042c6d0938d7e57869f160,1,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e9990584427d64f953127d557f18aa51,0,72,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e9990584427d64f953127d557f18aa51,5,88,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e9a40c400b97a21a950b8f59bf1380e9,7,103,25,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e9a40c400b97a21a950b8f59bf1380e9,7,103,25,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e9c76a5916dedf68f40556333bd316a6,0,2,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e9dfe5d3ec64460a801d53eedd46e120,0,12,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e9ebf9b6bce6083798e89516ca167cea,0,26,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e9ede55a9dfabd7663cf605a021301d1,2,11,9,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
ea78ec63398219a0df60c437d9491a78,1,21,11,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
ea790fd2d7f04de5e779bfbdbcb69126,0,26,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ea790fd2d7f04de5e779bfbdbcb69126,0,35,38,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ea790fd2d7f04de5e779bfbdbcb69126,2,22,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ea790fd2d7f04de5e779bfbdbcb69126,2,31,38,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ea790fd2d7f04de5e779bfbdbcb69126,4,22,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ea790fd2d7f04de5e779bfbdbcb69126,4,31,38,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ead75036cb05a95356646f81593b025a,0,19,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ead75036cb05a95356646f81593b025a,1,19,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
eb327966d473cbdfe4db8003dad3b719,1,47,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
eb66d9f21402a4432adafb11cafb32a2,0,22,16,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
eb66d9f21402a4432adafb11cafb32a2,0,22,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
eb77b5fe55186bc2d9b719585e3a5bf7,5,25,13,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
ebc90105525ca38270bf3fff034b48d2,0,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ebe1bb8313d62cc9a3544ef4e5f8d218,0,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ec06804776354160253770c4e8439598,6,34,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
ec3aefb1e25e0c13fd888727f65aa053,0,15,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
eca95c832f2134bd5a50b65eb1fac581,0,5,5,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ecb9aeba299e8b197d00378adb77436a,6,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ececbabcf698cf276a4122fc71a6dbc1,33,25,9,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
ececbabcf698cf276a4122fc71a6dbc1,33,25,16,files.python.rules.django.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead."
ececbabcf698cf276a4122fc71a6dbc1,33,25,16,files.python.rules.flask.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead."
ececbabcf698cf276a4122fc71a6dbc1,34,24,9,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
ececbabcf698cf276a4122fc71a6dbc1,34,24,16,files.python.rules.django.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead."
ececbabcf698cf276a4122fc71a6dbc1,34,24,16,files.python.rules.flask.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead."
ececbabcf698cf276a4122fc71a6dbc1,37,24,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
ececbabcf698cf276a4122fc71a6dbc1,40,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ed285365c9d3a75b727be60aba1a726a,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ed45a8d08047d105d110ec56ee5227ae,0,12,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ed45a8d08047d105d110ec56ee5227ae,0,12,68,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
ed45a8d08047d105d110ec56ee5227ae,0,34,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ed4f14be26d76f71323e5d6680766327,4,5,21,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ed8cd09c79baf8aaae5156bbd120f677,0,3,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve,Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
ed8cd09c79baf8aaae5156bbd120f677,0,6,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
ed8cd09c79baf8aaae5156bbd120f677,0,6,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve,Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
ed8ce37cc585e01acdd7305bc00439c9,0,12,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ed8ce37cc585e01acdd7305bc00439c9,0,12,50,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
edf3110075c53686280adbeda7d088c7,4,9,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
edf3110075c53686280adbeda7d088c7,5,9,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ee2c439d1045ed0be22f9ba735346f29,5,5,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
ee2c439d1045ed0be22f9ba735346f29,6,14,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
ee52ab87f6ce9e49a1ebfd5394c3a866,0,4,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
eeb2e8c6d822c186f6ac4568750ee075,0,21,42,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ef098c618a1cf7aa1ca01fd7e6a352fa,1,8,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
ef2f3ec2d15f3a9609d815721e665d3b,3,33,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
ef2f3ec2d15f3a9609d815721e665d3b,4,36,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
ef95b1fd646379a0bf90ef0371cfd606,0,12,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
efa416c1f380f0b2d02026827878a717,0,319,17,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
efa8ec9bfea2b60fdf557a6a5bc65cc2,2,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
efaa39c964696d9bd6bfa70a63559380,2,9,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
efaa39c964696d9bd6bfa70a63559380,4,10,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
efaa39c964696d9bd6bfa70a63559380,4,22,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
efdd3318e43a3f49e15801882782bd4d,3,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
f0042670fb1e2da74cc9d49829a678cc,3,8,5,files.python.rules.flask.security.audit.secure-set-cookie,"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration."
f0042670fb1e2da74cc9d49829a678cc,3,11,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
f03840eb8de3224008ff64c5c355334a,1,30,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
f04beedab47433411cdb8481c72590d2,3,12,20,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f04beedab47433411cdb8481c72590d2,3,25,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f07a9594c60ea66ad061c77a8b9dc2c9,0,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f0b1cefb543177378d8c12bea364286f,0,19,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
f0b1cefb543177378d8c12bea364286f,2,19,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
f136c95fdc69fa80423f10e3ddd05890,10,38,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
f136c95fdc69fa80423f10e3ddd05890,10,42,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
f136c95fdc69fa80423f10e3ddd05890,10,65,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
f136c95fdc69fa80423f10e3ddd05890,10,65,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f136c95fdc69fa80423f10e3ddd05890,2,29,9,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
f136c95fdc69fa80423f10e3ddd05890,2,31,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
f136c95fdc69fa80423f10e3ddd05890,2,34,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
f136c95fdc69fa80423f10e3ddd05890,2,39,14,files.python.rules.flask.security.injection.path-traversal-open,"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks."
f136c95fdc69fa80423f10e3ddd05890,2,60,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
f136c95fdc69fa80423f10e3ddd05890,2,60,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f136c95fdc69fa80423f10e3ddd05890,9,32,9,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
f136c95fdc69fa80423f10e3ddd05890,9,34,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
f136c95fdc69fa80423f10e3ddd05890,9,37,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
f136c95fdc69fa80423f10e3ddd05890,9,42,14,files.python.rules.flask.security.injection.path-traversal-open,"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks."
f136c95fdc69fa80423f10e3ddd05890,9,63,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
f136c95fdc69fa80423f10e3ddd05890,9,63,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f175151626a66f8188db293dea8712f0,0,10,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f17893e5b8e5ba7c723f599e1156ece0,0,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f17893e5b8e5ba7c723f599e1156ece0,2,30,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f180dca841381fb5ae6dfd866202ee46,0,42,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f18b86e7aa634bea0a17a651908d11c7,2,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f1a7509081d10dcd5e8096aa7b9174da,0,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f1a7509081d10dcd5e8096aa7b9174da,2,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f1a7509081d10dcd5e8096aa7b9174da,3,57,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f21cfe640f84f395deddfb8e66081a5b,1,13,8,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
f270285638d903ca0c6c86bcdb951544,6,17,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f2cb8897943bf303cf07047e4ed256be,1,31,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
f35c70052db04a788ee86d861d352252,2,6,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f35c70052db04a788ee86d861d352252,2,10,13,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f3683ed756ae8112818a3c42568ae5f2,0,44,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f38c68677edfd1d8548c05212c4a2ba2,1,9,12,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f3ad9afd225975f4555582b163c35444,1,26,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f3bf609f870765060dece01533dc7068,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f3d8e14c75277bd9fc08028fa9161ec5,0,14,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
f3d8e14c75277bd9fc08028fa9161ec5,0,91,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f424613b8b59651c9ce98d8d14d486a3,0,70,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f424613b8b59651c9ce98d8d14d486a3,0,74,9,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
f424613b8b59651c9ce98d8d14d486a3,1,89,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f424613b8b59651c9ce98d8d14d486a3,1,93,9,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
f424f9119f6c2ca373efb0be13803dbb,2,8,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f44a50fe7b81a8f23f3681e8f8c062f0,3,42,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
f4a311fb190be800a0c6f504044b3c87,0,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f4c244320b9394573a099265e3ac2006,2,11,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f4dfef54a9331e515cc8b163a79908c3,2,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f4e0c51c603135ffee7b33c26c462857,2,13,28,files.python.rules.lang.security.deserialization.avoid-dill,"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f4e0c51c603135ffee7b33c26c462857,2,20,21,files.python.rules.lang.security.deserialization.avoid-dill,"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f51d8e792245f4fc2c7bfc7200726211,1,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
f51d8e792245f4fc2c7bfc7200726211,1,15,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f51d8e792245f4fc2c7bfc7200726211,3,23,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f52faef058a3d3d4c91c1f23ceab5b69,25,1,12,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
f551ef970242274f8bcd9741f8f4b3bb,0,11,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f563192a07755a4d7278b4888ade1a20,1,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f5c9af9ce3b0991eeb47a6ee88cfb7a0,1,4,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f5dc5fef95b63bf08d053e1fa09fc843,0,46,13,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
f65c4c09f07f017ce0dcb8dfa9e8ac06,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f6611af585c604bf7f98f7650c01a9fe,0,17,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f6611af585c604bf7f98f7650c01a9fe,1,29,38,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f661d19049f2d40f56a4420d667a9c68,0,20,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f661d19049f2d40f56a4420d667a9c68,0,20,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
f6acfbc7fdedb09c03ccaf98fbc5f4ad,0,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f6acfbc7fdedb09c03ccaf98fbc5f4ad,0,46,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f6acfbc7fdedb09c03ccaf98fbc5f4ad,2,42,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f6acfbc7fdedb09c03ccaf98fbc5f4ad,2,55,26,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f6f0d2ac404489c5df97ece8441733f5,11,22,8,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
f6f0d2ac404489c5df97ece8441733f5,11,22,8,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f6f0d2ac404489c5df97ece8441733f5,19,40,19,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
f6f0d2ac404489c5df97ece8441733f5,19,41,19,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
f6f0d2ac404489c5df97ece8441733f5,19,51,8,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
f6f0d2ac404489c5df97ece8441733f5,19,51,8,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f70df4087dc7daa1ba003ed387d34797,0,15,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
f714227a678a1733d37e87ed0b229498,10,9,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f714227a678a1733d37e87ed0b229498,10,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f714227a678a1733d37e87ed0b229498,11,13,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f714227a678a1733d37e87ed0b229498,11,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f714227a678a1733d37e87ed0b229498,4,9,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f714227a678a1733d37e87ed0b229498,4,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f71df63ed27b0973b5c4a38bda138d5a,12,3,1,files.python.rules.django.security.audit.no-csrf-exempt,"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator."
f7446b3d7234f1d8976ef39a6279977d,2,30,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f787503c32ada45aa0378e2bc05d3713,27,18,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,27,26,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,33,17,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,33,25,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,38,18,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,38,27,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,41,18,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,41,27,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,50,20,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,50,29,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,56,19,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,56,28,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,57,19,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,57,28,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,58,21,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,58,30,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,61,21,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,61,30,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,62,21,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,62,30,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,65,9,20,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,65,15,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,66,12,20,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,66,17,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,7,19,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,7,29,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,9,17,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,9,25,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f79f073354bf2298b1902b2d3b0886ca,1,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
f79f073354bf2298b1902b2d3b0886ca,3,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
f79f073354bf2298b1902b2d3b0886ca,4,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
f7d4e1f69c0d17044e4db711366a93b5,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f83a12316d101c268486ec2cf7e20656,2,20,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
f83a12316d101c268486ec2cf7e20656,2,20,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
f83a12316d101c268486ec2cf7e20656,2,23,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
f83a12316d101c268486ec2cf7e20656,2,23,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
f88339c342373456a900050f1ac35f74,0,8,11,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f8b6100889bc1f5facf3f604af76d65c,23,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f8b6100889bc1f5facf3f604af76d65c,31,19,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
f908264c8a221c59ae8f18e7165bf47d,0,32,16,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f908264c8a221c59ae8f18e7165bf47d,1,32,16,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f98535d3b58d5c71a1ccab307adf5bca,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f98b82bbba410b3a4a510d0061a414a2,1,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f9f6b08118dc258b414fdcd1f72b5bb3,0,19,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
f9f6b08118dc258b414fdcd1f72b5bb3,0,24,28,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
f9f6b08118dc258b414fdcd1f72b5bb3,1,16,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f9f6b08118dc258b414fdcd1f72b5bb3,1,29,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
fa64968220b0836ef6a36849e39a2109,0,30,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fa64968220b0836ef6a36849e39a2109,0,30,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
fa9063069aae6276afdab5ab3360e707,0,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fa9604119d2ab63ade84dc3096939188,0,32,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fae1d8099f39bdc13294d501eedcde55,0,58,9,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
fb4d922618776fa0438869c5dde76085,8,26,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
fb5da0ebb3a2071db051a6811a14cf80,3,17,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
fb87cb631d223abfa7855547a84c010b,0,13,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fb87cb631d223abfa7855547a84c010b,1,13,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fb87cb631d223abfa7855547a84c010b,2,44,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fb87cb631d223abfa7855547a84c010b,3,44,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fb87cb631d223abfa7855547a84c010b,4,44,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fb8e25fb82b729c865153405ffbab9e2,2,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fb9f1d586bedb9ca202768005a600d6a,0,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fbe4b31109ee3ceab63465b996ebd715,1,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fc457349783c265b107602e6fc55e323,1,22,14,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
fc90d79308d28e1cf129f286bff86700,5,20,14,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
fc90d79308d28e1cf129f286bff86700,6,18,14,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
fcaf6ef3b8d8e292c1f02f1f3a0a29bf,5,6,5,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
fcc2a3b84a40d7a1e45647de1a0ce8ab,0,23,30,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
fcc2a3b84a40d7a1e45647de1a0ce8ab,3,23,30,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
fcdb7176363be1b5f71b8d9b83887dc6,5,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fcf5c760240e0c71f25586c7bb06df74,0,45,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-request-object,"Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'http://'. This connection will not be encrypted. Use 'https://' instead."
fcf5c760240e0c71f25586c7bb06df74,0,48,11,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-request-object,"Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'http://'. This connection will not be encrypted. Use 'https://' instead."
fcf5c760240e0c71f25586c7bb06df74,0,51,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
fcf5c760240e0c71f25586c7bb06df74,2,20,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fd0cab03a432e69843c5fa8295ce6b72,0,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fd0cab03a432e69843c5fa8295ce6b72,3,81,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fd28605bc8c94eb5fa6c908b7ae29b47,10,3,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fd28605bc8c94eb5fa6c908b7ae29b47,10,3,50,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
fd28605bc8c94eb5fa6c908b7ae29b47,11,7,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fd28605bc8c94eb5fa6c908b7ae29b47,11,7,50,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
fd28605bc8c94eb5fa6c908b7ae29b47,9,6,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fd28605bc8c94eb5fa6c908b7ae29b47,9,6,50,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
fd4e5342d49e86c703fb960d60f0c040,1,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fd9eb4433b47e2b4edbc0c1d5eec9906,0,7,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
fd9eb4433b47e2b4edbc0c1d5eec9906,2,8,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
fd9eb4433b47e2b4edbc0c1d5eec9906,3,9,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
fe1612c3b66344f998502535953c8ac8,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
fe19cecbd6fa8c44dd3c599d197db42b,4,14,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fe19cecbd6fa8c44dd3c599d197db42b,6,15,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fe5a045c05eadb0aa6d790c45cec65ab,0,29,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
fe5bf4ee4a0d73cc76d801b9c4819a64,0,13,27,files.python.rules.django.security.injection.command.subprocess-injection,"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
fe5bf4ee4a0d73cc76d801b9c4819a64,0,13,27,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fe5bf4ee4a0d73cc76d801b9c4819a64,1,23,27,files.python.rules.django.security.injection.command.subprocess-injection,"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
fe5bf4ee4a0d73cc76d801b9c4819a64,1,23,27,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fe5bf4ee4a0d73cc76d801b9c4819a64,5,24,27,files.python.rules.django.security.injection.command.subprocess-injection,"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
fe5bf4ee4a0d73cc76d801b9c4819a64,5,24,27,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fe5bf4ee4a0d73cc76d801b9c4819a64,7,31,27,files.python.rules.django.security.injection.command.subprocess-injection,"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
fe5bf4ee4a0d73cc76d801b9c4819a64,7,31,27,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fe5bf4ee4a0d73cc76d801b9c4819a64,8,9,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fe5bf4ee4a0d73cc76d801b9c4819a64,9,20,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fe6b805e656737664d1f4960ca71b2b0,1,11,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
fe6b805e656737664d1f4960ca71b2b0,1,11,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
fe6b805e656737664d1f4960ca71b2b0,2,11,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
fe6b805e656737664d1f4960ca71b2b0,2,11,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
fe6b805e656737664d1f4960ca71b2b0,4,11,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
fe6b805e656737664d1f4960ca71b2b0,4,11,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
fe7ed7f25461ec5a49ce56ac94ac49ac,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
fe9789cc6dd7f07a8194c199c348de5a,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
fe9789cc6dd7f07a8194c199c348de5a,0,5,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
febe8ca77cf70110854317e3b336835a,4,10,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
fef55ff20b31500b3be8969f5ce29a54,0,13,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fef65e2cc578b05f69cc1a2863f27d66,0,33,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
ff324521bed36d334a7759a939b9c446,25,6,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ff6962c505ac4cd6cb91c83b7df9a8ec,3,7,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
ff716d0e20d074e82ebd3cb82fa30c2e,0,10,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
ff7ce50f1d149d3c3186a3ea61499dfe,0,5,20,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
ff84425ac5721e5ef919b4aa8b1f9050,1,8,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ffd419e830ad6708b144ce94e713082e,1,15,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ffd4f52649a63ed9fab6dcb7b325d28a,0,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fff8e4c88a414d7b118b9a6f989b39aa,4,7,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
