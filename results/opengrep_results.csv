conversation_hash,language,code_index,error_line,error_character,error_id,error_message
000de7ac199d40df8d53d93bd8fa687d,c,3,29,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,c,3,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,c,3,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,c,3,72,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,c,3,74,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,c,3,104,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,c,3,116,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,c,3,124,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
000de7ac199d40df8d53d93bd8fa687d,c,3,129,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
004c0b9ddb270ea7891108cb9852e3c6,c,0,57,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0087673400f7935d66cd233f45136846,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0087673400f7935d66cd233f45136846,c,0,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0088db657f19c15fb12c67c8a24aa687,c,0,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
0088db657f19c15fb12c67c8a24aa687,c,1,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
0088db657f19c15fb12c67c8a24aa687,c,1,41,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
011b49c282451ca4ec1eb160eabf21fc,c,4,20,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
011b49c282451ca4ec1eb160eabf21fc,c,4,24,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
011b49c282451ca4ec1eb160eabf21fc,c,4,26,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
011b49c282451ca4ec1eb160eabf21fc,c,5,20,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
011b49c282451ca4ec1eb160eabf21fc,c,5,23,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
011b49c282451ca4ec1eb160eabf21fc,c,5,25,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
01310c8a4fab6dd631998dbab9198e3e,c,0,5,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
013b51483b308f34e663c9be5ce2392e,c,0,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
013b51483b308f34e663c9be5ce2392e,c,0,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0156943a01daf38901b7b87fd9e07e13,c,1,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,c,1,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,c,4,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,c,4,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,c,5,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,c,5,40,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,c,8,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0156943a01daf38901b7b87fd9e07e13,c,8,42,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
015ca39aaac93be75e5005cee7c1c6a7,c,0,28,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
015ca39aaac93be75e5005cee7c1c6a7,c,0,31,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
027f784df98fdd90fb57de47f7e2aa98,c,0,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
027f784df98fdd90fb57de47f7e2aa98,c,0,40,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
02d13da67693195d0688b526c4684c11,c,2,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
02d13da67693195d0688b526c4684c11,c,2,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
036b262dda3b50279c1809ec100db702,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
036b262dda3b50279c1809ec100db702,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
036b262dda3b50279c1809ec100db702,c,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
036b262dda3b50279c1809ec100db702,c,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
036b262dda3b50279c1809ec100db702,c,6,6,2,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
03b04665937db24f23b78099315efe2d,c,0,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
03b04665937db24f23b78099315efe2d,c,0,38,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,c,0,39,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,c,0,40,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,c,0,41,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,c,1,23,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
03b04665937db24f23b78099315efe2d,c,1,24,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
03b04665937db24f23b78099315efe2d,c,1,25,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
03b04665937db24f23b78099315efe2d,c,1,30,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
03b04665937db24f23b78099315efe2d,c,1,31,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,c,1,32,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,c,1,33,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,c,1,34,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,c,2,27,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
03b04665937db24f23b78099315efe2d,c,2,28,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,c,2,29,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,c,2,30,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03b04665937db24f23b78099315efe2d,c,2,31,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
03d4f53fd0796f4efe2766b315cfd0e3,c,3,8,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
03d4f53fd0796f4efe2766b315cfd0e3,c,3,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
049ee8a06a46d97700e4417f33ca7ea2,c,0,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,c,0,34,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,c,1,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,c,1,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,c,2,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,c,2,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,c,3,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,c,3,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,c,4,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,c,5,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,c,5,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
049ee8a06a46d97700e4417f33ca7ea2,c,5,36,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
055d53ff73145d33f4a1089025f185d2,c,1,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
055d53ff73145d33f4a1089025f185d2,c,1,19,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
061170e7ca266b75fb217c468381b013,c,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
061170e7ca266b75fb217c468381b013,c,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
061170e7ca266b75fb217c468381b013,c,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
06deed81417403bdebfb34810963a6e7,c,17,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
06f51911ed4c4b84528de118f76f4dbe,c,0,50,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
07889d22ade9323682d3bfcd8a54e965,c,1,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
07889d22ade9323682d3bfcd8a54e965,c,1,30,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
07889d22ade9323682d3bfcd8a54e965,c,1,35,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
07889d22ade9323682d3bfcd8a54e965,c,1,59,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
07889d22ade9323682d3bfcd8a54e965,c,1,75,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
080a3e68e8d736d3fc4535544bca9e4e,c,1,30,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
080a3e68e8d736d3fc4535544bca9e4e,c,1,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
08774c350291c326f7618a1ce2cd077a,c,1,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
08774c350291c326f7618a1ce2cd077a,c,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
08774c350291c326f7618a1ce2cd077a,c,4,11,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
08c94a60ca743a7f1b600a9adcb383f1,c,0,44,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
08c94a60ca743a7f1b600a9adcb383f1,c,0,60,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
08fdd75508803c0eb5f3a78d7170e02c,c,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
093988a4c52876060952f8855c0fe819,c,49,14,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
093988a4c52876060952f8855c0fe819,c,49,15,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
0a2c6d126483196e8ff144ea31434857,c,0,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0aa0ef20318aaab4393dfbd6276c2629,c,7,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0abf5d5d3e5ecea7815c1420b1e45e75,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ad3d3549f817556eca75f1c73ebeb0a,c,1,67,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,c,1,79,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,c,1,80,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,c,1,81,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,c,1,95,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,c,1,96,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0ad3d3549f817556eca75f1c73ebeb0a,c,1,97,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0b1494f40bc3d2cd282fc359f059b88f,c,1,7,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0b1494f40bc3d2cd282fc359f059b88f,c,2,7,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
0c1776df28562fca075b681cf232b188,c,0,9,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0c1776df28562fca075b681cf232b188,c,0,10,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0c1776df28562fca075b681cf232b188,c,0,11,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0c1776df28562fca075b681cf232b188,c,0,39,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0c74d7000722cee11d5ab4786432dc4f,c,3,18,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0d5c3d9fb7900eae4aa0507044a19e0d,c,0,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0d5c3d9fb7900eae4aa0507044a19e0d,c,0,32,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0d5c3d9fb7900eae4aa0507044a19e0d,c,1,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0d5c3d9fb7900eae4aa0507044a19e0d,c,1,32,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0d976190d71d10b8d9415761dbd66261,c,4,28,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
0ddebfa92e9f5da68a2a28318f91084c,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ddebfa92e9f5da68a2a28318f91084c,c,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0eeb7414b228dea2e49788e6382151f5,c,0,41,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0eeb7414b228dea2e49788e6382151f5,c,0,47,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0eeb7414b228dea2e49788e6382151f5,c,0,52,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0eeb7414b228dea2e49788e6382151f5,c,0,58,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ef895d41a5c482c770cf7d1d5265c69,c,0,46,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
0fc4e95e32155bdb91eac7fac558bde4,c,0,16,4,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
0fec4f7d3c7ada52b59a118521557b07,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0fec4f7d3c7ada52b59a118521557b07,c,0,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ff29c3bae5d17a78293f0fe665a729f,c,0,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ff962923751ec803709f0ac72dad9e0,c,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
0ff962923751ec803709f0ac72dad9e0,c,0,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,c,0,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,c,0,43,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,c,2,40,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,c,2,45,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,c,7,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,c,7,40,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,c,9,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
103d7ac035e2ec5fc4966acba55b029e,c,9,55,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
10fff4f88e7e6583f819cb67d9edcf43,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
10fff4f88e7e6583f819cb67d9edcf43,c,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
11a14f1d2fa140610c518429298c6d82,c,2,103,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
11a69f0be83d5d2320d3289b7705ceec,c,0,28,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
11a69f0be83d5d2320d3289b7705ceec,c,0,77,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1253465347091f7f2b54c6f5cb215ada,c,0,70,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1253465347091f7f2b54c6f5cb215ada,c,0,74,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
1253465347091f7f2b54c6f5cb215ada,c,0,80,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
12dd3afc17847441a44d7c9331e5b222,c,0,44,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
12dd3afc17847441a44d7c9331e5b222,c,1,108,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
135d2187131563b0f914af6732b3d039,c,1,21,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1361c852fbac46c9b60ce0f44f4282eb,c,0,106,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,c,0,107,16,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,c,0,108,12,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,c,0,116,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1361c852fbac46c9b60ce0f44f4282eb,c,0,166,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1361c852fbac46c9b60ce0f44f4282eb,c,0,169,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1361c852fbac46c9b60ce0f44f4282eb,c,1,29,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,c,1,30,16,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,c,1,31,12,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
1361c852fbac46c9b60ce0f44f4282eb,c,1,109,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1361c852fbac46c9b60ce0f44f4282eb,c,1,118,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
13e10838c213de87ef477c2151f386ab,c,0,48,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
13e10838c213de87ef477c2151f386ab,c,0,51,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
13e10838c213de87ef477c2151f386ab,c,0,54,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
13e10838c213de87ef477c2151f386ab,c,0,57,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,c,0,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,c,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,c,0,16,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,c,0,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,c,1,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,c,1,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,c,1,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
141d04216aa58888b39e1f22f71b112f,c,1,25,7,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
142c715dc432f7f95e4c2337845ad72b,c,0,43,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
14e4a8679dd096dec91b3f66ae4dd570,c,0,5,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
1506cc6a08d319b406e7d53ce7dfa91e,c,0,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,c,0,15,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,c,1,12,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,c,1,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,c,1,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,c,1,48,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,c,1,54,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,c,2,12,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,c,2,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,c,2,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,c,2,52,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,c,2,59,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,c,3,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,c,3,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1506cc6a08d319b406e7d53ce7dfa91e,c,3,48,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,c,3,54,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1506cc6a08d319b406e7d53ce7dfa91e,c,3,61,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
160143aa38363ef2741d952676c528aa,c,0,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
16a839dd783502d15490a5d3d426aac1,c,0,20,26,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
16a839dd783502d15490a5d3d426aac1,c,0,21,28,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
16a839dd783502d15490a5d3d426aac1,c,0,45,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
16a839dd783502d15490a5d3d426aac1,c,0,56,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
16a839dd783502d15490a5d3d426aac1,c,0,68,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
16a839dd783502d15490a5d3d426aac1,c,0,72,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
16a839dd783502d15490a5d3d426aac1,c,0,93,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
16ce1eed4cfe3e956e645366778332bb,c,7,18,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
16ef43783de45a223c883f0aa596315e,c,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
16ef43783de45a223c883f0aa596315e,c,2,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
16ef43783de45a223c883f0aa596315e,c,4,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
19010287ac91dbeb35a469c86b9a709a,c,0,36,32,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
19010287ac91dbeb35a469c86b9a709a,c,0,37,26,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
19010287ac91dbeb35a469c86b9a709a,c,0,43,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1939691812bc0fd015f820337b33a20b,c,2,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1939691812bc0fd015f820337b33a20b,c,6,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
19c66ef39b17027d386e70b0ead1a178,c,0,84,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
19c66ef39b17027d386e70b0ead1a178,c,0,88,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
19c66ef39b17027d386e70b0ead1a178,c,0,91,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
19d51dfbd9dd7d1ce62c1e858ef398af,c,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,c,0,65,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,c,0,74,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,c,1,103,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,c,1,108,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,c,2,103,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a04d18e3b56c7aee1ae5e3a13c1f52f,c,2,108,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1a2d5c0057db6a29dcdb827aa02cad26,c,1,9,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1b4fcd69831f5462c4e3680fa41721f2,c,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1c40111a6943be9243cf77bff314d0e1,c,2,14,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1c40111a6943be9243cf77bff314d0e1,c,2,21,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1cb7c42ad386af2d83016d764eb0d1ea,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1de4d24db6c895e97b2dcbb760d3d771,c,0,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1de4d24db6c895e97b2dcbb760d3d771,c,0,96,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1df209439804a0fcbd695029d82384c4,c,7,8,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
1e4469a3e285734db149ab1d6670d3d9,c,0,59,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
1ec9322d33fbbaae06201260b0cd0df7,c,1,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1ef407eaa82c8d9635c5c8354530642d,c,0,37,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1ef407eaa82c8d9635c5c8354530642d,c,0,41,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1f091121125884828ea890867f46881c,c,1,8,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
1fd5827c432672fdda747a6dcdddc34b,c,0,30,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1fd5827c432672fdda747a6dcdddc34b,c,1,35,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
1fd5827c432672fdda747a6dcdddc34b,c,5,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
205b5e0bfa39979d10bedd2180724ad1,c,0,21,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
206e93531290b10953ca98d0354bca3c,c,2,59,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
206e93531290b10953ca98d0354bca3c,c,2,66,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
206e93531290b10953ca98d0354bca3c,c,4,95,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
206e93531290b10953ca98d0354bca3c,c,4,98,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
206e93531290b10953ca98d0354bca3c,c,5,109,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
206e93531290b10953ca98d0354bca3c,c,5,112,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
207f5409830d65cc5d734e19b58b656e,c,0,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
207f5409830d65cc5d734e19b58b656e,c,0,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
207f5409830d65cc5d734e19b58b656e,c,2,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
207f5409830d65cc5d734e19b58b656e,c,2,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
207f5409830d65cc5d734e19b58b656e,c,3,9,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
20f021ad6179e70ae61cbf2099005c08,c,2,62,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21b911f7ccb0a790e8e9f5c03e4d20d4,c,0,29,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21b911f7ccb0a790e8e9f5c03e4d20d4,c,0,39,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21ecc30a0e248b9f75a6c31309c53483,c,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21ecc30a0e248b9f75a6c31309c53483,c,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21ecc30a0e248b9f75a6c31309c53483,c,0,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21ecc30a0e248b9f75a6c31309c53483,c,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
21ecc30a0e248b9f75a6c31309c53483,c,0,30,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
225aa33fb54d42c01ef2449fb729c1bd,c,0,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,c,0,28,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
225aa33fb54d42c01ef2449fb729c1bd,c,0,56,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,c,1,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,c,1,23,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
225aa33fb54d42c01ef2449fb729c1bd,c,1,36,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,c,2,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,c,2,27,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
225aa33fb54d42c01ef2449fb729c1bd,c,3,17,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,c,3,19,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
225aa33fb54d42c01ef2449fb729c1bd,c,4,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,c,4,26,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
225aa33fb54d42c01ef2449fb729c1bd,c,4,56,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
225aa33fb54d42c01ef2449fb729c1bd,c,4,58,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
22e5bda28cbd98824360b3d35cece3d4,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
22e5bda28cbd98824360b3d35cece3d4,c,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
236b3a7e1b48a77e4d67ad46c7f532d4,c,6,18,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
236b3a7e1b48a77e4d67ad46c7f532d4,c,6,37,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
236b3a7e1b48a77e4d67ad46c7f532d4,c,6,42,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
236b3a7e1b48a77e4d67ad46c7f532d4,c,6,47,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
2440c51434c1fa7bbd963fd4abb2d2c1,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
244ecf03c82aca655948e85213d88370,c,0,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
244ecf03c82aca655948e85213d88370,c,1,9,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
24a4a69ce002af2452917b29ccd90fa6,c,0,5,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
24bbc84a4481608626a0a0b5e88604d9,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2502045ddf3879a616bb1b078a452d40,c,0,86,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2502045ddf3879a616bb1b078a452d40,c,0,132,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2502045ddf3879a616bb1b078a452d40,c,0,153,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
25407f3140afb2bbe56c231a21be35cf,c,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
25407f3140afb2bbe56c231a21be35cf,c,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
25407f3140afb2bbe56c231a21be35cf,c,4,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
257cfd1a7cf6fe398309a269afe7214c,c,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
25873bc9d5268a8287145f49f755ad59,c,0,19,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
258d9c473398506fedc46c2d1943ab62,c,0,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
258d9c473398506fedc46c2d1943ab62,c,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
258d9c473398506fedc46c2d1943ab62,c,1,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
258d9c473398506fedc46c2d1943ab62,c,1,30,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
258d9c473398506fedc46c2d1943ab62,c,2,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
258d9c473398506fedc46c2d1943ab62,c,2,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,0,56,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,0,60,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,1,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,2,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,2,19,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,3,75,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,3,79,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,4,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,4,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,5,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
269b2187e861b5e3137d3c917c555112,c,5,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
26ee58442fc13e636196e2de320f59d7,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
26ee58442fc13e636196e2de320f59d7,c,0,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2783c266085dc9a4fcfa820cc2cf146c,c,0,9,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,c,0,18,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,c,2,9,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,c,2,15,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,c,2,20,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,c,2,26,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,c,2,31,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,c,2,34,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
2783c266085dc9a4fcfa820cc2cf146c,c,21,15,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
27ab4665835321504c23379fd5fd95ad,c,0,23,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
27ab4665835321504c23379fd5fd95ad,c,0,116,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
27ab4665835321504c23379fd5fd95ad,c,0,122,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
27cf3e06f9c10fecb7c1b89ba32a8b88,c,0,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
27cf3e06f9c10fecb7c1b89ba32a8b88,c,0,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
282cc9c9cdefa2a2f2f9b8662112ce2c,c,3,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
283dcea1f618e40982bcc072f6ae9c51,c,0,85,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
283dcea1f618e40982bcc072f6ae9c51,c,1,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
283dcea1f618e40982bcc072f6ae9c51,c,2,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,c,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,c,0,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,c,2,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,c,2,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,c,3,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,c,4,23,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
286669c68ede1b624b01d49ad0fbc072,c,4,37,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
286669c68ede1b624b01d49ad0fbc072,c,4,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
286669c68ede1b624b01d49ad0fbc072,c,4,52,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
288bb240019125c9be2200fa5aef13d6,c,10,20,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
288bb240019125c9be2200fa5aef13d6,c,5,21,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
288bb240019125c9be2200fa5aef13d6,c,7,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
28cc7aa098a6c6d94d5eb54a75a96fc1,c,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
28cc7aa098a6c6d94d5eb54a75a96fc1,c,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
28cc7aa098a6c6d94d5eb54a75a96fc1,c,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
28cc7aa098a6c6d94d5eb54a75a96fc1,c,2,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
29c767ad7e295bfb43cd8753e74cd323,c,0,78,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
2b2b7b136b16943561d87d1db964aa2d,c,4,44,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b2b7b136b16943561d87d1db964aa2d,c,4,49,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b3e6ea0a35d10cc79d19d2793ed59c5,c,0,32,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b3e6ea0a35d10cc79d19d2793ed59c5,c,0,35,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b3e6ea0a35d10cc79d19d2793ed59c5,c,0,42,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b80bcc6ea1ba03079b6ef16fb07ad2b,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b80bcc6ea1ba03079b6ef16fb07ad2b,c,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b80bcc6ea1ba03079b6ef16fb07ad2b,c,0,44,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2b80bcc6ea1ba03079b6ef16fb07ad2b,c,0,52,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2bca2dac55108512d3c5ea622d8efcd5,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2bca2dac55108512d3c5ea622d8efcd5,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2bca2dac55108512d3c5ea622d8efcd5,c,4,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2bca2dac55108512d3c5ea622d8efcd5,c,4,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2bca2dac55108512d3c5ea622d8efcd5,c,4,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2c544107337746b7e9f5f388685b7d45,c,1,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
2cc8267c80a3563a23313d5439a4f731,c,0,19,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
2cc8267c80a3563a23313d5439a4f731,c,0,51,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2d814147b6e3425a632b6c776e0a35ca,c,0,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2d814147b6e3425a632b6c776e0a35ca,c,1,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2f743a23de6cb688fb16aea6003118b1,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
2f743a23de6cb688fb16aea6003118b1,c,1,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
308fd17e74abd5dc8b17d1ce4c0813ae,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
308fd17e74abd5dc8b17d1ce4c0813ae,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
308fd17e74abd5dc8b17d1ce4c0813ae,c,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3188dd05832a3de047c075cede9c3f59,c,0,8,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3188dd05832a3de047c075cede9c3f59,c,0,11,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31d2758120c96f666fbc8f0d9515a3ff,c,2,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31d2758120c96f666fbc8f0d9515a3ff,c,3,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31d2758120c96f666fbc8f0d9515a3ff,c,4,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31d2758120c96f666fbc8f0d9515a3ff,c,4,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31d2758120c96f666fbc8f0d9515a3ff,c,4,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31e97c450966934ba6b71a6bd7536da7,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
31e97c450966934ba6b71a6bd7536da7,c,0,26,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
32b17d91e149d491a2ac340642f1a24a,c,3,63,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
32b17d91e149d491a2ac340642f1a24a,c,3,73,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
32e195b79f04a7304717e6fb4d20adc4,c,0,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
32e195b79f04a7304717e6fb4d20adc4,c,0,54,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3350c26474f1d764aa569b525b32cb7f,c,0,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
3350c26474f1d764aa569b525b32cb7f,c,0,53,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
33c729358df9ce2c9e1573a6e51656f1,c,1,15,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
34dfc7a3ee5582abdfe43f6e05657616,c,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
34dfc7a3ee5582abdfe43f6e05657616,c,0,30,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
34dfc7a3ee5582abdfe43f6e05657616,c,0,100,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
351d926261a9bf66aed07819ab9b8feb,c,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
351d926261a9bf66aed07819ab9b8feb,c,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
351d926261a9bf66aed07819ab9b8feb,c,1,19,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,c,1,34,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,c,1,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,c,1,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,c,1,40,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,c,1,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,c,1,75,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,c,1,89,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,c,1,91,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,c,1,93,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,c,1,102,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3558ddf561d77b0849cd92375ed4a79e,c,1,127,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3561b91f12993bb633ef0b8cb4004504,c,1,37,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
3561b91f12993bb633ef0b8cb4004504,c,1,40,39,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
3561b91f12993bb633ef0b8cb4004504,c,1,46,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
357c06aec18a721781ac4cba22a2c3a1,c,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
357c06aec18a721781ac4cba22a2c3a1,c,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
357c06aec18a721781ac4cba22a2c3a1,c,3,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,c,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,c,0,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,c,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,c,1,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,c,1,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,c,1,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35a7dae154ddcb011efa24d42c39ea05,c,2,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35b09559074d51f44e090a5920b5e323,c,0,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35b09559074d51f44e090a5920b5e323,c,1,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35b09559074d51f44e090a5920b5e323,c,4,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35b09559074d51f44e090a5920b5e323,c,5,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35b09559074d51f44e090a5920b5e323,c,6,17,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35b09559074d51f44e090a5920b5e323,c,7,18,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35c9c3a3d4c4fb13c58738bbda5f9503,c,0,37,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
35dae7de5ff9def74dac3e4202dbd9f0,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,c,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,c,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,c,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,c,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
35dae7de5ff9def74dac3e4202dbd9f0,c,1,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
361ba9ce376ee897c0ea55e39f3681e8,c,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
362f4dcd9d7dad54d092607eddae0392,c,0,17,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
362f4dcd9d7dad54d092607eddae0392,c,0,19,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
362f4dcd9d7dad54d092607eddae0392,c,0,21,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
362f4dcd9d7dad54d092607eddae0392,c,0,23,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
362f4dcd9d7dad54d092607eddae0392,c,0,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
362f4dcd9d7dad54d092607eddae0392,c,0,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
365515d4af829ec5facef62a40a42f39,c,0,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
365515d4af829ec5facef62a40a42f39,c,1,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
36a0315947c8ee96af9d3de47b439389,c,0,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
36a0315947c8ee96af9d3de47b439389,c,0,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
36a0315947c8ee96af9d3de47b439389,c,1,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
36a0315947c8ee96af9d3de47b439389,c,1,23,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
36a0315947c8ee96af9d3de47b439389,c,1,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
36a7afad179e80c0b6a169c8890bacbd,c,0,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
37c990fd8b436b8e8883654e33372429,c,0,18,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
37c990fd8b436b8e8883654e33372429,c,0,22,7,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
37c990fd8b436b8e8883654e33372429,c,0,26,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
37c990fd8b436b8e8883654e33372429,c,0,29,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
37f49fe6bc258dcd6d831002c7c6043a,c,0,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
38b129f6365cba7d93438f2a8225341b,c,10,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
38b129f6365cba7d93438f2a8225341b,c,20,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
38ee0fcadc5f51c7b6897845b4be2579,c,3,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
397c99353a75bc77cabe4ff18b644733,c,0,25,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
397c99353a75bc77cabe4ff18b644733,c,0,30,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
39c4a5a3e61d8d522b0f2931a8c00899,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
39c4a5a3e61d8d522b0f2931a8c00899,c,1,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a14ec43d3f1646fc3c267ba09563f67,c,0,15,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a14ec43d3f1646fc3c267ba09563f67,c,1,13,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a14ec43d3f1646fc3c267ba09563f67,c,2,33,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a6106b4e487229e58cf1ad110ca95f1,c,2,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a6106b4e487229e58cf1ad110ca95f1,c,2,19,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
3a6106b4e487229e58cf1ad110ca95f1,c,2,21,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3a6106b4e487229e58cf1ad110ca95f1,c,2,23,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,c,0,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,c,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,c,2,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,c,4,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,c,5,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b57b68717b0920292e8adbd4d0220a2,c,5,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b59ec4074929c995aa4dc8cdb4fd8f7,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b59ec4074929c995aa4dc8cdb4fd8f7,c,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b59ec4074929c995aa4dc8cdb4fd8f7,c,0,29,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3b59ec4074929c995aa4dc8cdb4fd8f7,c,0,38,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,c,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,c,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,c,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,c,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,c,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,c,3,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3d33868e89eb90de1e0f6d84b8b77953,c,3,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3ec5388c84a854ca95ebd5b3368cdf21,c,0,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3f115db70a24cbd66a513f46a77e62c9,c,1,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
3f115db70a24cbd66a513f46a77e62c9,c,2,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
404c65c59d350ab661c700e8b8203061,c,0,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,c,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,c,0,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,c,1,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,c,1,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,c,1,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
40a488974b0d3edcb6a5b8ebb68d5db3,c,1,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
41060145d6047c3252c8ad35b69dcdd7,c,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4133810ac8fab19e7eb707f808f64b10,c,1,45,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
413983d192999038bf29e473067c64f0,c,1,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,c,1,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,c,1,15,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,c,1,17,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,c,1,19,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,c,1,21,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
413983d192999038bf29e473067c64f0,c,1,33,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,c,0,34,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,c,0,39,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,c,0,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,c,1,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,c,1,43,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,c,1,46,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,c,10,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,c,10,44,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4169b505b302e48a544908df97faa891,c,10,47,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
41d1cee96508da9b0a25e558e77d10fb,c,5,53,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
41d1cee96508da9b0a25e558e77d10fb,c,7,53,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
41efa8a4ad788ac7012ff090061b07e6,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
420ea0dad08936b13c0646b88ce0a03e,c,1,7,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
42a6efdee50b7523a75dee95b172993a,c,4,164,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
42a6efdee50b7523a75dee95b172993a,c,4,169,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
42ec741b9a140778d3949fb89c00632c,c,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
439d0e88175887a7c3607061738d1ce1,c,1,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
439d0e88175887a7c3607061738d1ce1,c,2,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
43d4855d9a006d527cf1688df18a7355,c,0,60,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
442da891e9776478bb6a9f3abbdfd043,c,0,47,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
442da891e9776478bb6a9f3abbdfd043,c,0,52,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
442da891e9776478bb6a9f3abbdfd043,c,0,62,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
442da891e9776478bb6a9f3abbdfd043,c,0,72,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
451c7e399a3834fa1f1207c1cb10d6cd,c,1,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4578b45e070acbdece7b719f57671dad,c,0,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4578b45e070acbdece7b719f57671dad,c,0,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
46139d5e09b4470b0e5a5ceee4735d16,c,1,67,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
46139d5e09b4470b0e5a5ceee4735d16,c,1,70,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
46139d5e09b4470b0e5a5ceee4735d16,c,1,71,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
46139d5e09b4470b0e5a5ceee4735d16,c,1,72,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
46139d5e09b4470b0e5a5ceee4735d16,c,1,73,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
46139d5e09b4470b0e5a5ceee4735d16,c,1,74,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
46139d5e09b4470b0e5a5ceee4735d16,c,1,75,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
4687aef3f31a6bfad04446f450c498b7,c,1,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
4768a83ffc071a2788aa8c63ee8f4f19,c,0,59,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4768a83ffc071a2788aa8c63ee8f4f19,c,2,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4768a83ffc071a2788aa8c63ee8f4f19,c,3,35,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4768a83ffc071a2788aa8c63ee8f4f19,c,3,40,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
482cce2aa66690520f41f04399e01b6a,c,0,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,c,0,44,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,c,1,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,c,1,41,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,c,2,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,c,2,44,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,c,2,49,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,c,3,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,c,3,32,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
482cce2aa66690520f41f04399e01b6a,c,3,36,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
48df859c07ffa975bf2e75552eea3d96,c,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4975690ebdca40dcaa3c9f830f9c1457,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4975690ebdca40dcaa3c9f830f9c1457,c,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4975690ebdca40dcaa3c9f830f9c1457,c,2,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4a32fc0fd4bcf21f4a3a41c6fa727cc9,c,0,15,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
4a32fc0fd4bcf21f4a3a41c6fa727cc9,c,0,18,18,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
4a32fc0fd4bcf21f4a3a41c6fa727cc9,c,0,24,16,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
4a32fc0fd4bcf21f4a3a41c6fa727cc9,c,0,43,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
4a32fc0fd4bcf21f4a3a41c6fa727cc9,c,0,45,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
4b8f2ce2c51b052a6821333cbe3ae1e9,c,4,6,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4bd1046d2c32f97c9ee3e62cc5d606f7,c,0,8,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4bd1046d2c32f97c9ee3e62cc5d606f7,c,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4cdec0104b382aa3b18ea8f3667a9865,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4d2c16e0cd7e20f8bc3ccf5e67e76bbe,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4d2c16e0cd7e20f8bc3ccf5e67e76bbe,c,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4d2c16e0cd7e20f8bc3ccf5e67e76bbe,c,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4db38f031a9efb36a3ba4fa410584b50,c,0,32,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4db38f031a9efb36a3ba4fa410584b50,c,0,47,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4dd4e6d267c3eba2d7323498e69067c4,c,0,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4e21ffb120f5f540368551f8b4861891,c,0,72,17,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
4e9721f83c15e45e7e0958bde57d4558,c,1,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4e9721f83c15e45e7e0958bde57d4558,c,1,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4e9721f83c15e45e7e0958bde57d4558,c,2,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4e9721f83c15e45e7e0958bde57d4558,c,2,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4ed15a480cdbf9c9814cc88d2ef9774c,c,0,50,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4ed15a480cdbf9c9814cc88d2ef9774c,c,1,45,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4ed15a480cdbf9c9814cc88d2ef9774c,c,2,45,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4ed15a480cdbf9c9814cc88d2ef9774c,c,3,42,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
4f173b720a696ce3cf433b59f32cc610,c,1,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4f173b720a696ce3cf433b59f32cc610,c,2,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
4f2d1273f44c9d61f8268ced2b68105d,c,2,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
50e8334156f3db9b2bb58831e938a3eb,c,0,24,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
50e8334156f3db9b2bb58831e938a3eb,c,1,34,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
50e8334156f3db9b2bb58831e938a3eb,c,3,42,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
50e8334156f3db9b2bb58831e938a3eb,c,6,20,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
50e8334156f3db9b2bb58831e938a3eb,c,6,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
50e8334156f3db9b2bb58831e938a3eb,c,6,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
50e8334156f3db9b2bb58831e938a3eb,c,6,52,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
50eab95beb52a2b36b91a5281c0a1e39,c,0,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
50eab95beb52a2b36b91a5281c0a1e39,c,0,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
50eab95beb52a2b36b91a5281c0a1e39,c,0,16,7,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51d38946913feb8e4963c3382714e389,c,0,16,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
51d38946913feb8e4963c3382714e389,c,0,17,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
51f7c0dbff02690be83489c7ca7ffa18,c,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,c,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,c,1,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,c,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,c,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,c,2,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,c,2,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
51f7c0dbff02690be83489c7ca7ffa18,c,2,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5211c563cdd63c3e10a7e3a4244737be,c,0,7,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5272e8b7fc0c72fd59ff0a75c92e78dc,c,0,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5288baec3e85e0cf31d64373e55a30bb,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
52d855c774820df1a59d4cc6c58ae7ce,c,0,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
52d855c774820df1a59d4cc6c58ae7ce,c,0,34,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
52d855c774820df1a59d4cc6c58ae7ce,c,0,40,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
53e1ccc2500fefbcc64ac8e2c2abc5bb,c,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
53e1ccc2500fefbcc64ac8e2c2abc5bb,c,0,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5440ad432f5730df5d5da41a4b341ff7,c,6,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
54b52b4f56d97dc383f2a9758e704e41,c,0,32,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
550e7b6e3349428b0d8977f6d4432e19,c,0,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5585e200a243afb541a9eda1e38e31de,c,2,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5585e200a243afb541a9eda1e38e31de,c,2,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5585e200a243afb541a9eda1e38e31de,c,2,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
55881cc7c7b7e825b0b1b8414fbdcd16,c,0,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
558bd831251c2f320bea1abdac6aff2c,c,5,5,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
5690951702245e397ba5ab27ba90458f,c,10,31,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
5690951702245e397ba5ab27ba90458f,c,9,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
56db010b36ab6967d8d3030524204765,c,14,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
56e99a0495e20a04a554b20c77686d6f,c,0,13,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
56e99a0495e20a04a554b20c77686d6f,c,0,14,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
56e99a0495e20a04a554b20c77686d6f,c,0,15,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5701f56ebb55add14525281a31aa58ab,c,1,19,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5701f56ebb55add14525281a31aa58ab,c,1,20,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
5701f56ebb55add14525281a31aa58ab,c,1,21,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
5751efec59551e5b260a3a3aa6bd9c1c,c,3,7,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
5751efec59551e5b260a3a3aa6bd9c1c,c,6,7,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
5751efec59551e5b260a3a3aa6bd9c1c,c,9,9,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
581b20168d8c40fcc02b25bf67a4d047,c,0,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,c,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,c,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,c,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,c,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,c,0,47,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
588112eb0c22f37f677bc0a7195a96dc,c,0,80,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
58a9a60deb0ec5b3c181a386adf6e481,c,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
58be52be549633c2058f0ae5a53f48e9,c,0,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
58c9b7847d3ad426b4167286f0026ae1,c,0,85,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
58c9b7847d3ad426b4167286f0026ae1,c,0,94,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
598153b645a41d916e81bfea260a0acc,c,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
598153b645a41d916e81bfea260a0acc,c,0,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
598153b645a41d916e81bfea260a0acc,c,0,30,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
5b67ff0b60203af8b73ef9ad3ef2e1ec,c,1,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5b67ff0b60203af8b73ef9ad3ef2e1ec,c,1,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5b67ff0b60203af8b73ef9ad3ef2e1ec,c,2,6,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5b67ff0b60203af8b73ef9ad3ef2e1ec,c,3,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5b67ff0b60203af8b73ef9ad3ef2e1ec,c,3,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5b67ff0b60203af8b73ef9ad3ef2e1ec,c,4,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,c,0,10,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,c,3,9,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,c,5,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,c,6,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,c,8,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,c,9,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c222b16a56710374107867b64a6b61b,c,9,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c3cb29a9de42b917d84191e3af86dc2,c,1,42,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
5c65cdd8d0f6544397352bf6fa2578be,c,0,112,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c65cdd8d0f6544397352bf6fa2578be,c,0,137,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5c69b557e8f58678041e8566fc172817,c,4,26,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5dfaed1cf278b6751e13e12948f8890f,c,0,108,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5dfaed1cf278b6751e13e12948f8890f,c,0,114,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5e5c1e86c4e9024ae9c09651dcefccf8,c,0,38,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5e5c1e86c4e9024ae9c09651dcefccf8,c,0,44,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5e6250f6b7bfd7fadf429001e1eb61b1,c,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5e93a2e2ef41bcc1505ecc284ab4b0cb,c,6,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5e93a2e2ef41bcc1505ecc284ab4b0cb,c,7,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5eb1af25dd39bf8da4008a77b4a2239b,c,1,38,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
5eb1af25dd39bf8da4008a77b4a2239b,c,1,57,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5f5e8d31d79ebdc16dbc4bf39cb99bf9,c,0,12,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5f5e8d31d79ebdc16dbc4bf39cb99bf9,c,0,13,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5f5e8d31d79ebdc16dbc4bf39cb99bf9,c,0,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
5fcea9a0ac20696ebdd8e7454a1b15a6,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5fcea9a0ac20696ebdd8e7454a1b15a6,c,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
5fcea9a0ac20696ebdd8e7454a1b15a6,c,1,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
609344e80ec065a6fc4bdfc2f5ddfd25,c,0,13,5,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
609344e80ec065a6fc4bdfc2f5ddfd25,c,0,20,9,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
60d51d848d67c3335aa2ef73e093f34d,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
60d51d848d67c3335aa2ef73e093f34d,c,0,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
60e449653f5f5374da2daafbfc10f192,c,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
613a638a0fda7fea78828f3ee1cc5c34,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
61ae265a8997a70444bf560af3a1fc03,c,7,86,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6231741bd0efdec703f185358324cc5c,c,20,64,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,c,0,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,c,0,41,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,c,0,43,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,c,0,54,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,c,0,63,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,c,0,65,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,c,0,67,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,c,0,77,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,c,0,98,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,c,0,165,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62705677393141b257029241fed16746,c,0,185,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,c,2,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,c,2,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,c,2,28,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,c,2,52,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,c,2,84,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,c,2,90,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,c,2,93,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,c,2,130,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62b7316ec822a22323b18b3432e4c330,c,3,11,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
62e6fb0af3d86da09c5131a6cd3810a1,c,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62e6fb0af3d86da09c5131a6cd3810a1,c,2,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62e6fb0af3d86da09c5131a6cd3810a1,c,6,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62e6fb0af3d86da09c5131a6cd3810a1,c,6,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
62e6fb0af3d86da09c5131a6cd3810a1,c,6,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6353863ed555ffc73d6e6b37d10e179c,c,0,47,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6353863ed555ffc73d6e6b37d10e179c,c,1,55,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
635f0472a6ac02242563417747b2e5d1,c,0,33,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
635f0472a6ac02242563417747b2e5d1,c,0,59,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
635f0472a6ac02242563417747b2e5d1,c,1,44,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
63674e6bc412c3fbb58e3f022e4575c5,c,0,100,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
63674e6bc412c3fbb58e3f022e4575c5,c,0,101,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
63674e6bc412c3fbb58e3f022e4575c5,c,0,102,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
6481abec4ed709663abb66d858fe5117,c,6,66,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6481abec4ed709663abb66d858fe5117,c,6,78,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
64a11451f55353201eea5c86be874344,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
64a11451f55353201eea5c86be874344,c,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
64a11451f55353201eea5c86be874344,c,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
64a11451f55353201eea5c86be874344,c,4,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
64fb38b02397c203990a9f2da7628dab,c,0,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
64fb38b02397c203990a9f2da7628dab,c,2,18,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
659629b2622d25e33885164169548135,c,0,80,7,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
659629b2622d25e33885164169548135,c,0,96,7,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
659629b2622d25e33885164169548135,c,0,171,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
65f889cdc3c48e0c90219571ffa74e72,c,1,22,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
66024d9c6967202659aa181c29dde74d,c,1,30,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
673cd4bc38067b1a68046a79626303ed,c,0,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,c,0,34,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,c,0,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,c,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,c,3,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,c,6,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,c,6,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,c,9,7,20,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,8,22,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,13,18,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,14,20,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,29,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,30,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,37,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,38,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,53,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,c,9,62,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
673cd4bc38067b1a68046a79626303ed,c,9,72,28,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,73,30,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,74,28,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,75,30,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,79,30,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,80,29,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,81,31,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,82,29,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,83,31,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
673cd4bc38067b1a68046a79626303ed,c,9,84,28,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
682fc9dd5457b2d3c25838074fd99f72,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,c,0,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,c,0,14,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,c,0,20,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,c,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,c,2,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,c,2,14,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,c,2,20,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,c,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,c,3,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
682fc9dd5457b2d3c25838074fd99f72,c,3,15,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
683fa38a9db63c43b60fc602141a22c8,c,0,81,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
68acc78e2b9424b3efdaa2b68816496d,c,1,47,5,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
68acc78e2b9424b3efdaa2b68816496d,c,1,58,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
68acc78e2b9424b3efdaa2b68816496d,c,1,74,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
68acc78e2b9424b3efdaa2b68816496d,c,1,75,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
68acc78e2b9424b3efdaa2b68816496d,c,1,76,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
692b3ee61e4229012362b68be166334e,c,24,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
692b3ee61e4229012362b68be166334e,c,24,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
692b3ee61e4229012362b68be166334e,c,25,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
692b3ee61e4229012362b68be166334e,c,26,23,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
692b3ee61e4229012362b68be166334e,c,27,23,25,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
693182e98402418b794cf6cf30d183da,c,0,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6a3fa289450da79da7b650dc982511c0,c,7,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6a3fa289450da79da7b650dc982511c0,c,8,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6a3fa289450da79da7b650dc982511c0,c,8,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6a3fa289450da79da7b650dc982511c0,c,9,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6a883f171898965184fad73283348d27,c,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6c00afe61d7d98e423533067b9305c19,c,0,39,21,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6c00afe61d7d98e423533067b9305c19,c,1,45,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6c00afe61d7d98e423533067b9305c19,c,2,44,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6c659b7b37624777840f3a2d060bb183,c,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6caab6f6c07882fbc311ad581ad39a2e,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6d7d6cbc166d5beb29bf09c71769c6e0,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6d8949cae4c489f87c3f0f370d9cd06a,c,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,c,0,51,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,c,0,56,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,c,1,60,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,c,1,65,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,c,2,65,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,c,2,70,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,c,3,61,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6da5f87950c373cf1a9bd70b59c2ffa5,c,3,66,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,c,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,c,2,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,c,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,c,4,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,c,4,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,c,4,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,c,5,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6db1f98b606191159e0680a48dcc5fd0,c,5,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6dba5bfd862a7203d9c1186478b5afe6,c,0,67,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6dba5bfd862a7203d9c1186478b5afe6,c,0,72,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6dba5bfd862a7203d9c1186478b5afe6,c,1,87,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6dba5bfd862a7203d9c1186478b5afe6,c,1,92,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6dbc1c115a40836c13cfa70abb2f0c17,c,0,9,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6e865e67042af769a19c011b84d1a8e0,c,0,29,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
6e865e67042af769a19c011b84d1a8e0,c,0,64,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
6e9ea7e4bfe61141fe952721ac108ec2,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f10b48726ee1c01924eca4be3583566,c,0,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f10b48726ee1c01924eca4be3583566,c,0,32,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,c,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,c,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,c,3,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,c,4,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,c,4,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,c,4,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,c,4,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,c,5,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,c,5,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,c,5,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f229e7b4f609d14f777ee16c1159fc2,c,5,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
6f502f016646e944dc2b8b65b170e8a8,c,0,100,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,c,0,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,c,0,23,28,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,c,0,24,29,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,c,0,25,32,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,c,0,26,30,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7061a0a6cf3af487f1ec5efd890c9e05,c,0,27,31,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
708150a31c4effd0aa07a11fc9287ec5,c,2,32,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7086bd4cd946c38746868817da8bac78,c,0,9,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7086bd4cd946c38746868817da8bac78,c,0,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7086bd4cd946c38746868817da8bac78,c,0,18,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
7086bd4cd946c38746868817da8bac78,c,0,30,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
7086bd4cd946c38746868817da8bac78,c,0,32,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
7086bd4cd946c38746868817da8bac78,c,0,37,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
7086bd4cd946c38746868817da8bac78,c,0,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7086bd4cd946c38746868817da8bac78,c,0,62,9,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
7086bd4cd946c38746868817da8bac78,c,0,73,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
71f070bd474cf9743c6ce1fe872a8e4c,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
71f070bd474cf9743c6ce1fe872a8e4c,c,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
71f070bd474cf9743c6ce1fe872a8e4c,c,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
71f070bd474cf9743c6ce1fe872a8e4c,c,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
723751f739fd005f70484c79d7510f2f,c,0,20,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
723751f739fd005f70484c79d7510f2f,c,0,22,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
723751f739fd005f70484c79d7510f2f,c,0,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
723751f739fd005f70484c79d7510f2f,c,0,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
72b8881edd7adaa0d0de22f5fa3d7a21,c,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
72c65f36c44dc30b15f18e8aac7bd1d6,c,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
72fe64b95e4a03b3954f618de99f6b2c,c,0,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
73307dd71fdd40018bb96872efd37de0,c,0,27,22,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,c,0,28,27,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,c,0,30,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
73307dd71fdd40018bb96872efd37de0,c,0,92,9,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,c,0,98,25,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,c,0,99,25,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,c,0,100,25,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,c,0,110,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,c,0,112,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,c,0,115,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,c,0,119,22,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,c,0,123,21,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,c,0,128,20,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,c,0,131,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,c,0,136,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,c,0,137,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
73307dd71fdd40018bb96872efd37de0,c,0,160,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,c,0,163,36,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,c,0,166,34,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,c,0,173,32,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
73307dd71fdd40018bb96872efd37de0,c,0,179,34,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
736ae3c0310d5614f78e0651794f4664,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
736ae3c0310d5614f78e0651794f4664,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
737077c00c455a4c5574d4850fedb8c7,c,2,8,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
737077c00c455a4c5574d4850fedb8c7,c,3,8,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
73c06850f2a3ea07e9e464bfff398398,c,0,8,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
73cf9d4c349d3e1404c640d783cdabaf,c,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
73e6bf413f01e44b7e741cc2278ee2b7,c,0,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
74a9b1970a6a14b5d69e55b8a36165b8,c,2,154,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7535458b02df4a32158e292e345b7f6f,c,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7535458b02df4a32158e292e345b7f6f,c,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
761fba5af8a4b0adf42d6e573e55730f,c,0,57,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
761fbd8fafa9d33fa07816232615a7bb,c,0,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
761fbd8fafa9d33fa07816232615a7bb,c,0,55,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
76b1c13c1063138853fe2b1448f667cc,c,8,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
76b1c13c1063138853fe2b1448f667cc,c,8,28,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
76ce8c5ec84317bdd7f4bb7a51cc5f63,c,0,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
771935bd04639614c319a1b04164edc7,c,7,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
77c86fb60381a6cbf5eeedb23c3e9475,c,0,20,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
77c86fb60381a6cbf5eeedb23c3e9475,c,0,22,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
77c86fb60381a6cbf5eeedb23c3e9475,c,0,24,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
77c86fb60381a6cbf5eeedb23c3e9475,c,0,25,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
77c86fb60381a6cbf5eeedb23c3e9475,c,0,27,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
77c86fb60381a6cbf5eeedb23c3e9475,c,0,28,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
77c86fb60381a6cbf5eeedb23c3e9475,c,0,31,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
77c86fb60381a6cbf5eeedb23c3e9475,c,0,101,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
77c86fb60381a6cbf5eeedb23c3e9475,c,0,124,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
782f4eb4df2f1da134545b563ef13718,c,0,7,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7855d14c2bad1789dd43c992f77afcfb,c,1,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7855d14c2bad1789dd43c992f77afcfb,c,2,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7935e5c461c695a9bdb475e5d4269cc6,c,0,13,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7b472be62ceacbedfbf0f7b464faec11,c,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7bf34307b8ab5711957067d20e38e163,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,c,0,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,c,0,88,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,c,0,90,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,c,0,102,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,c,0,128,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,c,0,130,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,c,0,132,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,c,0,162,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c17a6394f04b4ae8a562c91711d5c9b,c,0,164,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c1e97e1a4d1b82418193b63f543fe0a,c,1,37,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7c1e97e1a4d1b82418193b63f543fe0a,c,1,40,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
7c1e97e1a4d1b82418193b63f543fe0a,c,1,52,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c6f83f4c05ba4895518cfc552920b29,c,0,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7c78b685560653d30312651f8b8db904,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7d36358e720ac05148438939875699e7,c,0,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7d36358e720ac05148438939875699e7,c,0,49,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7df871019b9aa3d7170d367e3a262822,c,2,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7e249cf17748de91fb0a3c5ff9ded1de,c,2,19,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
7e249cf17748de91fb0a3c5ff9ded1de,c,2,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7ea6c364853272e5c2d3da15cfe19a07,c,0,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7ea6c364853272e5c2d3da15cfe19a07,c,0,59,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7ed5081cc0c43401b3688042a2383a41,c,0,19,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
7f586887a90724d1df34381f1b715fc6,c,0,32,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
7f7b453cf5cdddea7ddb040632181c38,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7fd00b39a2ab2450d2ae6aa8b7c33502,c,0,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7fd00b39a2ab2450d2ae6aa8b7c33502,c,1,40,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
7fd00b39a2ab2450d2ae6aa8b7c33502,c,2,42,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
80a5342a2662af0f00e3d56e0895fb50,c,0,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
80a5342a2662af0f00e3d56e0895fb50,c,1,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
80f67ba5e2c35ba039cac56ce4879216,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
80f67ba5e2c35ba039cac56ce4879216,c,0,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
80f67ba5e2c35ba039cac56ce4879216,c,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
80f67ba5e2c35ba039cac56ce4879216,c,3,16,13,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
80f67ba5e2c35ba039cac56ce4879216,c,3,20,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
80fcf5227e75b7381d3cba36c7229770,c,0,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
80fcf5227e75b7381d3cba36c7229770,c,1,31,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
82a60f03cc6c6f5d0cedee84fe256b03,c,1,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
82a60f03cc6c6f5d0cedee84fe256b03,c,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8352f44dfbd8788111fc417f6d546461,c,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8352f44dfbd8788111fc417f6d546461,c,1,29,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
848fd4f45f62536f833478e0e9763375,c,1,36,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
84c85c413c692701ebe592fabfaeb353,c,0,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,c,0,41,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,c,0,43,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,c,0,52,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,c,0,61,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,c,0,63,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,c,0,78,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
84fedf58b3e8f3f0a502769865bfadab,c,0,79,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
84fedf58b3e8f3f0a502769865bfadab,c,0,80,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
84fedf58b3e8f3f0a502769865bfadab,c,0,140,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
84fedf58b3e8f3f0a502769865bfadab,c,0,151,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
85bb9489a7381a0d3747efab67d7521a,c,6,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
85d1886ad182085a0f771c2c988ebd2b,c,0,25,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
85d1886ad182085a0f771c2c988ebd2b,c,1,23,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
85d1886ad182085a0f771c2c988ebd2b,c,1,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
861749f7c18dc92e8147d1c01cc4d138,c,0,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
861749f7c18dc92e8147d1c01cc4d138,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
861749f7c18dc92e8147d1c01cc4d138,c,0,13,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
861749f7c18dc92e8147d1c01cc4d138,c,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
862ad956613189a712eb1c29f6ab3ec7,c,2,82,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
862ad956613189a712eb1c29f6ab3ec7,c,2,86,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
862ad956613189a712eb1c29f6ab3ec7,c,2,90,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86e7c1c09dd7b2935952f93e6da8d696,c,0,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86e7c1c09dd7b2935952f93e6da8d696,c,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
86e7c1c09dd7b2935952f93e6da8d696,c,2,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
870129098fe6a21552cf6a5e7de1a1c3,c,0,98,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
870129098fe6a21552cf6a5e7de1a1c3,c,0,100,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
870129098fe6a21552cf6a5e7de1a1c3,c,0,102,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
874267e7fac8231b4c371978f451970a,c,1,43,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
874267e7fac8231b4c371978f451970a,c,2,44,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
875b3fd08c9233f657e7472870e8adba,c,0,11,7,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87937f508d098af3b2b8460b5db96f5c,c,0,14,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
87937f508d098af3b2b8460b5db96f5c,c,0,16,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
87a0d9da24c41bbc9cc28c717b81708d,c,4,21,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
87ad0ca1b1055c24f5810fe4cd975aae,c,5,44,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,c,5,50,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,c,5,59,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,c,7,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,c,7,44,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,c,7,52,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,c,8,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,c,8,53,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
87ad0ca1b1055c24f5810fe4cd975aae,c,8,63,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
882251f57aa9f3496dec511ab65c3600,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
882251f57aa9f3496dec511ab65c3600,c,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
882251f57aa9f3496dec511ab65c3600,c,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,16,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,17,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,18,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,18,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,2,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,2,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,3,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,3,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,4,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,4,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,7,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
884d09a985c78b8f90feb2540e992580,c,7,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
88ceff52035779278c5382cbd9aaa6f1,c,0,100,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8920a5d046d2193891c133756f9bf301,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
89bf7dfd45b747e5fe1e52e2f95b59ed,c,0,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
89bf7dfd45b747e5fe1e52e2f95b59ed,c,0,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
89d63da67b3d34065b5a78cfaccf56e4,c,9,20,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
8a34b3c5d01e02d3903607c8e295b8fd,c,0,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8a34b3c5d01e02d3903607c8e295b8fd,c,0,35,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8a34b3c5d01e02d3903607c8e295b8fd,c,0,37,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8ae437c31756ba80c7f53465113a11a8,c,1,17,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8ae437c31756ba80c7f53465113a11a8,c,1,18,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8ae437c31756ba80c7f53465113a11a8,c,1,98,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8ae437c31756ba80c7f53465113a11a8,c,1,99,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8af7c8dbe010d27cb98ab8a414f9c326,c,0,76,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8af7c8dbe010d27cb98ab8a414f9c326,c,0,85,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8b02aee33f517fe325585f1c113e7829,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8b02aee33f517fe325585f1c113e7829,c,1,47,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
8b76aba3a8de6fe8fee168a4526a1fe1,c,0,64,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8c1935e04e2ce056febc0de6a3103f92,c,5,14,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8c1935e04e2ce056febc0de6a3103f92,c,6,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8c54abb337e5213fae34cfe5ad0577bc,c,0,24,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8c84403efaa2d8a06990b039d89e690c,c,1,84,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8c84403efaa2d8a06990b039d89e690c,c,1,88,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8cb4602477b7ceadea7fea3222b5992d,c,2,35,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8cb4602477b7ceadea7fea3222b5992d,c,2,40,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8cd41fe2c8efad142ccb46a08ac5ac54,c,0,47,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8db8eebca572cb25747753c10d6cacad,c,0,13,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
8db8eebca572cb25747753c10d6cacad,c,0,23,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
8de60f60588fb4a6449cb2bf1129ea28,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8de60f60588fb4a6449cb2bf1129ea28,c,0,20,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e136658eef38c2e7c62d2ef65603c3f,c,0,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e136658eef38c2e7c62d2ef65603c3f,c,0,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e136658eef38c2e7c62d2ef65603c3f,c,0,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8e33d5df27f2d5a95e611e3c5a805b68,c,1,15,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8e7c75bb8b3979ce18e21d18d709b287,c,0,35,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8e7c75bb8b3979ce18e21d18d709b287,c,1,69,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8ea3c863c955a576edabf2c121e49b30,c,0,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8ea3c863c955a576edabf2c121e49b30,c,1,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8ea3c863c955a576edabf2c121e49b30,c,1,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8f56a848a72b1500a67177cf5aa08aae,c,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8f56a848a72b1500a67177cf5aa08aae,c,2,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8f56a848a72b1500a67177cf5aa08aae,c,3,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8f56a848a72b1500a67177cf5aa08aae,c,3,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8f7c3d7b92e66e1929c224b93a4df8d3,c,0,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
8fa4cfb0da976f5eabe0c8e5379e506d,c,0,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8fa4cfb0da976f5eabe0c8e5379e506d,c,0,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8faeaa96e0e1a2bb3273c8106353a84e,c,10,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8faeaa96e0e1a2bb3273c8106353a84e,c,11,8,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8faeaa96e0e1a2bb3273c8106353a84e,c,12,7,8,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8faeaa96e0e1a2bb3273c8106353a84e,c,5,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
8fdb8a0755cd69e0d562c82a4394119e,c,1,8,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
8fdb8a0755cd69e0d562c82a4394119e,c,4,8,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9009d9c607d8a611da8a35303dd74b0b,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,c,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,c,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,c,5,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,c,6,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,c,7,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9009d9c607d8a611da8a35303dd74b0b,c,8,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9028644da5a842d09b644ebbc1628239,c,8,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9028644da5a842d09b644ebbc1628239,c,8,62,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
9028644da5a842d09b644ebbc1628239,c,9,76,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
90ef951ca6bc25764074d4c861393222,c,0,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
90ef951ca6bc25764074d4c861393222,c,0,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
90ef951ca6bc25764074d4c861393222,c,0,46,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91049aacf1db0b9c7ae6ae326cf6f801,c,0,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91049aacf1db0b9c7ae6ae326cf6f801,c,1,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91049aacf1db0b9c7ae6ae326cf6f801,c,1,47,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91535425f7324b76dfda27ffad32adfe,c,0,8,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91535425f7324b76dfda27ffad32adfe,c,0,11,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91535425f7324b76dfda27ffad32adfe,c,2,9,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91535425f7324b76dfda27ffad32adfe,c,2,12,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91535425f7324b76dfda27ffad32adfe,c,3,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
91d72990897e891012ba05905d83b02c,c,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
92321d410b7615e872d070f528d10a3a,c,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
92321d410b7615e872d070f528d10a3a,c,0,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
92e94e5ba4d8f5dda48bff2cd0f7a716,c,1,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
92e94e5ba4d8f5dda48bff2cd0f7a716,c,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
92e94e5ba4d8f5dda48bff2cd0f7a716,c,3,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
92e94e5ba4d8f5dda48bff2cd0f7a716,c,4,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
93a67f053c48474172f4a3e384be720a,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
940d02d2474673f8d17fe9fc6f1416fb,c,1,73,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
940d02d2474673f8d17fe9fc6f1416fb,c,1,94,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
948c2d16e5b08c197c2d294ef848dd67,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
948c2d16e5b08c197c2d294ef848dd67,c,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
948c2d16e5b08c197c2d294ef848dd67,c,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
948c2d16e5b08c197c2d294ef848dd67,c,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
94ebe31deea87fec86ad5a262746579c,c,9,59,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9599294f4bfa5cc07a1bd1b598f4a840,c,0,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9599294f4bfa5cc07a1bd1b598f4a840,c,0,42,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9599294f4bfa5cc07a1bd1b598f4a840,c,0,49,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
95a16e41c28acbfcf607c72f123e14aa,c,0,17,23,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
95a16e41c28acbfcf607c72f123e14aa,c,0,22,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
96454e6a0a729caa86bfc6cb52f9a095,c,1,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
96454e6a0a729caa86bfc6cb52f9a095,c,1,47,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
96454e6a0a729caa86bfc6cb52f9a095,c,3,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
96454e6a0a729caa86bfc6cb52f9a095,c,3,56,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
96454e6a0a729caa86bfc6cb52f9a095,c,3,76,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
96d51575431d5657c6ef82deb1f8bb86,c,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,1,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,1,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,10,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,10,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,10,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,10,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,13,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,13,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,13,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,13,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,2,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,2,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,2,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,3,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,3,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,3,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,3,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,4,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,4,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,4,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,7,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
96d95950be5c2bca2d3c18f269259d1b,c,7,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
97a45dc0f8348bbd54c36bf4ba062ef7,c,0,35,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
97a45dc0f8348bbd54c36bf4ba062ef7,c,0,40,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
97ae135448200e88eaff4e2f3603741b,c,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
97ae135448200e88eaff4e2f3603741b,c,1,44,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
97ae135448200e88eaff4e2f3603741b,c,1,48,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
97ae135448200e88eaff4e2f3603741b,c,1,52,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
989419239a085fb87d4ff89227b0a123,c,2,19,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
989419239a085fb87d4ff89227b0a123,c,2,20,15,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
98c8ecb5e0d45c0ddebd06d18b7aac3f,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
98c8ecb5e0d45c0ddebd06d18b7aac3f,c,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
98c8ecb5e0d45c0ddebd06d18b7aac3f,c,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
98cd6e5d3db868c899cdf98c373b46b7,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
98cd6e5d3db868c899cdf98c373b46b7,c,0,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
98e420e2030897696bae3870a011e069,c,0,38,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
99a4e19166d3f5a2d0530ffb45ef3ffa,c,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99a4e19166d3f5a2d0530ffb45ef3ffa,c,11,32,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99a4e19166d3f5a2d0530ffb45ef3ffa,c,3,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99a4e19166d3f5a2d0530ffb45ef3ffa,c,4,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99a4e19166d3f5a2d0530ffb45ef3ffa,c,8,24,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99a4e19166d3f5a2d0530ffb45ef3ffa,c,9,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b22c512e8d1f014270dfd82fdadb5e,c,6,39,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
99b590d44e97c9f0f3eed80b51a8feb0,c,4,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,0,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,0,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,0,53,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,0,55,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,0,57,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,0,84,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,0,228,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,1,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,1,57,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,1,100,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,1,119,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,1,121,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99b6905b1b914d0840e16990c89ed1ed,c,1,123,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
99d2e303dce34a02245f58b6e0956efb,c,1,72,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,c,1,75,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,c,1,78,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,c,1,86,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,c,1,89,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,c,1,92,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,c,1,95,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99d2e303dce34a02245f58b6e0956efb,c,1,98,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
99dc7bc93c2c49c81298ca5b63c59871,c,0,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
99dc7bc93c2c49c81298ca5b63c59871,c,0,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
99dc7bc93c2c49c81298ca5b63c59871,c,1,20,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
99dc7bc93c2c49c81298ca5b63c59871,c,1,22,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
99dc7bc93c2c49c81298ca5b63c59871,c,2,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
99dc7bc93c2c49c81298ca5b63c59871,c,2,34,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
9a3df9bcd4ec074b780132df75def4c5,c,0,13,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9aa5590817e0688aeb92a496a681fa01,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9aa5590817e0688aeb92a496a681fa01,c,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9abccd5fc87f3fc8156c68dc62075f07,c,0,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9abccd5fc87f3fc8156c68dc62075f07,c,3,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9abccd5fc87f3fc8156c68dc62075f07,c,3,54,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9b2053875d9b1185f6500b315e69d156,c,0,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9b2ba82549c5ef1f3194322979daec26,c,0,15,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9b5fc4fb6c85506308ce478602e7df07,c,0,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9bb68fccdd40cc95493d4b281ddb36de,c,1,18,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
9bb68fccdd40cc95493d4b281ddb36de,c,1,36,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9bb68fccdd40cc95493d4b281ddb36de,c,1,39,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9bb68fccdd40cc95493d4b281ddb36de,c,1,46,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
9bb68fccdd40cc95493d4b281ddb36de,c,1,76,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9bc316c4feb0645816d1ab46e1527552,c,0,42,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9c7e47bf1a747e2857a5b100ccf4847b,c,0,62,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9c7e47bf1a747e2857a5b100ccf4847b,c,0,66,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9cd2d6c20e9dce04a8fb426d2dc7d9b5,c,0,6,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,33,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,37,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,63,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,68,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,81,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,100,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,105,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,107,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,109,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,121,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9d4a3d186c738b10c5b21ff742cf8065,c,0,149,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9dc8898313cb22936b99ce98521bee18,c,0,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9dc8898313cb22936b99ce98521bee18,c,0,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9e8a4bcc207cffaef1e04ef29491c502,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9e8a4bcc207cffaef1e04ef29491c502,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9e8a4bcc207cffaef1e04ef29491c502,c,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9e8a4bcc207cffaef1e04ef29491c502,c,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9f5f191f8dc56df718b08b7892cbb740,c,0,10,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9f5f191f8dc56df718b08b7892cbb740,c,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9f5f191f8dc56df718b08b7892cbb740,c,0,21,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9f5f191f8dc56df718b08b7892cbb740,c,0,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
9fa191527321d4cd1308e9530c6a901e,c,1,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9fa191527321d4cd1308e9530c6a901e,c,2,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
9fa191527321d4cd1308e9530c6a901e,c,5,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a00e422a83f5b6a55a9bd9c41dccb52a,c,1,16,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a04425c2f3eb421d3021363d7651e505,c,0,18,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a04425c2f3eb421d3021363d7651e505,c,0,19,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a04425c2f3eb421d3021363d7651e505,c,0,20,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a04425c2f3eb421d3021363d7651e505,c,0,21,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a04425c2f3eb421d3021363d7651e505,c,0,22,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a07fbb56532fa1a5f4c9bfe120eef7ef,c,0,24,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a25132b44c2ffb6f0df5bedd14aebfc1,c,0,23,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a25132b44c2ffb6f0df5bedd14aebfc1,c,0,27,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a25132b44c2ffb6f0df5bedd14aebfc1,c,0,29,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a3f796b3add955af7737ea919020d27a,c,0,11,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a3f796b3add955af7737ea919020d27a,c,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a41e0199f946d0fc950c5b9f4b832464,c,0,28,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a41e0199f946d0fc950c5b9f4b832464,c,0,31,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a41e0199f946d0fc950c5b9f4b832464,c,4,28,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a41e0199f946d0fc950c5b9f4b832464,c,4,31,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4948f29a94a03e3211e68817d38dc67,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4948f29a94a03e3211e68817d38dc67,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4978adb2c91030982705d9b8f80f1d1,c,0,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,c,0,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,c,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,c,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,c,0,46,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,c,0,62,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,c,0,64,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,c,0,72,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,c,0,146,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a4e4a6920204f6ceb0dae03845c5326a,c,0,158,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a53fb39dcbc8f163635a3c5b4e910cbe,c,1,68,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a5ed4ede4197b9218160e65f3b1aa1e4,c,0,49,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
a5ed4ede4197b9218160e65f3b1aa1e4,c,0,74,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
a5ed4ede4197b9218160e65f3b1aa1e4,c,0,78,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
a5ed4ede4197b9218160e65f3b1aa1e4,c,0,82,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
a5ed4ede4197b9218160e65f3b1aa1e4,c,0,86,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
a5ed4ede4197b9218160e65f3b1aa1e4,c,0,100,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a5ed4ede4197b9218160e65f3b1aa1e4,c,0,103,9,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
a5ed4ede4197b9218160e65f3b1aa1e4,c,0,106,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a63d30cd2e8e9d853a229582187639f7,c,0,36,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a63d30cd2e8e9d853a229582187639f7,c,0,50,11,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a688ecf84947ddbc0679d0f95f8ba455,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a688ecf84947ddbc0679d0f95f8ba455,c,0,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a6fad8cf235e0af1ce38c7382ed39b1b,c,0,32,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8005a2bf95e9b6dc124a13ef6dbc697,c,0,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8005a2bf95e9b6dc124a13ef6dbc697,c,1,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a81e40a1c8a4d805269722ef8de21406,c,0,33,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a81e40a1c8a4d805269722ef8de21406,c,1,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a81e40a1c8a4d805269722ef8de21406,c,1,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8e023343a6ca0ca6fccb7976b62ae7f,c,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8e023343a6ca0ca6fccb7976b62ae7f,c,0,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8e023343a6ca0ca6fccb7976b62ae7f,c,1,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a8e023343a6ca0ca6fccb7976b62ae7f,c,1,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
a977e534518cfd6fe62ffc6b9ff647c3,c,0,63,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a977e534518cfd6fe62ffc6b9ff647c3,c,0,88,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a977e534518cfd6fe62ffc6b9ff647c3,c,3,64,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
a977e534518cfd6fe62ffc6b9ff647c3,c,3,90,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
aa0a633e04bd99fda908ca2d4ced14d9,c,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aa0a633e04bd99fda908ca2d4ced14d9,c,0,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aa0a633e04bd99fda908ca2d4ced14d9,c,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aaa615b181f36f32c479c62598552939,c,0,81,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aaa615b181f36f32c479c62598552939,c,12,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
aaa615b181f36f32c479c62598552939,c,13,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
aaa615b181f36f32c479c62598552939,c,13,25,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
aab39ce15368ac1ce5ff0bd4c88f679d,c,1,37,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aab39ce15368ac1ce5ff0bd4c88f679d,c,1,43,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aaf8c48c323accb3194af0a502346c9d,c,1,146,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aaf8c48c323accb3194af0a502346c9d,c,1,150,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ab0e5a4af2a3347a26aa34df64eb09f7,c,7,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ab0e5a4af2a3347a26aa34df64eb09f7,c,7,41,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aca02d63597ae3ba9591cd9545a0ae55,c,4,11,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,c,4,12,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,c,4,13,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,c,4,24,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,c,4,25,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,c,4,26,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
aca02d63597ae3ba9591cd9545a0ae55,c,4,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aca02d63597ae3ba9591cd9545a0ae55,c,4,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aca02d63597ae3ba9591cd9545a0ae55,c,4,47,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,0,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,0,28,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,1,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,1,41,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,2,31,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,2,41,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,3,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,3,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,3,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,4,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,4,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ad49569e9321c61a3c1bf06a0ee91f8d,c,4,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
adb0c67b09dfdb1d9c2abecc8e61f6ea,c,1,11,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
adb0c67b09dfdb1d9c2abecc8e61f6ea,c,1,14,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
adb0c67b09dfdb1d9c2abecc8e61f6ea,c,1,16,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
adb0c67b09dfdb1d9c2abecc8e61f6ea,c,1,18,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
adb0c67b09dfdb1d9c2abecc8e61f6ea,c,1,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
adb0c67b09dfdb1d9c2abecc8e61f6ea,c,1,58,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
adb0c67b09dfdb1d9c2abecc8e61f6ea,c,1,60,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
add65ca03efad84254250a9b8af445f6,c,2,46,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
add65ca03efad84254250a9b8af445f6,c,5,45,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
add65ca03efad84254250a9b8af445f6,c,8,51,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ae5c65b8593faf584677404de7009937,c,0,32,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,1,64,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,1,71,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,11,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,11,56,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,3,59,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,3,65,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,5,58,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,5,64,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,6,58,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,6,64,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,8,53,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ae9468c3eafb9365cd4fc20a6ce3cd4d,c,8,59,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aee63574103d48fecbb2f9036cbbc10e,c,6,6,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
aee63574103d48fecbb2f9036cbbc10e,c,6,10,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,c,10,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,c,12,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,c,13,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,c,14,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,c,15,33,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,c,16,65,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,c,16,69,15,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b07166a55a6dc259cedb0ebbc329149d,c,9,21,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b0ffa49c602b9360706a2f48c3b13c4f,c,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b0ffa49c602b9360706a2f48c3b13c4f,c,1,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b0ffa49c602b9360706a2f48c3b13c4f,c,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b1c83c4840048586d1272a65519b230d,c,2,8,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b1c83c4840048586d1272a65519b230d,c,2,12,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b2076a200949658afd1384ce4675a66a,c,4,15,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b240f1bb785857f6b140aa019ad0b65e,c,2,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b240f1bb785857f6b140aa019ad0b65e,c,2,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,5,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,5,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,5,17,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,5,19,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,5,42,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,6,13,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,6,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,6,19,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,6,21,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,6,43,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,7,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,7,26,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,7,28,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,7,32,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,7,34,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b2cb1962a9634155ec2638d9e3b14c30,c,7,66,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b385d5d336ed18952734a3b45a0ecdce,c,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b417d5bf9cfb9c604820ba97a504db57,c,0,110,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b417d5bf9cfb9c604820ba97a504db57,c,1,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b4ba858a89164fc68fa5fe6bae04d3d5,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b4ba858a89164fc68fa5fe6bae04d3d5,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b4ba858a89164fc68fa5fe6bae04d3d5,c,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b4ba858a89164fc68fa5fe6bae04d3d5,c,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b4ba858a89164fc68fa5fe6bae04d3d5,c,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,23,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,33,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,70,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,76,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,78,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,94,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,0,203,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,23,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,29,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,31,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,33,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,45,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,70,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,76,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,78,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,94,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b560b61c3c6b103fd6e2d5faf95e5a2d,c,1,203,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b5cdd01a6c59101c0074d7566581b4a9,c,0,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b5cdd01a6c59101c0074d7566581b4a9,c,0,18,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b5dccec0dbdc65a0352ec53a35ede99f,c,0,36,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b5e17291f7979d42346be0c37a9d1662,c,1,11,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b64e9d9cd19758a3c97bcb56c01dc8c7,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b64e9d9cd19758a3c97bcb56c01dc8c7,c,0,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b65b84552d2964f208c900425f43ec1b,c,0,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b65b84552d2964f208c900425f43ec1b,c,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b675d4032293e45377b6d15bf1978638,c,0,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b675d4032293e45377b6d15bf1978638,c,0,40,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b675d4032293e45377b6d15bf1978638,c,1,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b6a5d98249daf62766994d103af57b73,c,3,10,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b6ab288588d60180732c3e083ecb116a,c,1,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b6ab288588d60180732c3e083ecb116a,c,1,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b6c575423e2c31fbec96de2336d36fc8,c,0,14,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b7443a3c07b419ea85d4e2e11c249250,c,0,33,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,c,0,34,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,c,0,41,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,c,0,42,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,c,3,33,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,c,3,34,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,c,3,46,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b7443a3c07b419ea85d4e2e11c249250,c,3,47,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b764cbf4651afeba510655095d6952e3,c,8,21,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b764cbf4651afeba510655095d6952e3,c,8,35,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b764cbf4651afeba510655095d6952e3,c,8,60,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
b861a84e3580eaebc1487a7088360fb9,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b861a84e3580eaebc1487a7088360fb9,c,0,14,16,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b89d1ddba5a115f13f945fe6ecfad925,c,2,16,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,c,10,22,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,c,10,29,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,c,4,15,15,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b92af856ef58ff19aaaa805eb8142467,c,4,17,9,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b92af856ef58ff19aaaa805eb8142467,c,4,19,9,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
b92af856ef58ff19aaaa805eb8142467,c,6,20,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,c,6,27,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,c,8,25,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b92af856ef58ff19aaaa805eb8142467,c,8,33,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
b98ba70ce89adf7034c2bad25921b64b,c,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
b9f2b086b9d0f12e1b1c249c744f3d0a,c,0,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bb051ae49438b3e46c8a22e5b31a14b9,c,0,31,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
bb051ae49438b3e46c8a22e5b31a14b9,c,0,40,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
bb051ae49438b3e46c8a22e5b31a14b9,c,0,59,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
bb5249f541f81a44f9d48fd70fc9d5c1,c,3,51,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,c,3,52,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,c,3,53,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,c,3,54,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,c,3,64,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,c,3,65,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,c,3,66,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bb5249f541f81a44f9d48fd70fc9d5c1,c,3,67,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bbd2598033d2de4d16e9ab3af8351d06,c,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bbd2598033d2de4d16e9ab3af8351d06,c,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc4075cee48a260341315d14d66cb8ee,c,0,33,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc4075cee48a260341315d14d66cb8ee,c,0,37,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,c,0,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,c,1,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,c,1,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,c,2,6,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bc7d1729cedf13a84e04f5f3bbe4744a,c,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bca4bd08839b147c863ad66da7ad5469,c,5,42,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
bca4bd08839b147c863ad66da7ad5469,c,5,43,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
be0e198cd97ee22810dc3d1a0e7b8fcb,c,0,9,12,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
be0e198cd97ee22810dc3d1a0e7b8fcb,c,0,14,15,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
be762916a5d33da794729bbbccd67d46,c,0,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
bec97a087a10ee2ff77d1e465976f33c,c,0,28,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bec97a087a10ee2ff77d1e465976f33c,c,0,31,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
bf6be66035dcd12b162bf2c36dcce32b,c,0,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
bf6be66035dcd12b162bf2c36dcce32b,c,0,64,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c04c5128574a525bdf3f399a808f77b0,c,0,8,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c0f20a855d4ed616fff8fd7965d47b9c,c,1,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c29565d70b255463b712c345f532e2e5,c,0,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c29565d70b255463b712c345f532e2e5,c,0,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c29da02cf6e4f64b283cebef91724770,c,3,10,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
c29da02cf6e4f64b283cebef91724770,c,3,19,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
c2a3f7cafad92f3584606e24817dd0bc,c,0,13,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c2a3f7cafad92f3584606e24817dd0bc,c,0,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c2a3f7cafad92f3584606e24817dd0bc,c,1,12,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c2a3f7cafad92f3584606e24817dd0bc,c,1,13,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c2ee098b4cc3ef327899b15182c9c3bd,c,0,13,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c2ee098b4cc3ef327899b15182c9c3bd,c,0,19,10,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c3aef905c6b83b7c82814cb0e0a8b931,c,0,46,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c3aef905c6b83b7c82814cb0e0a8b931,c,0,47,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c3aef905c6b83b7c82814cb0e0a8b931,c,0,70,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c3aef905c6b83b7c82814cb0e0a8b931,c,0,77,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c3ef92bf5469933f29713ed4b08bbc16,c,3,7,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c4ebcb8be9e37a5b4e5bffd92b555b99,c,0,42,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c4ebcb8be9e37a5b4e5bffd92b555b99,c,0,46,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c4f5c9d9402a22537ec6e099c5ceccf0,c,2,83,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c4f5c9d9402a22537ec6e099c5ceccf0,c,2,93,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,c,1,29,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,c,1,63,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c51af85ef28dc64210871da25f18c721,c,1,65,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c51af85ef28dc64210871da25f18c721,c,4,19,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,c,4,23,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,c,4,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,c,4,46,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c51af85ef28dc64210871da25f18c721,c,4,61,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c51af85ef28dc64210871da25f18c721,c,4,63,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c60e92268456aba1137f2936bc3cd202,c,0,30,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c60e92268456aba1137f2936bc3cd202,c,0,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c65b68320a33856504971b8c3d2e0c8a,c,4,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,c,5,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,c,6,24,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,c,6,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,c,7,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,c,8,31,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,c,8,55,21,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,c,8,81,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,c,9,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c65b68320a33856504971b8c3d2e0c8a,c,9,37,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c67627dc3d926f4f9a4bff0532b59345,c,29,22,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
c67627dc3d926f4f9a4bff0532b59345,c,29,26,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,28,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,33,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,34,5,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,38,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,40,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,42,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,43,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,44,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,47,17,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,54,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,55,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c67627dc3d926f4f9a4bff0532b59345,c,29,62,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
c718303092035ac5eec2008431fe183d,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,c,1,36,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,c,1,49,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,c,1,51,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,c,1,56,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,c,1,58,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c718303092035ac5eec2008431fe183d,c,1,67,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
c79cae37385725deefa58379ef7d8aa5,c,1,21,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c79cae37385725deefa58379ef7d8aa5,c,1,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c79cae37385725deefa58379ef7d8aa5,c,1,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c92e456fbb85e8db6f0a072572a12cdc,c,10,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
c92e456fbb85e8db6f0a072572a12cdc,c,9,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ca2240628730942bbc7bfcb0fc6305dd,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ca7e6e3e6340e844298a12075399bb6b,c,0,11,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ca7e6e3e6340e844298a12075399bb6b,c,0,15,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,c,0,24,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,c,0,34,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,c,0,44,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,c,0,45,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,c,0,46,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,c,0,60,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,c,0,61,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,c,0,62,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,c,0,63,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,c,0,64,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca7e6e3e6340e844298a12075399bb6b,c,0,65,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
ca85b573bca639ec8d42ce5d8e80ee4d,c,0,19,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ca85b573bca639ec8d42ce5d8e80ee4d,c,1,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
caa38fa191ab7a09d7d0ee6e7851a322,c,0,14,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
caa38fa191ab7a09d7d0ee6e7851a322,c,2,14,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
cb560ef5c4234481fec4d69d939fadbc,c,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cb560ef5c4234481fec4d69d939fadbc,c,1,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cbdbbce667d361908d5692e46ee83080,c,0,11,19,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
cbdbbce667d361908d5692e46ee83080,c,0,14,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
cc54053dbd288d03291795f9be01198a,c,5,35,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
cc6a5acb07573feaabe56c927d3e1992,c,0,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cce4342f6774033b46574defa1cd54b1,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cce4342f6774033b46574defa1cd54b1,c,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,c,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,c,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,c,0,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,c,0,29,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,c,1,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,c,1,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,c,1,24,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
cd828ea5c5a40588922b658826f0a646,c,1,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ce81534e0fdb781c7058362a127a636c,c,0,27,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
cfc590857144518a582ec628cdbf0465,c,0,172,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d0017b5e622a8912536a6bd28a754ec2,c,0,8,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0017b5e622a8912536a6bd28a754ec2,c,0,58,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0017b5e622a8912536a6bd28a754ec2,c,0,61,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0017b5e622a8912536a6bd28a754ec2,c,1,8,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0017b5e622a8912536a6bd28a754ec2,c,1,56,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0017b5e622a8912536a6bd28a754ec2,c,1,59,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0dd439bf2dc538e5edbc578c060fa73,c,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0dd439bf2dc538e5edbc578c060fa73,c,0,19,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d0dd439bf2dc538e5edbc578c060fa73,c,0,24,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d11654e5281ee6c7058421e18c56fceb,c,4,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d11654e5281ee6c7058421e18c56fceb,c,5,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d11654e5281ee6c7058421e18c56fceb,c,6,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d11654e5281ee6c7058421e18c56fceb,c,7,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d1592201896919c3425501bd4908fd73,c,2,13,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1592201896919c3425501bd4908fd73,c,2,14,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1592201896919c3425501bd4908fd73,c,2,15,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1592201896919c3425501bd4908fd73,c,2,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1592201896919c3425501bd4908fd73,c,2,17,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1ae945667d37051fe834d0e08860674,c,0,7,3,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d1ae945667d37051fe834d0e08860674,c,9,21,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
d1c12bc8775d6147f681b21ebadca0d8,c,0,88,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d25c4f0ed61873bdccca54c767f1fa86,c,1,8,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
d280e6597e93c6caf6dea59d6ee7b2f5,c,10,14,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d280e6597e93c6caf6dea59d6ee7b2f5,c,13,8,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d280e6597e93c6caf6dea59d6ee7b2f5,c,15,14,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d2a2e2896952d1c42d663811e9205583,c,0,24,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d2a2e2896952d1c42d663811e9205583,c,0,33,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d2ae02b6d04790441e49ba1b043d0fb4,c,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d2bef9d32558e1a9dcaeddc755e00979,c,0,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d2bef9d32558e1a9dcaeddc755e00979,c,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d2d7c2b8d480c2e3ca23c829fd272862,c,1,25,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d2fb00fc13b1e0a6dff7529ed32c9b75,c,1,57,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d315eacecee8b4dc7cfae4a266925ca6,c,5,8,5,files.c.rules.lang.security.insecure-use-gets-fn,Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
d435b335c2211ee48561b7cc1304ca15,c,3,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d435b335c2211ee48561b7cc1304ca15,c,4,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d436a037dc8b472dd524437112a0bf58,c,0,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d436a037dc8b472dd524437112a0bf58,c,0,18,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,c,1,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,c,1,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,c,1,40,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,c,2,70,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,c,2,72,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d43ab089f4567b05c70f74b82e5fd6df,c,2,74,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d57193d22c4f801e03f7e58b5b1fca22,c,0,8,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d57193d22c4f801e03f7e58b5b1fca22,c,1,9,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d57193d22c4f801e03f7e58b5b1fca22,c,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d57193d22c4f801e03f7e58b5b1fca22,c,3,9,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d57193d22c4f801e03f7e58b5b1fca22,c,4,11,3,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d57cf84922c37cf8e7ad0ddbc682a269,c,3,52,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d5b05983f74ea62985b599b770b5c2bc,c,0,130,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d5b05983f74ea62985b599b770b5c2bc,c,0,134,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d5b05983f74ea62985b599b770b5c2bc,c,0,137,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d5c647370466e3183bcf44896c4f0edf,c,0,50,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d5c647370466e3183bcf44896c4f0edf,c,0,68,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d5c647370466e3183bcf44896c4f0edf,c,0,82,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d78830d342c6cd16b8e62ba3bac5a1b7,c,4,16,14,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d80481f8acd0fb412ea7ce4c77b24979,c,0,34,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d80481f8acd0fb412ea7ce4c77b24979,c,0,43,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d80481f8acd0fb412ea7ce4c77b24979,c,0,49,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d80481f8acd0fb412ea7ce4c77b24979,c,0,59,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d80481f8acd0fb412ea7ce4c77b24979,c,0,92,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d81f352e1a8188fda6f5f494487ca5cb,c,0,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d887002da7179c699ca4f53c470c8662,c,0,34,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d887002da7179c699ca4f53c470c8662,c,0,66,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d887002da7179c699ca4f53c470c8662,c,0,119,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d8a58e963645e813e68be57ea07f1d6a,c,0,33,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d8a58e963645e813e68be57ea07f1d6a,c,1,28,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,c,1,35,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,c,2,34,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d8a58e963645e813e68be57ea07f1d6a,c,3,31,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,c,3,41,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,c,4,35,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d8a58e963645e813e68be57ea07f1d6a,c,4,56,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d8a58e963645e813e68be57ea07f1d6a,c,5,32,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,c,5,40,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,c,6,35,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
d8a58e963645e813e68be57ea07f1d6a,c,6,56,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
d8a58e963645e813e68be57ea07f1d6a,c,7,32,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,c,7,40,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,c,9,32,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d8a58e963645e813e68be57ea07f1d6a,c,9,40,9,files.c.rules.lang.security.insecure-use-printf-fn,"Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'."
d98bda3e2efbe9081ab610dd45560249,c,0,101,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d98bda3e2efbe9081ab610dd45560249,c,0,117,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
d9c2ccc8746c6248ec205387dd2ad7d4,c,0,32,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
da1e31616bb10d231acdd15df37a9d89,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
da1e31616bb10d231acdd15df37a9d89,c,0,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
da799728bb3fef381bd26ba5b7b5800c,c,0,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
da799728bb3fef381bd26ba5b7b5800c,c,0,52,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
dab5c818ee4929f2c27adebc258c50fd,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dab5c818ee4929f2c27adebc258c50fd,c,0,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dab5c818ee4929f2c27adebc258c50fd,c,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dab5c818ee4929f2c27adebc258c50fd,c,1,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dab5c818ee4929f2c27adebc258c50fd,c,2,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dab5c818ee4929f2c27adebc258c50fd,c,2,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dacbe7ec782ed958951e194bc17f4332,c,1,8,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db2c0c7ca066f64163c15caed0956085,c,0,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db2c0c7ca066f64163c15caed0956085,c,1,44,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db4a6297ee2fcc794555d9b52429fe10,c,1,15,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
db8aabc32be87684e781a2bd28384c60,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,0,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,1,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,11,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,11,22,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,12,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,12,23,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,13,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,13,21,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,2,14,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,3,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,3,18,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,6,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,6,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,8,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
db8aabc32be87684e781a2bd28384c60,c,8,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dc6eb239ed19a809b819d4e625de4f13,c,5,17,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dc6eb239ed19a809b819d4e625de4f13,c,5,24,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dc6eb239ed19a809b819d4e625de4f13,c,5,51,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dc6eb239ed19a809b819d4e625de4f13,c,5,56,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dc6eb239ed19a809b819d4e625de4f13,c,5,77,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dc6eb239ed19a809b819d4e625de4f13,c,5,82,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dca0d479d337133991f2081ccfda36b3,c,0,97,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
dca0d479d337133991f2081ccfda36b3,c,1,99,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
dcff6328f6fff264138176967f495a8d,c,6,78,29,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
dcff6328f6fff264138176967f495a8d,c,6,81,27,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
dd026350d0a358002d3f8ee3dbfe8304,c,0,38,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd026350d0a358002d3f8ee3dbfe8304,c,0,39,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
dd026350d0a358002d3f8ee3dbfe8304,c,0,44,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd026350d0a358002d3f8ee3dbfe8304,c,0,60,17,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
dd026350d0a358002d3f8ee3dbfe8304,c,0,63,21,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd2c7328ee893a05a30c5e2bfe321b54,c,1,48,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd8fb3d1910b4e308d94aa90b22e957a,c,1,7,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd8fb3d1910b4e308d94aa90b22e957a,c,1,10,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd8fb3d1910b4e308d94aa90b22e957a,c,3,9,4,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dd8fb3d1910b4e308d94aa90b22e957a,c,3,14,7,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
de625de137421cd3f679940191847b3e,c,0,6,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
deb85b8deef50ac454aad911dab03fc2,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
deb85b8deef50ac454aad911dab03fc2,c,0,15,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
deb85b8deef50ac454aad911dab03fc2,c,1,43,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
deb85b8deef50ac454aad911dab03fc2,c,1,47,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
def084ccc7b7ad6a8913283e3d7ac433,c,0,88,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
df7c0692638ccab78801af94f5638415,c,0,60,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
df9155dbe904ff5f170926c4d47e1f2a,c,6,18,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
dffd34f444c2c2bb9f92c8d11bfae736,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,c,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,c,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,c,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,c,1,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,c,1,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
dffd34f444c2c2bb9f92c8d11bfae736,c,1,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e1319bb5ee029e54dd9531abea134fd9,c,2,10,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e20f72936fe84e1d9b527c3ca8338833,c,0,22,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e20f72936fe84e1d9b527c3ca8338833,c,0,28,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e272bb92214bbf412fb7e1594ba09b0a,c,0,124,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e272bb92214bbf412fb7e1594ba09b0a,c,1,103,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e272bb92214bbf412fb7e1594ba09b0a,c,1,105,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e272bb92214bbf412fb7e1594ba09b0a,c,1,107,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e272bb92214bbf412fb7e1594ba09b0a,c,1,128,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e302aeecc48de85f29932977cc4c3e31,c,0,75,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e3116be471fde85fe817f035872f3298,c,0,214,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,c,0,219,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,c,0,224,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,c,0,229,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,c,0,231,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,c,0,242,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e3116be471fde85fe817f035872f3298,c,0,247,17,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e331122b5f3c3d0cf862927cd9c9a92f,c,0,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e331122b5f3c3d0cf862927cd9c9a92f,c,0,27,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e334036bb958753fec18a0316ba60985,c,1,27,13,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
e376094ffd1c8aa8b6ec5d4da464dbf6,c,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e376094ffd1c8aa8b6ec5d4da464dbf6,c,0,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e376094ffd1c8aa8b6ec5d4da464dbf6,c,0,27,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e376094ffd1c8aa8b6ec5d4da464dbf6,c,0,29,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e37e72514e722575a485fd5e83bd4a88,c,0,18,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e37e72514e722575a485fd5e83bd4a88,c,0,88,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e37e72514e722575a485fd5e83bd4a88,c,0,95,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e432db7d2ce3ec328cf04e57f50b7b79,c,1,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e4abc1e5469335fb6bbfe42422d6d36c,c,0,14,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e4abc1e5469335fb6bbfe42422d6d36c,c,0,18,3,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e4abc1e5469335fb6bbfe42422d6d36c,c,0,32,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e4f63b3815369ab27edb0a3ba459a6ce,c,3,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e5688d4e8c8342670dfccd6fd8c72b93,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e59cd57171402638f2594a5f6c9dcb4f,c,1,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e59cd57171402638f2594a5f6c9dcb4f,c,1,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e5e03f870081e696cc81d77211374df0,c,0,55,13,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e5e03f870081e696cc81d77211374df0,c,0,64,13,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e634b8c76b6fc0c6c9b1670409e5ba0e,c,0,22,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e634b8c76b6fc0c6c9b1670409e5ba0e,c,0,26,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e634b8c76b6fc0c6c9b1670409e5ba0e,c,0,30,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e634b8c76b6fc0c6c9b1670409e5ba0e,c,0,113,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e634b8c76b6fc0c6c9b1670409e5ba0e,c,0,175,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e65b50cac694e281335b7d90c5fbce94,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,0,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,0,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,1,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,1,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,2,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,3,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,3,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,7,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,7,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,9,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e65b50cac694e281335b7d90c5fbce94,c,9,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e73e272d398bb99425beb6a3b5d8fd08,c,0,98,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e7485846638be2a9c90bcbc302eda7c8,c,4,18,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7485846638be2a9c90bcbc302eda7c8,c,4,70,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7485846638be2a9c90bcbc302eda7c8,c,6,16,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7485846638be2a9c90bcbc302eda7c8,c,6,66,17,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7485846638be2a9c90bcbc302eda7c8,c,6,100,25,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7625385af8c588da5c870c81ffcbaec,c,0,41,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e7625385af8c588da5c870c81ffcbaec,c,0,46,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e7720fe06b40b4a2c27c695535094c76,c,0,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e7720fe06b40b4a2c27c695535094c76,c,0,28,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e7ca928f05198e19be3732a0f0f5950e,c,1,58,21,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e7ca928f05198e19be3732a0f0f5950e,c,1,70,21,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
e7ca928f05198e19be3732a0f0f5950e,c,4,13,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
e8b1ad52ad20929574865af411bac740,c,0,18,28,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e96367e59cf28e54c97aaf888a4a29ab,c,0,28,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
e96367e59cf28e54c97aaf888a4a29ab,c,0,31,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ea3390a7c01bf907ca9448eab1f1aa65,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
eaa0578409262d2c3c7a1e189436c5ab,c,1,38,9,files.c.rules.lang.security.insecure-use-strcat-fn,Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.
eaa0578409262d2c3c7a1e189436c5ab,c,3,44,17,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
eaa0578409262d2c3c7a1e189436c5ab,c,3,47,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
eaa0578409262d2c3c7a1e189436c5ab,c,4,28,21,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
eaa0578409262d2c3c7a1e189436c5ab,c,4,31,25,files.c.rules.lang.security.insecure-use-strtok-fn,"Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead."
eae274d515d7eb9547cc51521d417aef,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
eb4115fa6dff17dc8611a6c08827ca86,c,2,18,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ece85c7dca7be940d7fe85eaac6faaea,c,0,6,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
edecb273ca9a355d61190f8270bdcdd7,c,10,27,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
edecb273ca9a355d61190f8270bdcdd7,c,10,37,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
edecb273ca9a355d61190f8270bdcdd7,c,11,28,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
edecb273ca9a355d61190f8270bdcdd7,c,11,38,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ef07f9bb72e962da1c3b27611306ca1c,c,0,42,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f0c72071039e791abc69206405221af9,c,0,28,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f0c72071039e791abc69206405221af9,c,0,31,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
f0c72071039e791abc69206405221af9,c,1,23,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f0c72071039e791abc69206405221af9,c,1,25,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
f0c72071039e791abc69206405221af9,c,1,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f143b0c40e97546ccd6072f1078a0220,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f143b0c40e97546ccd6072f1078a0220,c,0,11,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f145f1de14163d651a1e12681432bbe5,c,2,107,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f145f1de14163d651a1e12681432bbe5,c,2,109,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f145f1de14163d651a1e12681432bbe5,c,2,113,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f15c3e810a0bcca8f0818638af918444,c,0,16,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f19188ecc9cad9e2529a8301015c069b,c,1,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f19188ecc9cad9e2529a8301015c069b,c,2,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f19188ecc9cad9e2529a8301015c069b,c,2,9,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f2e67323a8043c90a877016f398cb3eb,c,0,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f3bb6e70c042b8183d9d2bc311c23140,c,0,7,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f3db98bbd4442b87c6f5c17667ca9415,c,0,12,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f3db98bbd4442b87c6f5c17667ca9415,c,1,12,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f3db98bbd4442b87c6f5c17667ca9415,c,2,17,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f3db98bbd4442b87c6f5c17667ca9415,c,2,18,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f3db98bbd4442b87c6f5c17667ca9415,c,2,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f559728c375541c8c0efbb6db4793363,c,0,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f559728c375541c8c0efbb6db4793363,c,1,26,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f643f2453fc3092429b2372dc4eae820,c,0,174,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f643f2453fc3092429b2372dc4eae820,c,1,190,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f6cf1260ea6aea3c2ac661850bcd20c8,c,0,66,5,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
f700e53eff569107a01e34265a9a85b1,c,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f700e53eff569107a01e34265a9a85b1,c,0,26,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f71eec85d2487dc4ba657da925655977,c,0,6,12,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f71eec85d2487dc4ba657da925655977,c,1,6,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8aa95d9a19893e7050d66f1a2872057,c,0,50,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8aa95d9a19893e7050d66f1a2872057,c,0,55,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8aa95d9a19893e7050d66f1a2872057,c,0,64,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8aa95d9a19893e7050d66f1a2872057,c,1,25,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8aa95d9a19893e7050d66f1a2872057,c,1,30,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f8c91190d1d8e9b6218f59ab6c0b0983,c,0,35,9,files.c.rules.lang.security.insecure-use-string-copy-fn,"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available)."
f936782c81465f2755d45fc973ea40e4,c,1,20,9,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f936782c81465f2755d45fc973ea40e4,c,1,39,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f973cab061768a53da86420d038579d5,c,4,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
f9f20466887d9accd2b09c35e14fac11,c,0,60,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,c,0,78,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,c,0,104,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,c,0,105,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,c,0,106,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,c,1,90,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,c,1,91,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,c,1,92,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,c,2,66,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,c,2,67,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,c,2,68,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
f9f20466887d9accd2b09c35e14fac11,c,3,28,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
fa24b9a9f5b24f9a9ce05ed7fe8ff046,c,0,10,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fa24b9a9f5b24f9a9ce05ed7fe8ff046,c,0,21,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fa978ed5d628f61bf63e921a2546fc0d,c,0,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fa978ed5d628f61bf63e921a2546fc0d,c,1,7,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fa978ed5d628f61bf63e921a2546fc0d,c,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
faa8c2cda8aa81c0a77c717241dac10c,c,0,14,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
fac9735371bfa0db41f22172b7daa8cb,c,0,151,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
fac9735371bfa0db41f22172b7daa8cb,c,1,157,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
fb0971680efb737634dddc4c1c2d2826,c,0,18,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fb0971680efb737634dddc4c1c2d2826,c,0,25,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fbd39537f2eb53fb9c550705942d423b,c,0,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc14db9624f4c1460d47abaf5a4b4565,c,2,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc14db9624f4c1460d47abaf5a4b4565,c,2,8,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,c,0,35,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,c,0,36,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,c,0,37,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,c,0,38,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,c,0,39,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,c,1,19,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,c,1,20,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,c,1,21,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,c,1,22,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc1bb2f06d73453fb294a6d22fdfc570,c,1,23,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc5dc5a25ec9191a00819d0fa8ecbf09,c,2,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc5dc5a25ec9191a00819d0fa8ecbf09,c,2,16,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc76468759090063c98e5153db1c39e4,c,0,15,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fc76468759090063c98e5153db1c39e4,c,0,17,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd463df88fa4503310aafebe7fab9ffc,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd463df88fa4503310aafebe7fab9ffc,c,0,12,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,c,1,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,c,1,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,c,2,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,c,2,13,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,c,3,12,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,c,3,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fd8c65f4edc41a2826cc3e659f168c65,c,4,9,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
fdca5821c872cf5ab7535d461b6a9a13,c,0,10,9,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
feb2c75044c310bd06d3f134f0e62031,c,0,35,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
feb2c75044c310bd06d3f134f0e62031,c,0,58,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ff3e6f0542ec21b2440bf17a029488ac,c,0,70,5,files.c.rules.lang.security.insecure-use-memset,"When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory."
ff54ff48572573deec70f2228bea5a05,c,0,6,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ff54ff48572573deec70f2228bea5a05,c,3,11,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ff54ff48572573deec70f2228bea5a05,c,3,14,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ff54ff48572573deec70f2228bea5a05,c,3,19,13,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
ff724fef7804da8994d5450869fa8aab,c,0,5,5,files.c.rules.lang.security.insecure-use-scanf-fn,"Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input."
00d63f1853b5c32a0cf103523802d65a,csharp,8,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
00d63f1853b5c32a0cf103523802d65a,csharp,8,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
015429765399b2d99662462f8f4c1bcf,csharp,1,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
015429765399b2d99662462f8f4c1bcf,csharp,3,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
015429765399b2d99662462f8f4c1bcf,csharp,3,7,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
015429765399b2d99662462f8f4c1bcf,csharp,6,12,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
015429765399b2d99662462f8f4c1bcf,csharp,6,14,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
015429765399b2d99662462f8f4c1bcf,csharp,6,15,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
015429765399b2d99662462f8f4c1bcf,csharp,6,20,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,3,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,3,10,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,3,15,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,3,16,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,3,18,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,5,6,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,5,12,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,5,18,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,5,18,9,files.csharp.rules.lang.security.stacktrace-disclosure,Stacktrace information is displayed in a non-Development environment. Accidentally disclosing sensitive stack trace information in a production environment aids an attacker in reconnaissance and information gathering.
0373fafb67bf68269a0d8bdd624de8fe,csharp,5,19,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,5,20,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,5,22,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,5,24,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,8,13,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,8,35,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,8,37,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,8,44,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,8,48,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,8,50,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,9,6,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,9,13,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,9,18,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,9,20,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,9,22,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0373fafb67bf68269a0d8bdd624de8fe,csharp,9,24,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0428233ccc1bf4ae2cfaae5eb0d6fec1,csharp,2,11,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0428233ccc1bf4ae2cfaae5eb0d6fec1,csharp,2,17,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0428233ccc1bf4ae2cfaae5eb0d6fec1,csharp,2,18,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0428233ccc1bf4ae2cfaae5eb0d6fec1,csharp,2,26,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0428233ccc1bf4ae2cfaae5eb0d6fec1,csharp,2,28,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
047a4c8edb8b6f9ccc48e03983bbc4fc,csharp,0,56,31,files.csharp.rules.lang.security.sqli.csharp-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.
064cec0ddfd2d55a64d993a77321c6a7,csharp,14,4,1,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
06aa854b939b332b4463fc8e407835ef,csharp,3,19,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
073ef6404fe361a2f6464aba0ca5ba29,csharp,3,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
08646e638b07e5fc237399e8c33caf10,csharp,0,21,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
097a6466e22405e314080923cab0c5ab,csharp,2,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
097a6466e22405e314080923cab0c5ab,csharp,2,7,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
097a6466e22405e314080923cab0c5ab,csharp,2,9,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0bcc4fed0f5c7e29f745590c0afd9b30,csharp,6,7,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
0e0697d3890d5d968d3f0512a39b21c3,csharp,0,9,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0e0697d3890d5d968d3f0512a39b21c3,csharp,0,32,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
0e0697d3890d5d968d3f0512a39b21c3,csharp,0,33,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
159d26af7cb3ebb5fd9d88a0f064ec97,csharp,1,21,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
159d26af7cb3ebb5fd9d88a0f064ec97,csharp,1,54,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
159d26af7cb3ebb5fd9d88a0f064ec97,csharp,1,61,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
159d26af7cb3ebb5fd9d88a0f064ec97,csharp,1,65,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
159d26af7cb3ebb5fd9d88a0f064ec97,csharp,1,68,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
159d26af7cb3ebb5fd9d88a0f064ec97,csharp,1,70,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
159d26af7cb3ebb5fd9d88a0f064ec97,csharp,1,73,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
159d26af7cb3ebb5fd9d88a0f064ec97,csharp,1,74,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
159d26af7cb3ebb5fd9d88a0f064ec97,csharp,1,76,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
159d26af7cb3ebb5fd9d88a0f064ec97,csharp,2,6,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
18fc7fcaa6bb897442d0eac5f6abdf27,csharp,0,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
18fc7fcaa6bb897442d0eac5f6abdf27,csharp,1,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
18fc7fcaa6bb897442d0eac5f6abdf27,csharp,2,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
1906cbd555fdf71d38bf42ff744349a1,csharp,0,57,9,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
1906cbd555fdf71d38bf42ff744349a1,csharp,0,67,9,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
1914d4fe1fe2079fcb212dffe3ff8bd0,csharp,2,5,8,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
2249303f3dca283c73f47fb2cc1bac85,csharp,5,9,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
226289054139f4e375f460515ea191e9,csharp,4,7,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
226289054139f4e375f460515ea191e9,csharp,4,8,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
26d6f886eea24ab674c3d7c591b5f1ab,csharp,5,12,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
2ae9ee245e71cf4cb24994e9480e9959,csharp,2,8,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
2c23b2f4946b61abfba77dd4dffae309,csharp,18,7,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
2c23b2f4946b61abfba77dd4dffae309,csharp,18,8,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
2c23b2f4946b61abfba77dd4dffae309,csharp,6,7,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
2e62d7ee52dbf2f4d55ef9f28a92dbce,csharp,0,29,21,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
2e62d7ee52dbf2f4d55ef9f28a92dbce,csharp,0,44,13,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
31eaf08d064d4a9c200f96b7a55267ba,csharp,6,7,1,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
329d1faf15bf9ca6ae1ae26385185bc4,csharp,0,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
329d1faf15bf9ca6ae1ae26385185bc4,csharp,4,11,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
329d1faf15bf9ca6ae1ae26385185bc4,csharp,4,18,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
329d1faf15bf9ca6ae1ae26385185bc4,csharp,4,22,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
329d1faf15bf9ca6ae1ae26385185bc4,csharp,4,25,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
329d1faf15bf9ca6ae1ae26385185bc4,csharp,4,27,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
329d1faf15bf9ca6ae1ae26385185bc4,csharp,4,29,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
32b6033f6d9994a3e02e5a609a2713be,csharp,12,7,12,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
3629cb868a434623a1554c0364a1e61b,csharp,7,5,1,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
3629cb868a434623a1554c0364a1e61b,csharp,8,5,1,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
3629cb868a434623a1554c0364a1e61b,csharp,9,17,13,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
379577d3a74ece5557c331bfbbafa9f4,csharp,4,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
379577d3a74ece5557c331bfbbafa9f4,csharp,4,22,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
379577d3a74ece5557c331bfbbafa9f4,csharp,4,37,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
379577d3a74ece5557c331bfbbafa9f4,csharp,4,38,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
379577d3a74ece5557c331bfbbafa9f4,csharp,8,7,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
388428df2ef046bf8a0cfe9a861741f4,csharp,5,30,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
388428df2ef046bf8a0cfe9a861741f4,csharp,6,31,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
388428df2ef046bf8a0cfe9a861741f4,csharp,7,36,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
388428df2ef046bf8a0cfe9a861741f4,csharp,8,27,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
38879636c0d80fc716993fbe8b1033e6,csharp,3,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
38879636c0d80fc716993fbe8b1033e6,csharp,3,15,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
38879636c0d80fc716993fbe8b1033e6,csharp,3,17,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,12,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,12,8,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,12,11,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,12,17,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,12,20,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,12,21,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,12,22,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,12,26,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,13,15,2,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
39b5e29f13751ca47bc7b41f11129fe9,csharp,5,8,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,5,9,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,5,11,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,5,14,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,5,20,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,5,23,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,5,24,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,5,25,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,5,29,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
39b5e29f13751ca47bc7b41f11129fe9,csharp,6,14,2,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,0,11,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,0,22,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,0,23,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,12,21,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,12,24,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,12,27,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,4,13,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,4,16,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,4,26,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,4,27,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,8,14,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,8,17,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,8,28,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3e68cfbc827f5ce9d0f1d5fa45b3a562,csharp,8,29,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3fb36c34362ce4a2963b804cace3fb7c,csharp,2,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3feb4274a053065dbb67bdc042cd3d64,csharp,2,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3feb4274a053065dbb67bdc042cd3d64,csharp,2,7,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3feb4274a053065dbb67bdc042cd3d64,csharp,2,10,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3feb4274a053065dbb67bdc042cd3d64,csharp,2,11,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3feb4274a053065dbb67bdc042cd3d64,csharp,2,18,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
3feb4274a053065dbb67bdc042cd3d64,csharp,4,9,13,files.csharp.rules.dotnet.security.audit.misconfigured-lockout-option,A misconfigured lockout mechanism allows an attacker to execute brute-force attacks. Account lockout must be correctly configured and enabled to prevent these attacks.
42ed49d6a418a2b64fdfdc86315a8b3d,csharp,0,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
42ed49d6a418a2b64fdfdc86315a8b3d,csharp,0,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
42ed49d6a418a2b64fdfdc86315a8b3d,csharp,0,10,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
42ed49d6a418a2b64fdfdc86315a8b3d,csharp,0,11,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,2,54,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,2,56,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,2,59,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,2,66,17,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,2,69,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,2,71,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,2,78,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,6,31,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,6,34,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,6,36,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,6,37,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,6,38,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,6,39,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,6,45,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,6,45,13,files.csharp.rules.lang.security.stacktrace-disclosure,Stacktrace information is displayed in a non-Development environment. Accidentally disclosing sensitive stack trace information in a production environment aids an attacker in reconnaissance and information gathering.
45262b55fd7a0e857cb003905722c949,csharp,6,51,17,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,6,62,17,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
45262b55fd7a0e857cb003905722c949,csharp,6,64,17,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
48aec63a09f6fbbc85ece9be901fe4e0,csharp,8,3,8,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
48aec63a09f6fbbc85ece9be901fe4e0,csharp,8,10,8,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
4c0a4bf83452125d91162136eae0ba13,csharp,0,3,8,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
4c0a4bf83452125d91162136eae0ba13,csharp,4,3,7,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
4c11ad56cb8744c8a1b2780a04173a8c,csharp,1,5,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
56fcdb4543225fec5917b890368ef07f,csharp,2,5,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
588b2a52ec4a53ce3fec4bf6631a4abe,csharp,7,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
588b2a52ec4a53ce3fec4bf6631a4abe,csharp,7,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
588b2a52ec4a53ce3fec4bf6631a4abe,csharp,7,8,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
59dd4c06b09e70fa328a4f28477ab6cc,csharp,4,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
5adafeec0d170efa91857ac59d6cc5a0,csharp,4,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
5adafeec0d170efa91857ac59d6cc5a0,csharp,4,25,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
5d0af09badb2caa798696d96045dfed4,csharp,1,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
5d0af09badb2caa798696d96045dfed4,csharp,1,10,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
5d0af09badb2caa798696d96045dfed4,csharp,1,33,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
5d0af09badb2caa798696d96045dfed4,csharp,3,5,1,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
5d0af09badb2caa798696d96045dfed4,csharp,3,29,17,files.csharp.rules.dotnet.security.audit.misconfigured-lockout-option,A misconfigured lockout mechanism allows an attacker to execute brute-force attacks. Account lockout must be correctly configured and enabled to prevent these attacks.
5d0af09badb2caa798696d96045dfed4,csharp,9,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
60a1edfa5e6bb274963bb26cba2d9699,csharp,0,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
60a1edfa5e6bb274963bb26cba2d9699,csharp,0,7,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6236dab6a048204be488bf5891369bc1,csharp,3,24,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6236dab6a048204be488bf5891369bc1,csharp,3,26,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6236dab6a048204be488bf5891369bc1,csharp,3,33,17,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6236dab6a048204be488bf5891369bc1,csharp,3,36,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6236dab6a048204be488bf5891369bc1,csharp,3,38,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6236dab6a048204be488bf5891369bc1,csharp,3,40,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6236dab6a048204be488bf5891369bc1,csharp,3,42,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6236dab6a048204be488bf5891369bc1,csharp,3,48,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
628ef4384fcc6725cb87b24930a77b8a,csharp,1,6,1,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
628ef4384fcc6725cb87b24930a77b8a,csharp,2,5,1,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
628ef4384fcc6725cb87b24930a77b8a,csharp,3,5,1,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
628ef4384fcc6725cb87b24930a77b8a,csharp,4,6,1,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
6381f994682cdabea598502a8eb4747c,csharp,4,8,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6381f994682cdabea598502a8eb4747c,csharp,5,40,10,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,PostShipmentOrder is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
6593a1e806e7eb6f328b9e3ab847a019,csharp,0,44,57,files.csharp.rules.lang.security.sqli.csharp-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.
6de8457b91290d7d7a128fccb3a86204,csharp,0,11,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
6de8457b91290d7d7a128fccb3a86204,csharp,11,9,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6de8457b91290d7d7a128fccb3a86204,csharp,11,15,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6de8457b91290d7d7a128fccb3a86204,csharp,2,11,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
6de8457b91290d7d7a128fccb3a86204,csharp,7,9,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
6de8457b91290d7d7a128fccb3a86204,csharp,7,24,10,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,Create is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
6de8457b91290d7d7a128fccb3a86204,csharp,7,39,10,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,Delete is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
6fe478deadf1bb9d0670380d147af75c,csharp,4,7,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6fe478deadf1bb9d0670380d147af75c,csharp,4,24,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6fe478deadf1bb9d0670380d147af75c,csharp,7,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6fe478deadf1bb9d0670380d147af75c,csharp,8,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
6fe478deadf1bb9d0670380d147af75c,csharp,8,7,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
707fed5000d8baaa5886b1d5707c731a,csharp,6,30,17,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
719512c16bc46376bdc39daed073a8c5,csharp,0,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
719512c16bc46376bdc39daed073a8c5,csharp,0,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
719512c16bc46376bdc39daed073a8c5,csharp,0,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
719512c16bc46376bdc39daed073a8c5,csharp,5,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
719512c16bc46376bdc39daed073a8c5,csharp,5,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
7a7e2d3ff4b77fd408c84dd5c0ed977b,csharp,3,4,8,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
7a7e2d3ff4b77fd408c84dd5c0ed977b,csharp,3,10,8,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
7a7e2d3ff4b77fd408c84dd5c0ed977b,csharp,3,11,8,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
7b557f0beec81fa4dc31a9e479bcc9c8,csharp,2,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
7b557f0beec81fa4dc31a9e479bcc9c8,csharp,2,13,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
7b557f0beec81fa4dc31a9e479bcc9c8,csharp,3,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
7b557f0beec81fa4dc31a9e479bcc9c8,csharp,3,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
7b557f0beec81fa4dc31a9e479bcc9c8,csharp,6,4,1,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
7cdb02eceeccd67b82a2e915b39a39b4,csharp,1,5,24,files.csharp.rules.lang.security.filesystem.unsafe-path-combine,String argument filename is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal.
7da4acc7d122e87bc36b01ad76c4e92b,csharp,1,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
7da4acc7d122e87bc36b01ad76c4e92b,csharp,1,10,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
814b10b0f0f8fe290cc05cdf89b75f5b,csharp,3,5,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
814b10b0f0f8fe290cc05cdf89b75f5b,csharp,3,13,10,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,SubmitForm is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
854f9dab9b665baabe103ad91cf71b62,csharp,0,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
85f458c7c630ab14650d4970dd0a92a2,csharp,1,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
86b1b18ae5daa47779f74b750245bc0b,csharp,3,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
87491f762ed02142c9130b395cd607f2,csharp,1,36,41,files.csharp.rules.lang.security.sqli.csharp-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.
8a4c14d713d7ceecf0264fb12eaaad8c,csharp,0,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
8a4c14d713d7ceecf0264fb12eaaad8c,csharp,0,13,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
8a4c14d713d7ceecf0264fb12eaaad8c,csharp,1,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
8a4c14d713d7ceecf0264fb12eaaad8c,csharp,1,13,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
8cbe6d64acdfdc768d47095a5cc5e1b2,csharp,0,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
8cbe6d64acdfdc768d47095a5cc5e1b2,csharp,4,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
8f3cf7c630a5137b486f3c08ff66fd8b,csharp,1,8,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
93553206f4590cae41a3ea1b7d50068d,csharp,11,31,10,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,CreateUser is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
93553206f4590cae41a3ea1b7d50068d,csharp,6,31,10,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,CreateUser is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
9665097b8457dea5c0a4df2a3d8e1a2d,csharp,1,23,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9665097b8457dea5c0a4df2a3d8e1a2d,csharp,1,71,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9665097b8457dea5c0a4df2a3d8e1a2d,csharp,1,76,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9665097b8457dea5c0a4df2a3d8e1a2d,csharp,1,77,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9665097b8457dea5c0a4df2a3d8e1a2d,csharp,1,79,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9665097b8457dea5c0a4df2a3d8e1a2d,csharp,1,80,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9707c24601ce061c2f504d583f056c49,csharp,0,11,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9707c24601ce061c2f504d583f056c49,csharp,0,37,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9707c24601ce061c2f504d583f056c49,csharp,0,40,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9707c24601ce061c2f504d583f056c49,csharp,0,41,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9707c24601ce061c2f504d583f056c49,csharp,0,43,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9dc77a7a419934e69ee34a1791d8b951,csharp,12,15,6,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,ConvertToPdf is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
9dc77a7a419934e69ee34a1791d8b951,csharp,16,15,6,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,ConvertToPdf is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
9dc77a7a419934e69ee34a1791d8b951,csharp,2,15,6,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,ConvertToPdf is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
9dc77a7a419934e69ee34a1791d8b951,csharp,8,15,6,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,ConvertToPdf is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
9e7debbfc8b1fa9b12a5733d1d689633,csharp,0,23,10,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,Post is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
9e7debbfc8b1fa9b12a5733d1d689633,csharp,0,39,10,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,Put is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
9e7debbfc8b1fa9b12a5733d1d689633,csharp,2,36,13,files.csharp.rules.dotnet.security.audit.misconfigured-lockout-option,A misconfigured lockout mechanism allows an attacker to execute brute-force attacks. Account lockout must be correctly configured and enabled to prevent these attacks.
9f170d41ec16ed4b7fc8c71b091cb7ef,csharp,1,15,9,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
9f170d41ec16ed4b7fc8c71b091cb7ef,csharp,1,24,9,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
9f170d41ec16ed4b7fc8c71b091cb7ef,csharp,1,39,9,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
9f170d41ec16ed4b7fc8c71b091cb7ef,csharp,1,48,9,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
9fe93f10d2e61259fd43794fe5225747,csharp,1,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9fe93f10d2e61259fd43794fe5225747,csharp,2,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9fe93f10d2e61259fd43794fe5225747,csharp,3,29,17,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9fe93f10d2e61259fd43794fe5225747,csharp,3,37,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
9fe93f10d2e61259fd43794fe5225747,csharp,3,39,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
a45702544d8f4baa172a2a2ca1a430cd,csharp,11,7,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
a7d61a11f44f07ee2c32fb2726763cf9,csharp,7,43,35,files.csharp.rules.lang.security.sqli.csharp-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.
a8d4ad8a50c5a759196e5a49b3c5d877,csharp,5,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
a969604bea50cc4484573183b9f3480d,csharp,1,10,12,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
a969604bea50cc4484573183b9f3480d,csharp,2,4,25,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ad8eb3bc6b625480cb4c7c3296970444,csharp,1,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
aeedc3342ec762f31d37cc9ce28a5fd1,csharp,4,10,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
b046bf233afa9f21146d1eefd8a93378,csharp,5,11,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
b046bf233afa9f21146d1eefd8a93378,csharp,5,16,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
b046bf233afa9f21146d1eefd8a93378,csharp,5,17,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
b11241aa0f2062e5e7648e4680a43f72,csharp,0,9,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
b11241aa0f2062e5e7648e4680a43f72,csharp,0,22,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
b11241aa0f2062e5e7648e4680a43f72,csharp,0,24,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
b11241aa0f2062e5e7648e4680a43f72,csharp,4,15,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
b358aed0cd04e967a4fc24d103df3cda,csharp,5,6,31,files.csharp.rules.lang.security.sqli.csharp-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.
b612bfbc9c47bbacb09d1cbe21b4a94f,csharp,3,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
b8582daa2b56d7b2b2147d57fa75ccc3,csharp,2,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
bd93bf98d52321f9d2078c2baa8aa908,csharp,0,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
be2e9cd38152e2b9b3a8132197b84bed,csharp,2,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
be2e9cd38152e2b9b3a8132197b84bed,csharp,2,22,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
c09840727ed2b224db03af255d89ac12,csharp,0,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
c09840727ed2b224db03af255d89ac12,csharp,0,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
c09840727ed2b224db03af255d89ac12,csharp,0,11,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
c09840727ed2b224db03af255d89ac12,csharp,0,15,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
c09840727ed2b224db03af255d89ac12,csharp,0,18,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
c09840727ed2b224db03af255d89ac12,csharp,0,20,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
c09840727ed2b224db03af255d89ac12,csharp,0,22,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
c09840727ed2b224db03af255d89ac12,csharp,0,23,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
c09840727ed2b224db03af255d89ac12,csharp,0,25,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
c09840727ed2b224db03af255d89ac12,csharp,5,21,17,files.csharp.rules.dotnet.security.audit.misconfigured-lockout-option,A misconfigured lockout mechanism allows an attacker to execute brute-force attacks. Account lockout must be correctly configured and enabled to prevent these attacks.
c47de9ffd8992172bb4da7f00e79ef10,csharp,2,11,52,files.csharp.rules.lang.security.sqli.csharp-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.
c9e948ed280a939330eb9e1f4c6e3e82,csharp,3,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
cadb04ef2acdb05bb1cde016bd5d2140,csharp,1,11,5,files.csharp.rules.lang.security.injections.os-command-injection,"The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component."
cadb04ef2acdb05bb1cde016bd5d2140,csharp,3,11,5,files.csharp.rules.lang.security.injections.os-command-injection,"The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component."
cb58cb3ebe98013b5425c22d1abbc3a2,csharp,19,18,6,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,BookTaxi is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
cb58cb3ebe98013b5425c22d1abbc3a2,csharp,21,16,6,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,AddDriver is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
cb58cb3ebe98013b5425c22d1abbc3a2,csharp,24,16,6,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,AddPassenger is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
cb58cb3ebe98013b5425c22d1abbc3a2,csharp,27,16,6,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,StartTrip is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
ccffa8cd371f70023fec036d7214d4c9,csharp,19,20,9,files.csharp.rules.lang.security.http.http-listener-wildcard-bindings,"The top level wildcard bindings http://+:8080/myapp/ leaves your application open to security vulnerabilities and give attackers more control over where traffic is routed. If you must use wildcards, consider using subdomain wildcard binding. For example, you can use ""*.asdf.gov"" if you own all of ""asdf.gov""."
ccffa8cd371f70023fec036d7214d4c9,csharp,21,21,9,files.csharp.rules.lang.security.http.http-listener-wildcard-bindings,"The top level wildcard bindings http://+:8080/myapp/ leaves your application open to security vulnerabilities and give attackers more control over where traffic is routed. If you must use wildcards, consider using subdomain wildcard binding. For example, you can use ""*.asdf.gov"" if you own all of ""asdf.gov""."
cf1db5ba689d9720e485a8f49787d124,csharp,2,6,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
cf5adeb160bbfe95d68bb98193e43f45,csharp,1,21,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
cf5adeb160bbfe95d68bb98193e43f45,csharp,1,28,17,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
cf5adeb160bbfe95d68bb98193e43f45,csharp,1,33,17,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
cf5adeb160bbfe95d68bb98193e43f45,csharp,1,36,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
cf5adeb160bbfe95d68bb98193e43f45,csharp,1,38,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
d62ff1e98a4462c9ef071d78a016b807,csharp,0,6,5,files.csharp.rules.dotnet.security.audit.ldap-injection,LDAP queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an arbitrary LDAP query execution.
d64ebce1520d13ff3d1c50785d60dbfc,csharp,0,24,49,files.csharp.rules.lang.security.sqli.csharp-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.
d64ebce1520d13ff3d1c50785d60dbfc,csharp,0,30,49,files.csharp.rules.lang.security.sqli.csharp-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.
d80454e27b22254ee283a618c27a63ae,csharp,1,5,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
db58e245f14d3de9dad2ccc16b47a4d7,csharp,1,3,1,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
db58e245f14d3de9dad2ccc16b47a4d7,csharp,1,5,6,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,MyAction is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
dc56a8534947fc7c9fc4efd530cdb236,csharp,0,12,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,5,24,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,5,27,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,5,30,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,5,35,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,5,42,17,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,5,46,17,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,5,48,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,5,49,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,5,50,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,5,51,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,5,52,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dcb9bc76f1fd4b21c13760bc69ff608a,csharp,7,11,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
de00fc8bc030b189f2b1595f23123573,csharp,2,8,9,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
de00fc8bc030b189f2b1595f23123573,csharp,2,17,9,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
de0bccffbe7138e51fceea84300f0f4e,csharp,3,3,10,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
de0bccffbe7138e51fceea84300f0f4e,csharp,3,4,10,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
de0bccffbe7138e51fceea84300f0f4e,csharp,4,5,10,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
deb6e5ab2b277950f09179193b6e83ff,csharp,1,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
deb6e5ab2b277950f09179193b6e83ff,csharp,1,7,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
deb6e5ab2b277950f09179193b6e83ff,csharp,1,13,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
df35fba7dc2958481329fc5b60010774,csharp,4,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
dfc363997860d6a34732465d91cc16de,csharp,0,7,1,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
e243a329efd1956d8d56532af3efbff7,csharp,0,5,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
e243a329efd1956d8d56532af3efbff7,csharp,0,12,10,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,Index is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
e262f24547b65d4994fdc64f5b37461c,csharp,15,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
e262f24547b65d4994fdc64f5b37461c,csharp,16,12,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
e262f24547b65d4994fdc64f5b37461c,csharp,16,25,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
e262f24547b65d4994fdc64f5b37461c,csharp,16,27,13,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
e262f24547b65d4994fdc64f5b37461c,csharp,19,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
e26813338de17d251216001172da3f2f,csharp,0,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
e26813338de17d251216001172da3f2f,csharp,0,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
e26813338de17d251216001172da3f2f,csharp,0,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
e26813338de17d251216001172da3f2f,csharp,0,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
e26813338de17d251216001172da3f2f,csharp,1,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
e26813338de17d251216001172da3f2f,csharp,1,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
e3f27c620c8f3c4bb518c0ad8677e513,csharp,1,5,1,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
e3f27c620c8f3c4bb518c0ad8677e513,csharp,1,53,17,files.csharp.rules.dotnet.security.audit.misconfigured-lockout-option,A misconfigured lockout mechanism allows an attacker to execute brute-force attacks. Account lockout must be correctly configured and enabled to prevent these attacks.
e8d2ab599d76aaec609dba89592fd30e,csharp,2,8,5,files.csharp.rules.dotnet.security.audit.missing-or-broken-authorization,"Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users."
e9bd2034a846c0463880ce7380fee94d,csharp,1,73,36,files.csharp.rules.lang.security.sqli.csharp-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.
e9bd2034a846c0463880ce7380fee94d,csharp,3,45,28,files.csharp.rules.lang.security.sqli.csharp-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.
ea2fdaf02ec3ce90badbde5f1a931677,csharp,10,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ea2fdaf02ec3ce90badbde5f1a931677,csharp,37,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ea2fdaf02ec3ce90badbde5f1a931677,csharp,37,14,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ea2fdaf02ec3ce90badbde5f1a931677,csharp,39,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ea2fdaf02ec3ce90badbde5f1a931677,csharp,40,4,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ea2fdaf02ec3ce90badbde5f1a931677,csharp,40,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ed2af1f5146392453305214fd3c9b54d,csharp,5,13,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ed2af1f5146392453305214fd3c9b54d,csharp,5,16,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ed2af1f5146392453305214fd3c9b54d,csharp,5,17,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ed2af1f5146392453305214fd3c9b54d,csharp,5,18,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ed2af1f5146392453305214fd3c9b54d,csharp,5,19,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
ed954db4db08c0c12706ca0265e3e1aa,csharp,2,8,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f12db9fd65f4d2bd9345cf411796d3b1,csharp,5,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f12db9fd65f4d2bd9345cf411796d3b1,csharp,5,25,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f4ad9b751a630eacc9f848dbe38f679b,csharp,0,35,17,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
f6fff638b372371961475184c1725639,csharp,1,7,8,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
f6fff638b372371961475184c1725639,csharp,1,17,12,files.csharp.rules.lang.security.insecure-deserialization.insecure-binaryformatter-deserialization,"The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure"
f77b746579d480f9617236ed0ea0c45b,csharp,1,18,12,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,1,23,32,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,1,37,12,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,11,3,25,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,11,27,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,12,3,25,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,12,10,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,3,18,12,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,3,23,32,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,3,37,12,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,7,18,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,7,23,29,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,7,38,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,9,18,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,9,23,29,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f77b746579d480f9617236ed0ea0c45b,csharp,9,42,9,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f9b102ad54a8fbbae09727dac3cef546,csharp,3,3,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
f9b102ad54a8fbbae09727dac3cef546,csharp,3,8,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
fa2f0c668e44193cdec1f85ae3821cc6,csharp,3,22,18,files.csharp.rules.dotnet.security.audit.misconfigured-lockout-option,A misconfigured lockout mechanism allows an attacker to execute brute-force attacks. Account lockout must be correctly configured and enabled to prevent these attacks.
fa88fbe17343e271480be5374738138f,csharp,0,4,2,files.csharp.rules.dotnet.security.mvc-missing-antiforgery,MyAction is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.
fd627f001237441ce332926682c50f2f,csharp,1,7,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
fd627f001237441ce332926682c50f2f,csharp,2,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
fd627f001237441ce332926682c50f2f,csharp,2,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
fd627f001237441ce332926682c50f2f,csharp,7,8,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
fd627f001237441ce332926682c50f2f,csharp,8,5,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
fd627f001237441ce332926682c50f2f,csharp,8,6,5,files.csharp.rules.lang.security.missing-hsts-header,"The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol."
020d4eeb2aa22328a1cf5947564b7798,java,35,6,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
023e8d8ac6297a4f9b63db78283d0974,java,4,120,46,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,java,1,38,36,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,java,1,41,30,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,java,1,44,34,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,java,1,47,35,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,java,1,50,35,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
037e3efdc4f72f9a75c85e61c0445ba6,java,1,53,40,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
056c2b7f7f486cdd871a5078a836d508,java,0,17,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
056c2b7f7f486cdd871a5078a836d508,java,1,16,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
056c2b7f7f486cdd871a5078a836d508,java,2,21,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
0571f220c0641b8843cd1c69941f9b92,java,1,45,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
0571f220c0641b8843cd1c69941f9b92,java,1,71,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
06882404b7f259ba8fbbe41875ea5314,java,3,10,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
06ac3ad39fc850bcfabe99e11829f561,java,2,45,13,files.java.rules.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature ""http://apache.org/xml/features/disallow-doctype-decl"" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features ""http://xml.org/sax/features/external-general-entities"" and ""http://xml.org/sax/features/external-parameter-entities"" to false."
0744e2aecfadbc61bbba4b11157f27ce,java,0,8,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
081f0d0b9bdfc78dfb41a29f81ff36a7,java,1,12,14,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
0a48b63f38e7992b54ed64a5f732f2ef,java,3,22,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
0b7e60ee78f56ea4ea40a586da334163,java,0,7,58,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
0ccadd1792935c44bb017bdd0c8a18e4,java,0,7,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
0ccadd1792935c44bb017bdd0c8a18e4,java,1,7,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
0ccadd1792935c44bb017bdd0c8a18e4,java,4,7,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
0ccadd1792935c44bb017bdd0c8a18e4,java,5,23,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
0e9475e261d195f10c1de5c181ffa349,java,0,10,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
0e9475e261d195f10c1de5c181ffa349,java,1,13,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
0e9475e261d195f10c1de5c181ffa349,java,9,19,14,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
10a1b82752ca064c385bbb8f17ade3bc,java,23,79,9,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
10a1b82752ca064c385bbb8f17ade3bc,java,23,84,16,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
112ddfc35d3383bfddc5937eb5d6a8df,java,0,3,12,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
12f8ea0ceee98f1fc0199f3d0f52dab0,java,0,10,9,files.java.rules.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature ""http://apache.org/xml/features/disallow-doctype-decl"" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features ""http://xml.org/sax/features/external-general-entities"" and ""http://xml.org/sax/features/external-parameter-entities"" to false."
12f8ea0ceee98f1fc0199f3d0f52dab0,java,2,14,9,files.java.rules.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature ""http://apache.org/xml/features/disallow-doctype-decl"" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features ""http://xml.org/sax/features/external-general-entities"" and ""http://xml.org/sax/features/external-parameter-entities"" to false."
137933aff79aee4d177c245a6dadee51,java,0,9,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
158795eeb893bf97841e575a2523a014,java,1,26,9,files.java.rules.lang.security.audit.cookie-missing-httponly,A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
158795eeb893bf97841e575a2523a014,java,1,26,9,files.java.rules.lang.security.audit.cookie-missing-secure-flag,A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'
187a303178ee56917c211123bc90d2a9,java,6,28,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
187a303178ee56917c211123bc90d2a9,java,8,48,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
19c0250ba1338c7f548598b6b21c82f1,java,3,3,21,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
19c0250ba1338c7f548598b6b21c82f1,java,4,3,21,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1a424db31f7e34ffaff9d1a18b57942e,java,1,4,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1a424db31f7e34ffaff9d1a18b57942e,java,2,4,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1be0e481a5e245c7d4110d911b5e181d,java,1,11,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1c2347ea20f7362bdd7c55fce78c3263,java,0,6,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
1c7fc3a84fb89cb42451487017abc363,java,4,11,49,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
1cb02c0ae56ec7c6a0d56dd7b804b126,java,2,11,9,files.java.rules.lang.security.audit.permissive-cors,"https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks."
1e86dd4286af623fb28eeff533bdebdc,java,0,12,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1e86dd4286af623fb28eeff533bdebdc,java,0,42,25,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
1e86dd4286af623fb28eeff533bdebdc,java,1,10,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1e86dd4286af623fb28eeff533bdebdc,java,1,35,21,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
1f53ed72d4d8af0859bc445f6d3673ca,java,0,10,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
1f53ed72d4d8af0859bc445f6d3673ca,java,5,59,38,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
1fe2948bd6633ee13cd8966bd875bb1d,java,0,15,37,files.java.rules.lang.security.audit.crypto.desede-is-deprecated,Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.
1fe2948bd6633ee13cd8966bd875bb1d,java,0,15,62,files.java.rules.lang.security.audit.crypto.des-is-deprecated,DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.
1fe2948bd6633ee13cd8966bd875bb1d,java,0,20,42,files.java.rules.lang.security.audit.crypto.des-is-deprecated,DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.
20795b2a6f0fe9d7180f600f4f1cbe9f,java,0,25,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
20795b2a6f0fe9d7180f600f4f1cbe9f,java,1,20,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
20d71807b9f354ef82a86b8fbc97a4b4,java,0,77,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
20d71807b9f354ef82a86b8fbc97a4b4,java,0,139,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
20d71807b9f354ef82a86b8fbc97a4b4,java,0,173,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
20d71807b9f354ef82a86b8fbc97a4b4,java,1,63,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
215dc8c3b15dcb2b705bd522b5e01d26,java,10,8,21,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
215dc8c3b15dcb2b705bd522b5e01d26,java,11,8,21,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
215dc8c3b15dcb2b705bd522b5e01d26,java,3,8,26,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
215dc8c3b15dcb2b705bd522b5e01d26,java,5,8,21,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
215dc8c3b15dcb2b705bd522b5e01d26,java,7,8,26,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
215dc8c3b15dcb2b705bd522b5e01d26,java,9,8,21,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
23de945c7921711739ad1cd8ff5fc355,java,1,121,46,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
23de945c7921711739ad1cd8ff5fc355,java,6,123,46,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
23f7c18fb6eb38ad6a25f3cf09f3dc5e,java,3,7,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
24a6b0f4589b66544dc18f9b168b4821,java,4,6,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
2507c84129601207eaf9129a2b73bdfb,java,2,21,13,files.java.rules.lang.security.audit.xxe.transformerfactory-dtds-not-disabled,"DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes ""accessExternalDTD"" and ""accessExternalStylesheet"" to """"."
255898b9509d0f392037c9986285eca9,java,27,18,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
26992a35877bbb57d0b31151eca1820e,java,0,18,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
27911ed9474aeff70189c51d0f4c6843,java,4,25,21,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
27ae7d91fc6a78bc42d9dc523e08e9e1,java,9,7,42,files.java.rules.spring.security.audit.spring-sqli,Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
29734925d7545aa095ac8137701e4496,java,15,7,9,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
29aeb186918e752e1da25a172a8a7fc3,java,12,23,44,files.java.rules.lang.security.audit.cbc-padding-oracle,"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."
29bce683318c5caec26a230a5fa5466d,java,0,34,38,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
29bce683318c5caec26a230a5fa5466d,java,0,59,32,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
2a1331c276e0826fb263b05048c724ff,java,2,9,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
2a180bef54f919faa69b2ed07ce4a67c,java,0,12,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2a180bef54f919faa69b2ed07ce4a67c,java,0,34,17,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
2a180bef54f919faa69b2ed07ce4a67c,java,1,20,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2a180bef54f919faa69b2ed07ce4a67c,java,1,22,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
2a180bef54f919faa69b2ed07ce4a67c,java,6,15,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2a180bef54f919faa69b2ed07ce4a67c,java,6,45,17,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
2a180bef54f919faa69b2ed07ce4a67c,java,7,22,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2a180bef54f919faa69b2ed07ce4a67c,java,7,24,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
2b0037fc33ced361efe76f37d0bac317,java,1,20,7,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
2d1b470dea58e5026eef9dc92311bc6b,java,0,42,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2d1b470dea58e5026eef9dc92311bc6b,java,1,40,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2eca86bf8011491ee936b703be36d2b0,java,1,25,22,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
2ee3debcc43a49871ec011e390c03e83,java,0,8,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2ee3debcc43a49871ec011e390c03e83,java,1,13,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2ee91f2ea721a8fce5965217ff10554c,java,5,9,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2ee91f2ea721a8fce5965217ff10554c,java,6,8,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2fc9e661bdc85b19e7428e65549e9ac3,java,0,137,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
2fc9e661bdc85b19e7428e65549e9ac3,java,1,148,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
3002b5d39836cd11285dbe416236328d,java,5,6,25,files.java.rules.lang.security.audit.command-injection-process-builder,A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
31df5f676924376cb0b3b9b23e841ea8,java,4,14,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
31ffaaf372b69b4c840724c64f90360b,java,5,17,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
3211c0c199309416c66e7773ce1d319b,java,38,14,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
32997760cc2d8140999564a965cfa385,java,0,6,1,files.java.rules.rmi.security.server-dangerous-class-deserialization,"Using a non-primitive class with Java RMI may be an insecure deserialization vulnerability. Depending on the underlying implementation. This object could be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON."
32997760cc2d8140999564a965cfa385,java,0,6,1,files.java.rules.rmi.security.server-dangerous-object-deserialization,"Using an arbitrary object ('List<String> words') with Java RMI is an insecure deserialization vulnerability. This object can be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON."
329a91f76485658a65f7043a15ff8371,java,1,8,26,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
32ebba74e8d27b7a005185561c7b3c7c,java,2,15,14,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
33b75e99879b4bd35e14447346b6ebf5,java,0,41,34,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
33b75e99879b4bd35e14447346b6ebf5,java,1,41,34,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
35f906e02becf4db09818092f6002672,java,5,12,33,files.java.rules.lang.security.audit.command-injection-process-builder,A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
36ce6058180dc19b6546bcd2568cb85c,java,1,14,48,files.java.rules.lang.security.audit.cbc-padding-oracle,"Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead."
36e28a5e1605c5f94269aad99417b6d1,java,0,15,9,files.java.rules.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature ""http://apache.org/xml/features/disallow-doctype-decl"" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features ""http://xml.org/sax/features/external-general-entities"" and ""http://xml.org/sax/features/external-parameter-entities"" to false."
36e28a5e1605c5f94269aad99417b6d1,java,0,36,9,files.java.rules.lang.security.audit.xxe.transformerfactory-dtds-not-disabled,"DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes ""accessExternalDTD"" and ""accessExternalStylesheet"" to """"."
374755891b4cac2f779c79f88f171eca,java,1,14,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
374755891b4cac2f779c79f88f171eca,java,2,9,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
37fec562eebf31312ea41e742f3ad365,java,0,13,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
3b9881963a95d533ca7c014f99d26b42,java,11,11,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
3b9881963a95d533ca7c014f99d26b42,java,15,11,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
3be983247f539bbc974fccf7c4372d58,java,11,24,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
3be983247f539bbc974fccf7c4372d58,java,4,17,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
3df0dab6da4d5d90b2df561804993bee,java,0,7,54,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
3e57d69104299d1a51a6c83128bd6526,java,0,23,33,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
3eba49021a441f5ae45e8b253fe84b5c,java,2,24,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
3f56bf70e9f030f02216eb9d60e6be5b,java,0,47,36,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
3f81bfc05d6a3b5de14af0dfe43087e7,java,3,5,34,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
410e9a5d8a20c82080d1dc86c11b68ea,java,4,50,41,files.java.rules.lang.security.audit.command-injection-process-builder,A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
410e9a5d8a20c82080d1dc86c11b68ea,java,5,15,35,files.java.rules.lang.security.audit.command-injection-process-builder,A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
42ee56af7dd88f8747774148db9ec756,java,4,11,20,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
43dd1cbf3f1939bbdf418d158908d20b,java,4,10,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
44030215fd3ba8501297970962fa33f5,java,0,20,21,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
46db16de1618bdd0b0fb83184eb05b04,java,2,13,5,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
48d4aa5a6c453317f4abe041b4460ff0,java,2,19,13,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
4a2f9d143480ee30301983ac1fa5f21f,java,6,16,31,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4b576c3ad7fb0010cf426ccea6f77adc,java,1,32,38,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4b576c3ad7fb0010cf426ccea6f77adc,java,2,29,38,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4c7abe893143fd226486c8fc82065fcc,java,18,12,42,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
4c7abe893143fd226486c8fc82065fcc,java,18,15,50,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
4d478e6802397168a93e17806701b546,java,5,11,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,java,0,10,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,java,1,25,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,java,3,10,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,java,4,25,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,java,5,10,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,java,6,27,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,java,7,10,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4d7444fd1afb08b7ec92631730607fae,java,8,28,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4e26e8683b5cf70b5cf00e4af5be35aa,java,0,10,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
4ee0cc3818ae030fe0781c80451450b4,java,3,32,29,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
4fe42039e1532175c2b4670907a3e3a2,java,1,11,55,files.java.rules.lang.security.audit.tainted-session-from-http-request,"Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."
52d9bfd0121c0af09022c7bc3e4cd9cf,java,7,7,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
52d9bfd0121c0af09022c7bc3e4cd9cf,java,7,16,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
52d9bfd0121c0af09022c7bc3e4cd9cf,java,7,23,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
5324e195d6614aaa6af27c9e33de8c29,java,0,14,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5324e195d6614aaa6af27c9e33de8c29,java,10,53,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5324e195d6614aaa6af27c9e33de8c29,java,2,16,26,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5324e195d6614aaa6af27c9e33de8c29,java,8,43,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5324e195d6614aaa6af27c9e33de8c29,java,9,5,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5823cc205d810762fc1486f20f19bbfb,java,3,11,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
5823cc205d810762fc1486f20f19bbfb,java,9,7,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
5823cc205d810762fc1486f20f19bbfb,java,9,19,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
5823cc205d810762fc1486f20f19bbfb,java,9,31,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
58523cf960e0e8ae5d8a673fc1227969,java,0,13,5,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
58a4ea1087b66f313f257439586e18d4,java,3,27,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5a481d60644e32686e7177b4cc6f0205,java,0,7,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
5aca47b467de285189f8dcd13033974f,java,0,10,23,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5aca47b467de285189f8dcd13033974f,java,1,9,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5aca47b467de285189f8dcd13033974f,java,9,20,9,files.java.rules.lang.security.audit.crypto.ecb-cipher,"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."
5aca47b467de285189f8dcd13033974f,java,9,20,25,files.java.rules.lang.security.audit.crypto.use-of-aes-ecb,"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(""AES/CBC/PKCS7PADDING""). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
5aca47b467de285189f8dcd13033974f,java,9,27,9,files.java.rules.lang.security.audit.crypto.ecb-cipher,"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."
5aca47b467de285189f8dcd13033974f,java,9,27,25,files.java.rules.lang.security.audit.crypto.use-of-aes-ecb,"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(""AES/CBC/PKCS7PADDING""). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
5af7dfa548f420c9a2341d59666e5084,java,0,7,21,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5af7dfa548f420c9a2341d59666e5084,java,1,3,33,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5af7dfa548f420c9a2341d59666e5084,java,2,21,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
5bd7489e0ef107b75af290d6b3c3d09e,java,6,24,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
5d88b53049b7f7b39f5ed4f2bb932987,java,6,16,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
5d88b53049b7f7b39f5ed4f2bb932987,java,6,18,58,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
5d88b53049b7f7b39f5ed4f2bb932987,java,8,16,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
617b50d73eb67c512a6b8ff510ade68e,java,5,18,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
6301a3ea5a73c771697b5a33336a13ee,java,0,6,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,java,1,6,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,java,2,7,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,java,3,6,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,java,4,7,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,java,5,7,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
6301a3ea5a73c771697b5a33336a13ee,java,6,6,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
63f117b0f480fccf2bc596689814faf4,java,0,14,22,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
66697ed0c18248780d802e923e275b4e,java,0,8,58,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
66736891a54d469e037f905ec0bf5f48,java,5,5,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
66736891a54d469e037f905ec0bf5f48,java,7,5,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
67901c78b4898b6e827598dbf01a1628,java,0,9,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
67901c78b4898b6e827598dbf01a1628,java,1,12,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
67cf8c5966a21786f42bae5da91c2f10,java,0,2,17,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
68370cc6ab3891899ce283de8d2ffc72,java,0,36,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
68f41e35073d409944d12b6f15aaf596,java,2,10,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
690f5d08f66ca140947ca2ad3055eb91,java,3,11,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
690f5d08f66ca140947ca2ad3055eb91,java,4,12,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
69bf76c1fa0af0d7821caecdc74e0e42,java,0,15,25,files.java.rules.lang.security.audit.command-injection-process-builder,A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
6b131868895dcd5d4aac33f7bf959707,java,0,8,28,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
6e14947c935cd6c0683df3b356a2f55e,java,2,21,9,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
6ead9e47c888aebba7f267a541273c93,java,15,5,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
6ead9e47c888aebba7f267a541273c93,java,9,6,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
710da7f53436ecb4cad7364950a9a767,java,1,12,9,files.java.rules.lang.security.audit.script-engine-injection,"Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability."
730557624254f5b33ac7bab336962f43,java,2,17,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
730557624254f5b33ac7bab336962f43,java,3,16,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
730557624254f5b33ac7bab336962f43,java,4,17,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
730557624254f5b33ac7bab336962f43,java,5,16,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
745a5fdd50ed6209a77776ecaf59b8fd,java,0,118,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
745a5fdd50ed6209a77776ecaf59b8fd,java,1,135,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
74664080e87465acfb2dca20355eaf1c,java,0,9,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
74664080e87465acfb2dca20355eaf1c,java,1,11,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
74664080e87465acfb2dca20355eaf1c,java,1,13,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
75c081be266865398494d506df9973b6,java,2,2,14,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
75c081be266865398494d506df9973b6,java,3,12,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
75c081be266865398494d506df9973b6,java,5,13,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
770d94a4672b42e4ec737da2e961f13d,java,1,28,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
77f8a5da9ad956f8e69cda1a4853713a,java,2,36,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
78951f2f539ea903b136a36d7616b368,java,5,25,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
78f66b5b0b14c505009d991bf1bd2b53,java,0,24,22,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
79664803ada58854c7925c22d5ce73e8,java,0,48,23,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
7a4ad3bce87682f2c008fd0632bdef04,java,0,16,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
7c77734623da93eb87591d6dbc161b54,java,8,33,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
7cc56dd2e68d8033242ec7a3d0bf5111,java,3,1,23,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
7cfc5e7f05582a66b91909652342b709,java,1,11,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,java,1,22,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,java,1,28,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,java,2,11,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,java,2,21,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,java,3,11,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7cfc5e7f05582a66b91909652342b709,java,3,21,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7dcaa342a190b35552a6bc444666f0e3,java,0,83,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
7dcaa342a190b35552a6bc444666f0e3,java,1,67,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
7e334b9a448147aafe67b16bbcd3c201,java,2,11,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
7eed0566cfb5154d44933f6d6b359bbc,java,0,21,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
7f297a6e4773df62f6c756a6f814e8dc,java,0,3,14,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
7f68bdceeec06b5fdec013840f7681bc,java,0,44,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7f68bdceeec06b5fdec013840f7681bc,java,0,94,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
7fddc6e42cadd4f08ef3c6154b7312fc,java,0,10,25,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
8076a877c45379e03598cc67baa715f1,java,0,8,24,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8076a877c45379e03598cc67baa715f1,java,1,11,24,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8076a877c45379e03598cc67baa715f1,java,2,12,24,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8076a877c45379e03598cc67baa715f1,java,3,13,24,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8136fda6374b8b7211623a16dabf0ac4,java,0,63,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
81cbaaa9b7597759573fa13d4154b28f,java,1,7,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
84c8dbf33ace65b81b2a95aea9e04ff4,java,0,26,13,files.java.rules.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature ""http://apache.org/xml/features/disallow-doctype-decl"" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features ""http://xml.org/sax/features/external-general-entities"" and ""http://xml.org/sax/features/external-parameter-entities"" to false."
8507efebe521d065da6ccf4132c632db,java,0,12,37,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
8507efebe521d065da6ccf4132c632db,java,0,14,17,files.java.rules.lang.security.audit.crypto.ssl.insecure-trust-manager,"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information."
86786e1dd2e1730ae852d0c857fc6f23,java,12,4,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
87845fe3501922f0d23e48932fe54e52,java,0,8,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
87845fe3501922f0d23e48932fe54e52,java,1,7,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
87845fe3501922f0d23e48932fe54e52,java,2,9,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
893abf31777738410a6f9f4ef3445aa1,java,4,17,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
896fc8267dfe5346936c59b5960f826b,java,1,4,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
898a914a7ab92fb28d46216ca359a861,java,1,35,17,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
898a914a7ab92fb28d46216ca359a861,java,1,41,17,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
898a914a7ab92fb28d46216ca359a861,java,1,62,39,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
898a914a7ab92fb28d46216ca359a861,java,1,96,35,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
898a914a7ab92fb28d46216ca359a861,java,1,108,21,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
8b5941847120c7a34d350ff31f25ff34,java,1,30,17,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
8b5941847120c7a34d350ff31f25ff34,java,10,32,17,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
8b5941847120c7a34d350ff31f25ff34,java,4,30,17,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
8bd252a6686e70907a52d46ae9a54fa9,java,0,44,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8cd8e8646e330016804bb6e69cd4f27c,java,6,5,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
8d8750ee30bea85a7bf976aa8c900fb0,java,0,12,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8d8750ee30bea85a7bf976aa8c900fb0,java,0,44,21,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
8d8aa7d16f24dd9eaaa23a527910e09c,java,1,34,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
8e7a50be1ce9121c8ca00609880818ad,java,3,3,21,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8e7a50be1ce9121c8ca00609880818ad,java,6,6,17,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8e7a50be1ce9121c8ca00609880818ad,java,7,7,17,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
8ed8844979ed250793fe1c32067fda67,java,0,13,37,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
8ed8844979ed250793fe1c32067fda67,java,0,20,13,files.java.rules.lang.security.audit.crypto.ssl.insecure-trust-manager,"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information."
8ed8844979ed250793fe1c32067fda67,java,1,19,13,files.java.rules.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated,"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead."
8ed8844979ed250793fe1c32067fda67,java,1,21,13,files.java.rules.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated,"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead."
9042a9055ebe4eb4f2aecbcdfa569777,java,0,39,9,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
908efbc83f60e0b3798e4ab8fb75cc3a,java,0,12,25,files.java.rules.lang.security.audit.crypto.use-of-default-aes,"Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(""AES/CBC/PKCS7PADDING""). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
908efbc83f60e0b3798e4ab8fb75cc3a,java,0,20,25,files.java.rules.lang.security.audit.crypto.use-of-default-aes,"Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(""AES/CBC/PKCS7PADDING""). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
90b2b9ca1f3ce1232bb65d111dee6e21,java,0,1,1,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
924b23d2fdc08865070f54776c6f3113,java,0,30,5,files.java.rules.jax-rs.security.default-resteasy-provider-abuse,"When a Restful webservice endpoint isn't configured with a @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution. Instead, add a @Consumes annotation to the function or class."
924b23d2fdc08865070f54776c6f3113,java,1,31,5,files.java.rules.jax-rs.security.default-resteasy-provider-abuse,"When a Restful webservice endpoint isn't configured with a @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution. Instead, add a @Consumes annotation to the function or class."
924b23d2fdc08865070f54776c6f3113,java,13,6,5,files.java.rules.jax-rs.security.default-resteasy-provider-abuse,"When a Restful webservice endpoint isn't configured with a @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution. Instead, add a @Consumes annotation to the function or class."
924b23d2fdc08865070f54776c6f3113,java,14,6,5,files.java.rules.jax-rs.security.default-resteasy-provider-abuse,"When a Restful webservice endpoint isn't configured with a @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution. Instead, add a @Consumes annotation to the function or class."
934b8bdc83645099fba942ea9ce087bb,java,5,15,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
941707f9921aa9ff949f0d720b58c33f,java,0,13,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
941707f9921aa9ff949f0d720b58c33f,java,1,12,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
94290c979081e07764dededa983e9659,java,5,30,13,files.java.rules.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature ""http://apache.org/xml/features/disallow-doctype-decl"" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features ""http://xml.org/sax/features/external-general-entities"" and ""http://xml.org/sax/features/external-parameter-entities"" to false."
9565b932a29718e9329ae363f769bb77,java,3,33,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
9588a2ce94046a949447607cdf16a43b,java,2,12,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
9588a2ce94046a949447607cdf16a43b,java,3,12,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
95b23e396cd0951cd3bc73605befad5c,java,6,11,34,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
95b23e396cd0951cd3bc73605befad5c,java,9,15,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
973c9a359b555950a7d4cd27c594c9db,java,1,7,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
973c9a359b555950a7d4cd27c594c9db,java,1,14,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
973c9a359b555950a7d4cd27c594c9db,java,1,20,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
973c9a359b555950a7d4cd27c594c9db,java,1,27,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
973c9a359b555950a7d4cd27c594c9db,java,1,33,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
97b66cb863cda194dca0d4fd436d683d,java,4,24,33,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
99ad7378ec4267576aa2592938a01760,java,0,137,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
99ad7378ec4267576aa2592938a01760,java,0,139,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
99ad7378ec4267576aa2592938a01760,java,0,269,17,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
99fdd525f20616ecd0d2ac4b99b49d9d,java,7,12,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
9bf71668e5b7de68cc761da59822d6dd,java,0,1,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
9d89f6a66c2a3c66961d2463a804e639,java,3,96,46,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
9d89f6a66c2a3c66961d2463a804e639,java,8,117,46,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
9ed52d4167dac276bc0b0af265a88467,java,0,36,9,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
9ed52d4167dac276bc0b0af265a88467,java,0,37,9,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
9ed52d4167dac276bc0b0af265a88467,java,0,38,9,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
9ed52d4167dac276bc0b0af265a88467,java,1,33,9,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
9ed52d4167dac276bc0b0af265a88467,java,1,34,9,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
9fef7dfd8a3c0c132ce3bf85597a249c,java,10,9,30,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
9fef7dfd8a3c0c132ce3bf85597a249c,java,6,10,26,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
9fef7dfd8a3c0c132ce3bf85597a249c,java,7,9,30,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
9fef7dfd8a3c0c132ce3bf85597a249c,java,8,9,30,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
9fef7dfd8a3c0c132ce3bf85597a249c,java,9,9,30,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
a26ba3518c4ed960b4ab9200ad0478d2,java,1,18,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a26ba3518c4ed960b4ab9200ad0478d2,java,3,8,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a26ba3518c4ed960b4ab9200ad0478d2,java,4,24,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a26ba3518c4ed960b4ab9200ad0478d2,java,5,10,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a26ba3518c4ed960b4ab9200ad0478d2,java,6,20,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a2be075db5a7fc4b1f22c10c6e3e6b33,java,0,18,23,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
a338831467c3b2bfa5d0f0c404f25625,java,0,16,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
a338831467c3b2bfa5d0f0c404f25625,java,0,44,33,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
a338831467c3b2bfa5d0f0c404f25625,java,0,50,42,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
a338831467c3b2bfa5d0f0c404f25625,java,0,53,42,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
a338831467c3b2bfa5d0f0c404f25625,java,0,56,42,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
a97d42b64be9a5fc3e9ed0cfb0624bca,java,0,30,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
aa29876ac06b2ddbd22210da34e3936c,java,0,6,5,files.java.rules.lang.security.audit.bad-hexa-conversion,"'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(""%02X"", ...)' instead."
aa29876ac06b2ddbd22210da34e3936c,java,0,9,58,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
aae5ff373543d42644480daaaf6d35ee,java,0,17,1,files.java.rules.lang.security.audit.command-injection-process-builder,A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
ab952891b87be5440bddc416dcea7c1f,java,1,1,1,files.java.rules.lang.security.audit.xssrequestwrapper-is-insecure,It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself.
ac08316b54e604412d56ddaf99cceba3,java,0,15,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
ac08316b54e604412d56ddaf99cceba3,java,1,52,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
ae00707a9ba5f225e95db79e9ee55702,java,0,2,1,files.java.rules.servlets.security.cookie-issecure-false,Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.
ae00707a9ba5f225e95db79e9ee55702,java,0,5,1,files.java.rules.lang.security.audit.cookie-missing-httponly,A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
ae00707a9ba5f225e95db79e9ee55702,java,0,5,1,files.java.rules.lang.security.audit.cookie-missing-secure-flag,A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'
ae00707a9ba5f225e95db79e9ee55702,java,1,9,1,files.java.rules.lang.security.audit.cookie-missing-httponly,A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
ae00707a9ba5f225e95db79e9ee55702,java,1,9,1,files.java.rules.lang.security.audit.cookie-missing-secure-flag,A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'
b00c1def6965e3da23eb712b47e9c6af,java,2,12,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b08597dca0d4e965e1c98a73b519e5bd,java,0,8,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b08597dca0d4e965e1c98a73b519e5bd,java,2,10,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b09916f177a4de2c32a0c2b2a5f24294,java,0,21,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b11f8c7364bc74409d74ebe232d6f0a7,java,0,13,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b1db43786526b92ad04eca238020f8ef,java,4,16,9,files.java.rules.lang.security.use-snakeyaml-constructor,"Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments, which is vulnerable to deserialization attacks. Use the one-argument Yaml(...) constructor instead, with SafeConstructor or a custom Constructor as the argument."
b1db43786526b92ad04eca238020f8ef,java,6,14,9,files.java.rules.lang.security.use-snakeyaml-constructor,"Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments, which is vulnerable to deserialization attacks. Use the one-argument Yaml(...) constructor instead, with SafeConstructor or a custom Constructor as the argument."
b1db43786526b92ad04eca238020f8ef,java,8,14,9,files.java.rules.lang.security.use-snakeyaml-constructor,"Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments, which is vulnerable to deserialization attacks. Use the one-argument Yaml(...) constructor instead, with SafeConstructor or a custom Constructor as the argument."
b2a3a8b5f91441afd03df1910a853550,java,1,43,8,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b2a3a8b5f91441afd03df1910a853550,java,2,117,8,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b3a866b6f359d675053b9d75f5aeadea,java,0,15,62,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
b3a866b6f359d675053b9d75f5aeadea,java,1,16,62,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
b4795a02dec5a1d1a7f49d5c2bad907a,java,0,11,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,java,0,40,25,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b4795a02dec5a1d1a7f49d5c2bad907a,java,1,9,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,java,1,34,21,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b4795a02dec5a1d1a7f49d5c2bad907a,java,10,7,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,java,11,7,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,java,12,7,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,java,13,11,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,java,13,41,25,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b4795a02dec5a1d1a7f49d5c2bad907a,java,14,9,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,java,14,38,21,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b4795a02dec5a1d1a7f49d5c2bad907a,java,8,11,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b4795a02dec5a1d1a7f49d5c2bad907a,java,8,41,25,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
b4795a02dec5a1d1a7f49d5c2bad907a,java,9,7,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b48a17e4fa598d17c846bb5b4ac9badc,java,0,8,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b6481e468a61d34200bac900854bbcfe,java,11,28,21,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
b6481e468a61d34200bac900854bbcfe,java,15,22,25,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
b6481e468a61d34200bac900854bbcfe,java,15,30,63,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
b6481e468a61d34200bac900854bbcfe,java,16,24,25,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
b6481e468a61d34200bac900854bbcfe,java,16,31,68,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
b6481e468a61d34200bac900854bbcfe,java,17,26,67,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
b667494ffe08c9d5c948260cecd91e6f,java,1,9,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
b667494ffe08c9d5c948260cecd91e6f,java,3,8,1,files.java.rules.lang.security.audit.xssrequestwrapper-is-insecure,It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself.
b667494ffe08c9d5c948260cecd91e6f,java,6,19,9,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
b7392d11fd4fb15e24e085a10c7757f4,java,3,8,58,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
b7574f32bdf05e84d47b7e437f7cb933,java,0,33,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
b7574f32bdf05e84d47b7e437f7cb933,java,1,15,18,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
ba48cc1d28e938e7be7418ee862326ff,java,1,25,41,files.java.rules.lang.security.audit.command-injection-process-builder,A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.
bbbdb68fd62ecd14d556368b593f22c0,java,6,65,9,files.java.rules.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated,"DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead."
c4ba71c9eb5d239be5dd5dae99c340af,java,1,14,33,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
c61f2699b31063e059225bcf26e97705,java,0,8,30,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
c64a4459af94f036c40cbb83d700dd57,java,2,4,10,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
c79bffd3b0b5a2cebdab9004e573c5ce,java,0,9,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
c79bffd3b0b5a2cebdab9004e573c5ce,java,1,8,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
c7acdfd10c2290a9ada3f50e1a6c642c,java,2,31,9,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
c8658bb4d6d5ff797784acb4436c0e24,java,1,23,26,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
c8658bb4d6d5ff797784acb4436c0e24,java,1,61,34,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
c8658bb4d6d5ff797784acb4436c0e24,java,1,67,34,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
c8cafabd7ac95c79baff84669d3a0f79,java,0,9,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
c8e03d074de50b384dc8ed91a91adecb,java,14,46,28,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
caa2bcabe57588fd16261169149f8087,java,1,31,17,files.java.rules.lang.security.audit.sqli.jdbc-sqli,Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.
ce3693c7480fac2b06b741e13865eaa6,java,2,10,18,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
cedb1ffef03a12b2783d66e5920c1405,java,7,9,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
cf98f1ec65cfd43f3c2df7073cdb1254,java,0,2,17,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
cf98f1ec65cfd43f3c2df7073cdb1254,java,1,2,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
d167e52669107e41914bbf6772b77258,java,3,2,25,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
d167e52669107e41914bbf6772b77258,java,3,9,9,files.java.rules.lang.security.audit.crypto.ssl.insecure-trust-manager,"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information."
d167e52669107e41914bbf6772b77258,java,3,20,9,files.java.rules.lang.security.audit.crypto.ssl.insecure-trust-manager,"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information."
d1a713e824ebe094ab81779775f35fbc,java,0,1,17,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
d1a713e824ebe094ab81779775f35fbc,java,1,1,17,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
d1a713e824ebe094ab81779775f35fbc,java,2,1,17,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
d24ac928749b633363fb7600af76ad84,java,2,8,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
d29d773758e5d36b03e5dbcf99de62b1,java,0,11,23,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
d29d773758e5d36b03e5dbcf99de62b1,java,7,3,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
d34d07c4b5d8b8a73a4fcc9c5ca5d5c8,java,3,40,54,files.java.rules.lang.security.audit.crypto.use-of-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.
d46b9bb913e6eef876d2e39915d15d45,java,1,14,9,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
d46b9bb913e6eef876d2e39915d15d45,java,4,11,17,files.java.rules.lang.security.audit.cookie-missing-httponly,A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
d46b9bb913e6eef876d2e39915d15d45,java,4,11,17,files.java.rules.lang.security.audit.cookie-missing-secure-flag,A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'
d61d58dd03d17b614642bb08f918e223,java,3,79,5,files.java.rules.lang.security.audit.crypto.ssl.insecure-hostname-verifier,"Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with any hostname, which creates the possibility for man-in-the-middle attacks."
db04286ae6886b99c0e5cfea928b3ce7,java,4,1,17,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
dcb5c7904d713c9a3cb81b4dd0af651e,java,3,13,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
dddf90a36eee535201e2b45fc0172159,java,0,25,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
de36c3ab4acc9d780b69964a1b4f85dc,java,1,13,9,files.java.rules.lang.security.audit.xss.no-direct-response-writer,"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
df17ff2689330a7c21227668939c3577,java,32,13,28,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
df17ff2689330a7c21227668939c3577,java,40,9,26,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
df499cc10053b58c551a253830a09db1,java,4,1,17,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
df499cc10053b58c551a253830a09db1,java,5,14,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e31f90d60bd757b99eb634081f88fe15,java,1,17,29,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
e43d382d17d5a0bff9c6d7a65a91109c,java,0,14,31,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
e43d382d17d5a0bff9c6d7a65a91109c,java,1,16,31,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
e5af6348942c98b39acd05f6ce0b6dc3,java,0,18,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e5af6348942c98b39acd05f6ce0b6dc3,java,0,30,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e5af6348942c98b39acd05f6ce0b6dc3,java,1,16,35,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e64093cbb0d0d6d6df51d2d4c9696f14,java,3,58,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e64093cbb0d0d6d6df51d2d4c9696f14,java,4,49,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e71f60cc3e92d5adc12c9081da2c7280,java,3,2,10,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
e72c53e0a097e887f931e0ad961cc3c0,java,1,25,13,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
e72c53e0a097e887f931e0ad961cc3c0,java,3,37,13,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
e7906e8079d04898c33bbe4a7b7cac8b,java,1,3,12,files.java.rules.lang.security.audit.crypto.ssl.insecure-trust-manager,"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information."
e7906e8079d04898c33bbe4a7b7cac8b,java,1,6,12,files.java.rules.lang.security.audit.crypto.ssl.insecure-trust-manager,"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information."
e7906e8079d04898c33bbe4a7b7cac8b,java,1,8,12,files.java.rules.lang.security.audit.crypto.ssl.insecure-trust-manager,"Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information."
e7906e8079d04898c33bbe4a7b7cac8b,java,1,13,28,files.java.rules.lang.security.audit.weak-ssl-context,"An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(""TLSv1.2"") for the best security."
e7bf3e2f2827905118e7e85c90cf1316,java,1,21,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
e7bf3e2f2827905118e7e85c90cf1316,java,3,21,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
eb1fbe19065814c8f4da8857c7751d1d,java,0,2,6,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
eb1fbe19065814c8f4da8857c7751d1d,java,10,10,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
eb873a2c331b6d5937833db6bd93a40d,java,1,26,25,files.java.rules.spring.security.injection.tainted-file-path,"Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
eba0dbd1c2006936205bd3269636fd4f,java,1,8,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
eba0dbd1c2006936205bd3269636fd4f,java,2,8,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
ecb8bbd52f6323c12e17b38853ac15ea,java,0,69,16,files.java.rules.lang.security.httpservlet-path-traversal,"Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path."
f117b9949276a7808d87c2a347fe0e25,java,8,23,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
f15ce9f5f01618f29f3cc45f1fbd86ce,java,2,10,10,files.java.rules.lang.security.audit.crypto.ecb-cipher,"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."
f15ce9f5f01618f29f3cc45f1fbd86ce,java,2,10,26,files.java.rules.lang.security.audit.crypto.use-of-aes-ecb,"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(""AES/CBC/PKCS7PADDING""). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
f15ce9f5f01618f29f3cc45f1fbd86ce,java,4,6,6,files.java.rules.lang.security.audit.crypto.ecb-cipher,"Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY."
f15ce9f5f01618f29f3cc45f1fbd86ce,java,4,6,22,files.java.rules.lang.security.audit.crypto.use-of-aes-ecb,"Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(""AES/CBC/PKCS7PADDING""). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information."
f1956b0fae9d0875ac26146a513c9f7b,java,1,9,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f1956b0fae9d0875ac26146a513c9f7b,java,2,10,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f2fe009c4134926a654d455645a00dda,java,1,16,13,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
f3cfe17f71156220b4c7bf566b040d5d,java,0,15,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
f3f47eb35ecbfdf1a6de0db230e37585,java,1,3,21,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f3f47eb35ecbfdf1a6de0db230e37585,java,2,100,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f3f47eb35ecbfdf1a6de0db230e37585,java,4,13,14,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
f3f47eb35ecbfdf1a6de0db230e37585,java,6,18,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f3f47eb35ecbfdf1a6de0db230e37585,java,7,23,14,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
f47c058f6a49ba493643d81b94011f4f,java,0,20,9,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
f47c058f6a49ba493643d81b94011f4f,java,1,19,9,files.java.rules.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing,"DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory."
f581b74276815559a407f63d9a3fd19a,java,1,15,9,files.java.rules.spring.security.audit.spring-csrf-disabled,CSRF protection is disabled for this configuration. This is a security risk.
f5f8c0d1e131d173ce366c8eb90cb931,java,0,144,22,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f5f8c0d1e131d173ce366c8eb90cb931,java,1,92,28,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f72f6f77ef3f47d74ab941f13618be74,java,0,74,25,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f81c291e5708d17a4ec5f2a33ed00274,java,0,8,41,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f81c291e5708d17a4ec5f2a33ed00274,java,1,14,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
f81c291e5708d17a4ec5f2a33ed00274,java,2,11,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f81c291e5708d17a4ec5f2a33ed00274,java,2,14,13,files.java.rules.lang.security.audit.object-deserialization,"Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object."
f82cb1f0394bfab2864cb4ef02d6f9e7,java,8,30,30,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f82cb1f0394bfab2864cb4ef02d6f9e7,java,8,31,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
f9a9b29093c2f51ee7fc248c9ec3b02b,java,1,4,6,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
fa3591d4e4a303ab4983e489938f9170,java,4,8,37,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
fa8c08d158cdd7113d89a60f87302a32,java,1,43,30,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
fa8c08d158cdd7113d89a60f87302a32,java,2,44,30,files.java.rules.lang.security.audit.crypto.weak-random,"Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead."
faae39d24224eb6c2490342be0a5475b,java,5,4,5,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
faae39d24224eb6c2490342be0a5475b,java,5,16,5,files.java.rules.spring.security.unrestricted-request-mapping,"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST')."
fba215cb212bff7d55765e8c6c689ea6,java,1,20,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
fda7762e2fc2c39c4dad909bdb22dc09,java,7,29,21,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
fda7762e2fc2c39c4dad909bdb22dc09,java,8,47,29,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
fe73289ea2b9c405e2d8e81e4e900b30,java,1,57,42,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
fe73289ea2b9c405e2d8e81e4e900b30,java,1,58,53,files.java.rules.lang.security.audit.crypto.unencrypted-socket,"Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead."
fece5f00a65888573e26b6afa18ceabf,java,2,54,41,files.java.rules.lang.security.audit.unsafe-reflection,"If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner."
00b4b184046fba7406f9911463415a7c,javascript,5,44,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
00b4b184046fba7406f9911463415a7c,javascript,9,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
00faf14d6c186161926f8f3844ef201e,javascript,1,19,34,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
01a0cf70d69c34c30ea2efe2b043d971,javascript,2,8,47,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
02108f71e3455f6a782f9def33ba9542,javascript,5,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
025e52c7f8ec0cd32c6b36b84955a11c,javascript,2,13,13,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
027e15398b040f548419371297ede2f8,javascript,0,7,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
029f34eca4d039c27c3ac48ba47a9f2c,javascript,0,27,10,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
029f34eca4d039c27c3ac48ba47a9f2c,javascript,0,37,5,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
029f34eca4d039c27c3ac48ba47a9f2c,javascript,0,44,2,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.after(...)` is an anti-pattern that can lead to XSS vulnerabilities
031cf7af37f710399f64ae8bbe9692e8,javascript,0,42,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
031cf7af37f710399f64ae8bbe9692e8,javascript,0,42,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `box_body.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
031cf7af37f710399f64ae8bbe9692e8,javascript,1,50,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
031cf7af37f710399f64ae8bbe9692e8,javascript,1,50,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `boxBody.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
03ce456a6f13b846bd0d3af6d289308f,javascript,1,5,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
03ce456a6f13b846bd0d3af6d289308f,javascript,1,5,5,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
03ce456a6f13b846bd0d3af6d289308f,javascript,3,5,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
03ce456a6f13b846bd0d3af6d289308f,javascript,3,5,5,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
0405f428258d814f886de4ad289a64b6,javascript,2,8,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0405f428258d814f886de4ad289a64b6,javascript,2,8,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `output.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
043890b120327ab6327b78199a4ab871,javascript,0,18,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
043890b120327ab6327b78199a4ab871,javascript,0,44,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
043890b120327ab6327b78199a4ab871,javascript,0,50,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
04784a1b06ca71f250ddb1fe62062d81,javascript,3,5,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
04784a1b06ca71f250ddb1fe62062d81,javascript,3,5,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.body.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
04a79e97af826c0624bafeb853d4c9ac,javascript,3,11,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
04a79e97af826c0624bafeb853d4c9ac,javascript,3,11,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `parentDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
04c5d6ab57211775e2eb50e05d1754ca,javascript,0,56,21,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
04c5d6ab57211775e2eb50e05d1754ca,javascript,0,56,21,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tempElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
04c5d6ab57211775e2eb50e05d1754ca,javascript,1,56,21,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
04c5d6ab57211775e2eb50e05d1754ca,javascript,1,56,21,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tempElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
04c5d6ab57211775e2eb50e05d1754ca,javascript,3,59,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
04c5d6ab57211775e2eb50e05d1754ca,javascript,3,59,17,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tempElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
04cb4435d7ab234f0302b86c72ceca79,javascript,0,19,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
04cb4435d7ab234f0302b86c72ceca79,javascript,0,19,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `menu.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
05a75f626c2ba6bbc9e72d9675843287,javascript,5,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
05a75f626c2ba6bbc9e72d9675843287,javascript,53,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
05a75f626c2ba6bbc9e72d9675843287,javascript,59,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
05a75f626c2ba6bbc9e72d9675843287,javascript,63,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
05a75f626c2ba6bbc9e72d9675843287,javascript,8,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
06313a257120937130f5afc3e90c89b2,javascript,0,35,14,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
06313a257120937130f5afc3e90c89b2,javascript,4,7,9,files.javascript.rules.puppeteer.security.audit.puppeteer-goto-injection,If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
06313a257120937130f5afc3e90c89b2,javascript,8,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
06f5f82e476d114dd3abb0c2219a90d1,javascript,0,12,3,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.after(...)` is an anti-pattern that can lead to XSS vulnerabilities
06f5f82e476d114dd3abb0c2219a90d1,javascript,1,9,3,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
0754597eb578db264188f79b0d4c519d,javascript,1,18,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0754597eb578db264188f79b0d4c519d,javascript,1,18,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `productElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0754597eb578db264188f79b0d4c519d,javascript,1,18,32,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
0754597eb578db264188f79b0d4c519d,javascript,1,52,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0754597eb578db264188f79b0d4c519d,javascript,1,52,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cartItemElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0754597eb578db264188f79b0d4c519d,javascript,1,52,33,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
0754597eb578db264188f79b0d4c519d,javascript,3,14,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0754597eb578db264188f79b0d4c519d,javascript,3,14,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `output.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
077deefb20dfab5239785289ccd064e8,javascript,4,7,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
077deefb20dfab5239785289ccd064e8,javascript,4,7,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `savedDataDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
07cd08a1f667bfecc3144eefa87cb5b0,javascript,1,24,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
07cd08a1f667bfecc3144eefa87cb5b0,javascript,1,24,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `countryDetails.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
08617d546205e682e15fec7c5aa592c6,javascript,1,48,65,files.javascript.rules.lang.security.audit.unknown-value-with-script-tag,"Cannot determine what 'url' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure 'url' is not externally controlled, or sanitize this data."
08abbc4b1c5ad8341641cc03ab93c298,javascript,0,22,31,files.javascript.rules.lang.security.audit.detect-redos,"Detected the use of a regular expression `[\w-]+(?:\.[\w-]+)*@[A-Za-z0-9]+(?:\.[A-Za-z]{2,})+` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities."
092c323f0bdc82abdda424bdb901ab38,javascript,0,14,9,files.javascript.rules.lang.security.audit.prototype-pollution.prototype-pollution-loop,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
092c323f0bdc82abdda424bdb901ab38,javascript,0,19,9,files.javascript.rules.lang.security.audit.prototype-pollution.prototype-pollution-loop,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
09bb3de07eb0e196121c6da4254695c0,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
09dc91375b2b9e77ddff406eede3232f,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
09ff2359b17ffd04152a8f09978aa0e0,javascript,12,7,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
0a27fe1aca94caf8dcde825ea48ce65f,javascript,17,12,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0a27fe1aca94caf8dcde825ea48ce65f,javascript,17,12,17,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tr.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0a27fe1aca94caf8dcde825ea48ce65f,javascript,17,12,32,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
0a7b7b6c16a5255ca4ca7d8719336256,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
0a936386e2ef4436e93aa076c6486fc7,javascript,1,7,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0a936386e2ef4436e93aa076c6486fc7,javascript,1,7,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0a936386e2ef4436e93aa076c6486fc7,javascript,2,41,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0a936386e2ef4436e93aa076c6486fc7,javascript,2,41,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0a936386e2ef4436e93aa076c6486fc7,javascript,3,42,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0a936386e2ef4436e93aa076c6486fc7,javascript,3,42,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0a936386e2ef4436e93aa076c6486fc7,javascript,4,42,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0a936386e2ef4436e93aa076c6486fc7,javascript,4,42,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0a936386e2ef4436e93aa076c6486fc7,javascript,6,49,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0a936386e2ef4436e93aa076c6486fc7,javascript,6,49,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0abafdb6ffee6d148c7c8a84f4147b71,javascript,2,12,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0abafdb6ffee6d148c7c8a84f4147b71,javascript,2,12,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `block.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0abafdb6ffee6d148c7c8a84f4147b71,javascript,2,12,27,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
0afb5bcab7c087f422a43ad7a624dd88,javascript,3,8,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0afb5bcab7c087f422a43ad7a624dd88,javascript,3,8,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `box.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0afb5bcab7c087f422a43ad7a624dd88,javascript,3,8,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
0b3817fb44f95d8be5e52b532b63018f,javascript,0,45,13,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
0babbff5ac35c3f8dbe51a67115aa48b,javascript,4,18,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
0babbff5ac35c3f8dbe51a67115aa48b,javascript,8,6,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
0d4aab6fe2bb3e38fdb4b3eecaa4764d,javascript,3,4,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
0d4aab6fe2bb3e38fdb4b3eecaa4764d,javascript,3,4,48,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
0d4aab6fe2bb3e38fdb4b3eecaa4764d,javascript,7,29,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
0d95d78a5dc00cca5b94704edc41b9d5,javascript,1,20,3,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
0d95d78a5dc00cca5b94704edc41b9d5,javascript,1,21,3,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
0d95d78a5dc00cca5b94704edc41b9d5,javascript,1,22,3,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
0d95d78a5dc00cca5b94704edc41b9d5,javascript,1,26,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
0d95d78a5dc00cca5b94704edc41b9d5,javascript,1,27,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
0d95d78a5dc00cca5b94704edc41b9d5,javascript,1,28,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
0da32107d417004c2c6f69f5562679a1,javascript,1,3,29,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
0dae168cdcf3bddb941ba543977d9b65,javascript,2,34,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0dae168cdcf3bddb941ba543977d9b65,javascript,2,34,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cartItems.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0dae168cdcf3bddb941ba543977d9b65,javascript,2,50,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0dae168cdcf3bddb941ba543977d9b65,javascript,2,50,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `productsGrid.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
0dae168cdcf3bddb941ba543977d9b65,javascript,2,52,26,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
0e3b3a2cbd0b70610b010c7b4a3a253a,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
0e98ca0d856c695ac00ffe89c207f1aa,javascript,0,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
0ec6538f12ea9d8ae8561e68317d6004,javascript,0,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
0f5e0cf4e2ce23fa591785d757749c62,javascript,0,7,14,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
0f5e0cf4e2ce23fa591785d757749c62,javascript,4,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
0f7431549ab2973a614ff16bba19c384,javascript,0,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
0f7431549ab2973a614ff16bba19c384,javascript,0,38,53,files.javascript.rules.express.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
0f7431549ab2973a614ff16bba19c384,javascript,0,51,74,files.javascript.rules.express.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
0f7431549ab2973a614ff16bba19c384,javascript,1,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
0f7431549ab2973a614ff16bba19c384,javascript,2,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
0fa3a3b1a90a58ccfb20531616785081,javascript,2,11,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0fa3a3b1a90a58ccfb20531616785081,javascript,2,11,9,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""betting"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
0ffd35472c231ee5e2585db4d863eb25,javascript,1,11,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
0ffd35472c231ee5e2585db4d863eb25,javascript,1,11,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `textElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
100c17949d567de96bafd3105fac291c,javascript,5,8,3,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
1068497335960c5cf43eeefb691416fc,javascript,2,18,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1068497335960c5cf43eeefb691416fc,javascript,2,18,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""uptime"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
10d2ac329f96b7a6140a332ee220078e,javascript,0,12,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
10d2ac329f96b7a6140a332ee220078e,javascript,0,13,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
10d2ac329f96b7a6140a332ee220078e,javascript,0,15,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
110cc72c7f530c5755e5bfe6f6bff9c9,javascript,10,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
110cc72c7f530c5755e5bfe6f6bff9c9,javascript,5,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
110cc72c7f530c5755e5bfe6f6bff9c9,javascript,5,17,48,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
1146ad36026378628c0590e909858509,javascript,2,18,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1146ad36026378628c0590e909858509,javascript,2,18,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `ayahElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
119e8cdbaefa9fcb665612b75f11f4da,javascript,0,9,20,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
1272d1851bdf839255126674ceb2c1e9,javascript,0,9,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1273b6c3a1667df6a0c9cb363404227c,javascript,9,1,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
12d90b3e27958c634778b039aa7422ca,javascript,0,30,21,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
12fdb03453117859b8189b5db7ddbcd3,javascript,0,12,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
12fdb03453117859b8189b5db7ddbcd3,javascript,0,12,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `content.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
13066b01a19e50527dcca3bf4a1dbbe1,javascript,2,25,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
13066b01a19e50527dcca3bf4a1dbbe1,javascript,2,25,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""question"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
13066b01a19e50527dcca3bf4a1dbbe1,javascript,2,70,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
13066b01a19e50527dcca3bf4a1dbbe1,javascript,2,70,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""result"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
13a894cf5860a9832ff4c3dc06f2b44a,javascript,1,7,7,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
13a894cf5860a9832ff4c3dc06f2b44a,javascript,1,18,1,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
13bb90c0f2c8ef2dcb3bdadbc9f220c9,javascript,2,15,23,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
13bb90c0f2c8ef2dcb3bdadbc9f220c9,javascript,2,20,13,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
13bb90c0f2c8ef2dcb3bdadbc9f220c9,javascript,2,28,23,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
13bb90c0f2c8ef2dcb3bdadbc9f220c9,javascript,2,35,13,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
13bb90c0f2c8ef2dcb3bdadbc9f220c9,javascript,2,53,23,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
13bb90c0f2c8ef2dcb3bdadbc9f220c9,javascript,2,60,13,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
13d4a279ce7252ca4370a505d43fb89e,javascript,0,3,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
13d4a279ce7252ca4370a505d43fb89e,javascript,0,3,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `jakajaElementit[1].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
13d4a279ce7252ca4370a505d43fb89e,javascript,0,10,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
13d4a279ce7252ca4370a505d43fb89e,javascript,0,10,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `jakajaElementit[showCardIndex].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
13e308c6996ed275981bde4ac675436c,javascript,0,10,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
13e308c6996ed275981bde4ac675436c,javascript,0,11,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
13e308c6996ed275981bde4ac675436c,javascript,0,12,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
13e308c6996ed275981bde4ac675436c,javascript,0,13,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
140548f3b59f0b7ec98694552390f31c,javascript,2,51,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
140548f3b59f0b7ec98694552390f31c,javascript,2,51,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `emojiContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
142866779587653bdf30a35397ef7dd6,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
14a77881d6ed028048d1ad641b9a9536,javascript,2,21,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
14a77881d6ed028048d1ad641b9a9536,javascript,2,22,28,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
14a77881d6ed028048d1ad641b9a9536,javascript,2,27,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
14a77881d6ed028048d1ad641b9a9536,javascript,2,27,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `papersContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
14a77881d6ed028048d1ad641b9a9536,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
14f5d75a45eef9ec6133a35021a0b642,javascript,4,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1565851bf219e60779d63935c238e300,javascript,0,9,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1565851bf219e60779d63935c238e300,javascript,0,9,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1624f8ed1b75b29f9208201505ae1494,javascript,11,17,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1624f8ed1b75b29f9208201505ae1494,javascript,11,17,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `div.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1624f8ed1b75b29f9208201505ae1494,javascript,11,17,25,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
1624f8ed1b75b29f9208201505ae1494,javascript,16,8,37,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
1624f8ed1b75b29f9208201505ae1494,javascript,16,11,37,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
1624f8ed1b75b29f9208201505ae1494,javascript,16,14,37,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
1624f8ed1b75b29f9208201505ae1494,javascript,16,23,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1624f8ed1b75b29f9208201505ae1494,javascript,16,23,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `div.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
16560fd3786ee183df3feeb163a101da,javascript,1,15,17,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
16560fd3786ee183df3feeb163a101da,javascript,1,15,17,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
16560fd3786ee183df3feeb163a101da,javascript,1,31,17,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
16560fd3786ee183df3feeb163a101da,javascript,1,31,17,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
16913aaca26602ba328bb59a4105a623,javascript,1,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
16f39b58e0216088fb1e6f76405c7dab,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
178491575c69f353a182f05dc3561317,javascript,10,11,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
178491575c69f353a182f05dc3561317,javascript,10,11,17,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `row.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
178491575c69f353a182f05dc3561317,javascript,10,11,33,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
178491575c69f353a182f05dc3561317,javascript,2,11,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
178491575c69f353a182f05dc3561317,javascript,2,11,17,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `row.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
178491575c69f353a182f05dc3561317,javascript,2,11,33,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
178491575c69f353a182f05dc3561317,javascript,6,11,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
178491575c69f353a182f05dc3561317,javascript,6,11,17,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `row.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
178491575c69f353a182f05dc3561317,javascript,6,11,33,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
178849643cc75599aad6f249797577ed,javascript,0,34,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
178849643cc75599aad6f249797577ed,javascript,0,58,8,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
179910ee682f93e39cdfc45f45d86878,javascript,0,28,25,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
179910ee682f93e39cdfc45f45d86878,javascript,0,30,25,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
179910ee682f93e39cdfc45f45d86878,javascript,0,42,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
17bfa45c4bc2ca47aa9b965efaff4df2,javascript,0,31,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
17bfa45c4bc2ca47aa9b965efaff4df2,javascript,0,31,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `summaryOutput.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
17bfa45c4bc2ca47aa9b965efaff4df2,javascript,0,31,35,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
17bfa45c4bc2ca47aa9b965efaff4df2,javascript,0,43,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
17bfa45c4bc2ca47aa9b965efaff4df2,javascript,0,43,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `summaryOutput.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
17bfa45c4bc2ca47aa9b965efaff4df2,javascript,0,43,35,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
183a1d24216627f4add802652f4b75d8,javascript,3,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
187cb5cde3d0663fe09ea8187aa4e22f,javascript,1,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
187cb5cde3d0663fe09ea8187aa4e22f,javascript,3,31,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
187cb5cde3d0663fe09ea8187aa4e22f,javascript,3,31,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `outputDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
187cb5cde3d0663fe09ea8187aa4e22f,javascript,3,31,26,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
187cb5cde3d0663fe09ea8187aa4e22f,javascript,3,38,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
187cb5cde3d0663fe09ea8187aa4e22f,javascript,3,38,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `feedbackDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
187cb5cde3d0663fe09ea8187aa4e22f,javascript,3,38,27,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
188acc1237cf88199cd1999cefa6765f,javascript,0,16,55,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
18c6046f7529164829278cc4fceb8d7d,javascript,7,30,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
1937e30dbc19de16c009e89d299b7094,javascript,1,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1937e30dbc19de16c009e89d299b7094,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
19538c4f71d802c2e98d6f205f54ffeb,javascript,2,9,9,files.javascript.rules.puppeteer.security.audit.puppeteer-goto-injection,If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
199a5c6fc19c8d14648e7845554ec9e4,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1a2c274fad9d085139f67f5d57a867f3,javascript,5,1,25,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
1a9156d6d9be86666331a8b4e239dd7a,javascript,2,12,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1a9156d6d9be86666331a8b4e239dd7a,javascript,2,12,17,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""resultado"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
1a9156d6d9be86666331a8b4e239dd7a,javascript,2,15,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1a9156d6d9be86666331a8b4e239dd7a,javascript,2,15,17,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""resultado"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
1a9156d6d9be86666331a8b4e239dd7a,javascript,2,19,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1a9156d6d9be86666331a8b4e239dd7a,javascript,2,19,9,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""resultado"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
1a926f029cbe63592a031bf49c528e7f,javascript,2,1,27,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
1a926f029cbe63592a031bf49c528e7f,javascript,3,1,27,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
1ab0d3eae04be408e30e6d30b506a86d,javascript,0,11,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1aeec7acd934e2189cac123bc5f8cfda,javascript,2,18,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1aeec7acd934e2189cac123bc5f8cfda,javascript,2,18,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `label.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1b369ee12bb42b49f184572fa695978b,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1bfb408026af1790cc0be81dab13e47f,javascript,2,9,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1bfb408026af1790cc0be81dab13e47f,javascript,2,9,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `hoverText.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1bfb408026af1790cc0be81dab13e47f,javascript,3,9,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1bfb408026af1790cc0be81dab13e47f,javascript,3,9,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `hoverText.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1bfb408026af1790cc0be81dab13e47f,javascript,4,8,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1bfb408026af1790cc0be81dab13e47f,javascript,4,8,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `hoverText.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1bfb408026af1790cc0be81dab13e47f,javascript,4,12,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1bfb408026af1790cc0be81dab13e47f,javascript,4,12,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `hoverText.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1bfb408026af1790cc0be81dab13e47f,javascript,4,16,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1bfb408026af1790cc0be81dab13e47f,javascript,4,16,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `hoverText.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1bfb408026af1790cc0be81dab13e47f,javascript,5,16,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1bfb408026af1790cc0be81dab13e47f,javascript,5,16,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `myDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1c09ddca1946bc91f269f2aa47b91e46,javascript,1,12,17,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `s` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
1c09ddca1946bc91f269f2aa47b91e46,javascript,10,12,17,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `s` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
1c09ddca1946bc91f269f2aa47b91e46,javascript,5,12,17,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `s` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
1c243e6f1781ed2c0cf9dfe308354503,javascript,2,7,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1c243e6f1781ed2c0cf9dfe308354503,javascript,2,7,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('output').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1c46fa394b43e89ef9f6ea967df6ead7,javascript,2,30,2,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1c46fa394b43e89ef9f6ea967df6ead7,javascript,2,30,2,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('result').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1d67410406dfe573c54031e4882896cc,javascript,1,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1d7f780ad794c1029f579412efc79e15,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1d7f780ad794c1029f579412efc79e15,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1d7f780ad794c1029f579412efc79e15,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1da25018767b325d0842abaa23da3680,javascript,0,3,27,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
1da25018767b325d0842abaa23da3680,javascript,1,3,27,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
1dad6a761f1a746c62cd9ee82e5b5d68,javascript,0,19,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1dad6a761f1a746c62cd9ee82e5b5d68,javascript,0,19,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quizDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1dad6a761f1a746c62cd9ee82e5b5d68,javascript,0,19,29,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
1dad6a761f1a746c62cd9ee82e5b5d68,javascript,0,21,62,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
1e307725dbab6006ef2929319e683695,javascript,0,16,13,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1e90745645042e4da0877569af7de746,javascript,0,4,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1e90745645042e4da0877569af7de746,javascript,0,4,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `result.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1e90745645042e4da0877569af7de746,javascript,4,5,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
1e90745645042e4da0877569af7de746,javascript,4,5,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `result.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
1f1ed7b9fff3289d192e1be494670419,javascript,3,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1fd87f593d5ce2c5bf3d0c2c41786969,javascript,3,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1ffada29fc79ebd5aedd192eb6746e26,javascript,7,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
1ffada29fc79ebd5aedd192eb6746e26,javascript,8,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
20da8d26f10b2ff3b28377cb657d7ec4,javascript,10,4,10,files.javascript.rules.lang.security.audit.detect-redos,"Detected the use of a regular expression `^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities."
2104bb220fadcb5ddb575fe242aa3270,javascript,4,5,10,files.javascript.rules.lang.security.detect-child-process,"Detected calls to child_process from a function argument `inputFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. "
2104bb220fadcb5ddb575fe242aa3270,javascript,4,5,10,files.javascript.rules.lang.security.detect-child-process,"Detected calls to child_process from a function argument `outputFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. "
2104bb220fadcb5ddb575fe242aa3270,javascript,6,8,49,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `inputFile` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
2104bb220fadcb5ddb575fe242aa3270,javascript,6,20,24,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `outputFile` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
218c20facf3eff4807dff8b1aad6e0b0,javascript,1,1,25,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
225d296c773894955e73522e56709aa5,javascript,10,11,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
225d296c773894955e73522e56709aa5,javascript,6,9,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
22d05189f63f1052ff3763b453f9ca52,javascript,0,3,13,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
2353c3e1144c65c0798c74d8cb643029,javascript,3,9,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
2353c3e1144c65c0798c74d8cb643029,javascript,3,9,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""output"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
2353c3e1144c65c0798c74d8cb643029,javascript,6,19,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
2353c3e1144c65c0798c74d8cb643029,javascript,6,19,9,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""output"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
2353c3e1144c65c0798c74d8cb643029,javascript,7,16,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
2353c3e1144c65c0798c74d8cb643029,javascript,7,16,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""output"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
239488a9d43fd4e977e4285277c8907b,javascript,1,5,11,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
23e4a7489a3feed214a13f547c5ed515,javascript,1,18,50,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
2418fec2961c15da78d2b62920789005,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
241b0a8f1851714a0ff438fd1416dae4,javascript,0,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
2443d20f454e186131d41dc7b91dae00,javascript,1,77,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
2443d20f454e186131d41dc7b91dae00,javascript,1,77,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatLog.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
2443d20f454e186131d41dc7b91dae00,javascript,1,77,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
2443d20f454e186131d41dc7b91dae00,javascript,1,86,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
2443d20f454e186131d41dc7b91dae00,javascript,1,86,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatLog.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
2443d20f454e186131d41dc7b91dae00,javascript,1,86,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
2490eac58feba169788aa43212efa4fb,javascript,0,28,34,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
24922716856f4f59f09c8c18e1cfd3fb,javascript,0,1,31,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
24a423b2824b4001f214690168d7c7fe,javascript,7,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
24ba0f9c4bfc7f8de54380474e20b9ab,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
24ba0f9c4bfc7f8de54380474e20b9ab,javascript,2,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
24ba0f9c4bfc7f8de54380474e20b9ab,javascript,2,19,18,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
24ba0f9c4bfc7f8de54380474e20b9ab,javascript,2,20,16,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
24ba0f9c4bfc7f8de54380474e20b9ab,javascript,2,21,20,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
251769bd2488b0a4d84eca8c010b1645,javascript,3,4,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
2517be1324429ae3ca526b71801eed31,javascript,0,10,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
252121a1caf127abf25289bd9f42f7e6,javascript,8,5,4,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
253a5b8f2638dd845fd25670c133db67,javascript,7,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
2641924ae0397e8950fbe4892bf4f76e,javascript,0,5,10,files.javascript.rules.lang.security.detect-child-process,"Detected calls to child_process from a function argument `filePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. "
266e751daf1dc13dface8ed8abcc6a3a,javascript,0,46,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
266e751daf1dc13dface8ed8abcc6a3a,javascript,0,46,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quizScore.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
266e751daf1dc13dface8ed8abcc6a3a,javascript,5,22,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
266e751daf1dc13dface8ed8abcc6a3a,javascript,5,22,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quizScore.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
267ecd13aacbb9a0ad22b7fd8f1e9a1c,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
26d7bf8442e1d8a5c32e852ac3f5ff3c,javascript,1,5,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
26d7bf8442e1d8a5c32e852ac3f5ff3c,javascript,1,5,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('output').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
26d7bf8442e1d8a5c32e852ac3f5ff3c,javascript,3,5,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
26d7bf8442e1d8a5c32e852ac3f5ff3c,javascript,3,5,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('output').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
27a72360202bf86c6a794410d1b23299,javascript,0,18,71,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
28b80b1fee1abd118f9cef4ea1352d7d,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
28ba9c22312d1caf30c7e74b21eaf589,javascript,2,17,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
28ba9c22312d1caf30c7e74b21eaf589,javascript,2,17,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `block.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
28c2f2c0aa32f6dcfefb2947f7ed7bca,javascript,3,8,13,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
28c2f2c0aa32f6dcfefb2947f7ed7bca,javascript,4,10,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
28c2f2c0aa32f6dcfefb2947f7ed7bca,javascript,4,10,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tempDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,2,22,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,2,22,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""countdown"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,2,31,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,2,31,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""countdown"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,24,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,24,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""days"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,25,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,25,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""hours"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,26,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,26,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""minutes"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,27,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,27,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""seconds"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,32,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,32,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""days"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,33,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,33,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""hours"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,34,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,34,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""minutes"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,35,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29192411e9d6fb5cffcc8c13b00aa0f6,javascript,5,35,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""seconds"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29ceb942552af1f9a9a37c14b6ea3032,javascript,2,48,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29ceb942552af1f9a9a37c14b6ea3032,javascript,2,48,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `entryEl.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
29dfac2f03cc03b0035d9dd9b784a7d1,javascript,0,11,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29dfac2f03cc03b0035d9dd9b784a7d1,javascript,0,11,13,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""results"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29dfac2f03cc03b0035d9dd9b784a7d1,javascript,0,18,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29dfac2f03cc03b0035d9dd9b784a7d1,javascript,0,18,17,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""betting"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29dfac2f03cc03b0035d9dd9b784a7d1,javascript,0,20,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29dfac2f03cc03b0035d9dd9b784a7d1,javascript,0,20,17,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""results"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
29dfac2f03cc03b0035d9dd9b784a7d1,javascript,0,23,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
29dfac2f03cc03b0035d9dd9b784a7d1,javascript,0,23,17,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""results"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
2aaa527a03b30aaf1df82382ad01ada1,javascript,2,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
2adb3f4b94abe7b35c557af68c7fa69f,javascript,2,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
2b013050fe2defcc25ca0fbbc6a923e0,javascript,1,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
2b133afb81be0f5d3d177b69158d950f,javascript,2,66,31,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
2b133afb81be0f5d3d177b69158d950f,javascript,2,72,30,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
2b133afb81be0f5d3d177b69158d950f,javascript,2,79,31,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
2b133afb81be0f5d3d177b69158d950f,javascript,2,124,35,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
2b133afb81be0f5d3d177b69158d950f,javascript,2,129,47,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
2b133afb81be0f5d3d177b69158d950f,javascript,2,131,47,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
2b133afb81be0f5d3d177b69158d950f,javascript,2,133,47,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
2b133afb81be0f5d3d177b69158d950f,javascript,2,135,47,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
2b133afb81be0f5d3d177b69158d950f,javascript,2,167,31,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
2b133afb81be0f5d3d177b69158d950f,javascript,2,167,31,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
2b2a4ac7de8b242911535b18789bf4aa,javascript,4,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
2b2fb9f41b1d44d726ca3eec5fb89c58,javascript,1,22,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
2b2fb9f41b1d44d726ca3eec5fb89c58,javascript,1,22,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `resultado.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
2bf2c651275776ba766aacd77b71c6d0,javascript,1,3,1,files.javascript.rules.lang.security.audit.detect-non-literal-require,"Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files."
2bf2c651275776ba766aacd77b71c6d0,javascript,1,16,17,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
2bf2c651275776ba766aacd77b71c6d0,javascript,3,3,1,files.javascript.rules.lang.security.audit.detect-non-literal-require,"Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files."
2bf2c651275776ba766aacd77b71c6d0,javascript,3,16,17,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
2d552563aec2eb4802bda6656275d1c9,javascript,14,10,41,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
2dd3ae1b1a8cb027b51f30edb16b9240,javascript,1,13,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
2dd3ae1b1a8cb027b51f30edb16b9240,javascript,1,13,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""processDetails"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
2ef99be73e33c72b72a3ed1226627a8d,javascript,3,30,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
2f7e85093c7e361806d5d8d7f96b157c,javascript,0,22,11,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
2f7e85093c7e361806d5d8d7f96b157c,javascript,0,22,11,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `captionContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
2f7e85093c7e361806d5d8d7f96b157c,javascript,0,22,40,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
2ff3c782d5132e2480a8d859871c65aa,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
300411d7daca11c6eae9b5a4d1f8ce55,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
300d2d99cf3c97e58c60cf1edad5862b,javascript,2,14,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
300d2d99cf3c97e58c60cf1edad5862b,javascript,2,14,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `productsContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
300d2d99cf3c97e58c60cf1edad5862b,javascript,2,14,36,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
300d2d99cf3c97e58c60cf1edad5862b,javascript,2,28,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
300d2d99cf3c97e58c60cf1edad5862b,javascript,2,28,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cartCount.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
318c124a7deda66902cc0d0e1591a594,javascript,2,3,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
318c124a7deda66902cc0d0e1591a594,javascript,2,3,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('results').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
318c124a7deda66902cc0d0e1591a594,javascript,2,3,52,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
319bfeab8013e46d543f8be8d4774f83,javascript,3,21,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
319bfeab8013e46d543f8be8d4774f83,javascript,3,21,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `block.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
319bfeab8013e46d543f8be8d4774f83,javascript,3,21,27,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
31b8b4d7310e396968ff956124f77ad7,javascript,2,13,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
31b8b4d7310e396968ff956124f77ad7,javascript,2,13,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `text.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
32b243868e87a4ca6f6d185416a0924f,javascript,1,16,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
32b243868e87a4ca6f6d185416a0924f,javascript,1,16,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tripSummary.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
32b243868e87a4ca6f6d185416a0924f,javascript,1,16,29,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
332964febcac807894825e27acfb4ccd,javascript,1,2,18,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
3371467ede987d6411939d2e5d761433,javascript,1,28,18,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
337c7ae32c1e9df1a951b3fae4d67f68,javascript,0,80,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
337c7ae32c1e9df1a951b3fae4d67f68,javascript,0,80,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `korttiElementit.pelaaja[i].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
337c7ae32c1e9df1a951b3fae4d67f68,javascript,0,85,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
337c7ae32c1e9df1a951b3fae4d67f68,javascript,0,85,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `korttiElementit.jakaja[i].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
337c7ae32c1e9df1a951b3fae4d67f68,javascript,0,87,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
337c7ae32c1e9df1a951b3fae4d67f68,javascript,0,87,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `korttiElementit.jakaja[i].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
337c7ae32c1e9df1a951b3fae4d67f68,javascript,0,87,45,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
337c7ae32c1e9df1a951b3fae4d67f68,javascript,0,97,10,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
3388ba79989831a20b0f1ad324aa5390,javascript,0,16,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
3388ba79989831a20b0f1ad324aa5390,javascript,1,17,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
3388ba79989831a20b0f1ad324aa5390,javascript,10,19,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
3388ba79989831a20b0f1ad324aa5390,javascript,9,12,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
3433efd0be5cf9750a0ed57e1c7dfac7,javascript,1,65,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3433efd0be5cf9750a0ed57e1c7dfac7,javascript,1,65,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `system_operation.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3433efd0be5cf9750a0ed57e1c7dfac7,javascript,1,70,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3433efd0be5cf9750a0ed57e1c7dfac7,javascript,1,70,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `system_operation.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3433efd0be5cf9750a0ed57e1c7dfac7,javascript,2,46,5,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
344d5ff616c8ae87f8dbecd4ac730ebf,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
344d5ff616c8ae87f8dbecd4ac730ebf,javascript,0,6,9,files.javascript.rules.express.security.audit.express-cookie-session-default-name,Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.
344d5ff616c8ae87f8dbecd4ac730ebf,javascript,0,6,9,files.javascript.rules.express.security.audit.express-cookie-session-no-domain,"Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."
344d5ff616c8ae87f8dbecd4ac730ebf,javascript,0,6,9,files.javascript.rules.express.security.audit.express-cookie-session-no-expires,Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.
344d5ff616c8ae87f8dbecd4ac730ebf,javascript,0,6,9,files.javascript.rules.express.security.audit.express-cookie-session-no-httponly,"Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks."
344d5ff616c8ae87f8dbecd4ac730ebf,javascript,0,6,9,files.javascript.rules.express.security.audit.express-cookie-session-no-path,"Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."
344d5ff616c8ae87f8dbecd4ac730ebf,javascript,0,6,9,files.javascript.rules.express.security.audit.express-cookie-session-no-secure,Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.
344d5ff616c8ae87f8dbecd4ac730ebf,javascript,0,7,3,files.javascript.rules.express.security.audit.express-session-hardcoded-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
34674e729c1747f30d8e208847a91ff8,javascript,0,26,11,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
34674e729c1747f30d8e208847a91ff8,javascript,0,35,11,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
34674e729c1747f30d8e208847a91ff8,javascript,0,43,3,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.after(...)` is an anti-pattern that can lead to XSS vulnerabilities
34dc1de123f77df74edb85717ace8501,javascript,3,60,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
34dc1de123f77df74edb85717ace8501,javascript,3,60,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `scoreDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
34dc1de123f77df74edb85717ace8501,javascript,3,70,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
34dc1de123f77df74edb85717ace8501,javascript,3,70,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `healthDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
34dc1de123f77df74edb85717ace8501,javascript,3,79,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
34dc1de123f77df74edb85717ace8501,javascript,3,79,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `finalScoreDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
353d9b5108ae2fa9debd7f5ca534fb1f,javascript,0,105,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
353d9b5108ae2fa9debd7f5ca534fb1f,javascript,0,105,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `label.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
357291bc19ad191caeb79a5cded9da81,javascript,3,4,15,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
3579f7ec5293c82c4cb65e5910acd1d0,javascript,3,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
3579f7ec5293c82c4cb65e5910acd1d0,javascript,4,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
35bc26a20b2470249c05888eee65f54c,javascript,4,6,41,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
36339c7bf1cc36ae7b52d4b8a7f5d762,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
3716b279be67cbcecb32edf7235db7dc,javascript,1,10,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3716b279be67cbcecb32edf7235db7dc,javascript,1,10,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `moneyDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3716b279be67cbcecb32edf7235db7dc,javascript,1,15,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3716b279be67cbcecb32edf7235db7dc,javascript,1,15,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `moneyDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3716b279be67cbcecb32edf7235db7dc,javascript,2,7,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3716b279be67cbcecb32edf7235db7dc,javascript,2,7,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `moneyDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3716b279be67cbcecb32edf7235db7dc,javascript,2,7,31,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
3716b279be67cbcecb32edf7235db7dc,javascript,2,11,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3716b279be67cbcecb32edf7235db7dc,javascript,2,11,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `moneyDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3716b279be67cbcecb32edf7235db7dc,javascript,2,11,61,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
371aca1f52bfb8a36efa621a468291d9,javascript,0,3,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
371aca1f52bfb8a36efa621a468291d9,javascript,0,3,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `txt.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
372b9983ac113c64f43bddf78b3ea2e1,javascript,5,45,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
372b9983ac113c64f43bddf78b3ea2e1,javascript,5,55,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
372b9983ac113c64f43bddf78b3ea2e1,javascript,8,41,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
372b9983ac113c64f43bddf78b3ea2e1,javascript,8,51,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
378fbcce3ee1ae1ed6703da70ff6b0e3,javascript,2,24,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
378fbcce3ee1ae1ed6703da70ff6b0e3,javascript,2,24,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tooltip.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
378fbcce3ee1ae1ed6703da70ff6b0e3,javascript,5,14,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
378fbcce3ee1ae1ed6703da70ff6b0e3,javascript,5,14,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `elementInfo.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
37dbb83de557654a4856e35eafd50e15,javascript,0,18,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
37dbb83de557654a4856e35eafd50e15,javascript,0,41,25,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
37dbb83de557654a4856e35eafd50e15,javascript,0,43,25,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
388847ea9b6c7fa121d79013a59c6552,javascript,4,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
388847ea9b6c7fa121d79013a59c6552,javascript,4,18,31,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
38c7cf8c405bb845eec05f7c2f585ee2,javascript,4,13,13,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
391d38896ff504b3c2d8c930cb93ac10,javascript,0,28,15,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
391d38896ff504b3c2d8c930cb93ac10,javascript,0,37,21,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
391d38896ff504b3c2d8c930cb93ac10,javascript,0,91,52,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
391d38896ff504b3c2d8c930cb93ac10,javascript,0,94,26,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `message` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
398e7cd757ffe2a11aee238ddf8c812c,javascript,1,5,10,files.javascript.rules.lang.security.audit.detect-redos,"Detected the use of a regular expression `^((http|https|ftp):\/\/)?([a-z0-9-]+\.)+[a-z0-9]{2,4}.*$` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities."
399d370a9d84871c688f1f260a497b4b,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
39b5e29f13751ca47bc7b41f11129fe9,javascript,1,37,49,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
39f68adf68dc180f0562f00170b4a64e,javascript,2,23,18,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
39f68adf68dc180f0562f00170b4a64e,javascript,2,24,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
39f68adf68dc180f0562f00170b4a64e,javascript,2,24,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('result').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
39f68adf68dc180f0562f00170b4a64e,javascript,2,28,18,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
39f68adf68dc180f0562f00170b4a64e,javascript,2,29,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
39f68adf68dc180f0562f00170b4a64e,javascript,2,29,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('result').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
39f68adf68dc180f0562f00170b4a64e,javascript,2,30,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
39f68adf68dc180f0562f00170b4a64e,javascript,2,30,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('result').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3a0c373d331afb8f9a17e4518acc8967,javascript,0,3,13,files.javascript.rules.lang.security.audit.spawn-shell-true,"Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead."
3a1bfa0873b917b680252b32bedbe7c3,javascript,0,17,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3a1bfa0873b917b680252b32bedbe7c3,javascript,0,17,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `vehicleHeaderDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3a1bfa0873b917b680252b32bedbe7c3,javascript,0,17,34,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
3a578d3699ac80c8eb3865234480f413,javascript,4,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
3aed29016132c19c285a3eef32861922,javascript,0,3,58,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
3aed29016132c19c285a3eef32861922,javascript,5,4,19,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
3b0ad2c99cf1459f98f4faefd0285393,javascript,1,19,18,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
3b0ad2c99cf1459f98f4faefd0285393,javascript,4,18,18,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
3b0ad2c99cf1459f98f4faefd0285393,javascript,5,10,22,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
3b4d05b8a0ba25fd137e200c6844a5e1,javascript,0,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
3bd3150fee6f209981268706b65c4e34,javascript,2,18,28,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
3c240f190530798e91de8ced0e491a26,javascript,0,13,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3c240f190530798e91de8ced0e491a26,javascript,0,13,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `ghostInfoDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3cd006497b81c92df64ce27429ca0a04,javascript,3,5,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
3cd006497b81c92df64ce27429ca0a04,javascript,3,10,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3cd006497b81c92df64ce27429ca0a04,javascript,3,10,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `leaderboardDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3d6ef265533d7e3417bb0f613adfdee6,javascript,10,26,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3d6ef265533d7e3417bb0f613adfdee6,javascript,10,26,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `errorDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3d6ef265533d7e3417bb0f613adfdee6,javascript,12,10,40,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
3d6ef265533d7e3417bb0f613adfdee6,javascript,12,11,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3d6ef265533d7e3417bb0f613adfdee6,javascript,12,11,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `searchResults.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3d6ef265533d7e3417bb0f613adfdee6,javascript,17,11,16,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
3d6ef265533d7e3417bb0f613adfdee6,javascript,17,19,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3d6ef265533d7e3417bb0f613adfdee6,javascript,17,19,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `weatherContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3d8c45c0b52f52578facfa5a42c9486f,javascript,5,2,1,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
3f78adc891b958dd659e9b3a1414fb43,javascript,0,4,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3f78adc891b958dd659e9b3a1414fb43,javascript,0,4,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `elementit[i].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3f78adc891b958dd659e9b3a1414fb43,javascript,1,7,11,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3f78adc891b958dd659e9b3a1414fb43,javascript,1,7,11,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `elementit[i].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
3f78adc891b958dd659e9b3a1414fb43,javascript,1,17,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
3f78adc891b958dd659e9b3a1414fb43,javascript,1,17,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `elementit[i].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
400f148c0f7dd62a89f00f7ac826c801,javascript,0,9,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
400f148c0f7dd62a89f00f7ac826c801,javascript,0,9,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
400f148c0f7dd62a89f00f7ac826c801,javascript,0,36,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
400f148c0f7dd62a89f00f7ac826c801,javascript,0,36,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
400f148c0f7dd62a89f00f7ac826c801,javascript,0,65,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
400f148c0f7dd62a89f00f7ac826c801,javascript,0,65,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
400f148c0f7dd62a89f00f7ac826c801,javascript,0,70,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
400f148c0f7dd62a89f00f7ac826c801,javascript,0,70,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
40745624ec520253f24a4953c9aa3125,javascript,1,8,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
40745624ec520253f24a4953c9aa3125,javascript,1,8,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `mousePositionDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
40745624ec520253f24a4953c9aa3125,javascript,4,9,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
40745624ec520253f24a4953c9aa3125,javascript,4,9,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `mousePositionDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
40745624ec520253f24a4953c9aa3125,javascript,6,9,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
40745624ec520253f24a4953c9aa3125,javascript,6,9,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `mousePositionDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
40745624ec520253f24a4953c9aa3125,javascript,9,21,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
40745624ec520253f24a4953c9aa3125,javascript,9,21,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `mousePositionDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
408a54bfaa75ae02ca61d23fbf8c797e,javascript,0,22,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
409f604745ff7ac065f45c159f656e11,javascript,1,14,11,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
409f604745ff7ac065f45c159f656e11,javascript,1,14,11,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cell.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
409f604745ff7ac065f45c159f656e11,javascript,11,39,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
409f604745ff7ac065f45c159f656e11,javascript,11,39,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `container.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
409f604745ff7ac065f45c159f656e11,javascript,7,53,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
409f604745ff7ac065f45c159f656e11,javascript,7,53,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `table.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
409f604745ff7ac065f45c159f656e11,javascript,9,38,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
409f604745ff7ac065f45c159f656e11,javascript,9,38,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `list.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
417d05769fa08fc297dfedaba04351cb,javascript,1,11,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
417d05769fa08fc297dfedaba04351cb,javascript,1,11,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""result"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
417d05769fa08fc297dfedaba04351cb,javascript,1,19,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
417d05769fa08fc297dfedaba04351cb,javascript,1,19,9,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""result"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
417d05769fa08fc297dfedaba04351cb,javascript,1,24,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
417d05769fa08fc297dfedaba04351cb,javascript,1,24,9,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""result"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
41f0b97a6f0b21be617808b8362b0d36,javascript,2,34,29,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
41f0b97a6f0b21be617808b8362b0d36,javascript,2,55,29,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
41f0b97a6f0b21be617808b8362b0d36,javascript,3,34,29,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
41f0b97a6f0b21be617808b8362b0d36,javascript,3,55,29,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
42eb71cf15cd93874192bfc1b4004c74,javascript,0,13,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
42eb71cf15cd93874192bfc1b4004c74,javascript,0,23,13,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
42eb71cf15cd93874192bfc1b4004c74,javascript,0,33,13,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
42eb71cf15cd93874192bfc1b4004c74,javascript,0,42,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
430f64caa98eb1ff495da6008eaad7d3,javascript,1,5,12,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
430f64caa98eb1ff495da6008eaad7d3,javascript,1,9,8,files.javascript.rules.express.security.audit.express-cookie-session-default-name,Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.
430f64caa98eb1ff495da6008eaad7d3,javascript,1,9,8,files.javascript.rules.express.security.audit.express-cookie-session-no-domain,"Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."
430f64caa98eb1ff495da6008eaad7d3,javascript,1,9,8,files.javascript.rules.express.security.audit.express-cookie-session-no-expires,Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.
430f64caa98eb1ff495da6008eaad7d3,javascript,1,9,8,files.javascript.rules.express.security.audit.express-cookie-session-no-httponly,"Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks."
430f64caa98eb1ff495da6008eaad7d3,javascript,1,9,8,files.javascript.rules.express.security.audit.express-cookie-session-no-path,"Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."
430f64caa98eb1ff495da6008eaad7d3,javascript,1,10,10,files.javascript.rules.express.security.audit.express-session-hardcoded-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
430f64caa98eb1ff495da6008eaad7d3,javascript,5,7,54,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
430f64caa98eb1ff495da6008eaad7d3,javascript,6,9,28,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
43dee24fd4dc868005ad8119cd650701,javascript,1,9,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
43dee24fd4dc868005ad8119cd650701,javascript,1,9,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cell.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
43dee24fd4dc868005ad8119cd650701,javascript,3,22,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
43dee24fd4dc868005ad8119cd650701,javascript,3,22,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cell.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4469bff742324a31fecf1817e384eb42,javascript,0,27,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4469bff742324a31fecf1817e384eb42,javascript,0,27,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatLogs.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4469bff742324a31fecf1817e384eb42,javascript,0,34,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4469bff742324a31fecf1817e384eb42,javascript,0,34,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatLogs.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4469bff742324a31fecf1817e384eb42,javascript,0,108,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4469bff742324a31fecf1817e384eb42,javascript,0,108,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatLogs.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4469bff742324a31fecf1817e384eb42,javascript,0,114,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4469bff742324a31fecf1817e384eb42,javascript,0,114,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatLogs.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4469bff742324a31fecf1817e384eb42,javascript,0,161,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4469bff742324a31fecf1817e384eb42,javascript,0,161,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatLogs.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4469bff742324a31fecf1817e384eb42,javascript,0,174,10,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
45379ed5402d384012f3388f4f4f96fd,javascript,1,7,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
45379ed5402d384012f3388f4f4f96fd,javascript,1,7,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `resultDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
45379ed5402d384012f3388f4f4f96fd,javascript,1,12,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
45379ed5402d384012f3388f4f4f96fd,javascript,1,12,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `resultDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
457813783b6004052f68646572ec3c89,javascript,4,10,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
457813783b6004052f68646572ec3c89,javascript,4,10,9,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""resultado"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
45e92a61ac1b8079f86df364b3868acb,javascript,3,82,30,files.javascript.rules.browser.security.js-open-redirect-from-function,The application accepts potentially user-controlled input `url` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.
45fe2e3ca8574ae48362bd72454cf125,javascript,4,26,13,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
45fe2e3ca8574ae48362bd72454cf125,javascript,5,29,29,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
46046cfe0eb4a0af83c9078248ad61b5,javascript,7,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
46046cfe0eb4a0af83c9078248ad61b5,javascript,7,10,56,files.javascript.rules.express.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
4639f3426abb4cfcd138c781a66f8da7,javascript,1,23,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4639f3426abb4cfcd138c781a66f8da7,javascript,1,23,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `contentElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4684acf3c776bce8d105076c4dfd63bb,javascript,0,5,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
4684acf3c776bce8d105076c4dfd63bb,javascript,0,23,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
4684acf3c776bce8d105076c4dfd63bb,javascript,0,46,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
4684acf3c776bce8d105076c4dfd63bb,javascript,0,51,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
468d8e9494b2b7ad2d857afec198f5c6,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
46b070627b22203b9af5d45be3650167,javascript,9,6,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
46b070627b22203b9af5d45be3650167,javascript,9,6,7,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""content"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
46df6ec1c76102d702ec9fc83646d6e8,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
47140aefcc74fd57e7dfd860f47ce5ff,javascript,5,5,72,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
47140aefcc74fd57e7dfd860f47ce5ff,javascript,7,2,72,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
472a18a1dc7d3009af39ad9d00d74374,javascript,1,26,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
472a18a1dc7d3009af39ad9d00d74374,javascript,1,26,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `divListaEnlaces.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
473d5b09af5c68c5acb8c8463d750f83,javascript,0,16,11,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
473d5b09af5c68c5acb8c8463d750f83,javascript,0,16,11,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `elementit[i].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
473d5b09af5c68c5acb8c8463d750f83,javascript,0,19,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
473d5b09af5c68c5acb8c8463d750f83,javascript,0,19,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `elementit[i].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
47b0b74f0c2be3ac24408ae27281e07f,javascript,0,7,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
47b0b74f0c2be3ac24408ae27281e07f,javascript,0,31,18,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
47b88503a236bfec8ab99934d57a2c90,javascript,2,14,2,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
47b88503a236bfec8ab99934d57a2c90,javascript,2,14,2,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""sortedNumbers"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
4810c29a99e60e4605333bb1e3352531,javascript,2,28,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4810c29a99e60e4605333bb1e3352531,javascript,2,28,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `messageContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4810c29a99e60e4605333bb1e3352531,javascript,2,28,32,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
4819845bd82d3c6cbc52174a78c7a714,javascript,2,13,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4819845bd82d3c6cbc52174a78c7a714,javascript,2,13,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `historyList.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4923192acb2593081f1eb858be1b2b64,javascript,1,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
49ab14ad8d8861a7e2f5c7ee3fa86f6f,javascript,1,16,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
49ab14ad8d8861a7e2f5c7ee3fa86f6f,javascript,1,16,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `resultsDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
49ab14ad8d8861a7e2f5c7ee3fa86f6f,javascript,1,16,55,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
49ab14ad8d8861a7e2f5c7ee3fa86f6f,javascript,3,27,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
49ab14ad8d8861a7e2f5c7ee3fa86f6f,javascript,3,27,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `resultsDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
49ab14ad8d8861a7e2f5c7ee3fa86f6f,javascript,3,27,55,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
49d0e7fe40daa635d969edb8266d3ab4,javascript,4,15,3,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
49d0e7fe40daa635d969edb8266d3ab4,javascript,4,15,3,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
4a6b6017d97b9779798168ffacc850b2,javascript,0,16,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4a6b6017d97b9779798168ffacc850b2,javascript,0,16,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `scheduleSummaryDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4a6b6017d97b9779798168ffacc850b2,javascript,0,16,36,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
4a6b6017d97b9779798168ffacc850b2,javascript,0,24,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4a6b6017d97b9779798168ffacc850b2,javascript,0,24,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `routeDetailsDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4a6b6017d97b9779798168ffacc850b2,javascript,0,24,62,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
4ab4211f9d61f4bd064d0084382a65ad,javascript,7,26,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4ab4211f9d61f4bd064d0084382a65ad,javascript,7,26,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('myDiv').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4ab4211f9d61f4bd064d0084382a65ad,javascript,8,11,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4ab4211f9d61f4bd064d0084382a65ad,javascript,8,11,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('myDiv').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4afb5540fb95acb4339bd0c0f3bb4276,javascript,0,8,3,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
4afb5540fb95acb4339bd0c0f3bb4276,javascript,1,2,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
4afb5540fb95acb4339bd0c0f3bb4276,javascript,2,3,3,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
4afb5540fb95acb4339bd0c0f3bb4276,javascript,2,9,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
4b5ec6c3c07f85dd10b812467da7012d,javascript,13,21,15,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
4b5ec6c3c07f85dd10b812467da7012d,javascript,13,30,21,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
4b5ec6c3c07f85dd10b812467da7012d,javascript,13,63,52,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
4b5ec6c3c07f85dd10b812467da7012d,javascript,13,66,26,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `message` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
4b5ec6c3c07f85dd10b812467da7012d,javascript,8,15,15,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
4b5ec6c3c07f85dd10b812467da7012d,javascript,8,24,21,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
4b5ec6c3c07f85dd10b812467da7012d,javascript,8,59,52,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
4b5ec6c3c07f85dd10b812467da7012d,javascript,8,61,26,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `message` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
4b5ec6c3c07f85dd10b812467da7012d,javascript,9,15,15,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
4b5ec6c3c07f85dd10b812467da7012d,javascript,9,24,21,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
4b5ec6c3c07f85dd10b812467da7012d,javascript,9,59,52,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
4b5ec6c3c07f85dd10b812467da7012d,javascript,9,61,26,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `message` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
4bacc4e7fa97d5223d93871c231cf78b,javascript,1,16,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4bacc4e7fa97d5223d93871c231cf78b,javascript,1,16,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `link.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4bacc4e7fa97d5223d93871c231cf78b,javascript,3,22,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4bacc4e7fa97d5223d93871c231cf78b,javascript,3,22,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `link.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4bacc4e7fa97d5223d93871c231cf78b,javascript,6,24,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4bacc4e7fa97d5223d93871c231cf78b,javascript,6,24,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `link.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4bacc4e7fa97d5223d93871c231cf78b,javascript,9,30,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4bacc4e7fa97d5223d93871c231cf78b,javascript,9,30,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `link.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4bfe0a4e286e9a59987e903737c9948e,javascript,0,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
4bfe0a4e286e9a59987e903737c9948e,javascript,1,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
4c35b7bcf3aad9553993d1d546ae0fc6,javascript,1,9,30,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
4c35b7bcf3aad9553993d1d546ae0fc6,javascript,1,19,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4c35b7bcf3aad9553993d1d546ae0fc6,javascript,1,19,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `customerInfoDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4c7785c114b28d3ccce46453560adf6f,javascript,0,6,39,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
4cd717b0f7edbb7832c7b56044cc13c6,javascript,0,16,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4cd717b0f7edbb7832c7b56044cc13c6,javascript,0,16,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `codeElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4cf7ba7d82e485b13f59618ec5c78d1b,javascript,12,12,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
4d2cc7de6ebbdcb085cca681e8c23dc3,javascript,13,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
4d3a97c6f6f738ac7399a3653718e473,javascript,3,7,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4d3a97c6f6f738ac7399a3653718e473,javascript,3,7,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `ghostinfo.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4d72724c805f7605d228eedd1217ebaf,javascript,4,20,9,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
4dcf3e483abe279e598b77bedca3cbd4,javascript,0,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
4dcf3e483abe279e598b77bedca3cbd4,javascript,0,25,18,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
4dcf3e483abe279e598b77bedca3cbd4,javascript,1,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
4dcf3e483abe279e598b77bedca3cbd4,javascript,1,25,53,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
4dcf3e483abe279e598b77bedca3cbd4,javascript,1,27,18,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
4dcf3e483abe279e598b77bedca3cbd4,javascript,1,38,27,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,1,16,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,1,16,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""countdown"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,15,38,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,15,38,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `element.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,3,11,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,3,11,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""quote"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,5,12,4,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,5,12,4,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""temperature"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,5,13,4,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,5,13,4,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""conditions"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,7,28,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,7,28,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""question"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,7,34,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,7,34,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""score"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,9,17,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4e1a676ab3cad4993f5e0d2adc18c27f,javascript,9,17,7,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""result"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
4ec1c8386c05d8e2b36261239d92d6fb,javascript,2,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
4ecaeb4db1dd859bbf3cca2e4abad989,javascript,19,2,1,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
4ecaeb4db1dd859bbf3cca2e4abad989,javascript,19,5,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
4ee0cc3818ae030fe0781c80451450b4,javascript,8,34,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4ee0cc3818ae030fe0781c80451450b4,javascript,8,34,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `container.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4f18411bc3bf46b518e7b267a08445e8,javascript,3,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
4f53bf07e893e00268348d6280227792,javascript,0,68,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4f53bf07e893e00268348d6280227792,javascript,0,68,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `pelaajanKortti.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4f53bf07e893e00268348d6280227792,javascript,0,68,34,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
4f53bf07e893e00268348d6280227792,javascript,0,75,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
4f53bf07e893e00268348d6280227792,javascript,0,75,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `jakajanKortti.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
4f53bf07e893e00268348d6280227792,javascript,0,75,33,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
4f889586692873eb262b30c9bce3e943,javascript,1,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
4f889586692873eb262b30c9bce3e943,javascript,3,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
509ff5b96a01becff281fd2dcfb6c7fb,javascript,0,7,11,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
509ff5b96a01becff281fd2dcfb6c7fb,javascript,0,7,11,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `elementit[i].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
509ff5b96a01becff281fd2dcfb6c7fb,javascript,0,17,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
509ff5b96a01becff281fd2dcfb6c7fb,javascript,0,17,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `elementit[i].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
50a34a79a249da74a99cf6ff7ca881aa,javascript,0,34,9,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
50a34a79a249da74a99cf6ff7ca881aa,javascript,0,41,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.after(...)` is an anti-pattern that can lead to XSS vulnerabilities
513ca6d5437e74f927d8414ab1348dcd,javascript,2,9,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
513ca6d5437e74f927d8414ab1348dcd,javascript,2,9,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('app').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
5154d55bb41af19b208ef29af6885697,javascript,2,17,27,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
522796b7187da37e6039967183f180c0,javascript,0,3,7,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
522796b7187da37e6039967183f180c0,javascript,0,4,31,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
522796b7187da37e6039967183f180c0,javascript,0,9,20,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
52451de8ad2daa1d7b92c6d49b0464d9,javascript,7,58,2,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
52451de8ad2daa1d7b92c6d49b0464d9,javascript,7,58,2,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quizScore.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
52602e470f2c1fdd55858d587bc65376,javascript,3,12,9,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
52602e470f2c1fdd55858d587bc65376,javascript,3,12,34,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
52602e470f2c1fdd55858d587bc65376,javascript,3,23,9,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
52602e470f2c1fdd55858d587bc65376,javascript,3,30,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
52602e470f2c1fdd55858d587bc65376,javascript,3,30,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `results.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
52602e470f2c1fdd55858d587bc65376,javascript,5,18,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
52602e470f2c1fdd55858d587bc65376,javascript,5,18,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cell1.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
52602e470f2c1fdd55858d587bc65376,javascript,5,19,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
52602e470f2c1fdd55858d587bc65376,javascript,5,19,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cell2.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
52602e470f2c1fdd55858d587bc65376,javascript,5,22,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
52602e470f2c1fdd55858d587bc65376,javascript,5,22,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""total-calories"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
52602e470f2c1fdd55858d587bc65376,javascript,5,30,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
52602e470f2c1fdd55858d587bc65376,javascript,5,30,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""total-calories"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
52602e470f2c1fdd55858d587bc65376,javascript,7,19,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
52602e470f2c1fdd55858d587bc65376,javascript,7,19,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementsByTagName(""h3"")[1].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
52a6e623222a167728cf39896bdb2661,javascript,2,9,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
52a6e623222a167728cf39896bdb2661,javascript,2,9,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tabLink.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
52a6e623222a167728cf39896bdb2661,javascript,2,15,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
52a6e623222a167728cf39896bdb2661,javascript,2,15,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tabContent.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
5315e6e673c796336ea9b9770a49b9cf,javascript,0,5,7,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
5315e6e673c796336ea9b9770a49b9cf,javascript,0,5,53,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
532a803077bda2352990167a3fa1df5b,javascript,0,51,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
532a803077bda2352990167a3fa1df5b,javascript,0,51,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById(newCellId).innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
532a803077bda2352990167a3fa1df5b,javascript,0,51,50,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
532a803077bda2352990167a3fa1df5b,javascript,0,88,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
532a803077bda2352990167a3fa1df5b,javascript,0,88,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById(cellId).innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
532a803077bda2352990167a3fa1df5b,javascript,0,88,53,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
535f26da61844c6e711d3e099ac34c96,javascript,1,14,27,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
535f26da61844c6e711d3e099ac34c96,javascript,1,24,33,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
538078f1ac3ffd668a5489b90974ae5e,javascript,4,30,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
538078f1ac3ffd668a5489b90974ae5e,javascript,4,30,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `result.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
538078f1ac3ffd668a5489b90974ae5e,javascript,6,41,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
538078f1ac3ffd668a5489b90974ae5e,javascript,6,41,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `result.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
538078f1ac3ffd668a5489b90974ae5e,javascript,6,50,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
538078f1ac3ffd668a5489b90974ae5e,javascript,6,50,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `result.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
5385a7c30dca409fe9e69c55e5e3219f,javascript,0,15,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
5385a7c30dca409fe9e69c55e5e3219f,javascript,0,15,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `elementit[i].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
5385a7c30dca409fe9e69c55e5e3219f,javascript,0,32,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
5385a7c30dca409fe9e69c55e5e3219f,javascript,0,32,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tulos.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
53b47b6f1b8a9f629a41be6bc7f2d30e,javascript,3,52,21,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
53b47b6f1b8a9f629a41be6bc7f2d30e,javascript,3,52,21,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tempElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
542c00de37f9eaba5a17e25d904c52dd,javascript,0,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
542c00de37f9eaba5a17e25d904c52dd,javascript,0,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cell.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
542c00de37f9eaba5a17e25d904c52dd,javascript,1,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
542c00de37f9eaba5a17e25d904c52dd,javascript,1,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cell.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
542c00de37f9eaba5a17e25d904c52dd,javascript,2,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
542c00de37f9eaba5a17e25d904c52dd,javascript,2,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cell.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
542c00de37f9eaba5a17e25d904c52dd,javascript,3,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
542c00de37f9eaba5a17e25d904c52dd,javascript,3,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cell.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
54383903512a86eae389ee561e79fb72,javascript,1,16,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
54383903512a86eae389ee561e79fb72,javascript,1,16,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `searchPage.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
54383903512a86eae389ee561e79fb72,javascript,1,32,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
54383903512a86eae389ee561e79fb72,javascript,1,32,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `itemPage.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
546e3a6bfe5407e799f305389f699822,javascript,1,30,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
546e3a6bfe5407e799f305389f699822,javascript,1,34,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
546e3a6bfe5407e799f305389f699822,javascript,1,38,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
546e3a6bfe5407e799f305389f699822,javascript,1,42,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
5479c1b51cd226514dfe6e2917b05519,javascript,1,28,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
5479c1b51cd226514dfe6e2917b05519,javascript,1,28,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""result"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
5479c1b51cd226514dfe6e2917b05519,javascript,3,28,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
5479c1b51cd226514dfe6e2917b05519,javascript,3,28,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""result"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
54810fe05523f1e294d08ac9bcdec474,javascript,1,42,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
54a4486a1aa597d26d669aa2cdd32333,javascript,2,12,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
54a4486a1aa597d26d669aa2cdd32333,javascript,2,12,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""result"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
54c5df8f67e1af10a92c2e1484ab362e,javascript,5,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
54d092a732bc7ff9f5a04b6348ff831f,javascript,0,11,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
54d092a732bc7ff9f5a04b6348ff831f,javascript,0,11,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `th.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
54d092a732bc7ff9f5a04b6348ff831f,javascript,0,27,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
54d092a732bc7ff9f5a04b6348ff831f,javascript,0,27,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `td.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
55b6f50dd4d1ce8d3400ae8143c235a6,javascript,0,17,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
55db489c67c5980c8fc3fe3b87b2ae0c,javascript,5,13,77,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
56b36f160d6f12a512ed5e7c7d6209c3,javascript,0,9,20,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
56b36f160d6f12a512ed5e7c7d6209c3,javascript,0,14,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
56b36f160d6f12a512ed5e7c7d6209c3,javascript,0,14,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `messageElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
572c96856dc04eec4ef2ca2973a87164,javascript,1,6,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
572c96856dc04eec4ef2ca2973a87164,javascript,1,6,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `writeTo.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
5811c07c01a167a8a71d04fbee806d59,javascript,0,9,3,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.wrapAll(...)` is an anti-pattern that can lead to XSS vulnerabilities
58b5e60a15192c5f51587ac045bfcd77,javascript,1,11,13,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
58b5e60a15192c5f51587ac045bfcd77,javascript,4,24,13,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
58b5e60a15192c5f51587ac045bfcd77,javascript,7,32,13,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
58c1c22ccde247b4be053950bc8f3fe3,javascript,0,25,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
58c1c22ccde247b4be053950bc8f3fe3,javascript,0,25,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
58c1c22ccde247b4be053950bc8f3fe3,javascript,0,32,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
58c1c22ccde247b4be053950bc8f3fe3,javascript,0,32,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
58c1c22ccde247b4be053950bc8f3fe3,javascript,0,51,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
58c1c22ccde247b4be053950bc8f3fe3,javascript,0,51,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
58cad65d2c73a188f3c95023bc040200,javascript,2,9,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
58cad65d2c73a188f3c95023bc040200,javascript,2,9,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `style.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
58cad65d2c73a188f3c95023bc040200,javascript,4,9,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
58cad65d2c73a188f3c95023bc040200,javascript,4,9,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `style.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
594fda08d1756cd21892219605bddef0,javascript,14,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
594fda08d1756cd21892219605bddef0,javascript,15,11,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
594fda08d1756cd21892219605bddef0,javascript,3,6,21,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `filePath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
594fda08d1756cd21892219605bddef0,javascript,3,18,15,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `filePath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
598b2b15c17cc43b87e5f0a52e315d1a,javascript,10,8,41,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
598b2b15c17cc43b87e5f0a52e315d1a,javascript,8,8,41,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
598b2b15c17cc43b87e5f0a52e315d1a,javascript,9,8,41,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
59b508318416b7dec6e359452189d2e1,javascript,1,7,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
59b508318416b7dec6e359452189d2e1,javascript,1,7,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `el.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
59b508318416b7dec6e359452189d2e1,javascript,2,8,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
59b508318416b7dec6e359452189d2e1,javascript,2,8,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `el.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
59b508318416b7dec6e359452189d2e1,javascript,3,16,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
59b508318416b7dec6e359452189d2e1,javascript,3,16,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `el.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
59b508318416b7dec6e359452189d2e1,javascript,4,12,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
59b508318416b7dec6e359452189d2e1,javascript,4,12,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `el.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
59dd4c06b09e70fa328a4f28477ab6cc,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
5a1006b4c6cc5aca548905e01ce18534,javascript,1,9,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
5a1006b4c6cc5aca548905e01ce18534,javascript,1,9,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `infoDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
5a1006b4c6cc5aca548905e01ce18534,javascript,1,17,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
5a1006b4c6cc5aca548905e01ce18534,javascript,1,17,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
5a55a4f31a51eb83fc81c7ef9ab5e3e2,javascript,5,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
5aa3811d1ff25ba08cc4a390b5b5c755,javascript,4,2,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
5b1d4198c156f4e8f61b717888e3dd00,javascript,0,35,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
5b1d4198c156f4e8f61b717888e3dd00,javascript,0,37,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
5be4e0b1a8449fde76d03b31f1eefea6,javascript,2,39,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
5be4e0b1a8449fde76d03b31f1eefea6,javascript,2,39,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `div.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
5be4e0b1a8449fde76d03b31f1eefea6,javascript,8,40,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
5be4e0b1a8449fde76d03b31f1eefea6,javascript,8,40,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `divConcepto.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
5be4e0b1a8449fde76d03b31f1eefea6,javascript,8,40,27,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
5cd89ddb48fcca0a3d2b44fec06048bb,javascript,0,6,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
5e555b5fce9cc4e4cfa8c3a193a530ab,javascript,6,2,16,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
5eeacae174287a9d567e380a7ec68bfa,javascript,4,5,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
5ef123e4d700ee944968d90d307e0041,javascript,11,16,18,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6078f1382dcf94e698decb04ce66f5bb,javascript,1,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
61ba5c97015ea682f659c2825df67383,javascript,2,14,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
61ba5c97015ea682f659c2825df67383,javascript,2,14,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""result"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
6218daf6a2bfc4145785e1872044db6f,javascript,0,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6218daf6a2bfc4145785e1872044db6f,javascript,0,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `fieldset.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6218daf6a2bfc4145785e1872044db6f,javascript,0,5,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
6218daf6a2bfc4145785e1872044db6f,javascript,0,17,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6218daf6a2bfc4145785e1872044db6f,javascript,0,17,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `div.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6218daf6a2bfc4145785e1872044db6f,javascript,1,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6218daf6a2bfc4145785e1872044db6f,javascript,1,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `fieldset.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6218daf6a2bfc4145785e1872044db6f,javascript,1,5,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
6218daf6a2bfc4145785e1872044db6f,javascript,2,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6218daf6a2bfc4145785e1872044db6f,javascript,2,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `fieldset.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6218daf6a2bfc4145785e1872044db6f,javascript,2,5,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
6218daf6a2bfc4145785e1872044db6f,javascript,3,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6218daf6a2bfc4145785e1872044db6f,javascript,3,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `fieldset.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6218daf6a2bfc4145785e1872044db6f,javascript,3,5,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
6218daf6a2bfc4145785e1872044db6f,javascript,4,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6218daf6a2bfc4145785e1872044db6f,javascript,4,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `fieldset.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6218daf6a2bfc4145785e1872044db6f,javascript,4,5,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
6218daf6a2bfc4145785e1872044db6f,javascript,5,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6218daf6a2bfc4145785e1872044db6f,javascript,5,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `fieldset.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6218daf6a2bfc4145785e1872044db6f,javascript,5,5,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
6218daf6a2bfc4145785e1872044db6f,javascript,6,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6218daf6a2bfc4145785e1872044db6f,javascript,6,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `fieldset.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6218daf6a2bfc4145785e1872044db6f,javascript,6,5,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
629e7bca7c52acaedac698c0471c2717,javascript,0,7,7,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
629e7bca7c52acaedac698c0471c2717,javascript,0,8,7,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
629e7bca7c52acaedac698c0471c2717,javascript,0,10,9,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6354b4afa9459fd32fb5696581ce937b,javascript,0,6,9,files.javascript.rules.puppeteer.security.audit.puppeteer-setcontent-injection,If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities
63b2fbd532a3edf64f9113e6bf3943f9,javascript,0,27,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
63b2fbd532a3edf64f9113e6bf3943f9,javascript,0,27,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
63b2fbd532a3edf64f9113e6bf3943f9,javascript,0,29,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
63b2fbd532a3edf64f9113e6bf3943f9,javascript,0,29,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6406d9dc1c1ba9d20759c98742b44cec,javascript,0,15,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6406d9dc1c1ba9d20759c98742b44cec,javascript,0,15,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6406d9dc1c1ba9d20759c98742b44cec,javascript,0,18,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6406d9dc1c1ba9d20759c98742b44cec,javascript,0,18,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
641a70ce031abcbe8ce1aa94cf949266,javascript,0,29,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
641a70ce031abcbe8ce1aa94cf949266,javascript,0,29,17,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `logoContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
641a70ce031abcbe8ce1aa94cf949266,javascript,0,29,43,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
64baaa7277ba0b57e08e367a65536315,javascript,0,4,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
656ce68f9db28431d49afbe9489d9882,javascript,6,9,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
65bd1e724436589d73c0f025504c4001,javascript,2,28,22,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
65bd1e724436589d73c0f025504c4001,javascript,2,29,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
65bd1e724436589d73c0f025504c4001,javascript,2,29,7,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""chatbot-history"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
65e726f1974e97f5fa9746242e2ff322,javascript,0,27,9,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
65e726f1974e97f5fa9746242e2ff322,javascript,0,35,3,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.after(...)` is an anti-pattern that can lead to XSS vulnerabilities
6636013ca850f2d349545115354c6e93,javascript,13,11,45,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `subString` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
672186d33311057b529c9d98fbeed2f9,javascript,0,24,20,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `outputPath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
672186d33311057b529c9d98fbeed2f9,javascript,0,34,54,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
673b20923af1328fca9752ed5e738d41,javascript,6,1,31,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
6743e36f1f263f5e3904a700f176334d,javascript,2,5,32,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `dir` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6743e36f1f263f5e3904a700f176334d,javascript,2,7,32,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
6743e36f1f263f5e3904a700f176334d,javascript,2,7,37,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
6743e36f1f263f5e3904a700f176334d,javascript,2,8,31,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `dir` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6743e36f1f263f5e3904a700f176334d,javascript,2,8,31,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `file` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6743e36f1f263f5e3904a700f176334d,javascript,2,13,21,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `dir` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6743e36f1f263f5e3904a700f176334d,javascript,2,13,21,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `file` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6743e36f1f263f5e3904a700f176334d,javascript,2,13,31,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `dir` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6743e36f1f263f5e3904a700f176334d,javascript,2,13,31,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `file` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6743e36f1f263f5e3904a700f176334d,javascript,2,14,24,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `dir` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6743e36f1f263f5e3904a700f176334d,javascript,2,14,24,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `file` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
679f68dcf740f69a6b07402142ae354d,javascript,2,20,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
679f68dcf740f69a6b07402142ae354d,javascript,2,20,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""days"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
679f68dcf740f69a6b07402142ae354d,javascript,2,21,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
679f68dcf740f69a6b07402142ae354d,javascript,2,21,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""hours"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
679f68dcf740f69a6b07402142ae354d,javascript,2,22,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
679f68dcf740f69a6b07402142ae354d,javascript,2,22,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""minutes"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
679f68dcf740f69a6b07402142ae354d,javascript,2,23,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
679f68dcf740f69a6b07402142ae354d,javascript,2,23,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""seconds"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
68645a6168877b52d82c8ca415d1b51f,javascript,2,4,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
68645a6168877b52d82c8ca415d1b51f,javascript,2,6,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
68b40e41c5ce4580edab9d8b106ccd14,javascript,4,22,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
68b40e41c5ce4580edab9d8b106ccd14,javascript,4,22,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `this.resultElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
68c2679270b8afe288d06775073e0364,javascript,0,3,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
68ccb22383bbd79a1e32e5ba7a2a2567,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
68ccb22383bbd79a1e32e5ba7a2a2567,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
68e0a780a1d60ffef23d4ddf8e259a74,javascript,0,27,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
68e0a780a1d60ffef23d4ddf8e259a74,javascript,0,27,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `td.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
68e0a780a1d60ffef23d4ddf8e259a74,javascript,1,54,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
68e0a780a1d60ffef23d4ddf8e259a74,javascript,1,54,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `td.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
68e0a780a1d60ffef23d4ddf8e259a74,javascript,2,54,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
68e0a780a1d60ffef23d4ddf8e259a74,javascript,2,54,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `td.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6965858efc98f6549c5d88f73d1fd565,javascript,0,8,7,files.javascript.rules.lang.security.audit.prototype-pollution.prototype-pollution-loop,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
6965858efc98f6549c5d88f73d1fd565,javascript,0,9,7,files.javascript.rules.lang.security.audit.prototype-pollution.prototype-pollution-assignment,"Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
6965858efc98f6549c5d88f73d1fd565,javascript,0,10,7,files.javascript.rules.lang.security.audit.prototype-pollution.prototype-pollution-loop,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
6965858efc98f6549c5d88f73d1fd565,javascript,0,19,7,files.javascript.rules.lang.security.audit.prototype-pollution.prototype-pollution-loop,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
6981c75778cf41a177ec3c02fb9d3e0e,javascript,5,9,36,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
6a320c9b88da7cadc0fba6a92401f94d,javascript,0,6,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6a320c9b88da7cadc0fba6a92401f94d,javascript,0,6,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `div.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6a320c9b88da7cadc0fba6a92401f94d,javascript,0,6,21,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
6aaaae9f29b8dd370a3ea726e970edc7,javascript,2,32,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6aaaae9f29b8dd370a3ea726e970edc7,javascript,2,32,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `button.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6aaaae9f29b8dd370a3ea726e970edc7,javascript,2,64,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6aaaae9f29b8dd370a3ea726e970edc7,javascript,2,64,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `log.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6aaaae9f29b8dd370a3ea726e970edc7,javascript,2,64,20,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
6ad8d7bf3071ec998d5c6654478831c2,javascript,0,3,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
6b390cfb08c5685498070f3cbf961e1d,javascript,0,75,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
6b3d1a36825e54565a57e6d0f2ae1d98,javascript,10,15,46,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
6b3d1a36825e54565a57e6d0f2ae1d98,javascript,10,18,15,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6b3d1a36825e54565a57e6d0f2ae1d98,javascript,10,26,21,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6b3d1a36825e54565a57e6d0f2ae1d98,javascript,10,54,60,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
6b3d1a36825e54565a57e6d0f2ae1d98,javascript,10,57,30,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `message` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6b3d1a36825e54565a57e6d0f2ae1d98,javascript,6,16,15,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6b3d1a36825e54565a57e6d0f2ae1d98,javascript,6,23,21,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6b3d1a36825e54565a57e6d0f2ae1d98,javascript,6,62,56,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
6b3d1a36825e54565a57e6d0f2ae1d98,javascript,6,69,30,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `message` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
6c303af8f1a51f143ad75eb15e473848,javascript,14,7,1,files.javascript.rules.lang.security.audit.spawn-shell-true,"Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead."
6cedc110df8aea9004a31a1a9410b7c2,javascript,2,37,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
6cedc110df8aea9004a31a1a9410b7c2,javascript,2,37,9,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
6cedc110df8aea9004a31a1a9410b7c2,javascript,2,50,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
6cedc110df8aea9004a31a1a9410b7c2,javascript,2,50,9,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
6cf73a49c5191b7717df0a705dc35997,javascript,0,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
6cf73a49c5191b7717df0a705dc35997,javascript,1,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
6d8452730deb3485a014f30d568685cb,javascript,0,10,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6d8452730deb3485a014f30d568685cb,javascript,0,10,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `letterElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6d8452730deb3485a014f30d568685cb,javascript,0,17,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6d8452730deb3485a014f30d568685cb,javascript,0,17,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `buttonElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6d84eb759068cd8f07f3a2b155aa5d0b,javascript,1,4,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6d84eb759068cd8f07f3a2b155aa5d0b,javascript,1,4,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""parsedHtml"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
6dc89d74b50f56c5ca05c5342143d42d,javascript,2,41,13,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
6dc89d74b50f56c5ca05c5342143d42d,javascript,2,41,13,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
6dfc8b54b4446d1799bac75fa8b2fa7a,javascript,0,16,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6dfc8b54b4446d1799bac75fa8b2fa7a,javascript,0,16,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6dfc8b54b4446d1799bac75fa8b2fa7a,javascript,0,21,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6dfc8b54b4446d1799bac75fa8b2fa7a,javascript,0,21,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6e0ddbe4588e50dd14bd21a41f0cb678,javascript,2,13,17,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6e0ddbe4588e50dd14bd21a41f0cb678,javascript,2,13,17,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cart.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6e25c03e0322786b1094e57b975d8d41,javascript,2,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
6e25c03e0322786b1094e57b975d8d41,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
6e25c03e0322786b1094e57b975d8d41,javascript,5,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
6e48f23f745e4a0e6e684391bd1815ef,javascript,2,7,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
6e48f23f745e4a0e6e684391bd1815ef,javascript,2,7,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `listItem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
6ed9e97c5523ead57c02b386f21ffef6,javascript,17,9,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
6ef966880267677e22c6960bb87b7192,javascript,0,70,8,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
6ef966880267677e22c6960bb87b7192,javascript,0,82,8,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
6ef966880267677e22c6960bb87b7192,javascript,1,69,9,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
6ef966880267677e22c6960bb87b7192,javascript,1,81,9,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
6ef966880267677e22c6960bb87b7192,javascript,2,69,9,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
6ef966880267677e22c6960bb87b7192,javascript,2,81,9,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
6f6b96689d82bbecc7d5da41f073f940,javascript,1,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
6f6b96689d82bbecc7d5da41f073f940,javascript,1,9,33,files.javascript.rules.passport-jwt.security.hardcoded-passport-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
6f6b96689d82bbecc7d5da41f073f940,javascript,1,23,35,files.javascript.rules.passport-jwt.security.hardcoded-passport-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
6fd8b7e98c66837a607de9ae2136f19c,javascript,1,10,17,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `searchString` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
6fd8b7e98c66837a607de9ae2136f19c,javascript,2,16,17,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `string` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
6fd8b7e98c66837a607de9ae2136f19c,javascript,3,16,17,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `string` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
7017503bb2575f200d1d17b728060726,javascript,2,6,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
7017503bb2575f200d1d17b728060726,javascript,2,6,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `output.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
7017503bb2575f200d1d17b728060726,javascript,2,6,22,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7051b99b5771482f9b42d4b3c9ba451b,javascript,1,19,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
7051b99b5771482f9b42d4b3c9ba451b,javascript,5,22,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
705b805c087e0fb1a6ba9aadb50a25df,javascript,16,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
71295c068aa1caf882554691535a1588,javascript,1,17,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
71295c068aa1caf882554691535a1588,javascript,1,17,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `previewContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
71c85a54a8e141c3ded07f495eb06ffb,javascript,2,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
7283e02e07c920361e8d5b93f063bc17,javascript,7,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
7283e02e07c920361e8d5b93f063bc17,javascript,9,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
7321e48be7a1a794bceba925f7290877,javascript,0,2,5,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
733a2d620223e2548e0534e37fb7a4cd,javascript,4,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
73a149c6bbf5834e0bff57a52493f354,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
73c78afe043abb86909003e7d69d03ff,javascript,0,120,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
73c78afe043abb86909003e7d69d03ff,javascript,0,120,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `pBitSizeElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
73c78afe043abb86909003e7d69d03ff,javascript,0,121,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
73c78afe043abb86909003e7d69d03ff,javascript,0,121,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `qBitSizeElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
73c78afe043abb86909003e7d69d03ff,javascript,0,124,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
73c78afe043abb86909003e7d69d03ff,javascript,0,124,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""modulusBitSize"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
73c78afe043abb86909003e7d69d03ff,javascript,0,238,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
73c78afe043abb86909003e7d69d03ff,javascript,0,238,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `pBitSizeElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
73c78afe043abb86909003e7d69d03ff,javascript,0,239,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
73c78afe043abb86909003e7d69d03ff,javascript,0,239,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `qBitSizeElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
73c78afe043abb86909003e7d69d03ff,javascript,0,242,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
73c78afe043abb86909003e7d69d03ff,javascript,0,242,3,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""modulusBitSize"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
73f8fab865944f494f5ddcf7cb21a3e4,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
74675a8aebebc3c8b4bcb8e483e9d566,javascript,0,15,12,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
74675a8aebebc3c8b4bcb8e483e9d566,javascript,1,22,10,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
74675a8aebebc3c8b4bcb8e483e9d566,javascript,1,35,16,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `post` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
746f70a2ca9f4b333f56fb9098dc2768,javascript,1,28,17,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
746f70a2ca9f4b333f56fb9098dc2768,javascript,1,28,17,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
74ab07efabe4c7df0a9a61943c7fb27b,javascript,1,14,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
74ab07efabe4c7df0a9a61943c7fb27b,javascript,1,14,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cardDetails1.children[0].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
74ab07efabe4c7df0a9a61943c7fb27b,javascript,1,15,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
74ab07efabe4c7df0a9a61943c7fb27b,javascript,1,15,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cardDetails1.children[1].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
74ab07efabe4c7df0a9a61943c7fb27b,javascript,1,16,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
74ab07efabe4c7df0a9a61943c7fb27b,javascript,1,16,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cardDetails1.children[2].innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
74ab07efabe4c7df0a9a61943c7fb27b,javascript,2,40,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
74ab07efabe4c7df0a9a61943c7fb27b,javascript,2,40,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `binItem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
74ab07efabe4c7df0a9a61943c7fb27b,javascript,2,44,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
74ab07efabe4c7df0a9a61943c7fb27b,javascript,2,44,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `countryItem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
74ab07efabe4c7df0a9a61943c7fb27b,javascript,2,48,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
74ab07efabe4c7df0a9a61943c7fb27b,javascript,2,48,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `billingAddressItem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
74ab07efabe4c7df0a9a61943c7fb27b,javascript,3,35,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
74ab07efabe4c7df0a9a61943c7fb27b,javascript,3,35,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `binItem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
74ab07efabe4c7df0a9a61943c7fb27b,javascript,3,39,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
74ab07efabe4c7df0a9a61943c7fb27b,javascript,3,39,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `countryItem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
74ab07efabe4c7df0a9a61943c7fb27b,javascript,3,43,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
74ab07efabe4c7df0a9a61943c7fb27b,javascript,3,43,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `billingAddressItem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
74ab07efabe4c7df0a9a61943c7fb27b,javascript,3,48,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
74ab07efabe4c7df0a9a61943c7fb27b,javascript,3,48,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `priceItem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
758473acad7e3ed26ca05026cabc9451,javascript,0,16,25,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
75a899145206d535d362c2fee74c6bb3,javascript,5,52,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
75a899145206d535d362c2fee74c6bb3,javascript,6,41,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
76b6122642c1561d75c3375b2ec1ed80,javascript,0,18,15,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
77235a6a4138acedf6af1f57a08ec4e2,javascript,4,13,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
77235a6a4138acedf6af1f57a08ec4e2,javascript,4,13,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('markdown-content').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
77235a6a4138acedf6af1f57a08ec4e2,javascript,5,7,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
77235a6a4138acedf6af1f57a08ec4e2,javascript,5,7,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('markdown-content').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
77f78b042f149e4d2ad8206e7df22f55,javascript,9,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
79657ad4a5f7e1aaff620ae646eba03d,javascript,13,19,27,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
79657ad4a5f7e1aaff620ae646eba03d,javascript,7,18,21,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `outputPath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
79657ad4a5f7e1aaff620ae646eba03d,javascript,9,22,22,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `outputPath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
7ace984532a2210bfa37b2ebb28696c2,javascript,4,59,51,files.javascript.rules.lang.security.audit.sqli.node-mysql-sqli,"Detected a `mysql` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements."
7b6c94aa79692e35214fa391c1c92c6b,javascript,10,8,23,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
7b6c94aa79692e35214fa391c1c92c6b,javascript,10,14,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
7b796d376a76e9047de76764eb2c14eb,javascript,0,7,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
7b796d376a76e9047de76764eb2c14eb,javascript,0,28,51,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
7bcfe0dbf23c71935b59a02755ea7f40,javascript,0,6,37,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `file` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
7bcfe0dbf23c71935b59a02755ea7f40,javascript,0,29,13,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
7be235bc7392318100b7283d357a8d62,javascript,1,8,1,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
7be235bc7392318100b7283d357a8d62,javascript,1,8,1,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
7c1b5ad7415159018ca14370eb09b353,javascript,0,83,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
7c1b5ad7415159018ca14370eb09b353,javascript,0,83,1,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""result"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
7c5806abb65c2f41e8ee9cc5a71d1cdb,javascript,3,16,16,files.javascript.rules.puppeteer.security.audit.puppeteer-goto-injection,If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
7c5806abb65c2f41e8ee9cc5a71d1cdb,javascript,3,29,24,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
7c5806abb65c2f41e8ee9cc5a71d1cdb,javascript,5,20,13,files.javascript.rules.puppeteer.security.audit.puppeteer-goto-injection,If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
7c5806abb65c2f41e8ee9cc5a71d1cdb,javascript,5,23,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
7d733f403f8e1431f1920e68cfa50cd5,javascript,5,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
7d864eb533df16ebf9052722db31dd8a,javascript,2,19,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
7d864eb533df16ebf9052722db31dd8a,javascript,2,19,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quoteBox.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
7d864eb533df16ebf9052722db31dd8a,javascript,2,19,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
7e0e3cb25ba9d7b885654e4a7bb28a08,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
7e68585ed2334a14413170f47676377f,javascript,1,37,16,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
7e68585ed2334a14413170f47676377f,javascript,1,39,1,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.getScript(...)` is an anti-pattern that can lead to XSS vulnerabilities
7e68585ed2334a14413170f47676377f,javascript,2,37,16,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
7e68585ed2334a14413170f47676377f,javascript,2,39,1,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.getScript(...)` is an anti-pattern that can lead to XSS vulnerabilities
7f3c77e8d9266c599e0bc9b09ae81efb,javascript,4,20,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
812932a7f5cb30f08b62c37dc9af5893,javascript,4,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
81b678f411f3a3566d38bfa6d6cae5f0,javascript,0,7,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
81b678f411f3a3566d38bfa6d6cae5f0,javascript,0,69,9,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `label` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
81b678f411f3a3566d38bfa6d6cae5f0,javascript,0,69,47,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
81ce8edd91c35caae84f3f6a579320a4,javascript,0,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
81fa960469896cf118f913934ac70bcd,javascript,4,24,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
81fa960469896cf118f913934ac70bcd,javascript,4,24,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `prediction_element.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
826407ac98da7d1cfaa15f8988b5d84b,javascript,6,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
828792741c4aae1f69e1e37bd24ba907,javascript,10,5,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
828792741c4aae1f69e1e37bd24ba907,javascript,10,5,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `root.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
828792741c4aae1f69e1e37bd24ba907,javascript,17,3,19,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
828792741c4aae1f69e1e37bd24ba907,javascript,19,3,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
828792741c4aae1f69e1e37bd24ba907,javascript,19,3,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `container.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
828792741c4aae1f69e1e37bd24ba907,javascript,19,3,27,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
828792741c4aae1f69e1e37bd24ba907,javascript,5,39,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
828792741c4aae1f69e1e37bd24ba907,javascript,5,39,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `root.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
82ad031de9e790f6874fac97a958bd12,javascript,0,24,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
82ad031de9e790f6874fac97a958bd12,javascript,0,24,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `el.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
82ad031de9e790f6874fac97a958bd12,javascript,1,35,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
82ad031de9e790f6874fac97a958bd12,javascript,1,35,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `el.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
82ad031de9e790f6874fac97a958bd12,javascript,2,41,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
82ad031de9e790f6874fac97a958bd12,javascript,2,41,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `el.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
83c1cf37529ab1eb3ac424b717cb7886,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
84499bdf3f9a17c0bd2ba46ef07fd905,javascript,7,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
8558e2aa3e78437be6cf2423423010f0,javascript,5,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
855d52009445750a683e9b40e0316520,javascript,0,3,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
855d52009445750a683e9b40e0316520,javascript,0,3,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `el.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
859031184b75549f76426ed25010ab6d,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
859031184b75549f76426ed25010ab6d,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
85eef60a6f01ec25dea23760e0348616,javascript,0,34,51,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
85eef60a6f01ec25dea23760e0348616,javascript,0,58,37,files.javascript.rules.express.security.audit.remote-property-injection,"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties."
85eef60a6f01ec25dea23760e0348616,javascript,0,63,18,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
86ea16227c57d015ff8dfd37d9dbd370,javascript,2,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
86f343a5a4de89dda67276cac1a7cc41,javascript,4,4,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
86f343a5a4de89dda67276cac1a7cc41,javascript,4,4,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `promptContent.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
87bce5fefd55d6dbb2c1a4129b9f2c16,javascript,0,18,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
87bce5fefd55d6dbb2c1a4129b9f2c16,javascript,0,18,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `questionElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
87bce5fefd55d6dbb2c1a4129b9f2c16,javascript,0,18,33,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
87d4f15838204b90370d0160d17c5b95,javascript,0,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
87fb1a5d8ff0c53ddb1b00e9608596c9,javascript,2,33,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
87fb1a5d8ff0c53ddb1b00e9608596c9,javascript,2,33,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `scoreElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
8821b6932c514b1fbeb86360444f7cbb,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
8821b6932c514b1fbeb86360444f7cbb,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
88d085f0929d0345c910cc628e5a8921,javascript,4,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
88d085f0929d0345c910cc628e5a8921,javascript,7,4,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
88f4ecde83bf3b2fdfccb661ae7da1ef,javascript,1,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
891cabce2fd8eec9bee7190f5b9bdacb,javascript,1,2,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
89961703dfbff4d4e82a001e2254317d,javascript,1,7,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
89961703dfbff4d4e82a001e2254317d,javascript,5,10,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
89961703dfbff4d4e82a001e2254317d,javascript,5,32,21,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
89961703dfbff4d4e82a001e2254317d,javascript,5,66,50,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
89b1df7d10d61de282b85410187a74bc,javascript,11,4,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
89b1df7d10d61de282b85410187a74bc,javascript,11,4,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('main').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
8a11be49205b1e50cc84d67f5ae972da,javascript,0,18,9,files.javascript.rules.lang.security.audit.prototype-pollution.prototype-pollution-assignment,"Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
8b3309e58d82d61c753da7b2631ff0d9,javascript,12,3,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
8b3309e58d82d61c753da7b2631ff0d9,javascript,12,3,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chat.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
8b3309e58d82d61c753da7b2631ff0d9,javascript,12,3,19,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
8b3309e58d82d61c753da7b2631ff0d9,javascript,12,6,38,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
8ccccff6b7c71c467c2297562e8aa2b6,javascript,1,5,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
8ccccff6b7c71c467c2297562e8aa2b6,javascript,1,5,5,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
8cd0ffdaee97d6e41138012c17703804,javascript,11,12,37,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `storyfile` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
8ce8cbabf7a2ad7c59b6ccfe55a65bfd,javascript,5,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
8d071e4954dd1b63dd3a77eeb5c78c43,javascript,4,8,41,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `selector` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
8d1bb2b8ffa19da974f6e0623ed8743f,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
8d1bb2b8ffa19da974f6e0623ed8743f,javascript,1,8,16,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
8d1bb2b8ffa19da974f6e0623ed8743f,javascript,6,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
8d2fa202708027353c7e200514b86d6b,javascript,2,8,17,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
8d86e13547d98de09c3f2b121d2e4210,javascript,2,6,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
8d86e13547d98de09c3f2b121d2e4210,javascript,2,6,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `greeting.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
8d86e13547d98de09c3f2b121d2e4210,javascript,4,50,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
8d86e13547d98de09c3f2b121d2e4210,javascript,4,50,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `greeting.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
8e58c8b988a517bb2c9a3a408996f5fb,javascript,0,14,20,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `result` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
8e58c8b988a517bb2c9a3a408996f5fb,javascript,11,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
8e58c8b988a517bb2c9a3a408996f5fb,javascript,11,13,15,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `call` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
8e58c8b988a517bb2c9a3a408996f5fb,javascript,12,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
8e58c8b988a517bb2c9a3a408996f5fb,javascript,15,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
8e58c8b988a517bb2c9a3a408996f5fb,javascript,16,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
8e58c8b988a517bb2c9a3a408996f5fb,javascript,4,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
8e58c8b988a517bb2c9a3a408996f5fb,javascript,5,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
8e92c7f395e82d12627859d25cbf3e39,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
8ea025cb9e5a59e9a368552b8e3a4e24,javascript,2,18,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
8ea025cb9e5a59e9a368552b8e3a4e24,javascript,2,18,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `cartCount.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
8ebe1965337f857723399cc82d06cdf9,javascript,0,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
8ebe1965337f857723399cc82d06cdf9,javascript,0,48,5,files.javascript.rules.express.security.audit.remote-property-injection,"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties."
8f5d76876eaae1665f67c7c9a3513f80,javascript,1,3,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
8f5d76876eaae1665f67c7c9a3513f80,javascript,2,7,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
8ff93720afc3a8a0183a1977c3bb280e,javascript,5,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
9022d1a35906d94c70eaa691bc471702,javascript,1,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
9022d1a35906d94c70eaa691bc471702,javascript,2,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
9022d1a35906d94c70eaa691bc471702,javascript,4,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
9022d1a35906d94c70eaa691bc471702,javascript,5,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
918179ef161a7a71c921170cf1311126,javascript,1,1,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
918179ef161a7a71c921170cf1311126,javascript,1,13,3,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
918179ef161a7a71c921170cf1311126,javascript,2,1,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
918179ef161a7a71c921170cf1311126,javascript,3,5,3,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
918179ef161a7a71c921170cf1311126,javascript,4,1,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
91913925cab3c0728f8258ef5b0c8e97,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
91d5f48976767e947bd094f739c7c746,javascript,2,16,46,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
922db4f0be132a4317537bb3ea715f9b,javascript,3,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
922db4f0be132a4317537bb3ea715f9b,javascript,4,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
9240d593f8c79edcb3f168cd31aaf532,javascript,5,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
9240d593f8c79edcb3f168cd31aaf532,javascript,9,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
929d974a99471b54bf4311f66e22d814,javascript,13,37,9,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
929d974a99471b54bf4311f66e22d814,javascript,14,39,21,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
929d974a99471b54bf4311f66e22d814,javascript,14,50,21,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
937ab77132a2e78ea981114a7f2fb91d,javascript,1,17,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
937ab77132a2e78ea981114a7f2fb91d,javascript,1,17,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `messageDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
937ab77132a2e78ea981114a7f2fb91d,javascript,1,17,28,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
937ab77132a2e78ea981114a7f2fb91d,javascript,2,25,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
937ab77132a2e78ea981114a7f2fb91d,javascript,2,25,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `messageDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
937ab77132a2e78ea981114a7f2fb91d,javascript,2,25,28,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
937ab77132a2e78ea981114a7f2fb91d,javascript,3,39,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
937ab77132a2e78ea981114a7f2fb91d,javascript,3,39,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `messageDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
937ab77132a2e78ea981114a7f2fb91d,javascript,3,39,28,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
93c9bbd88a444dafcc834f5f6fe43668,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
955ae5bb275d3ae0f3b2febe2f9be991,javascript,2,9,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
955ae5bb275d3ae0f3b2febe2f9be991,javascript,2,9,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `dateElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
955ae5bb275d3ae0f3b2febe2f9be991,javascript,2,10,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
955ae5bb275d3ae0f3b2febe2f9be991,javascript,2,10,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `timeElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
965b53138c7d84c4718c580b311233dd,javascript,0,3,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
965b53138c7d84c4718c580b311233dd,javascript,0,3,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tulos.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
97085703aee024cabbf1932bd73e4efa,javascript,5,7,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
97542a57e8d9ba6ad03dd2aadfc21409,javascript,0,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
986995321dcd31eb14bcf1b118cf4d72,javascript,4,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
986995321dcd31eb14bcf1b118cf4d72,javascript,4,15,18,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
9955336451d2a6c8b5f556f45ddd2c56,javascript,7,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
998297fd4c513da991bb6764f9de5a59,javascript,0,21,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
998297fd4c513da991bb6764f9de5a59,javascript,0,21,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
998297fd4c513da991bb6764f9de5a59,javascript,1,27,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
998297fd4c513da991bb6764f9de5a59,javascript,1,27,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
998297fd4c513da991bb6764f9de5a59,javascript,2,4,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
998297fd4c513da991bb6764f9de5a59,javascript,2,4,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
998297fd4c513da991bb6764f9de5a59,javascript,3,24,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
998297fd4c513da991bb6764f9de5a59,javascript,3,24,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
99d15517262fdb2d486b4c69f8307719,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
9a2b6dcadd93f4a7438b2fd6097fd366,javascript,2,19,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
9a2b6dcadd93f4a7438b2fd6097fd366,javascript,2,19,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `game.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
9a2b6dcadd93f4a7438b2fd6097fd366,javascript,2,19,20,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
9b30c0d5862ed27bc3214fce47355269,javascript,1,37,13,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
9b478473b9dcd9ea9a87c9d49e984efe,javascript,1,27,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
9b478473b9dcd9ea9a87c9d49e984efe,javascript,1,27,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `questionElem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
9b478473b9dcd9ea9a87c9d49e984efe,javascript,1,27,34,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
9b85c02c72a455e66d86de221ed9c4e1,javascript,1,8,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
9b85c02c72a455e66d86de221ed9c4e1,javascript,1,8,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `result.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
9be7c16b707ba1b52e53747c15c28705,javascript,3,25,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
9be7c16b707ba1b52e53747c15c28705,javascript,3,25,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `output.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
9be7c16b707ba1b52e53747c15c28705,javascript,7,28,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
9be7c16b707ba1b52e53747c15c28705,javascript,7,28,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `vowelCountElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
9d1047462c725adef529152cbd071b31,javascript,8,5,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
9d1047462c725adef529152cbd071b31,javascript,8,5,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `scriptEl.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
9d1577ff8493ece51c0f8f5be49a8872,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
9d1577ff8493ece51c0f8f5be49a8872,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
9d1577ff8493ece51c0f8f5be49a8872,javascript,4,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
9d2ff5d0dd9a5753d38d485cf9be8ab8,javascript,4,3,9,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
9db3199f80de5df8c9e987b17b02a52a,javascript,0,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
9df92732b1433f9c5028dbada836abf6,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
9e62d078c8bd70c20494b7ec7d3829ae,javascript,1,24,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
9e62d078c8bd70c20494b7ec7d3829ae,javascript,1,24,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('result').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
9ef59b471fa3b4af04cb319c850df65a,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
9f3411e77ecc4b705cf251a982ce488c,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
9f3411e77ecc4b705cf251a982ce488c,javascript,3,7,12,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
a06fb5cad9654481df4cebdaff8a9908,javascript,0,18,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a06fb5cad9654481df4cebdaff8a9908,javascript,0,18,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tempDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a0ea499be7358a586202c5663f397931,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
a108664229e1991a110ed70051ae4242,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
a10901da551b1d841e1ce6e5e78e6b85,javascript,23,14,5,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
a13179eb5d1616cdef169657512a108f,javascript,10,19,9,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
a13179eb5d1616cdef169657512a108f,javascript,10,20,9,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
a13179eb5d1616cdef169657512a108f,javascript,4,18,11,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
a13179eb5d1616cdef169657512a108f,javascript,4,26,11,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
a139a6d837cd6e6a34c04d006a2c4a5d,javascript,0,77,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a139a6d837cd6e6a34c04d006a2c4a5d,javascript,0,77,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(this.getSquareId(move.x, move.y)).innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
a171f39e78707da496ad180b4273805e,javascript,2,21,25,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
a1a51679cb590e3c1bd814f418ee6327,javascript,1,8,16,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a2c52257e3a8dcbb8fd84d4805d3cc5f,javascript,0,39,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a2c52257e3a8dcbb8fd84d4805d3cc5f,javascript,1,39,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a389d711a31e526d75c9ad23d544d88e,javascript,1,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
a389d711a31e526d75c9ad23d544d88e,javascript,5,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
a42c52ca1699de0604bc5ae7a3493e06,javascript,0,12,28,files.javascript.rules.browser.security.js-open-redirect-from-function,The application accepts potentially user-controlled input `path` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.
a499b49721cd7ae996f45cb3f188a636,javascript,0,27,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a499b49721cd7ae996f45cb3f188a636,javascript,0,27,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a499b49721cd7ae996f45cb3f188a636,javascript,0,30,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a499b49721cd7ae996f45cb3f188a636,javascript,0,30,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a4da06f5cd75a0985d3bd0f3976de115,javascript,4,26,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a4da06f5cd75a0985d3bd0f3976de115,javascript,4,26,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `resultsDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a4da06f5cd75a0985d3bd0f3976de115,javascript,4,26,47,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a663d8830d8a39ab10de0e2d87bde612,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
a663d8830d8a39ab10de0e2d87bde612,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
a6c3a328c7567a55a05f0a4759b35674,javascript,2,67,54,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a6c3a328c7567a55a05f0a4759b35674,javascript,2,70,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a6c3a328c7567a55a05f0a4759b35674,javascript,2,70,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `vmcMenu.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a7602c3da79e398334aeb06b8e55a6ff,javascript,0,3,13,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
a7602c3da79e398334aeb06b8e55a6ff,javascript,0,4,13,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
a7cecfe990a110873cf14eec113c06e6,javascript,1,155,13,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
a804e4b02f543937e61840a79eb44507,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
a8b0c9b96a0417c5d8a2b9a7017eb069,javascript,6,4,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
a8b0c9b96a0417c5d8a2b9a7017eb069,javascript,6,4,5,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
a8e34c7c9a58423cad911dcc4d618bc0,javascript,1,9,1,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
a8e34c7c9a58423cad911dcc4d618bc0,javascript,1,9,1,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
a9a29118f68fe134881334753174724b,javascript,0,17,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a9a29118f68fe134881334753174724b,javascript,0,17,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `label.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,2,22,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,2,22,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `weatherDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,2,22,36,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,3,28,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,3,28,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `weatherDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,3,28,36,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,3,39,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,3,39,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `weatherDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,3,39,32,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,4,33,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,4,33,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `weatherDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,4,33,36,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,4,45,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,4,45,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `weatherDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a9ba95f3b9c0253bb1565aa59f8b3e8b,javascript,4,45,32,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a9f76a7d4921595d665f5aca987b1ceb,javascript,1,7,15,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a9f76a7d4921595d665f5aca987b1ceb,javascript,1,9,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a9f76a7d4921595d665f5aca987b1ceb,javascript,1,9,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `list.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a9f76a7d4921595d665f5aca987b1ceb,javascript,10,11,15,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a9f76a7d4921595d665f5aca987b1ceb,javascript,10,13,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a9f76a7d4921595d665f5aca987b1ceb,javascript,10,13,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `this.list.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a9f76a7d4921595d665f5aca987b1ceb,javascript,4,9,15,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a9f76a7d4921595d665f5aca987b1ceb,javascript,4,11,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a9f76a7d4921595d665f5aca987b1ceb,javascript,4,11,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `this.list.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a9f76a7d4921595d665f5aca987b1ceb,javascript,7,16,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
a9f76a7d4921595d665f5aca987b1ceb,javascript,7,16,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `this.list.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
a9f76a7d4921595d665f5aca987b1ceb,javascript,7,16,28,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
a9fc0f83cd6d6ecb94036452ac5c6233,javascript,3,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
a9fc0f83cd6d6ecb94036452ac5c6233,javascript,9,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
aa33f7c47ee14b6066fd788e2706ac09,javascript,2,14,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
aa33f7c47ee14b6066fd788e2706ac09,javascript,2,14,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('response').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
aa648ed834bc655993823125369ba266,javascript,0,56,7,files.javascript.rules.lang.security.audit.prototype-pollution.prototype-pollution-loop,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
aaae3e0968eacc8ff327c54063d523a8,javascript,0,33,46,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
aaae3e0968eacc8ff327c54063d523a8,javascript,0,35,20,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `message` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
aaae3e0968eacc8ff327c54063d523a8,javascript,1,33,46,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
aaae3e0968eacc8ff327c54063d523a8,javascript,1,35,20,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `message` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
abc67deb547bc4f5686c8521ce2d8207,javascript,2,17,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
abc67deb547bc4f5686c8521ce2d8207,javascript,2,17,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `productCard.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
abc67deb547bc4f5686c8521ce2d8207,javascript,2,17,37,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
abff7313e6169343dbb031a20174438b,javascript,3,12,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
abff7313e6169343dbb031a20174438b,javascript,3,14,23,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
ac2303cb22460848c7d1dd1a18423bca,javascript,2,18,49,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ac8ca055091d9501dc04fbfb8e950a12,javascript,4,16,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ac8ca055091d9501dc04fbfb8e950a12,javascript,4,16,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `subcategoryElem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ac8ca055091d9501dc04fbfb8e950a12,javascript,4,16,35,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
ac8ca055091d9501dc04fbfb8e950a12,javascript,4,24,11,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ac8ca055091d9501dc04fbfb8e950a12,javascript,4,24,11,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `subsubcategoryElem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ac8ca055091d9501dc04fbfb8e950a12,javascript,4,24,42,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
acb44c0b64e015207665a542517f8fcf,javascript,0,29,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
acb44c0b64e015207665a542517f8fcf,javascript,0,29,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.element.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
acb44c0b64e015207665a542517f8fcf,javascript,0,35,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
acb44c0b64e015207665a542517f8fcf,javascript,0,35,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
acee21991c16d3e65d313e2567a33c5c,javascript,24,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
acfcfaf5265bd56755f9d254b81c5ade,javascript,0,18,36,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
acfcfaf5265bd56755f9d254b81c5ade,javascript,1,18,36,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ad13fe100f71dfb0c21fb051e59e1eea,javascript,7,1,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
ad4d9810f7c276030ecbdadcdb9090d9,javascript,0,8,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ad4d9810f7c276030ecbdadcdb9090d9,javascript,0,8,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `customerInfoDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ad4d9810f7c276030ecbdadcdb9090d9,javascript,0,8,41,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
addb7e7a955780a58e9764c6bd1f0853,javascript,0,5,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
addb7e7a955780a58e9764c6bd1f0853,javascript,0,5,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `pageStyle.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
addb7e7a955780a58e9764c6bd1f0853,javascript,0,11,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
addb7e7a955780a58e9764c6bd1f0853,javascript,0,11,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `styleEditor.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
addb7e7a955780a58e9764c6bd1f0853,javascript,0,20,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
addb7e7a955780a58e9764c6bd1f0853,javascript,0,20,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `styleEditor.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
addb7e7a955780a58e9764c6bd1f0853,javascript,0,21,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
addb7e7a955780a58e9764c6bd1f0853,javascript,0,21,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `pageStyle.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
adf9c1a24add35e84401b1c3e7c160d9,javascript,10,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
adf9c1a24add35e84401b1c3e7c160d9,javascript,8,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
ae2cc48cc9c931c7c4e2346299ae3f8b,javascript,1,4,26,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
ae2cc48cc9c931c7c4e2346299ae3f8b,javascript,1,5,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ae2cc48cc9c931c7c4e2346299ae3f8b,javascript,1,5,7,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""soundcloud-widget-container"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
ae8a09805179812abf0d0f0a86b672b3,javascript,4,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
ae8f3dfb6e017574fdc6d90e4b060cc8,javascript,2,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
aedaae61ec07a2c542cec911c410b7ef,javascript,1,46,31,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
aedaae61ec07a2c542cec911c410b7ef,javascript,6,62,44,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `filePath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
af331b429afef154b147723fc14939f0,javascript,1,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
af6e1069d702d3a3995b553f6eede23c,javascript,0,13,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
af94e89d7cac09543ebcf0f5e798146a,javascript,15,4,36,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `filePath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
af94e89d7cac09543ebcf0f5e798146a,javascript,2,1,25,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
afd54b38b6d78129e122683b498468b1,javascript,2,36,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
afd54b38b6d78129e122683b498468b1,javascript,2,36,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `savedDataDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
afd54b38b6d78129e122683b498468b1,javascript,5,11,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
afd54b38b6d78129e122683b498468b1,javascript,5,11,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `savedDataDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
afd54b38b6d78129e122683b498468b1,javascript,6,11,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
afd54b38b6d78129e122683b498468b1,javascript,6,11,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `savedDataDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
afd54b38b6d78129e122683b498468b1,javascript,7,11,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
afd54b38b6d78129e122683b498468b1,javascript,7,11,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `savedDataDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
afe3c42d69ff1ece33b9dcb1c6d0ad95,javascript,2,8,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
afe3c42d69ff1ece33b9dcb1c6d0ad95,javascript,2,8,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `questionDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
afe3c42d69ff1ece33b9dcb1c6d0ad95,javascript,2,11,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
afe3c42d69ff1ece33b9dcb1c6d0ad95,javascript,2,11,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `questionDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
affd386e621fd5bb3d9151462b5177ea,javascript,1,27,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
affd386e621fd5bb3d9151462b5177ea,javascript,1,27,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.querySelector('tbody').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
b02ff09c235603692f778da4f5bdf700,javascript,0,26,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
b1ba9178cca8108231783d990351e442,javascript,1,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
b22ffab5707cca1f73d9c619a3b77307,javascript,5,32,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
b22ffab5707cca1f73d9c619a3b77307,javascript,5,32,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `itemElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
b22ffab5707cca1f73d9c619a3b77307,javascript,5,32,29,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
b236588e3a779ca75e82e920e9fac8a8,javascript,2,14,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
b236588e3a779ca75e82e920e9fac8a8,javascript,2,14,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `block.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
b236588e3a779ca75e82e920e9fac8a8,javascript,2,14,27,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
b285f1eb418a7a280f6c60101180974b,javascript,1,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
b29088d766deb650317a9faa4a184cb9,javascript,2,23,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
b29088d766deb650317a9faa4a184cb9,javascript,2,23,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `div.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
b2cc6c30ceed7e956e33b25d544615fd,javascript,1,2,1,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
b2cc6c30ceed7e956e33b25d544615fd,javascript,2,1,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
b2cc6c30ceed7e956e33b25d544615fd,javascript,2,4,5,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
b2cc6c30ceed7e956e33b25d544615fd,javascript,3,2,1,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
b310f012f33f60f6a56b0b6531297933,javascript,0,13,23,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
b390c84ac116280689fe44261acacc1c,javascript,0,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
b390c84ac116280689fe44261acacc1c,javascript,5,2,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
b42839f25507efa7fc381ed2544e811d,javascript,0,18,12,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b42839f25507efa7fc381ed2544e811d,javascript,0,37,12,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b4441e42e266667e4d30efdb7f7c091d,javascript,12,19,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
b4441e42e266667e4d30efdb7f7c091d,javascript,12,19,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tagContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
b4cf2e26d8ed3728fc6e04b91f440534,javascript,0,23,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
b4cf2e26d8ed3728fc6e04b91f440534,javascript,0,34,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
b4e3827ce657626183ffda10443eadae,javascript,0,8,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
b4e3827ce657626183ffda10443eadae,javascript,0,8,5,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""output_content"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
b589427a3cc15c17161b3fee2f659edc,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
b589427a3cc15c17161b3fee2f659edc,javascript,0,62,3,files.javascript.rules.express.security.audit.remote-property-injection,"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties."
b589427a3cc15c17161b3fee2f659edc,javascript,0,96,3,files.javascript.rules.express.security.audit.remote-property-injection,"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties."
b6488832ce0718fbff0045a26c9f29cc,javascript,1,7,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
b6488832ce0718fbff0045a26c9f29cc,javascript,1,7,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `productDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
b6488832ce0718fbff0045a26c9f29cc,javascript,1,7,30,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
b71bb8e276728536c7af781abe9d4e21,javascript,0,8,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
b71bb8e276728536c7af781abe9d4e21,javascript,0,8,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
b71bb8e276728536c7af781abe9d4e21,javascript,2,8,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
b71bb8e276728536c7af781abe9d4e21,javascript,2,8,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
b77afe58b8fbd55c8c7594dfb735c3a8,javascript,2,3,21,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
b7919a9d5527d878c29432b98929b875,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
b7cecdbd19e4e592039f45b98302cce7,javascript,0,25,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
b7cecdbd19e4e592039f45b98302cce7,javascript,0,25,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `textElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
b7e96679add708de4314e9bc8c694c9e,javascript,2,20,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
b7e96679add708de4314e9bc8c694c9e,javascript,2,20,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `block.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
b7e96679add708de4314e9bc8c694c9e,javascript,2,20,27,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
b8d017b1c861ed6f2e41d3df1409ad09,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
b8d017b1c861ed6f2e41d3df1409ad09,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
b8d017b1c861ed6f2e41d3df1409ad09,javascript,3,25,13,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
b918f50fa0f7ccf1624668936ee5fede,javascript,1,14,25,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b93177e42f187df7909de994279011ad,javascript,0,19,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
b93177e42f187df7909de994279011ad,javascript,0,44,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
b93177e42f187df7909de994279011ad,javascript,0,49,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
bbc446e063a3a4f996246aad37408ef8,javascript,0,6,5,files.javascript.rules.browser.security.wildcard-postmessage-configuration,"The target origin of the window.postMessage() API is set to ""*"". This could allow for information disclosure due to the possibility of any origin allowed to receive the message."
bbc446e063a3a4f996246aad37408ef8,javascript,1,3,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
bc155fd7ab855cba18694db5e35b09f7,javascript,2,6,39,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
bc155fd7ab855cba18694db5e35b09f7,javascript,2,31,15,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `req` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
bc2e800b1b6d4f2f5eaec1f5d793dc7d,javascript,3,14,48,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
bc2e800b1b6d4f2f5eaec1f5d793dc7d,javascript,3,15,42,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `fileName` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
bc2e800b1b6d4f2f5eaec1f5d793dc7d,javascript,3,34,46,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
bc2e800b1b6d4f2f5eaec1f5d793dc7d,javascript,3,35,40,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `id` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
bc4d236fb2dc77a872dd8db10138d8d8,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
bcc49506e0858a152b6b986376f837ca,javascript,0,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
bcc49506e0858a152b6b986376f837ca,javascript,0,47,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
bd688ece8539aa7bd2d70f80f62be44e,javascript,0,7,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
bd688ece8539aa7bd2d70f80f62be44e,javascript,0,7,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `input.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
be5543b16b85e2b4acff3cd25d26c5e5,javascript,0,7,33,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
bead670351724ca454de4750a741985a,javascript,3,14,31,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
bed4a523ff7bf85bc6c672e332bab112,javascript,0,10,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
bed4a523ff7bf85bc6c672e332bab112,javascript,0,10,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.querySelector('.out-1').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
bed4a523ff7bf85bc6c672e332bab112,javascript,1,7,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
bed4a523ff7bf85bc6c672e332bab112,javascript,1,7,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.querySelector('.out-1').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
bf0c49ae9820207e540f0a6b140d55e2,javascript,2,4,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
bf0c49ae9820207e540f0a6b140d55e2,javascript,2,4,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `preview.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
bf3b7308d54fc46f85e4815eb55d88b3,javascript,25,7,64,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
bf545b59f8a49cceb088cdee47b0e033,javascript,0,13,11,files.javascript.rules.puppeteer.security.audit.puppeteer-goto-injection,If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
bf8130231a05a48b9b708c2f00619dd2,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
c081f9f1c3bbbe3b92c3a81ec5c949c5,javascript,2,96,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c081f9f1c3bbbe3b92c3a81ec5c949c5,javascript,2,96,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `scoreDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c081f9f1c3bbbe3b92c3a81ec5c949c5,javascript,2,126,2,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c081f9f1c3bbbe3b92c3a81ec5c949c5,javascript,2,126,2,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `scoreDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c0f2a3e041028ffc7bf119d5ab263d58,javascript,2,22,33,files.javascript.rules.lang.security.audit.detect-redos,"Detected the use of a regular expression `(?:[a-z0-9+!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities."
c19290f88f219e4bc2928620b18c079a,javascript,4,7,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
c43a643c632c68ae7a8e287e2a3b80b3,javascript,2,9,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c43a643c632c68ae7a8e287e2a3b80b3,javascript,2,9,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `daysElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c43a643c632c68ae7a8e287e2a3b80b3,javascript,2,10,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c43a643c632c68ae7a8e287e2a3b80b3,javascript,2,10,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `hoursElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c43a643c632c68ae7a8e287e2a3b80b3,javascript,2,11,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c43a643c632c68ae7a8e287e2a3b80b3,javascript,2,11,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `minutesElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c43a643c632c68ae7a8e287e2a3b80b3,javascript,2,12,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c43a643c632c68ae7a8e287e2a3b80b3,javascript,2,12,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `secondsElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c486f1cdd8c95b1cdf8b5a32c22e95bf,javascript,4,5,11,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
c4c5c6f58ab36efdde6b788715510c41,javascript,8,9,51,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
c56861fb8b5278284ebcc0b317ea4be2,javascript,0,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
c5d3e3c5c1cace8615214182538135ab,javascript,3,19,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c5d3e3c5c1cace8615214182538135ab,javascript,3,19,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c5d3e3c5c1cace8615214182538135ab,javascript,3,22,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c5d3e3c5c1cace8615214182538135ab,javascript,3,22,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c5d3e3c5c1cace8615214182538135ab,javascript,4,19,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c5d3e3c5c1cace8615214182538135ab,javascript,4,19,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c5d3e3c5c1cace8615214182538135ab,javascript,4,22,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c5d3e3c5c1cace8615214182538135ab,javascript,4,22,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c5d3e3c5c1cace8615214182538135ab,javascript,5,16,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c5d3e3c5c1cace8615214182538135ab,javascript,5,16,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c5d3e3c5c1cace8615214182538135ab,javascript,5,19,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c5d3e3c5c1cace8615214182538135ab,javascript,5,19,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c693f30efacbc5fe8828bda7fa6b21ce,javascript,0,18,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
c693f30efacbc5fe8828bda7fa6b21ce,javascript,0,42,9,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
c693f30efacbc5fe8828bda7fa6b21ce,javascript,0,47,9,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
c69cefc4dd8bb1cd1264182f674a0424,javascript,6,5,7,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
c6b951f3c88d2dfc1bba6e502bd082ae,javascript,2,8,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c6b951f3c88d2dfc1bba6e502bd082ae,javascript,2,8,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `newRow.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c6b951f3c88d2dfc1bba6e502bd082ae,javascript,2,8,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
c751ecd9cf46d13832d206b074b08db2,javascript,2,14,7,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
c79f91d92442c1d1bdca116348c222c1,javascript,0,10,21,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `answer` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
c79f91d92442c1d1bdca116348c222c1,javascript,0,11,41,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `answer` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
c7a5785cf6c3ba5c0cd7221b8f30323e,javascript,6,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
c7a5785cf6c3ba5c0cd7221b8f30323e,javascript,7,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
c7da536986d92a9a18085596ff386de8,javascript,2,27,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c7da536986d92a9a18085596ff386de8,javascript,2,27,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `slot1.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c7da536986d92a9a18085596ff386de8,javascript,2,28,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c7da536986d92a9a18085596ff386de8,javascript,2,28,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `slot2.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c7da536986d92a9a18085596ff386de8,javascript,2,29,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c7da536986d92a9a18085596ff386de8,javascript,2,29,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `slot3.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c7df39a71e2db7c27996724f813b03eb,javascript,1,45,15,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
c7df39a71e2db7c27996724f813b03eb,javascript,1,52,15,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
c877db0b6db13fa8825aa846d5371cb9,javascript,0,108,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
c992bf991e8c67206178a5ec46ea3381,javascript,1,10,29,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
c9a78ec7374ca1fbac7fc8499cdaab56,javascript,2,33,2,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
c9a78ec7374ca1fbac7fc8499cdaab56,javascript,2,33,2,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `card.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
c9a78ec7374ca1fbac7fc8499cdaab56,javascript,2,33,19,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
ca2879e33e6bd042f3ac2a9f42c4a2cb,javascript,0,56,2,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ca2879e33e6bd042f3ac2a9f42c4a2cb,javascript,0,56,2,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quizScore.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ca3f04a169ad70c1288caa17f5ff79fd,javascript,0,26,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ca3f04a169ad70c1288caa17f5ff79fd,javascript,0,26,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ca3f04a169ad70c1288caa17f5ff79fd,javascript,0,29,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ca3f04a169ad70c1288caa17f5ff79fd,javascript,0,29,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `progressBarFilled.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ca73b4eb8e078a1bedeb21e44daccd62,javascript,5,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
cb58cb3ebe98013b5425c22d1abbc3a2,javascript,17,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
cb58cb3ebe98013b5425c22d1abbc3a2,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
cb7e5afc8b4be2d49cbebde97810f174,javascript,10,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
cb7e5afc8b4be2d49cbebde97810f174,javascript,13,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
cb7e5afc8b4be2d49cbebde97810f174,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
cbb4f96d576324c6e60abf62ec4f1351,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
cbfb4255b399a97231a28382d0b1b73f,javascript,8,12,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
cbfb4255b399a97231a28382d0b1b73f,javascript,8,12,9,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
cc17e938c93053c8d5d6f965fb0c0b5b,javascript,0,11,6,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
cc17e938c93053c8d5d6f965fb0c0b5b,javascript,0,11,6,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `popup.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
cc17e938c93053c8d5d6f965fb0c0b5b,javascript,0,11,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
cc17e938c93053c8d5d6f965fb0c0b5b,javascript,6,13,6,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
cc17e938c93053c8d5d6f965fb0c0b5b,javascript,6,13,6,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `popup.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
cc17e938c93053c8d5d6f965fb0c0b5b,javascript,6,13,24,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
ccf9f9bc1ea2ef641318ad2f7c6a9bf1,javascript,0,16,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
ccf9f9bc1ea2ef641318ad2f7c6a9bf1,javascript,13,14,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
cd1bb0a37cc1b02e77b7e31f3d11290b,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
cd26487e8d292628e53adf38a8fb37df,javascript,4,6,3,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
cd311817d37dd5e62912ecc1f55bc440,javascript,2,8,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
cd311817d37dd5e62912ecc1f55bc440,javascript,2,8,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `incomeValue.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
cd311817d37dd5e62912ecc1f55bc440,javascript,2,12,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
cd311817d37dd5e62912ecc1f55bc440,javascript,2,12,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `expensesValue.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
cd311817d37dd5e62912ecc1f55bc440,javascript,4,18,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
cd311817d37dd5e62912ecc1f55bc440,javascript,4,18,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `displayElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
cd86febc69f8943c19dc041967dfdc50,javascript,0,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
cd86febc69f8943c19dc041967dfdc50,javascript,4,10,12,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
ce664d384adc226a1809f8c0cb23ec28,javascript,4,9,17,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
ce664d384adc226a1809f8c0cb23ec28,javascript,4,9,17,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
ce6dddca55bda618cd87e96a15497fdf,javascript,0,11,1,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.before(...)` is an anti-pattern that can lead to XSS vulnerabilities
cf1d53f59f51185e10f357a26cc4575c,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
cf1d53f59f51185e10f357a26cc4575c,javascript,0,33,12,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
cf1d53f59f51185e10f357a26cc4575c,javascript,0,42,12,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
cfd473702afa71c5787c9e60b5630a54,javascript,11,35,3,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
cfd473702afa71c5787c9e60b5630a54,javascript,12,36,3,files.javascript.rules.lang.security.audit.unsafe-dynamic-method,"Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code."
cfd473702afa71c5787c9e60b5630a54,javascript,17,34,39,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `documentPath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
cfd473702afa71c5787c9e60b5630a54,javascript,18,42,39,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `documentPath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
cfd473702afa71c5787c9e60b5630a54,javascript,24,18,9,files.javascript.rules.puppeteer.security.audit.puppeteer-goto-injection,If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
cfd473702afa71c5787c9e60b5630a54,javascript,8,9,12,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `dirPath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
cfd473702afa71c5787c9e60b5630a54,javascript,8,11,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
cfd473702afa71c5787c9e60b5630a54,javascript,8,21,32,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
cfd473702afa71c5787c9e60b5630a54,javascript,8,22,42,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `basePath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
cfd473702afa71c5787c9e60b5630a54,javascript,8,23,20,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `basePath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
cfd473702afa71c5787c9e60b5630a54,javascript,8,25,25,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
d063b592504f5ba40f63639ec1caf56b,javascript,3,8,9,files.javascript.rules.puppeteer.security.audit.puppeteer-goto-injection,If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
d0886f421506890ad600c0091e2c9bd0,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d187323ded08bf4df7b7a18ef88e2d37,javascript,0,17,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
d1d4f29341efd88ad7b3ed1c8cc27887,javascript,3,32,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
d1d4f29341efd88ad7b3ed1c8cc27887,javascript,3,32,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `textEditor.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
d27793e3b376c218fe48b0454c0f835d,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d27793e3b376c218fe48b0454c0f835d,javascript,8,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d29883604b28823b04aaabe2fc4a7d9f,javascript,6,8,50,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
d350b072dc3186cecae5301f2db76662,javascript,2,19,16,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d3799f30adbd3a636998d3e1692c6221,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d385fe01cb72293513b8de8d24678c3d,javascript,2,11,32,files.javascript.rules.browser.security.js-open-redirect-from-function,The application accepts potentially user-controlled input `path` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.
d40b6ee29da60477a605f786a5fb6a35,javascript,2,6,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
d40b6ee29da60477a605f786a5fb6a35,javascript,2,6,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `previewDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
d40b6ee29da60477a605f786a5fb6a35,javascript,8,9,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
d40b6ee29da60477a605f786a5fb6a35,javascript,8,9,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `previewDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
d4207a897db91da869384117211eabb7,javascript,0,7,3,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
d4207a897db91da869384117211eabb7,javascript,0,7,3,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
d50200e5a11185039639cf41962de865,javascript,1,1,14,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
d56ce2d50e2823f64a2818c254ea050c,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d56ce2d50e2823f64a2818c254ea050c,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d5bdedf1e81856877100686ca526c41f,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d6997ba2b4b9972d836ba13a16306adf,javascript,0,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d6d8e61ed1b96b2f57c4bc713efadaa5,javascript,10,1,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
d6d8e61ed1b96b2f57c4bc713efadaa5,javascript,13,1,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
d6d8e61ed1b96b2f57c4bc713efadaa5,javascript,18,1,1,files.javascript.rules.browser.security.insufficient-postmessage-origin-validation,No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).
d6f0fca6cf37e45bcc755f5c9304f7d3,javascript,3,1,31,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
d7382afc902a4b82eb58fe39b902d836,javascript,7,16,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
d75c194754db2d42a70ed248afbdb398,javascript,1,1,27,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
d7b6f3a54033ccc206c95d26bb195788,javascript,7,15,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d7b6f3a54033ccc206c95d26bb195788,javascript,7,26,14,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
d807ac871ba4f067d76085b790c8a1c5,javascript,0,2,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d807ac871ba4f067d76085b790c8a1c5,javascript,1,4,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d807ac871ba4f067d76085b790c8a1c5,javascript,1,12,17,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
d81caec64f9eeeb16251b59440703479,javascript,1,20,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
d81caec64f9eeeb16251b59440703479,javascript,1,22,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
d81caec64f9eeeb16251b59440703479,javascript,2,19,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
d81caec64f9eeeb16251b59440703479,javascript,2,21,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
d841905a7f912b5d97bc2fb0a6aac1f0,javascript,3,10,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
d841905a7f912b5d97bc2fb0a6aac1f0,javascript,3,10,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatLog.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
d841905a7f912b5d97bc2fb0a6aac1f0,javascript,3,16,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
d841905a7f912b5d97bc2fb0a6aac1f0,javascript,3,16,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatLog.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
d87770f39330907c346351fe59d06bec,javascript,0,15,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d87770f39330907c346351fe59d06bec,javascript,1,15,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
d9303921f9809aa324c09919a9647c1f,javascript,2,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
da10c5f400aac124d48c070c6155e8db,javascript,1,2,29,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
da10c5f400aac124d48c070c6155e8db,javascript,6,2,29,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
da19c927364e9248326d5eea6c26fa80,javascript,0,24,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
da19c927364e9248326d5eea6c26fa80,javascript,0,24,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `resultContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
db548f8fba209a61b48472a948097f50,javascript,9,12,23,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
db99e98433391d12ac27b2f0568f778c,javascript,2,12,11,files.javascript.rules.jquery.security.audit.jquery-insecure-selector,User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities
db99e98433391d12ac27b2f0568f778c,javascript,2,22,7,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
db99e98433391d12ac27b2f0568f778c,javascript,2,22,7,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
dccc9d5f11fac657cb077e1707f81336,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
dce737b62d58a8795abada6cccc2cb19,javascript,2,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
dd084d361ef68c3bf433ba046fee6e9c,javascript,0,31,13,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
dd084d361ef68c3bf433ba046fee6e9c,javascript,0,32,13,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
dd1ea44d362a9b352e36e2518a299e02,javascript,2,13,27,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
dd1ea44d362a9b352e36e2518a299e02,javascript,2,18,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
dd1ea44d362a9b352e36e2518a299e02,javascript,2,18,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `moviesContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
dd7aedd55cc013e1e4f8238d59b698da,javascript,12,8,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
dd7aedd55cc013e1e4f8238d59b698da,javascript,12,8,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `menuItem.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
dd7aedd55cc013e1e4f8238d59b698da,javascript,12,8,30,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
de5dcfa269460c533cb618eb07f112e7,javascript,0,3,38,files.javascript.rules.express.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries."
df34c2b8d3aca0a03d3dafbd465b088c,javascript,21,19,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
df34c2b8d3aca0a03d3dafbd465b088c,javascript,21,44,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
df34c2b8d3aca0a03d3dafbd465b088c,javascript,21,49,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
df6399ba3b3ef3695efbf2ee2f1cb774,javascript,0,19,50,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
df6399ba3b3ef3695efbf2ee2f1cb774,javascript,1,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
dfb24d19e89f87fdccdba2174a7172bd,javascript,0,3,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
dfb24d19e89f87fdccdba2174a7172bd,javascript,0,3,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `table.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
e022d9118a0cd567a0de8ff71fcf3479,javascript,2,13,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.html(...)` is an anti-pattern that can lead to XSS vulnerabilities
e022d9118a0cd567a0de8ff71fcf3479,javascript,2,13,5,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
e03fbe9d7d5c253fa821e9b81aad8be2,javascript,2,13,25,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e085e99416dbebf0fcca9b64dd7fe809,javascript,2,77,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e085e99416dbebf0fcca9b64dd7fe809,javascript,2,77,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quiz.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
e085e99416dbebf0fcca9b64dd7fe809,javascript,2,77,30,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
e085e99416dbebf0fcca9b64dd7fe809,javascript,2,84,13,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e085e99416dbebf0fcca9b64dd7fe809,javascript,2,84,13,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quiz.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
e085e99416dbebf0fcca9b64dd7fe809,javascript,2,84,31,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
e085e99416dbebf0fcca9b64dd7fe809,javascript,5,34,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e085e99416dbebf0fcca9b64dd7fe809,javascript,5,34,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quiz.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
e085e99416dbebf0fcca9b64dd7fe809,javascript,5,34,22,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
e085e99416dbebf0fcca9b64dd7fe809,javascript,5,38,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e085e99416dbebf0fcca9b64dd7fe809,javascript,5,38,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quiz.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
e085e99416dbebf0fcca9b64dd7fe809,javascript,5,38,23,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
e08dd5034fa96d50760011453fe6f3dd,javascript,0,4,14,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
e08dd5034fa96d50760011453fe6f3dd,javascript,1,4,10,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
e08dd5034fa96d50760011453fe6f3dd,javascript,1,6,14,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
e0cde108be36f6a5a0636afe64c23725,javascript,2,8,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e0cde108be36f6a5a0636afe64c23725,javascript,2,8,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `chatContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
e198928ffb819ab00a6f436c7ed8bf4b,javascript,0,96,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e198928ffb819ab00a6f436c7ed8bf4b,javascript,0,96,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `toCell.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
e1a5af6b82dab0c4861667e96f63f721,javascript,3,5,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e1a5af6b82dab0c4861667e96f63f721,javascript,3,5,1,files.javascript.rules.browser.security.insecure-innerhtml,"User controlled data in a `document.getElementById(""savedValue"").innerHTML` is an anti-pattern that can lead to XSS vulnerabilities"
e357e58b17b3ee12871580642a828315,javascript,0,26,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e357e58b17b3ee12871580642a828315,javascript,0,26,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `result.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
e37b27a34d90c3e1bf6be576df330d49,javascript,4,2,27,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
e37b27a34d90c3e1bf6be576df330d49,javascript,5,1,25,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
e384fc21687a22d7f4144fc5c765e248,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e384fc21687a22d7f4144fc5c765e248,javascript,10,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e384fc21687a22d7f4144fc5c765e248,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e384fc21687a22d7f4144fc5c765e248,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e384fc21687a22d7f4144fc5c765e248,javascript,9,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e38f7c9db15ecedddab3a1e1a02c5b78,javascript,0,35,40,files.javascript.rules.browser.security.js-open-redirect-from-function,The application accepts potentially user-controlled input `href` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.
e3f7df541326f4e9c4612daecf942432,javascript,0,7,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e3f7df541326f4e9c4612daecf942432,javascript,0,54,57,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
e3f7df541326f4e9c4612daecf942432,javascript,0,68,43,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
e3f970d3d1cc7c63bca87ed3c20f0a0a,javascript,7,1,1,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e3f970d3d1cc7c63bca87ed3c20f0a0a,javascript,7,1,1,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `radioBarContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
e45374818c1ead98952cde89201cb650,javascript,1,13,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
e46228be74e8bbff33b8e64eec4d2332,javascript,0,16,10,files.javascript.rules.lang.security.detect-child-process,"Detected calls to child_process from a function argument `req`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. "
e47b859ad08c06593af9495c06319d39,javascript,0,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e47b859ad08c06593af9495c06319d39,javascript,0,18,42,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
e47b859ad08c06593af9495c06319d39,javascript,0,36,21,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
e4a7dc37bba02cfbde2f84740aa0bdf9,javascript,1,36,39,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
e5690ce5fd51168520ee83d3d72d63e3,javascript,2,24,18,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e57e61f8ec1b080ae6caa7ca9bf7a2b2,javascript,0,17,14,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
e57e61f8ec1b080ae6caa7ca9bf7a2b2,javascript,0,17,14,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `tagTypes` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
e57e61f8ec1b080ae6caa7ca9bf7a2b2,javascript,0,22,14,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `flags` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
e57e61f8ec1b080ae6caa7ca9bf7a2b2,javascript,0,22,14,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `tagTypes` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
e5de9d95f0b13054dc61fee583bd99b4,javascript,0,23,25,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
e5de9d95f0b13054dc61fee583bd99b4,javascript,3,52,25,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
e5de9d95f0b13054dc61fee583bd99b4,javascript,4,26,35,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
e64f3226cfe2a9a733b98b3648c916b9,javascript,2,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
e64f3226cfe2a9a733b98b3648c916b9,javascript,4,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
e64f3226cfe2a9a733b98b3648c916b9,javascript,7,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
e64f3226cfe2a9a733b98b3648c916b9,javascript,8,1,1,files.javascript.rules.grpc.security.grpc-nodejs-insecure-connection,"Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
e6bf8156ada48c07beda5bf4670c12d3,javascript,0,6,22,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `outputPath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
e6bf8156ada48c07beda5bf4670c12d3,javascript,0,8,35,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `outputPath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
e6e2e742c2475f28178d152609aa4a49,javascript,0,43,15,files.javascript.rules.playwright.security.audit.playwright-goto-injection,If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
e6e2e742c2475f28178d152609aa4a49,javascript,0,73,19,files.javascript.rules.playwright.security.audit.playwright-goto-injection,If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
e706a1c153b6b8f96fb59cacf86724a1,javascript,1,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e706a1c153b6b8f96fb59cacf86724a1,javascript,1,27,14,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
e707046ddb90bb77ad490983a7331415,javascript,1,5,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e7570a71b08b2e674c8fc5037f85be7f,javascript,4,4,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e76724a57b19567c0e74a05e7a0c03a1,javascript,0,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e8407b44c4d67f876bb2abb25166d6b8,javascript,13,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
e8d7bd62176abc1c3f6f91ee5396939c,javascript,2,7,22,files.javascript.rules.browser.security.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e8d7bd62176abc1c3f6f91ee5396939c,javascript,2,8,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e8d7bd62176abc1c3f6f91ee5396939c,javascript,2,8,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `output.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
e8d7bd62176abc1c3f6f91ee5396939c,javascript,2,10,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e8d7bd62176abc1c3f6f91ee5396939c,javascript,2,10,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `output.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
e8f9937294c1fed31f754cf4bbcacf11,javascript,0,23,25,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
e9dee455c4bad4b134b7c6da0909574c,javascript,0,8,9,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
e9dee455c4bad4b134b7c6da0909574c,javascript,0,8,9,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `messageDisplay.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ea119d6e9e0e59c91949afd2e930cfef,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
ea31a5384c0d5421b9c251c65c300536,javascript,0,1,29,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
eac3dae0b5ce72fa81d5c0147520dfef,javascript,2,8,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
eac3dae0b5ce72fa81d5c0147520dfef,javascript,2,8,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `resultsDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
eac3dae0b5ce72fa81d5c0147520dfef,javascript,2,9,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
eac3dae0b5ce72fa81d5c0147520dfef,javascript,2,9,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `resultsDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
eac3dae0b5ce72fa81d5c0147520dfef,javascript,2,10,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
eac3dae0b5ce72fa81d5c0147520dfef,javascript,2,10,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `resultsDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
eb2cafea963dd096df489ead805fc555,javascript,2,11,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
eb2cafea963dd096df489ead805fc555,javascript,2,11,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
eb2cafea963dd096df489ead805fc555,javascript,3,35,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
eb2cafea963dd096df489ead805fc555,javascript,3,35,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
eb2cafea963dd096df489ead805fc555,javascript,4,5,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
eb2cafea963dd096df489ead805fc555,javascript,4,5,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
eb66e4d63a2347d2bc69881da499231f,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
eb87da34d98b13e2fa53823cafdb2747,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
eb88b6400687c0c20c228093d14e4f66,javascript,0,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
eb88b6400687c0c20c228093d14e4f66,javascript,0,47,55,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
eb88b6400687c0c20c228093d14e4f66,javascript,0,55,21,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
ebad8a7803fbfeca6bde4527f49a5025,javascript,3,11,9,files.javascript.rules.puppeteer.security.audit.puppeteer-goto-injection,If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
ebe0715a378ea389bf2b97def7142410,javascript,0,10,15,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `fileName` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec0642cf7412d580fb751f2743def03a,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
ec2118d583229aed623fa891caffbc56,javascript,0,28,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,28,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_h').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,29,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,29,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_i').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,30,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,30,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_s').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,36,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,36,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_h').nextElementSibling.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,37,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,37,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_i').nextElementSibling.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,38,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,38,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_s').nextElementSibling.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,59,15,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,59,15,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_h').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,60,15,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,60,15,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_i').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,61,15,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,61,15,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_s').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,67,15,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,67,15,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_h').nextElementSibling.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,68,15,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,68,15,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_i').nextElementSibling.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,69,15,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,69,15,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.querySelector('.timer_s').nextElementSibling.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,78,15,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,78,15,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.closest('.product_page').querySelector('.current_bet span').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,79,15,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,79,15,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.closest('.product_page').querySelector('.bet_count span').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2118d583229aed623fa891caffbc56,javascript,0,81,15,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ec2118d583229aed623fa891caffbc56,javascript,0,81,15,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `item.nextElementSibling.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,36,5,22,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `directoryPath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,36,6,18,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `directoryPath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,36,12,68,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,36,13,37,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `templateName` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,36,19,30,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,36,19,45,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,36,20,20,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `directoryPath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,36,20,20,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `fileName` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,37,5,45,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,37,6,16,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `{ projectName }` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,37,17,18,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `dir` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,37,17,18,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `{ projectName }` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,37,17,28,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,37,17,38,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,39,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,40,5,45,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,40,6,16,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `{ projectName }` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,40,19,18,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `dir` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,40,19,18,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `{ projectName }` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,40,19,28,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,40,19,38,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,41,18,32,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,41,19,20,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `basePath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec2ecaa00a49cbf3bc42e93c8594f0ac,javascript,5,28,46,files.javascript.rules.lang.security.audit.path-traversal.path-join-resolve-traversal,"Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first."
ec759058ac22cea92e348b08882560ff,javascript,2,13,13,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
ec8035be86f5af6b6b3c5287ea2d6f10,javascript,0,4,12,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `folderName` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
ec8edc3bd225db06b720980dec58549f,javascript,0,19,107,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
ec8edc3bd225db06b720980dec58549f,javascript,0,23,5,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.after(...)` is an anti-pattern that can lead to XSS vulnerabilities
ecb750a4f6829fabb7bf00714a0b91dc,javascript,1,30,7,files.javascript.rules.express.security.audit.remote-property-injection,"Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties."
ecbd76caa0a1f8c21e479b86a4d9a5be,javascript,3,21,11,files.javascript.rules.puppeteer.security.audit.puppeteer-goto-injection,If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities
ed7820f9ae2b0293df2eaea66411f796,javascript,1,13,27,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
ed7820f9ae2b0293df2eaea66411f796,javascript,1,34,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
ed7820f9ae2b0293df2eaea66411f796,javascript,1,46,25,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
ed7820f9ae2b0293df2eaea66411f796,javascript,1,56,9,files.javascript.rules.jquery.security.audit.jquery-insecure-method,User controlled data in a jQuery's `.append(...)` is an anti-pattern that can lead to XSS vulnerabilities
ed87053fae3d977df3ca0a61fbfe2218,javascript,2,42,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ed87053fae3d977df3ca0a61fbfe2218,javascript,2,42,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quizContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ed87053fae3d977df3ca0a61fbfe2218,javascript,2,53,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ed87053fae3d977df3ca0a61fbfe2218,javascript,2,53,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `choices.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ed87053fae3d977df3ca0a61fbfe2218,javascript,3,42,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ed87053fae3d977df3ca0a61fbfe2218,javascript,3,42,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `quizContainer.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ed87053fae3d977df3ca0a61fbfe2218,javascript,3,53,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ed87053fae3d977df3ca0a61fbfe2218,javascript,3,53,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `choices.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ed92d6aae162293bc3b0757ecb680804,javascript,13,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
ed92d6aae162293bc3b0757ecb680804,javascript,4,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
eda98d9b9f49e5d24dd979d3d8eb18cd,javascript,1,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
ef7a22919b6c99ae960b0ad353f6aecc,javascript,1,5,9,files.javascript.rules.express.security.audit.express-cookie-session-default-name,Don’t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.
ef7a22919b6c99ae960b0ad353f6aecc,javascript,1,5,9,files.javascript.rules.express.security.audit.express-cookie-session-no-domain,"Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."
ef7a22919b6c99ae960b0ad353f6aecc,javascript,1,5,9,files.javascript.rules.express.security.audit.express-cookie-session-no-expires,Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.
ef7a22919b6c99ae960b0ad353f6aecc,javascript,1,5,9,files.javascript.rules.express.security.audit.express-cookie-session-no-path,"Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."
ef7a22919b6c99ae960b0ad353f6aecc,javascript,1,5,9,files.javascript.rules.express.security.audit.express-cookie-session-no-secure,Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.
ef7a22919b6c99ae960b0ad353f6aecc,javascript,1,6,3,files.javascript.rules.express.security.audit.express-session-hardcoded-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
ef9c5477d99303f7a14de1b7cdd0f708,javascript,6,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f001e968bee1069bb15ede6dcbdcff46,javascript,1,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f001e968bee1069bb15ede6dcbdcff46,javascript,4,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f00f6b6801892837cbadb56c53243ccd,javascript,7,39,46,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
f0509959f444c35a8725329a90f8cd63,javascript,15,51,5,files.javascript.rules.lang.security.audit.prototype-pollution.prototype-pollution-assignment,"Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
f069388324106b0a05c6a010af0c7c06,javascript,6,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f2aaffea58b70445ba519ccf2372e605,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f2d6f8ee7ac22a40e7d5fa1570ccc352,javascript,0,5,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f2d6f8ee7ac22a40e7d5fa1570ccc352,javascript,5,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f4da86f4239d152c92485fc37fc2bff4,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f67b6c37c98a4561011cbbbab6843447,javascript,1,4,10,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f67b6c37c98a4561011cbbbab6843447,javascript,11,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f67b6c37c98a4561011cbbbab6843447,javascript,6,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f69d99ecdc10e27220432cff63585ba8,javascript,1,19,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f69d99ecdc10e27220432cff63585ba8,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f6caea9760d07616be5c5caa5b8d95ef,javascript,1,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f6caea9760d07616be5c5caa5b8d95ef,javascript,1,17,12,files.javascript.rules.express.security.audit.xss.direct-response-write,"Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML."
f6d8b7ac34e26c1ea55a70714718b85f,javascript,0,4,14,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
f6d8b7ac34e26c1ea55a70714718b85f,javascript,0,6,12,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
f70f171081d6ecf4b3863b0fbb7577c3,javascript,1,6,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f815a7dc204d998d2fa9ac65d4ad26d6,javascript,3,9,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
f815a7dc204d998d2fa9ac65d4ad26d6,javascript,5,40,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
f8329e4aa181156a66c42cb0907793c2,javascript,17,10,32,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
f8329e4aa181156a66c42cb0907793c2,javascript,18,5,30,files.javascript.rules.lang.security.detect-insecure-websocket,Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
f8392c63e32fb7858cc3428672eac2bc,javascript,5,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f86f462d4382ee3e0aa812882e81916e,javascript,3,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f8c1d49f3794c50fb6771470ae5c931e,javascript,0,116,13,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
f8dd974497651c60b08058a49b67ae2f,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
f8fb385ade7de3b618cdee02010428d8,javascript,0,16,11,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
f8fb385ade7de3b618cdee02010428d8,javascript,0,16,11,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `para.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
f8fb385ade7de3b618cdee02010428d8,javascript,0,20,11,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
f8fb385ade7de3b618cdee02010428d8,javascript,0,20,11,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `para.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
f8fb385ade7de3b618cdee02010428d8,javascript,1,16,11,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
f8fb385ade7de3b618cdee02010428d8,javascript,1,16,11,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `para.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
f8fb385ade7de3b618cdee02010428d8,javascript,1,20,11,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
f8fb385ade7de3b618cdee02010428d8,javascript,1,20,11,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `para.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
f8fb385ade7de3b618cdee02010428d8,javascript,1,31,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
f8fb385ade7de3b618cdee02010428d8,javascript,1,31,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `para.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
f919ccc012de1344a6e37bdaeeecbfb4,javascript,4,92,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
f919ccc012de1344a6e37bdaeeecbfb4,javascript,4,92,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `predictionResults.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
fa19373ab4db692e9bd75edb66cb63e5,javascript,0,3,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
fac7e711f10b1c34820b18f0c46e1a57,javascript,0,13,115,files.javascript.rules.browser.security.js-open-redirect-from-function,The application accepts potentially user-controlled input `postContent` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.
faf7e0ef71bb7db0d9cd86d15198e725,javascript,4,4,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
faf87d220542ed84f4c368c97a92d229,javascript,4,13,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
faf87d220542ed84f4c368c97a92d229,javascript,4,13,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `infoDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
faf87d220542ed84f4c368c97a92d229,javascript,4,15,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
faf87d220542ed84f4c368c97a92d229,javascript,4,15,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `paintingDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
fb0e0517bf7ad3d32b1adeec9a225149,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
fb80b75418bd2b8c815cb5fd48ea353c,javascript,1,22,25,files.javascript.rules.lang.security.audit.detect-non-literal-fs-filename,"Detected that function argument `filePath` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated."
fba26083c3170408d0010035bbfae10c,javascript,1,16,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
fba26083c3170408d0010035bbfae10c,javascript,1,16,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `freieParkplaetze.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
fbc9662ba22ad25bf8a04c8076b7a23a,javascript,0,11,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
fbc9662ba22ad25bf8a04c8076b7a23a,javascript,0,11,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `tripDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
fbc9662ba22ad25bf8a04c8076b7a23a,javascript,0,11,25,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
fbc9662ba22ad25bf8a04c8076b7a23a,javascript,0,26,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
fbc9662ba22ad25bf8a04c8076b7a23a,javascript,0,26,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `routeDetailsDiv.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
fbc9662ba22ad25bf8a04c8076b7a23a,javascript,0,26,36,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
fbf052dcdcfd07d93006bd2bd117bc82,javascript,4,4,17,files.javascript.rules.lang.security.audit.detect-non-literal-regexp,"RegExp() called with a `letter` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS."
fc882780bd640e51f48d979a3cbbf6ad,javascript,2,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
fcb23826489934dcacbe71ee848430d1,javascript,1,14,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
fcb23826489934dcacbe71ee848430d1,javascript,1,14,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('description').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
fcb23826489934dcacbe71ee848430d1,javascript,1,25,7,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
fcb23826489934dcacbe71ee848430d1,javascript,1,25,7,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `document.getElementById('description').innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
fdc0375973ff73d553a3ad1127ded74d,javascript,5,26,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
fdc07774529905f26041a18d3ee7ce00,javascript,0,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
fdc07774529905f26041a18d3ee7ce00,javascript,0,34,37,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
fdc07774529905f26041a18d3ee7ce00,javascript,0,47,39,files.javascript.rules.jsonwebtoken.security.hardcoded-jwt-secret,"A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module)."
fe68c5ca8fc23a3aa6ec66a8d2efa5fe,javascript,0,23,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
fe68c5ca8fc23a3aa6ec66a8d2efa5fe,javascript,0,23,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `unitElement.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
fe68c5ca8fc23a3aa6ec66a8d2efa5fe,javascript,0,23,27,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
fe856fe35d241c6469e48621763ca6e2,javascript,2,3,18,files.javascript.rules.jquery.security.audit.prohibit-jquery-html,"JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`."
fea6e837dfae3ff534b9dc2f15e0c747,javascript,4,24,11,files.javascript.rules.lang.security.audit.prototype-pollution.prototype-pollution-loop,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
fea6e837dfae3ff534b9dc2f15e0c747,javascript,6,17,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
fea6e837dfae3ff534b9dc2f15e0c747,javascript,6,40,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
fea6e837dfae3ff534b9dc2f15e0c747,javascript,6,42,19,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
ff0bd3d7f1025ced4e9abb678c861405,javascript,0,18,21,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
ff0bd3d7f1025ced4e9abb678c861405,javascript,0,44,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
ff0bd3d7f1025ced4e9abb678c861405,javascript,0,49,17,files.javascript.rules.lang.security.audit.unsafe-formatstring,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
ff2f96e0fb0d1d839023d250f5b1d493,javascript,9,4,5,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ff2f96e0fb0d1d839023d250f5b1d493,javascript,9,4,5,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `p.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
ff2f96e0fb0d1d839023d250f5b1d493,javascript,9,4,19,files.javascript.rules.lang.security.html-in-template-string,"This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS)."
ff309b600d7e8b9c83d87fa1a09a6b5a,javascript,1,2,7,files.javascript.rules.express.security.audit.express-check-csurf-middleware-usage,A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.
ff6962c505ac4cd6cb91c83b7df9a8ec,javascript,6,8,3,files.javascript.rules.browser.security.insecure-document-method,"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities"
ff6962c505ac4cd6cb91c83b7df9a8ec,javascript,6,8,3,files.javascript.rules.browser.security.insecure-innerhtml,User controlled data in a `s.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities
01be4fc6642ebde592676b1fa24e54c8,php,2,15,1,files.php.rules.lang.security.injection.tainted-exec,User input is passed to a function that executes a shell command. This can lead to remote code execution.
01be4fc6642ebde592676b1fa24e54c8,php,2,15,1,files.php.rules.lang.security.tainted-exec,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.
01be4fc6642ebde592676b1fa24e54c8,php,2,15,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
01be4fc6642ebde592676b1fa24e54c8,php,2,21,1,files.php.rules.lang.security.injection.tainted-exec,User input is passed to a function that executes a shell command. This can lead to remote code execution.
01be4fc6642ebde592676b1fa24e54c8,php,2,21,1,files.php.rules.lang.security.tainted-exec,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.
01be4fc6642ebde592676b1fa24e54c8,php,2,21,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
0568bf729d305348f1f105244f021c5b,php,0,6,31,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
05ee4f109a2a818d9ee9d3446787b23d,php,1,12,10,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
0b3679bcce46c7983a9cbd418625f625,php,0,18,13,files.php.rules.lang.security.php-ssrf,"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Dangerous function file_get_contents with payload ""https://www.google.com/recaptcha/api/siteverify?secret={$recaptcha_secret}&response={$_POST['g-recaptcha-response']}"""
0b3679bcce46c7983a9cbd418625f625,php,0,19,61,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
136bc3f63d2da6a575426402720283a4,php,0,15,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
16560fd3786ee183df3feeb163a101da,php,3,6,4,files.php.rules.lang.security.unlink-use,Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.
16560fd3786ee183df3feeb163a101da,php,3,6,11,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
18b8d73a681322f643e1a6eedfefc7f8,php,1,17,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
25196b33b23ff9bca8f63c870e6fc36a,php,2,10,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
25c9a8748c62e54625838f64d0c3d93e,php,6,16,21,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25c9a8748c62e54625838f64d0c3d93e,php,6,16,43,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25c9a8748c62e54625838f64d0c3d93e,php,6,28,22,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25c9a8748c62e54625838f64d0c3d93e,php,6,28,43,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25c9a8748c62e54625838f64d0c3d93e,php,6,33,21,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25c9a8748c62e54625838f64d0c3d93e,php,6,33,43,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
25e10599575b5759a17118ed5ab90585,php,0,22,8,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
25e10599575b5759a17118ed5ab90585,php,0,28,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
2b478ec404952be3f14dece5f3a6a683,php,3,6,9,files.php.rules.lang.security.injection.tainted-exec,User input is passed to a function that executes a shell command. This can lead to remote code execution.
2b478ec404952be3f14dece5f3a6a683,php,3,6,9,files.php.rules.lang.security.tainted-exec,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.
2b478ec404952be3f14dece5f3a6a683,php,3,6,9,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
2c2d152d24cede3faaa875f8a6256439,php,1,12,27,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
2c2d152d24cede3faaa875f8a6256439,php,1,15,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
325a9f90cf89c970d1ade356e93a4152,php,0,12,10,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
3f9896dae9ad14cce781d5b1d9137536,php,0,17,1,files.php.rules.lang.security.curl-ssl-verifypeer-off,SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= false)
48676fb30b319a92fc4d2827e4d8f31f,php,0,2,32,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
507db341abeaa17cfb5795ba874f1cb8,php,0,34,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
531d4857884658c0c29c9af2851c1d13,php,1,4,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
531d4857884658c0c29c9af2851c1d13,php,3,4,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
5bc6e1ac84abc59094de9cd9da13f0dd,php,0,18,21,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
5bc6e1ac84abc59094de9cd9da13f0dd,php,0,18,43,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
5bc6e1ac84abc59094de9cd9da13f0dd,php,0,20,9,files.php.rules.lang.security.file-inclusion,"Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly."
5d2696d5487b2d175ceac9999872263d,php,3,3,3,files.php.rules.lang.security.php-ssrf,"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Dangerous function curl_init with payload $_GET['url']"
5d2696d5487b2d175ceac9999872263d,php,3,10,3,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
5f5610e93132a4dd108026b970c7860e,php,2,7,76,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
5f5610e93132a4dd108026b970c7860e,php,2,8,71,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
6370c4cbfa472ffa088ff64430bdee5b,php,4,2,1,files.php.rules.lang.security.php-ssrf,"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Dangerous function readfile with payload $_GET['filename']"
6370c4cbfa472ffa088ff64430bdee5b,php,4,5,11,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
695e7fc5183ede4e18894eb8eba03caa,php,3,13,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
71a32a65dae8551159a37f69c8747c84,php,2,12,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
74577c32164a555f5cc9dbc385588744,php,2,12,14,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
74577c32164a555f5cc9dbc385588744,php,2,15,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
74577c32164a555f5cc9dbc385588744,php,2,17,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
7e52515ee4b7cf56e33ee9d88576f47d,php,0,14,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
81e14ccf7076fbc03a9807929e20abb9,php,1,16,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
87e06c38f8adb9651589c8343f3defef,php,4,33,3,files.php.rules.lang.security.weak-crypto,Detected usage of weak crypto function. Consider using stronger alternatives.
8c27a6cb71f0703b8f9631e0d48ef183,php,0,12,21,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
8c27a6cb71f0703b8f9631e0d48ef183,php,0,12,47,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
8c27a6cb71f0703b8f9631e0d48ef183,php,0,13,9,files.php.rules.lang.security.file-inclusion,"Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly."
8c27a6cb71f0703b8f9631e0d48ef183,php,0,22,17,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
8c27a6cb71f0703b8f9631e0d48ef183,php,0,24,39,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
8c27a6cb71f0703b8f9631e0d48ef183,php,0,26,18,files.php.rules.lang.security.injection.tainted-filename,File name based on user input risks server-side request forgery.
94efc9bfc11b031ed5cf2bc0a09455d0,php,0,6,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
94efc9bfc11b031ed5cf2bc0a09455d0,php,0,6,11,files.php.rules.lang.security.injection.tainted-exec,User input is passed to a function that executes a shell command. This can lead to remote code execution.
94efc9bfc11b031ed5cf2bc0a09455d0,php,0,6,11,files.php.rules.lang.security.tainted-exec,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.
9d92e524965a6360d5341b0607b84923,php,1,9,7,files.php.rules.lang.security.weak-crypto,Detected usage of weak crypto function. Consider using stronger alternatives.
a72b034a34581280340b8b83d0e2067a,php,2,13,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
b2c90351894048e465e17770de195190,php,3,14,13,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
b2c90351894048e465e17770de195190,php,4,9,13,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
b4064759ba3f651c0dc7143c88d20907,php,0,50,16,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
ba4e5d6e648136b81842d64c6bbd3419,php,3,21,1,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
ba591a610a942431a5ced40a6dd1ce84,php,1,17,9,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
ba591a610a942431a5ced40a6dd1ce84,php,1,20,11,files.php.rules.lang.security.unlink-use,Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.
bd4ef272d835cca1f16028fc0df39668,php,21,29,13,files.php.rules.lang.security.file-inclusion,"Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly."
c07126b1fc6d3f65e654102be177b737,php,1,17,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
c3f37f0607ed9ef95013a9141f064cea,php,1,14,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
d6f8a442f1e477b1655127edc3c56a63,php,2,27,5,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
dcc3f1638da823301084076c4e81cad0,php,0,34,13,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
e06a4e364dd4288316ed62ca2526eb00,php,3,7,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
e06a4e364dd4288316ed62ca2526eb00,php,3,8,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
e5c33e07b50fdc586cdbe419a3104332,php,4,18,5,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
e74da7378465c90873f8735e85276dfa,php,1,17,9,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
ed1bf42728e58f8f83da851df3f48d92,php,0,16,1,files.php.rules.lang.security.audit.openssl-decrypt-validate,"The function `openssl_decrypt` returns either a string of the decrypted data on success or `false` on failure. If the failure case is not handled, this could lead to undefined behavior in your application. Please handle the case where `openssl_decrypt` returns `false`."
f00482f9383dac1f106172875589f879,php,1,20,11,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
f00482f9383dac1f106172875589f879,php,8,15,10,files.php.rules.lang.security.injection.tainted-sql-string,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library."
f2cf887073e93e9a7cad8e6542f85c98,php,9,13,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
f722095f2d0d45cdae6fd025b0057b0b,php,0,11,5,files.php.rules.lang.security.injection.tainted-exec,User input is passed to a function that executes a shell command. This can lead to remote code execution.
f722095f2d0d45cdae6fd025b0057b0b,php,0,11,5,files.php.rules.lang.security.tainted-exec,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.
f722095f2d0d45cdae6fd025b0057b0b,php,0,11,5,files.php.rules.lang.security.exec-use,Executing non-constant commands. This can lead to command injection.
fa2a2523db179208e35315c5da3c4769,php,1,14,1,files.php.rules.lang.security.curl-ssl-verifypeer-off,SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= 0)
fbd64e7904ee581518a255d7d1dd4b5f,php,16,5,3,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
fbd64e7904ee581518a255d7d1dd4b5f,php,21,6,1,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
fbd64e7904ee581518a255d7d1dd4b5f,php,3,5,3,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
fbd64e7904ee581518a255d7d1dd4b5f,php,5,5,3,files.php.rules.lang.security.injection.echoed-request,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
000016088f8432f403c3e46049c4e892,python,0,4,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
000016088f8432f403c3e46049c4e892,python,0,7,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
0050802a1c66cf6ed3b8749c28d9f5ed,python,3,13,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0050802a1c66cf6ed3b8749c28d9f5ed,python,3,26,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
00656ecf0343ee679515693d81eabeeb,python,1,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
007275f88060ad984743c14e09cf0254,python,1,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0087b3f4a1f3f3db7bc053b4158e27d4,python,8,53,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0098bb9111bdc2fe5e51e15e8f322c0f,python,2,5,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
0098bb9111bdc2fe5e51e15e8f322c0f,python,3,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
0098bb9111bdc2fe5e51e15e8f322c0f,python,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
0098bb9111bdc2fe5e51e15e8f322c0f,python,5,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
0098bb9111bdc2fe5e51e15e8f322c0f,python,6,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
00e03621fed8c06ec055ef48b7bbff16,python,1,22,20,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
011bb676fcb7a4773996c1944bd9798b,python,0,10,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0123173215b95efa8fd309bf47aef798,python,10,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
0123173215b95efa8fd309bf47aef798,python,8,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
0123173215b95efa8fd309bf47aef798,python,9,8,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
0151c6eade45b4aa478af441f0d75722,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
015b4d60a08ce481dbda0b0b0bd1411f,python,4,77,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
015c16125832426c37211215f75c90ce,python,0,4,6,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
015e24530c08b0f109f17b1880cbab85,python,1,12,19,files.python.rules.fastapi.security.wildcard-cors,CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.
015e24530c08b0f109f17b1880cbab85,python,13,18,19,files.python.rules.fastapi.security.wildcard-cors,CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.
01af3607475bceb735c6209d3ec65c82,python,4,17,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
01b87738d9934ee1dd1eb1d26ce457cf,python,0,82,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
01b87738d9934ee1dd1eb1d26ce457cf,python,2,85,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
01b87738d9934ee1dd1eb1d26ce457cf,python,4,50,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
01b87738d9934ee1dd1eb1d26ce457cf,python,5,22,52,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
01d400b390264d2b7af72fb33c8a9bf1,python,0,10,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
01d5fe91c759ad79a0903f576c80d845,python,0,75,34,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
01d5fe91c759ad79a0903f576c80d845,python,0,84,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
03b1a6fc0db29e72136106ed04a360a8,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
03b1a6fc0db29e72136106ed04a360a8,python,0,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
03f1d75fc1c3b18e809d5f19b3eda9c8,python,1,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
03f1e1432504dc45181756fd8594ef85,python,2,12,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
04131176925001ad2a2e8ec51afb8088,python,0,12,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0421b13aef5e88059bebc4d1b69209e2,python,0,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0439d40e18dc72b981c78485c0592136,python,4,16,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
04466523f056ba9a5936ef81f28f4052,python,3,17,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
04b91491ad57904193b49f8c75470a06,python,2,13,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
05041e01b9450df796614f66dfcea4e4,python,1,18,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
05041e01b9450df796614f66dfcea4e4,python,2,14,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
050da46038e6350c4ba5296eb731435c,python,2,7,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
052d2c21b8d8e74402aefc29ce1d87c8,python,3,10,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0531922e446a1e816a50673680b8a3ac,python,0,23,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
0552126e672f89e7486f994784a4a916,python,3,6,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
055f707103d48010d0f500ed60c54a34,python,1,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
058f33787f8ac4b9cfabcb0e316c4eae,python,0,17,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
05b85e3360a8b8cb70198d596a38ab62,python,0,15,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
05b85e3360a8b8cb70198d596a38ab62,python,0,27,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
05b85e3360a8b8cb70198d596a38ab62,python,1,19,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
05b85e3360a8b8cb70198d596a38ab62,python,1,32,41,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
05caef54c55560ac37db00915f998135,python,22,30,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
05f289e871275d56e8ada6a69c8074be,python,1,5,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
05ff37d84ff28f13b44fe16496d6b1d7,python,1,81,19,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
06143c856e381aaa1a17cc9f1ea32d01,python,0,9,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
06143c856e381aaa1a17cc9f1ea32d01,python,0,42,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
065afce64c1e5e56254f10a191190575,python,1,12,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
065afce64c1e5e56254f10a191190575,python,2,12,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
065afce64c1e5e56254f10a191190575,python,3,15,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
06606cb517a1b60f0bd5c8104bc479cc,python,12,9,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
06606cb517a1b60f0bd5c8104bc479cc,python,8,16,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
067e77740ae7e1a1be1285d7b7e5e82b,python,0,7,35,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0696a7cff1b31822142d46d96b438eab,python,5,9,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0696a7cff1b31822142d46d96b438eab,python,5,21,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
0696a7cff1b31822142d46d96b438eab,python,6,9,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0696a7cff1b31822142d46d96b438eab,python,6,24,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
06a268595de6326844568ec217288c8d,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
06a268595de6326844568ec217288c8d,python,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
06cced611e2f9c58d6243bbcb6871efd,python,10,7,10,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
06cced611e2f9c58d6243bbcb6871efd,python,12,7,10,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
071e87589bb1fe6c555cced1fda58df7,python,2,19,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,python,2,25,52,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,python,3,21,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,python,3,36,56,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,python,4,20,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,python,4,40,52,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
071e87589bb1fe6c555cced1fda58df7,python,8,11,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
071e87589bb1fe6c555cced1fda58df7,python,8,11,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
0727b059a643482d607b881c05cb5e3f,python,2,19,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0727b059a643482d607b881c05cb5e3f,python,4,18,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0727b059a643482d607b881c05cb5e3f,python,6,22,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
072cab40ff97780c0216dffddf5d53df,python,0,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0769d62db34cc1ed2933b95fc5f3096f,python,1,22,19,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0769d62db34cc1ed2933b95fc5f3096f,python,1,22,124,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
0797c74dbcfd330a70e01d3c4fe598d1,python,27,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0797c74dbcfd330a70e01d3c4fe598d1,python,30,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0797c74dbcfd330a70e01d3c4fe598d1,python,32,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0797c74dbcfd330a70e01d3c4fe598d1,python,33,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0797c74dbcfd330a70e01d3c4fe598d1,python,34,44,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
07a7a0cbdc11981c216d5ac94f0164c5,python,0,8,21,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
07a7a0cbdc11981c216d5ac94f0164c5,python,0,18,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
07a7a0cbdc11981c216d5ac94f0164c5,python,0,18,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
07a7a0cbdc11981c216d5ac94f0164c5,python,1,9,21,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
07a7a0cbdc11981c216d5ac94f0164c5,python,1,24,19,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
07a946e8c30c9653406178ef325ea578,python,0,13,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
07a946e8c30c9653406178ef325ea578,python,1,14,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
07a946e8c30c9653406178ef325ea578,python,1,18,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
07c83a370a3ec3bf5b68d123318d34bc,python,14,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
07c83a370a3ec3bf5b68d123318d34bc,python,15,3,10,files.python.rules.flask.security.injection.path-traversal-open,"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks."
07ec9514baa959d7cdc273552e787175,python,1,15,13,files.python.rules.flask.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
07ec9514baa959d7cdc273552e787175,python,1,16,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
07ec9514baa959d7cdc273552e787175,python,1,16,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
07ec9514baa959d7cdc273552e787175,python,1,46,13,files.python.rules.django.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries."
07ec9514baa959d7cdc273552e787175,python,1,46,13,files.python.rules.flask.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
07ec9514baa959d7cdc273552e787175,python,1,51,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
07ec9514baa959d7cdc273552e787175,python,1,51,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
07f2e5fdcaff4d9018597aee6c217079,python,0,72,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
07f2e5fdcaff4d9018597aee6c217079,python,10,42,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
07f2e5fdcaff4d9018597aee6c217079,python,13,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
07f2e5fdcaff4d9018597aee6c217079,python,19,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
07f2e5fdcaff4d9018597aee6c217079,python,20,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
07f2e5fdcaff4d9018597aee6c217079,python,3,21,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
07f2e5fdcaff4d9018597aee6c217079,python,6,28,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
082f1a74a615195ac692bf7d13905cf4,python,0,14,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
086c78e7913bdec188f7aa3c0956718e,python,18,8,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
08a8f727899587684ec52dd46c7887c8,python,10,5,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
08a8f727899587684ec52dd46c7887c8,python,15,7,5,files.python.rules.flask.security.response-contains-unsanitized-input,"Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/)."
08a8f727899587684ec52dd46c7887c8,python,15,8,16,files.python.rules.flask.security.audit.xss.make-response-with-unknown-content,"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`."
08b441c163dcf5eb48a4415e716d8a62,python,11,12,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
08b441c163dcf5eb48a4415e716d8a62,python,5,11,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
08b441c163dcf5eb48a4415e716d8a62,python,9,10,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
08ec99bc070d103265dfab051810f3ba,python,0,29,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
08ec99bc070d103265dfab051810f3ba,python,0,72,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
08ec99bc070d103265dfab051810f3ba,python,0,93,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
08f91b4c5ad2a1a0e278a9e289d3015f,python,0,43,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
08f91b4c5ad2a1a0e278a9e289d3015f,python,1,43,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
09022c8f72a3c80e120fb5c5a2f98818,python,0,3,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
09022c8f72a3c80e120fb5c5a2f98818,python,1,34,15,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
095b3dbd5ce242cb4f7874b1a0e05b81,python,17,4,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
096a8da28067d6342bf61bfdc648b7f5,python,1,30,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
09960a27488c0fd67051891f0384cf62,python,0,21,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
09e9d0eadf90bc9dd383912bd08729c5,python,4,10,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
0a1e391f1946e7bdea6114f783ff7b04,python,0,4,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0a1e391f1946e7bdea6114f783ff7b04,python,0,4,41,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
0a52bae9ccd848f7cf434c29404f3880,python,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0ae964b029c318c6fc5f5fbf1c63d0d4,python,1,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0ae964b029c318c6fc5f5fbf1c63d0d4,python,4,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0ae964b029c318c6fc5f5fbf1c63d0d4,python,9,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0aeeadcfac65fc923f3a52ec3ff8617a,python,11,18,12,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
0aeeadcfac65fc923f3a52ec3ff8617a,python,7,18,12,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
0aeeadcfac65fc923f3a52ec3ff8617a,python,8,12,17,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
0b242222bc5375b8cacdf419f90b9c8c,python,0,35,13,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
0b242222bc5375b8cacdf419f90b9c8c,python,0,42,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
0b798c9c171b72164d39f21a8035c258,python,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
0b798c9c171b72164d39f21a8035c258,python,0,29,32,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
0bfe7707891f95fab8c92c1af68ff5fc,python,0,3,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
0c1b4a1af42f87b56fe123df9c60bed0,python,1,31,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
0c1b4a1af42f87b56fe123df9c60bed0,python,1,31,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
0c1ec84a322ea00fb2d2bb070fb01699,python,0,31,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0c1ec84a322ea00fb2d2bb070fb01699,python,0,31,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
0c211f9991df4cc34cd7c8d90d050ec0,python,0,7,20,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
0c4b341225386f9dabfc6ce8a9a5d126,python,0,8,11,files.python.rules.flask.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead."
0c4b341225386f9dabfc6ce8a9a5d126,python,0,9,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
0c4b341225386f9dabfc6ce8a9a5d126,python,0,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0c7eb4a044669b74a17fef1ccefa1f9a,python,2,19,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
0c89baa25b543203e70f83b0a5bc498f,python,5,97,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0cb78168c15480ef5bafb4e92e3f603d,python,0,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
0d12bd7dab8c4816199043ea2c0e945b,python,0,9,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
0d12bd7dab8c4816199043ea2c0e945b,python,0,13,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
0d3d4762e3f0a9194a32b2fd28ab8205,python,5,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0d43bd1f9584f9c433a9a9d3fc21731f,python,2,24,17,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0d76dec372861be7f0bbebfa8405d9bc,python,2,27,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0d93fe532a9929c00c7595e8d5adbfbd,python,4,13,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
0da05729e4476734b96b2decb86b2005,python,11,59,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0deed6ae13aa4b50ab73ae4962107d0f,python,1,25,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
0deed6ae13aa4b50ab73ae4962107d0f,python,1,25,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
0e1aff7f68992a88b37a51893f470f69,python,0,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0e566809391715c8f9737fcf62ccfb87,python,1,25,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,python,10,17,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,python,2,25,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,python,3,27,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,python,4,33,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,python,5,28,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,python,6,26,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,python,7,41,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0e566809391715c8f9737fcf62ccfb87,python,8,41,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
0f017f8f97648b1c844461868405ddee,python,22,17,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
0f017f8f97648b1c844461868405ddee,python,22,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0f02b3f505bb9faa6f39fea93df6d22a,python,1,38,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0f2aee9f1a95e1d6618f3249070da5d1,python,0,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
0f7303a6e3a27c07c7018379fbf18bbd,python,3,6,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
0f7303a6e3a27c07c7018379fbf18bbd,python,4,13,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
0fa19bbe87cdb0ced6ff4902482b338b,python,1,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
100de9f0635feadf6b5366344a41460d,python,3,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
100de9f0635feadf6b5366344a41460d,python,6,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
10735e93a339e05b57ec4ba2015da22d,python,1,35,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
10821b2b6696e135d53919f5fa3ad4a1,python,0,5,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
10c0b97c8174a43322581b9540331b0a,python,2,21,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
11103c0e3ee6741bc1fd0ef0c0b91c43,python,0,10,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1156e003cbee673da08c5a3cb021f98d,python,0,47,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1188d00f3d617e9d91a6c4ef3cfe7f26,python,4,3,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
11a1d1819016dbdec9cd11320c23fcc5,python,0,5,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,python,0,5,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,python,0,8,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,python,0,8,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,python,10,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,python,10,6,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,python,10,11,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,python,10,11,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,python,2,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
11a1d1819016dbdec9cd11320c23fcc5,python,2,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,python,2,6,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,python,2,10,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,python,2,10,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,python,4,5,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,python,4,5,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,python,4,8,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,python,4,8,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,python,6,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
11a1d1819016dbdec9cd11320c23fcc5,python,6,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,python,6,6,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11a1d1819016dbdec9cd11320c23fcc5,python,6,10,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
11a1d1819016dbdec9cd11320c23fcc5,python,6,10,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
11bebf6aac186731ad0507d52062c347,python,0,12,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
12108313862cb11ef1d37502504b8056,python,3,6,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
12108313862cb11ef1d37502504b8056,python,8,6,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
1213a3ab45dacad93c4b6ae024a303a5,python,0,11,1,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
1213a3ab45dacad93c4b6ae024a303a5,python,0,30,12,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
1213a3ab45dacad93c4b6ae024a303a5,python,0,30,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
12150905ba0b61c5a539e50a4b5cbde0,python,0,11,23,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
1218c2a6df88565f9b6e306c63a9edbc,python,1,25,89,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
1218c2a6df88565f9b6e306c63a9edbc,python,1,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1232fe40ef898071cfae2bd6ecc11a82,python,2,5,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
1232fe40ef898071cfae2bd6ecc11a82,python,5,8,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
1232fe40ef898071cfae2bd6ecc11a82,python,8,6,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
12902020da0187ce2a106f076ceee8d8,python,1,31,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
12902020da0187ce2a106f076ceee8d8,python,3,37,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
12d614082b8c3609042c409730e97a6d,python,0,14,31,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
12d614082b8c3609042c409730e97a6d,python,1,12,15,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
12e8be0f2b5385bcea4d2d9ef222c4f3,python,0,10,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
131501cefc97ba18ff380d0021869026,python,1,13,22,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1349b8efe94389a5dc845ac0563ec36b,python,10,7,10,files.python.rules.pycryptodome.security.insecure-cipher-algorithm-des,"Detected DES cipher or Triple DES algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use a secure symmetric cipher from the cryptodome package instead. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."
138dd75d7f1ed9703624b41e3cfd70d3,python,0,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,python,1,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,python,2,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,python,3,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,python,4,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,python,5,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
138dd75d7f1ed9703624b41e3cfd70d3,python,6,5,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
13c67f4d21bfb6a9a4858c78ca81962b,python,0,13,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
13c67f4d21bfb6a9a4858c78ca81962b,python,1,13,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
13c67f4d21bfb6a9a4858c78ca81962b,python,2,13,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
13c67f4d21bfb6a9a4858c78ca81962b,python,3,13,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
13ee53dae8ce39567d17b741d6371707,python,11,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
140bbdce5017e00fb266813748eb3c89,python,6,5,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
140bbdce5017e00fb266813748eb3c89,python,7,5,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1445f776b3ae46390d93e99c0cb9225a,python,1,25,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
1445f776b3ae46390d93e99c0cb9225a,python,1,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1486873c00ebf5938f81ec270e260240,python,2,33,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
1486873c00ebf5938f81ec270e260240,python,2,33,5,files.python.rules.lang.security.audit.sqli.psycopg-sqli,"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"
1486873c00ebf5938f81ec270e260240,python,2,33,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
151e1e1f8de955ebd247b62bfcc39d1c,python,1,20,5,files.python.rules.lang.security.audit.hardcoded-password-default-argument,Hardcoded password is used as a default argument to '__init__'. This could be dangerous if a real password is not supplied.
153e9c9a98b52b60279f4f6475622d9a,python,8,4,15,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
159b8a4837d08c112df898049e2f80c7,python,1,38,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
15b04fd5b857122360dd87db08f66da1,python,8,23,14,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
15c0ea647abe941bd7ce97061f41d890,python,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
15f5b0a74a11bdb3378ae5cc6cf35063,python,1,67,17,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
15fed3e125d53fb63e0517b5274de6e3,python,0,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1617cb4dead6cfe676a7ddb7bada7a92,python,1,18,13,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
1617cb4dead6cfe676a7ddb7bada7a92,python,1,46,49,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
1617cb4dead6cfe676a7ddb7bada7a92,python,1,47,13,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
1617cb4dead6cfe676a7ddb7bada7a92,python,1,64,52,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
1617cb4dead6cfe676a7ddb7bada7a92,python,1,65,53,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
1617cb4dead6cfe676a7ddb7bada7a92,python,1,66,21,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
1675a21beaeef040ebf53bc627666f07,python,0,11,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
170258db9c53f43741863909a9111472,python,2,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
171480342ad539977043feccee0cc2ce,python,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
17659f02be91d53996915a3799949c2f,python,0,10,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
17681277cdffff1f2b16f6d82b5ed64f,python,6,17,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
1779bafa9a5b5e041eba6b0ab247fb73,python,0,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1808a488c4e4341a0e2617b3259062a2,python,0,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,python,11,9,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,python,12,9,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,python,2,8,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,python,3,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,python,4,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,python,5,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,python,6,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1808a488c4e4341a0e2617b3259062a2,python,7,3,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
181148e90f04e0ba023fe6c5357a040a,python,1,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
183c8dd99b6c14145aa0bb85b7e41fe9,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,python,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,python,11,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,python,12,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,python,13,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,python,15,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,python,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
183c8dd99b6c14145aa0bb85b7e41fe9,python,8,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
184db8caefc9054b6496b193360ec200,python,4,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
184db8caefc9054b6496b193360ec200,python,4,19,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
1863d24bd7ce368e769e12db556ffdc7,python,1,22,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
18d5cf38e0af842573102afc7078964d,python,0,14,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
18d5cf38e0af842573102afc7078964d,python,0,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
18d6c09042d89db27a4f3066bd15c63f,python,0,10,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
18d6c09042d89db27a4f3066bd15c63f,python,0,12,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
18d6c09042d89db27a4f3066bd15c63f,python,0,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
18d6c09042d89db27a4f3066bd15c63f,python,1,9,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
18d6c09042d89db27a4f3066bd15c63f,python,1,25,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
18d6c09042d89db27a4f3066bd15c63f,python,1,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
18d805a9e98f470e46a347cb108fef21,python,1,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1911de496c77890ce84e9d4390032a8e,python,0,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1911de496c77890ce84e9d4390032a8e,python,1,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1911de496c77890ce84e9d4390032a8e,python,2,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
194b9ec0cf30141ebe639949c767c214,python,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
197d7a48d4ac6f037d7bc55d82f0064e,python,0,10,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
197e0ed36ead63a5e842a1ca211666d3,python,0,4,11,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
197e0ed36ead63a5e842a1ca211666d3,python,1,4,11,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
198a0923db21dc6579e535ac805ce05b,python,1,5,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
19b1d134c9faebca4597c4ca814465dd,python,0,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
19ba1d05a332c28eddf8cfe62e24eb4d,python,0,21,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1a24482515ea0a61b62f4293de5801b1,python,0,92,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
1a24482515ea0a61b62f4293de5801b1,python,1,89,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
1a33dae06312cbcf66d7e5f4bea8df60,python,12,13,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
1a33dae06312cbcf66d7e5f4bea8df60,python,12,15,21,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
1a58493d1f97f0be3322cf63d4d27806,python,1,10,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1a58493d1f97f0be3322cf63d4d27806,python,1,31,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1a58493d1f97f0be3322cf63d4d27806,python,2,40,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1a58493d1f97f0be3322cf63d4d27806,python,4,27,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1ab364935c1553061fa1808390a9f405,python,1,4,12,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
1ad19033b3a04ce2cba397f432dab5f6,python,0,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1ad811c692d74dc7acf55f7fa70b5390,python,3,8,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1adc8a97beab48b3cee08eb0c4e4d8cf,python,0,10,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
1af23b62cc1bcd6e5de05883fbc9d16e,python,0,9,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1b381132a49cc8374edf41d395596f69,python,0,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1b381132a49cc8374edf41d395596f69,python,22,16,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1b381132a49cc8374edf41d395596f69,python,25,11,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1b381132a49cc8374edf41d395596f69,python,27,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1b381132a49cc8374edf41d395596f69,python,3,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1b4b6ff52af0630d77f37ba738b7de17,python,0,17,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1b78ba0657f6b2d4597af69487fcbf90,python,0,12,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
1b7ef6074a3a09e9052b036886d5b4e4,python,10,2,46,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
1b7ef6074a3a09e9052b036886d5b4e4,python,12,2,46,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
1b7ef6074a3a09e9052b036886d5b4e4,python,15,3,46,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
1b7ef6074a3a09e9052b036886d5b4e4,python,6,2,47,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
1bcb4836ea83ff3eb8332764a6ece201,python,1,13,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1bcb4836ea83ff3eb8332764a6ece201,python,2,19,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1bcb4836ea83ff3eb8332764a6ece201,python,3,23,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1bcb4836ea83ff3eb8332764a6ece201,python,4,27,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1bcb4836ea83ff3eb8332764a6ece201,python,5,27,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1c784c5e052fcaa632d4d796924e26d0,python,3,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
1c784c5e052fcaa632d4d796924e26d0,python,3,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1c784c5e052fcaa632d4d796924e26d0,python,5,8,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
1c970ddfe9fb3fa196ebd1a1fd5dbd82,python,3,7,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
1c970ddfe9fb3fa196ebd1a1fd5dbd82,python,3,8,14,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
1c970ddfe9fb3fa196ebd1a1fd5dbd82,python,6,10,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
1c970ddfe9fb3fa196ebd1a1fd5dbd82,python,6,11,14,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
1ca5f5661979d34b28bedda6346cac1e,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1cd766558976e7c92dca3fbe520f004f,python,0,46,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1ce623e85ed477cfb8b04dc2fe51ee9a,python,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1ce623e85ed477cfb8b04dc2fe51ee9a,python,6,21,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1cfee6818606d41b2402f40d538c8a15,python,0,20,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
1cfee6818606d41b2402f40d538c8a15,python,0,20,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
1d1a30830ae38f9aa50dccccea2c6d4c,python,3,43,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1e3347caa1e704df86ded5eb0e8618a1,python,27,2,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1e3347caa1e704df86ded5eb0e8618a1,python,32,22,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1e3347caa1e704df86ded5eb0e8618a1,python,34,20,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1e3347caa1e704df86ded5eb0e8618a1,python,39,24,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1e3347caa1e704df86ded5eb0e8618a1,python,45,4,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1e3347caa1e704df86ded5eb0e8618a1,python,50,12,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1e5113aebac9a4151719d144122e322a,python,0,11,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1e6dd22af0024655c902c0683875e36d,python,1,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1e6dd22af0024655c902c0683875e36d,python,1,13,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
1ea5a67122e1b181a0e91131c243a22d,python,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1eac6108f43e0d4d0bff41fd94c2c716,python,0,32,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
1ead2230663989d779ceacb34f635e68,python,2,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1ead2230663989d779ceacb34f635e68,python,3,23,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1ead2230663989d779ceacb34f635e68,python,4,23,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1eb8239d09546c81ce131c4e4218712e,python,0,12,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1eb8239d09546c81ce131c4e4218712e,python,0,12,37,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
1eb8239d09546c81ce131c4e4218712e,python,1,16,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1eb8239d09546c81ce131c4e4218712e,python,1,16,41,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
1eb8239d09546c81ce131c4e4218712e,python,2,15,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1eb8239d09546c81ce131c4e4218712e,python,2,15,40,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
1eff67239e54262969d9b43614fc8c9c,python,0,6,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1eff67239e54262969d9b43614fc8c9c,python,0,29,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
1eff67239e54262969d9b43614fc8c9c,python,1,6,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
1eff67239e54262969d9b43614fc8c9c,python,1,34,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
1f0d5deaa1bdb52b07b15b07440ff9ba,python,12,5,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1f0d5deaa1bdb52b07b15b07440ff9ba,python,4,10,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1f141247c9e645f48ee0dde3405e39c3,python,6,9,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
1f68d03defa261c18bff815ec0a13069,python,0,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1f68d03defa261c18bff815ec0a13069,python,1,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1f68d03defa261c18bff815ec0a13069,python,2,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1f93c8e89982636df0b4d0a911b23009,python,4,19,12,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1f93c8e89982636df0b4d0a911b23009,python,5,20,12,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1fa5e946bea7e0d7068751cf17dbc1cd,python,0,3,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1fa5e946bea7e0d7068751cf17dbc1cd,python,0,21,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1fa5e946bea7e0d7068751cf17dbc1cd,python,1,3,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1fa5e946bea7e0d7068751cf17dbc1cd,python,1,23,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
1fb3ed24aa3eb27439010c55b46fb1e7,python,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
1fdb33a634c4fc51c69162f132a8568c,python,0,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
1fdb33a634c4fc51c69162f132a8568c,python,2,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
1fdb33a634c4fc51c69162f132a8568c,python,2,30,59,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
1fed398aafa7f80f97e717be59550d7e,python,1,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1fed398aafa7f80f97e717be59550d7e,python,2,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1fed398aafa7f80f97e717be59550d7e,python,3,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1fed398aafa7f80f97e717be59550d7e,python,4,19,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
1fed398aafa7f80f97e717be59550d7e,python,5,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
203800e0de7011d50c92e4d291496825,python,0,14,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
204e44d7c683f4b79bca661f0d98316e,python,0,14,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
204e44d7c683f4b79bca661f0d98316e,python,1,14,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
20c2407e94f3fc0408321444bc225890,python,0,26,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
20da8d26f10b2ff3b28377cb657d7ec4,python,25,2,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
20da8d26f10b2ff3b28377cb657d7ec4,python,30,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
21451e876722a315c30ef4da9f74071d,python,0,14,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
21451e876722a315c30ef4da9f74071d,python,0,14,79,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
21451e876722a315c30ef4da9f74071d,python,1,4,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
21451e876722a315c30ef4da9f74071d,python,1,4,79,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
21451e876722a315c30ef4da9f74071d,python,2,13,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
21451e876722a315c30ef4da9f74071d,python,2,13,95,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
21451e876722a315c30ef4da9f74071d,python,3,13,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
21451e876722a315c30ef4da9f74071d,python,3,13,95,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
21451e876722a315c30ef4da9f74071d,python,4,13,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
21451e876722a315c30ef4da9f74071d,python,4,13,95,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2161534409b8112213697f1519563897,python,10,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
217a24ee845d0c8be48ddc8d7dc34d6b,python,28,7,1,files.python.rules.lang.security.audit.regex_dos,"Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2."
2181473d756735614667095650792403,python,1,20,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2181473d756735614667095650792403,python,1,20,35,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2181473d756735614667095650792403,python,2,20,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2181473d756735614667095650792403,python,2,20,35,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2181473d756735614667095650792403,python,4,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2181473d756735614667095650792403,python,4,9,35,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2181473d756735614667095650792403,python,5,8,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2181473d756735614667095650792403,python,5,8,31,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2181473d756735614667095650792403,python,6,19,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2181473d756735614667095650792403,python,6,19,31,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
21819bb7fa0dbc0f7a5a115588e29587,python,0,22,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
21819bb7fa0dbc0f7a5a115588e29587,python,0,30,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
218217fd88745f76ad4ae9ad5123f6eb,python,0,75,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
218217fd88745f76ad4ae9ad5123f6eb,python,1,75,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
218d464fdb180606d317d4988642299e,python,0,37,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2230747e98b527c027481bce2147f150,python,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
22352a62a0c0a59c419336fc8e7fda51,python,2,22,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
22352a62a0c0a59c419336fc8e7fda51,python,3,16,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2246c8f8750b898bc60d4866f148a31f,python,0,10,20,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
226ace372ea506e678b19de825dc1d4f,python,0,46,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
22a69acc6a4e6791a0780286f6f32dec,python,3,40,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
22a69acc6a4e6791a0780286f6f32dec,python,3,40,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
22a69acc6a4e6791a0780286f6f32dec,python,3,43,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
22a69acc6a4e6791a0780286f6f32dec,python,3,43,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
22a69acc6a4e6791a0780286f6f32dec,python,3,72,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2342cd0fc0fa241b3057c8e41fb98a5a,python,0,22,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2342cd0fc0fa241b3057c8e41fb98a5a,python,1,29,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2369ff9a9fbaa703daef9d23a6802779,python,0,85,35,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
236b3a7e1b48a77e4d67ad46c7f532d4,python,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
237e2f94625ca03706299f93d1ff1166,python,0,30,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
237e2f94625ca03706299f93d1ff1166,python,1,30,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
237e2f94625ca03706299f93d1ff1166,python,2,27,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
237f36af4bb9de17cc59687c2da06c1f,python,0,36,11,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2383f820b484d0dcc2db4d2deec7238d,python,2,33,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
2383f820b484d0dcc2db4d2deec7238d,python,2,33,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
23ce8f6e2f48c1ea04758a3c8e1ec738,python,1,16,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
23df7f6cc674fffa8090ca40c13e8c35,python,1,17,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
23df7f6cc674fffa8090ca40c13e8c35,python,3,30,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
23df7f6cc674fffa8090ca40c13e8c35,python,4,31,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
23f3d6ed08f673de3d2f735c4b44f435,python,1,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
23f564c0cfc6e999731d9e344e7607c8,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
23f564c0cfc6e999731d9e344e7607c8,python,0,11,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
23fddc68f9b41ee4635001d5e3674a6e,python,1,5,25,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
23fddc68f9b41ee4635001d5e3674a6e,python,5,4,11,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
23fddc68f9b41ee4635001d5e3674a6e,python,5,4,11,files.python.rules.jinja2.security.audit.missing-autoescape-disabled,"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
23fddc68f9b41ee4635001d5e3674a6e,python,5,6,25,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
244ac7321a7638711b58c0f01e295fa8,python,0,49,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2496dddae46bbb2211fe73e24e61a6c5,python,0,13,18,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
2496dddae46bbb2211fe73e24e61a6c5,python,2,21,18,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
2496dddae46bbb2211fe73e24e61a6c5,python,3,16,18,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
24bf2fcf0199383f3dd4f2b1107d7b01,python,0,12,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
24bf2fcf0199383f3dd4f2b1107d7b01,python,0,20,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
24bf2fcf0199383f3dd4f2b1107d7b01,python,0,28,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
24e0a1e174869a9c23d32e6eede7be2f,python,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
25061dce36d9e9e4f546c79293ce605e,python,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
25061dce36d9e9e4f546c79293ce605e,python,3,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
25061dce36d9e9e4f546c79293ce605e,python,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
252123cd10f54bbb9141b2edd13a9ef3,python,1,14,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
252123cd10f54bbb9141b2edd13a9ef3,python,2,16,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2530475b9d1c7b915f07e25650648661,python,3,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
2530475b9d1c7b915f07e25650648661,python,3,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2530475b9d1c7b915f07e25650648661,python,8,6,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
2530475b9d1c7b915f07e25650648661,python,8,60,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
254acd1a8dfd579c7a586a4824f627bd,python,9,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
254acd1a8dfd579c7a586a4824f627bd,python,9,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
25c48b488af13e746afde996fa8b6263,python,0,10,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
25c903c9e9c3e773007662d823a6c03e,python,0,56,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
25c903c9e9c3e773007662d823a6c03e,python,1,57,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
25f2dd141b4a52ea27e942f28d9f18ad,python,0,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2613f8943a4a2d90c2062fe696567ce4,python,1,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
2613f8943a4a2d90c2062fe696567ce4,python,1,9,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
2613f8943a4a2d90c2062fe696567ce4,python,2,12,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
2613f8943a4a2d90c2062fe696567ce4,python,2,15,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
2613f8943a4a2d90c2062fe696567ce4,python,3,19,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
2613f8943a4a2d90c2062fe696567ce4,python,3,23,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
263c5867a3fa6b9abe71e10034aabbad,python,6,25,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2646df483d8163e68c606f9511d96b9d,python,0,12,9,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
2646df483d8163e68c606f9511d96b9d,python,0,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
266a4862aa7ecaa966c0f2acb428de6c,python,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
266a4862aa7ecaa966c0f2acb428de6c,python,2,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
268821301841b09f7b78f8fc7d87ebd5,python,4,7,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
269a1b0b28223c70bf25fff42e38ac8b,python,0,11,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
269e150391383aff92866eabb7c1bb59,python,2,7,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
269e150391383aff92866eabb7c1bb59,python,2,11,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
26c616ca4a69d73eb1f8dfdcdb329265,python,3,19,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
26d31a703c6b39fb7546501e1259f725,python,0,18,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
26ee58442fc13e636196e2de320f59d7,python,1,5,21,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
27051de45c3f43e7496c7842411eff4e,python,0,25,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
27051de45c3f43e7496c7842411eff4e,python,0,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2718329149bdd9df33f4abd35de57013,python,4,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
271a16a0e70496b23b3904d619dae972,python,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
271a16a0e70496b23b3904d619dae972,python,1,9,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
271a16a0e70496b23b3904d619dae972,python,2,14,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2735a05310443df1ef083ebc6e878762,python,3,14,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
274e46d200918c705edd2115f9648820,python,4,7,20,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
2761546fafe579bf61c0c58400cc7efd,python,0,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
2761546fafe579bf61c0c58400cc7efd,python,0,33,132,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
2761546fafe579bf61c0c58400cc7efd,python,0,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
27869b4d1a06e5ed01966ae99211aa7a,python,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
27d081c6b5bd6f39c5216e171c1f2f00,python,0,5,5,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
27dee74dfed81eacfa97086d2473f3a1,python,0,12,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
2856f19fc9a8af2d987e7abdcd7bb439,python,1,24,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2856f19fc9a8af2d987e7abdcd7bb439,python,3,46,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2856f19fc9a8af2d987e7abdcd7bb439,python,3,60,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2862788d8c7eed4439258f72d8d1ff8a,python,0,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
28e1417e9ebd4b1c33aaca60e9f0b9e8,python,1,19,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
28e1417e9ebd4b1c33aaca60e9f0b9e8,python,1,19,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
28fedfb13b0a9b606b31934d30391b07,python,1,4,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
28fedfb13b0a9b606b31934d30391b07,python,11,8,21,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
28fedfb13b0a9b606b31934d30391b07,python,9,9,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2915dcb3c3117bf7528d4b6c4fa58248,python,1,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
291a624c5bc3bbcc1d63606800a0287a,python,0,8,10,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
2978d6e5b80403c0d8e23be07dc02f7c,python,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
29815453ef2d227b0203da6d3d190486,python,1,30,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
29815453ef2d227b0203da6d3d190486,python,1,30,13,files.python.rules.lang.security.audit.sqli.psycopg-sqli,"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"
29815453ef2d227b0203da6d3d190486,python,1,30,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
29815453ef2d227b0203da6d3d190486,python,2,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
29815453ef2d227b0203da6d3d190486,python,2,11,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
29815453ef2d227b0203da6d3d190486,python,3,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
29815453ef2d227b0203da6d3d190486,python,3,12,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
29f05e809c3c1d9f9aed836ad4d33a4c,python,2,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2a1605f1983c35b02e181b9207045f4d,python,15,11,9,files.python.rules.django.security.audit.unvalidated-password,The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
2a1605f1983c35b02e181b9207045f4d,python,27,1,1,files.python.rules.django.security.audit.django-rest-framework.missing-throttle-config,Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application.
2a599b3dd43e7e3db26ab50607232f18,python,0,17,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
2a8d0b9aa99858a64a06721526041e9c,python,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
2ac8e3f785dcfd13f8cfa701ef43f9f9,python,13,13,53,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2ac8e3f785dcfd13f8cfa701ef43f9f9,python,5,7,39,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2ac8e3f785dcfd13f8cfa701ef43f9f9,python,6,7,61,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2b01616fadc6156e317b9f272c3a4310,python,1,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2b0e0ebcf316703ec78877dcacb7ca99,python,0,15,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2b0e0ebcf316703ec78877dcacb7ca99,python,1,15,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2b19f7a36c37b8a359b57346abe17738,python,4,14,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
2b241be64147f42f703f8cc637cc4db1,python,2,5,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2b249d5dc71a2dab07974e2ae94fb257,python,2,6,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2b249d5dc71a2dab07974e2ae94fb257,python,2,6,37,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2b491257ecf4d2479538f13166c16ac9,python,3,30,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
2b491257ecf4d2479538f13166c16ac9,python,3,30,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2b4c0e4688a6e1160a827a2f00a2abe4,python,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2b775946e5d2f61c39848499297a205f,python,0,79,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2bdbadada33404909e376662c37fd682,python,0,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2bdbadada33404909e376662c37fd682,python,0,112,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2bdbadada33404909e376662c37fd682,python,1,52,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2c1c482a49363aa69c69cb4f0b8765b4,python,0,58,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2c1dfe5fa8407b381d72e7dbdcbccb76,python,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2c3066684fdc87279f1e2bec3bf84d43,python,6,16,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2cdb441de54c12020c3430fd605889bf,python,0,53,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2cdb441de54c12020c3430fd605889bf,python,1,53,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2cdb441de54c12020c3430fd605889bf,python,2,53,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2d501dc41654376217d9df629017fec5,python,3,2,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2d60b86dc4359bea2f471d2b1ab7a342,python,2,25,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2dad023372fd870e82c66b8a98c049db,python,0,34,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2dad023372fd870e82c66b8a98c049db,python,3,16,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2dad023372fd870e82c66b8a98c049db,python,4,18,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2dbdb17779ce8cd8f07ab252774e1631,python,2,8,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2dbdb17779ce8cd8f07ab252774e1631,python,2,12,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2dde549559da364ec39fc142da26116c,python,0,32,42,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2dde549559da364ec39fc142da26116c,python,0,42,36,files.python.rules.flask.security.injection.tainted-url-host,"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
2dde549559da364ec39fc142da26116c,python,0,65,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
2de351cd4a3390c969db21576401bd69,python,0,7,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,python,1,7,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,python,2,7,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,python,3,7,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,python,4,9,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,python,5,9,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de351cd4a3390c969db21576401bd69,python,6,7,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
2de6f9bd9de92edbf3047092f342cdfd,python,1,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2de6f9bd9de92edbf3047092f342cdfd,python,4,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2de6f9bd9de92edbf3047092f342cdfd,python,5,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2de6f9bd9de92edbf3047092f342cdfd,python,6,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2dff820e9276183746300e5ef8379591,python,0,6,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2dff820e9276183746300e5ef8379591,python,0,7,32,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2e2dd977bd04991a520b5ce8f614a445,python,0,12,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2e493552bb4dc3932f76edc39d1845e8,python,1,4,7,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
2e493552bb4dc3932f76edc39d1845e8,python,1,4,7,files.python.rules.jinja2.security.audit.missing-autoescape-disabled,"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
2e493552bb4dc3932f76edc39d1845e8,python,1,19,10,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
2e493552bb4dc3932f76edc39d1845e8,python,3,4,7,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
2e493552bb4dc3932f76edc39d1845e8,python,3,4,7,files.python.rules.jinja2.security.audit.missing-autoescape-disabled,"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
2e493552bb4dc3932f76edc39d1845e8,python,3,17,10,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
2e6eff00b3479d48fa87ffed414be996,python,0,22,9,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
2ec23a98b3adad21f4db2d781b7d72d7,python,7,10,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2ec23a98b3adad21f4db2d781b7d72d7,python,8,5,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
2eedd2b2f5f1a1dd1c95c2eaea9948b3,python,1,18,26,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
2f17dbaf56eae2596e862d38d3499022,python,1,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
2f3c57a917b653a0aeafb407341a8632,python,2,8,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2f64879583965cc0eea86182ff8961d7,python,32,4,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
2f84f669b2394d07cf576aa5340ac7c9,python,0,19,17,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
2f84f669b2394d07cf576aa5340ac7c9,python,0,19,59,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
2ff74926f285750ac82efb6366400831,python,0,5,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
3002b5d39836cd11285dbe416236328d,python,3,7,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
302d2a21eebb5e5054e8a4bd9b51ca21,python,0,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
302d2a21eebb5e5054e8a4bd9b51ca21,python,1,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3041cd444bb906f4ffacb2d4cb3f1cad,python,3,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
305b5f10cd8843fa7c2e8b3476e243ca,python,1,12,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
305d827510baf7e046dbd68a634199df,python,1,13,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
305d827510baf7e046dbd68a634199df,python,3,11,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
30ab9382fb4802201477547dd3167583,python,0,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
30ab9382fb4802201477547dd3167583,python,1,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
30c8e8461a03a4872918d8cdfc30bc39,python,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
31b313c46d96bc3fb61942c050da9d73,python,2,24,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
31bcfddea96f56e087aa5c85f935be3b,python,29,10,9,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
31bcfddea96f56e087aa5c85f935be3b,python,29,12,9,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
31bcfddea96f56e087aa5c85f935be3b,python,3,10,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
31cf95af562ea4c5033a25123da28df6,python,0,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
31f63cb4d70a9a9744e93f07d9dccde2,python,1,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
32081511a55092f33ad45fca313e37a4,python,4,4,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
32081511a55092f33ad45fca313e37a4,python,5,4,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
32180b0ffd420f96c9418ad849d7e691,python,0,28,16,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
32180b0ffd420f96c9418ad849d7e691,python,0,65,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
321e81733590103d72480945ceb69adb,python,0,4,8,files.python.rules.lang.security.audit.httpsconnection-detected,"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information."
328a7c99f44d2afa7959aa406869b77d,python,0,13,21,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
32ae04933f0413bc42db0c96903c6fe0,python,4,11,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
32e2e604863dde86f3c26886a66aeb4c,python,0,32,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
32fd503d90d37b58ff93a1fb6345e72f,python,1,40,16,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
33320843a82d209aad203b352b2b8b0a,python,0,9,18,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
33320843a82d209aad203b352b2b8b0a,python,1,6,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
333421ab548999575f67ef6ca75d680b,python,12,31,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
337d359d900d1f6ce4ee55a86e7c153c,python,1,16,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
338b0b532ff1be5ff2d9c326f570ba52,python,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
33cef0f52341c99c0cc3742bffbf15e3,python,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
33cef0f52341c99c0cc3742bffbf15e3,python,0,53,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
345556ee5886615633ec4526271da7f1,python,0,9,9,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
345556ee5886615633ec4526271da7f1,python,1,15,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
345556ee5886615633ec4526271da7f1,python,2,10,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
345556ee5886615633ec4526271da7f1,python,3,10,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
3465f6806e7549368c756e7b8f0e1b07,python,9,9,12,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
3491097d700479eee616446816e79035,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
3491097d700479eee616446816e79035,python,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
3491097d700479eee616446816e79035,python,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
34f3df7eb87b584ac19a5311d547cba3,python,0,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
34f70816e5e92ea21a7d7f0af92d1e5a,python,1,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
34f70816e5e92ea21a7d7f0af92d1e5a,python,2,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
3530fd7758ad515abeef73b9fc07258f,python,2,12,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
3530fd7758ad515abeef73b9fc07258f,python,2,17,20,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
3530fd7758ad515abeef73b9fc07258f,python,2,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3541bcc78046720f8010b42e72f1db06,python,2,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
35d8015467bad5a3aae031855f961200,python,0,5,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
35d8015467bad5a3aae031855f961200,python,0,12,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
35e771af32c98e9a619eb82019854ad4,python,0,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3613ca1b58f336d5c31920fc4ce6df2c,python,0,46,21,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
367d53a18839f6457c4717257d7a7f62,python,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
367d53a18839f6457c4717257d7a7f62,python,1,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
36b5e45d3c83accf783d056df1aab0db,python,0,9,5,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
36b5e45d3c83accf783d056df1aab0db,python,0,25,20,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
36b5e45d3c83accf783d056df1aab0db,python,0,25,52,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
36bc73cfab2986312b806b3617cc0c25,python,1,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
36d3f914330437480cab2ee36df9735c,python,2,11,3,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
36d62742195db502327a66abb540ebe9,python,0,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
36d62742195db502327a66abb540ebe9,python,0,6,61,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
36d62742195db502327a66abb540ebe9,python,0,20,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
36d62742195db502327a66abb540ebe9,python,0,20,46,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
372f8f2d26bdf445e5dcb2c87e5538a3,python,0,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
373b13490561fe8871072e502a8faa13,python,2,17,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
373b13490561fe8871072e502a8faa13,python,3,27,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
373b13490561fe8871072e502a8faa13,python,4,32,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
373b13490561fe8871072e502a8faa13,python,8,29,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
376e1720b0e53a84e8a32c7806e9306a,python,1,22,9,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
377959d7003cafbdabe3eb218d9a45e2,python,2,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
37825f55d5137c5a55022d16223e7f65,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
37825f55d5137c5a55022d16223e7f65,python,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
382d3be09f18d02be2d7b6c0d4783610,python,1,8,15,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
384177396e3b619926494580d436547a,python,0,15,9,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
38495ab20fab880c32e5bcf962f06730,python,0,30,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
387695a0692d74f50503ceffeeaa4780,python,1,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
387e397b4ebfb59968621326f7c21344,python,0,9,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
387eec4384f00a867348a5aba733e2cc,python,2,9,18,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
38e770e36c49bb4470bf7ae41836a8c7,python,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
38ec1941ef82b61867de08b7da773d28,python,0,66,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
38ec1941ef82b61867de08b7da773d28,python,0,66,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
39039e28c2c619ab0e3706c3ac839b58,python,1,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
39039e28c2c619ab0e3706c3ac839b58,python,1,8,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
39039e28c2c619ab0e3706c3ac839b58,python,3,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
39039e28c2c619ab0e3706c3ac839b58,python,3,7,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
391e0e152033ef8b2ba72e6ea087225b,python,0,11,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
391e0e152033ef8b2ba72e6ea087225b,python,0,11,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
393347c92d00af56cd92b73dbc50e855,python,0,20,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
393347c92d00af56cd92b73dbc50e855,python,0,20,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
39524fdf98db4e396170dba29a809583,python,0,40,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
39524fdf98db4e396170dba29a809583,python,0,90,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
395bf3ec7573a52dce503f9618184453,python,1,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
395bf3ec7573a52dce503f9618184453,python,3,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,python,0,23,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,python,1,23,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,python,2,23,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,python,3,23,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,python,4,24,20,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,python,5,24,20,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
396952c482385c864fdd97d7142ce272,python,7,24,20,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
39757e0b3763a9dce3562f5209bb6128,python,6,8,16,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
398cc71e89239bf74472622b56910f89,python,6,21,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
398cc71e89239bf74472622b56910f89,python,7,39,16,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
3998806dc39e3d3db1b6c03a41ac2278,python,3,10,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3998806dc39e3d3db1b6c03a41ac2278,python,3,17,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
39c7d8f6bc229b9077cff43e22a02985,python,0,30,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3a1a571990569a2395bf393a3e7d2605,python,1,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3a1a571990569a2395bf393a3e7d2605,python,10,25,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
3a1a571990569a2395bf393a3e7d2605,python,10,25,9,files.python.rules.lang.security.audit.sqli.psycopg-sqli,"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"
3a1a571990569a2395bf393a3e7d2605,python,10,25,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
3a32ab800e668826a0cf50c15ceb81f7,python,0,10,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
3aa194f4e3c3478a1d3d5a28eca1662a,python,0,38,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3ab106ed64f5b04caed9b3c61bee36a7,python,0,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
3ab106ed64f5b04caed9b3c61bee36a7,python,3,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
3ab106ed64f5b04caed9b3c61bee36a7,python,5,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
3ab106ed64f5b04caed9b3c61bee36a7,python,7,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
3ac7ddedf4bec29b9fe167abfed5ee37,python,2,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3adf532106a274d8571a7d7cd9b5d246,python,1,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3aed1bfd50c901fd2d857353d4eb4e55,python,1,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3b3e98b8799d16959cb499c23da25f82,python,1,10,20,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
3b3e98b8799d16959cb499c23da25f82,python,3,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3b9dcc80486b041066804824021584eb,python,0,6,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3b9dcc80486b041066804824021584eb,python,0,10,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3b9dcc80486b041066804824021584eb,python,2,4,6,files.python.rules.lang.security.deserialization.avoid-shelve,"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3b9dcc80486b041066804824021584eb,python,2,9,6,files.python.rules.lang.security.deserialization.avoid-shelve,"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3b9dcc80486b041066804824021584eb,python,3,7,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3bda3fc5b49a671fd81b09083ceacada,python,2,25,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
3be5e927994e2cb1c237d38129bb9c1f,python,13,19,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
3be5e927994e2cb1c237d38129bb9c1f,python,14,17,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
3c5b4b4dddfdbddad5d1fc6b277d7385,python,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3ca4062f2b8df235dc8ca938c323b108,python,4,53,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3cac528662de405b72df82df327fd98c,python,0,6,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
3cc5f5bf72502cfb2163ebfde102e5ef,python,5,11,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
3cc5f5bf72502cfb2163ebfde102e5ef,python,6,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
3d0d31d3a8042747011e47226b0fd992,python,0,74,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d0d31d3a8042747011e47226b0fd992,python,1,118,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d0d31d3a8042747011e47226b0fd992,python,2,31,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d0d31d3a8042747011e47226b0fd992,python,3,59,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d1b67268069d2ad102f1e0a022aec57,python,0,4,5,files.python.rules.lang.security.audit.regex_dos,"Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2."
3d2d4d86f1d88df9f485f691ad26c9d8,python,0,18,15,files.python.rules.lang.security.audit.dangerous-asyncio-create-exec-audit,"Detected 'create_subprocess_exec' function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
3d5b4f248ef3d8bc4e3ea37e63823207,python,0,11,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d5f82476f3112760455f9b355146621,python,0,8,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3d75950e3376cb84db25c278f4f01526,python,1,8,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
3d75950e3376cb84db25c278f4f01526,python,1,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3d77df38c33230fd54d480631e8653e6,python,1,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3d8761fa2a3b07d53461a42b5a78073f,python,3,6,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
3dca81a3290d8dd37b631ea53eb9807a,python,6,8,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
3dca8fb089f4ba02cab912b049b5edeb,python,1,57,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3dca8fb089f4ba02cab912b049b5edeb,python,10,8,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
3dca8fb089f4ba02cab912b049b5edeb,python,10,98,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3df2133092cb1039b8fe01fdf41f810b,python,0,44,23,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3df2133092cb1039b8fe01fdf41f810b,python,1,48,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3df2133092cb1039b8fe01fdf41f810b,python,2,51,23,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3df2133092cb1039b8fe01fdf41f810b,python,3,55,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3df2133092cb1039b8fe01fdf41f810b,python,4,41,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3df2133092cb1039b8fe01fdf41f810b,python,5,55,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3e0e1299106a0c49bbf45394ab809938,python,18,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3e28df4db7ca6653fdae7a22aa5718ed,python,1,59,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3e3327e71ecedebdc7874fa01f65b9df,python,1,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3eb4fffd79fcd665893ba3b876b95402,python,1,21,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3ef41c9977b3fdf7ca1acae4244cc5fd,python,0,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3f019fdef8cdff0add9a8d5c09bd6112,python,10,10,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3f411c13c8357d06adc4329409872716,python,4,11,16,files.python.rules.flask.security.xss.audit.explicit-unescape-with-markup,"Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'."
3f56f9636c6d265312a0d5111c7e3406,python,0,9,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3f571ceeb33c0db9c8eafc75409a5d64,python,0,13,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
3f6fea1e023b028a6a566cf9f31f8c49,python,1,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3f7ef631f35c403cf17924ffaa6a19b5,python,4,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3f7ef631f35c403cf17924ffaa6a19b5,python,5,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3f7ef631f35c403cf17924ffaa6a19b5,python,7,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
3fad62a94c410a9d7bafd368bbc4ce0d,python,4,82,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
3fad62a94c410a9d7bafd368bbc4ce0d,python,6,82,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
3fc12d4360de273e02d3148e76a1f210,python,0,21,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
3fca4a69623da787c143f7b10f552e16,python,1,4,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
3fd569a9aa45889e2bb153747843013b,python,0,22,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3fd569a9aa45889e2bb153747843013b,python,0,24,38,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
3fd569a9aa45889e2bb153747843013b,python,0,59,14,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
3fd569a9aa45889e2bb153747843013b,python,1,10,14,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
404106d6dd6a51a313c8b97f3a794306,python,0,64,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
404c485b15c0da3ad8a8a864361abe15,python,3,8,10,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
405d3a01244e902a3bb60d0f3dafafd3,python,0,6,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
405d3a01244e902a3bb60d0f3dafafd3,python,0,14,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
40a26b800ee287d88f9e8105d4d0eff6,python,0,7,14,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
40a26b800ee287d88f9e8105d4d0eff6,python,1,5,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
40a26b800ee287d88f9e8105d4d0eff6,python,12,5,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
40a26b800ee287d88f9e8105d4d0eff6,python,14,8,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
40a26b800ee287d88f9e8105d4d0eff6,python,18,4,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
40a26b800ee287d88f9e8105d4d0eff6,python,19,8,28,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
40a26b800ee287d88f9e8105d4d0eff6,python,2,6,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
40a26b800ee287d88f9e8105d4d0eff6,python,2,15,14,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
40ba02db20d91f19ddfd1495ad33bcc8,python,0,8,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
40ba02db20d91f19ddfd1495ad33bcc8,python,1,8,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
40ba02db20d91f19ddfd1495ad33bcc8,python,2,7,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
40ba02db20d91f19ddfd1495ad33bcc8,python,3,15,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
40bb5e11096187e484728948430d9a93,python,20,4,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
40bb5e11096187e484728948430d9a93,python,22,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
40bb5e11096187e484728948430d9a93,python,27,7,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
40bb5e11096187e484728948430d9a93,python,7,11,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
40bd3bbb791d3271ad9006aa70e60e18,python,0,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
40dfbe4ee391fe09ceaafbab67918ebd,python,3,3,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
40fb57a04d70fcf0e97d8c1b660025c3,python,0,19,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
418c1f4878b2dda5bf72762dd50f1ce7,python,1,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
418d5d20ded75d8f64bee48e80d09bd8,python,1,36,10,files.python.rules.cryptography.security.crypto-mode-without-authentication,An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. 
418d5d20ded75d8f64bee48e80d09bd8,python,3,10,10,files.python.rules.pycryptodome.security.crypto-mode-without-authentication,An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. 
42039f92fce547ac7158a23f1778bec4,python,0,8,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
421396387b9219a67aba1574783e32c6,python,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
421396387b9219a67aba1574783e32c6,python,1,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
421396387b9219a67aba1574783e32c6,python,3,41,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
421396387b9219a67aba1574783e32c6,python,3,44,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
421396387b9219a67aba1574783e32c6,python,5,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
421396387b9219a67aba1574783e32c6,python,7,74,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
423697e9daf9480f5465fd862130a569,python,0,23,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
423697e9daf9480f5465fd862130a569,python,2,16,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
42dbab507b5093b82acedaca854a2396,python,0,26,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
42dbab507b5093b82acedaca854a2396,python,1,25,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
42dbab507b5093b82acedaca854a2396,python,2,26,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
42dbab507b5093b82acedaca854a2396,python,3,26,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
42dbab507b5093b82acedaca854a2396,python,4,25,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
42dbab507b5093b82acedaca854a2396,python,8,25,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
4313db1e0e977be0d90d16f3c9385534,python,2,63,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
4313db1e0e977be0d90d16f3c9385534,python,2,135,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
4343a0f5454356bf7f35d15d1c218707,python,0,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4343a0f5454356bf7f35d15d1c218707,python,0,9,46,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
4343a0f5454356bf7f35d15d1c218707,python,1,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4343a0f5454356bf7f35d15d1c218707,python,1,9,46,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
4343a0f5454356bf7f35d15d1c218707,python,2,6,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4343a0f5454356bf7f35d15d1c218707,python,2,6,61,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
4343a0f5454356bf7f35d15d1c218707,python,2,20,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4343a0f5454356bf7f35d15d1c218707,python,2,20,46,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
4343a0f5454356bf7f35d15d1c218707,python,4,17,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
4372d1fdb234b8ef174e1b9fce7933b8,python,0,10,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
439470e1b770244464ae919c4f58d6a9,python,0,55,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
439470e1b770244464ae919c4f58d6a9,python,1,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
43ed191322ff5d59f59c93d93e6b1d7f,python,0,5,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
43ed191322ff5d59f59c93d93e6b1d7f,python,1,12,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
43fc9a9abf92cc0889b67bb98b9484d8,python,2,22,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
441700cbb20740a220e682023c9b5b84,python,6,80,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
441af5eb46f953458e8027634e671928,python,0,15,19,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
441af5eb46f953458e8027634e671928,python,1,15,31,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
441af5eb46f953458e8027634e671928,python,3,10,19,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
444eb08f01e328285a2cd4260fcaf812,python,0,25,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4482f4c1c9562822525e749e87da5bf9,python,0,4,15,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
44a9f629e3a4e9bb7b665684de4c5d65,python,3,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
44a9f629e3a4e9bb7b665684de4c5d65,python,4,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
44e8c6296d1166897a961f1c04bc6a45,python,1,11,15,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
44f2ffb86933115e278259da06573e78,python,2,31,13,files.python.rules.django.security.audit.unvalidated-password,The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
450d4bc728a0228828538e5f40876a59,python,3,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
45103a3d1e8835f14eb515cc3d5b97ca,python,0,15,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
453c1e564c7fb62858671f40fe3806d3,python,0,26,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
4559c506b020c8d3a068c4b486ce4f40,python,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
458259f12b769d25783c495c233a24d1,python,4,38,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
458259f12b769d25783c495c233a24d1,python,49,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
458259f12b769d25783c495c233a24d1,python,51,62,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
458259f12b769d25783c495c233a24d1,python,53,48,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
45851bc6a99147649c0ef795089c8940,python,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
45acc7158a368635cedc4fa84da1c4a5,python,0,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
45acc7158a368635cedc4fa84da1c4a5,python,0,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
45cb7272a887daf67f2781daf8dd3282,python,0,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4659c4ed3b0be6e2d34bbbd1412fde18,python,0,8,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
466bee3e3040b5f980f8ebf4d5549120,python,6,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
466bee3e3040b5f980f8ebf4d5549120,python,7,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
468b773f65361bbde16f978f67f21179,python,0,13,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
46ad016522323325eb23bd1291fdcddd,python,5,9,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
46bf7ef1e18caab09d9f428bdd70e2db,python,5,9,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
46bf7ef1e18caab09d9f428bdd70e2db,python,6,9,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
46c823bcf23ba7ed9f7c43342fc9316c,python,2,51,21,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
46e87c2bcf46052a06ec77419278ff67,python,0,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4709d3275bb1fc200c7e41ebd381eb8f,python,5,16,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
4709d3275bb1fc200c7e41ebd381eb8f,python,8,16,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
472b4ef7a6736e82e37cd478aedab63c,python,0,18,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,1,57,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,13,9,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,17,9,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,17,30,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,2,14,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,20,4,16,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,22,32,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,27,20,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,27,40,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,28,28,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,3,9,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,30,11,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
472b4ef7a6736e82e37cd478aedab63c,python,6,14,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
474721b803b4a3a170b9aeeb29df0a58,python,10,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
474721b803b4a3a170b9aeeb29df0a58,python,11,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
474721b803b4a3a170b9aeeb29df0a58,python,13,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
474721b803b4a3a170b9aeeb29df0a58,python,16,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
474721b803b4a3a170b9aeeb29df0a58,python,7,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
474721b803b4a3a170b9aeeb29df0a58,python,9,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
47c74c54fbf68c9eff5b33543d18928a,python,1,40,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
482515d73fe502cd732f0f72f27f3ef0,python,0,29,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
486848f510890e172822021fc8605867,python,1,34,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
486848f510890e172822021fc8605867,python,1,43,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
48bac31f817fd10297f4f2e878fe3b94,python,2,23,27,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
48cf92a14aaf8405e52aa24d58236dac,python,0,16,31,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
48cf92a14aaf8405e52aa24d58236dac,python,1,16,31,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
48ef0a12cc03eefc72a9de65b75d792c,python,1,34,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
48ef0a12cc03eefc72a9de65b75d792c,python,4,2,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
48ef0a12cc03eefc72a9de65b75d792c,python,5,25,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
48ef0a12cc03eefc72a9de65b75d792c,python,6,29,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
48ef0a12cc03eefc72a9de65b75d792c,python,7,31,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
48ef0a12cc03eefc72a9de65b75d792c,python,8,31,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
490a5760443935ae9eab5726fe0ba036,python,2,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
491059f720125a9bff55a6af8947a76d,python,1,5,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
4923192acb2593081f1eb858be1b2b64,python,12,47,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4923192acb2593081f1eb858be1b2b64,python,3,33,4,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4923192acb2593081f1eb858be1b2b64,python,5,37,4,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4923192acb2593081f1eb858be1b2b64,python,7,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
49498ee70e272ef5bc0f1784f4d33de7,python,12,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
49498ee70e272ef5bc0f1784f4d33de7,python,14,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
49498ee70e272ef5bc0f1784f4d33de7,python,5,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
49498ee70e272ef5bc0f1784f4d33de7,python,8,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
495ed51d3cf9a8aca28550d3bad7b562,python,3,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
495ed51d3cf9a8aca28550d3bad7b562,python,5,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
4963d5f8d1836884b5bd6012ee46285c,python,0,113,68,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
49a20b04368b28b523ffe37b840364cb,python,2,2,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
49ae5a1c5e858c27a32c0c5d97f062b4,python,9,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
49bb7f480e1b1f97043cdaf9ac31273d,python,0,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
49c0df374598065aa1151bafc6c64961,python,0,21,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
49e5efc802c5f0b162e7f6f6d5fb5b4b,python,0,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4a18cfc4296ca8d3a53ee41e69fcf23e,python,0,3,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
4a362d6a7cc6677b251a7685a570b358,python,0,7,13,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
4a46f9b617deb62fdcf55aed47bb77da,python,1,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4a659854f16b6431d7c2f31d966738c5,python,0,19,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
4a7fc5eda52813dce01316e1989682ce,python,3,10,17,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
4b0e4c94df2c8a6e7c741f1be8678b65,python,0,44,27,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
4b2ead37d49c6ed86bbfcb68b8ce5171,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4b2ead37d49c6ed86bbfcb68b8ce5171,python,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4b2ead37d49c6ed86bbfcb68b8ce5171,python,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4b2ead37d49c6ed86bbfcb68b8ce5171,python,6,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4b5ec6c3c07f85dd10b812467da7012d,python,0,6,12,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
4b7f4879789c441812a8c8b5f0e3677f,python,9,57,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
4be22855d6da67094ac4ded60e278926,python,0,27,38,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
4c396119df7bdb4d94d08ddff8ace9ba,python,0,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
4c63c536f0833c850f388216a32ea610,python,1,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4d1f251ed7d6e12bb505335fb2fb8454,python,1,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4db31c59c653e60bf8eaa2972a74e510,python,0,6,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4dc534b87b023d002387d08826ef06fd,python,11,6,5,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
4dc534b87b023d002387d08826ef06fd,python,2,15,5,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
4dc534b87b023d002387d08826ef06fd,python,4,19,5,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
4dc534b87b023d002387d08826ef06fd,python,6,20,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
4dc534b87b023d002387d08826ef06fd,python,6,24,5,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
4dc534b87b023d002387d08826ef06fd,python,8,23,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
4dc534b87b023d002387d08826ef06fd,python,8,26,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
4dc534b87b023d002387d08826ef06fd,python,9,16,5,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
4dc6682cc6da9b790ba0de509d9ef8bd,python,1,4,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,10,12,10,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,11,12,10,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,12,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,13,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,14,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,15,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,16,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,2,4,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,3,4,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,5,6,19,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,6,6,19,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,7,6,19,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,8,6,19,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4dc6682cc6da9b790ba0de509d9ef8bd,python,9,6,19,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4e019464dd989a0e3ddff41392b4a5af,python,2,3,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4e019464dd989a0e3ddff41392b4a5af,python,4,26,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4e83e57ff8f71b53fdee8993ed9488cf,python,0,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
4ef3528eb1000cd2f56b0e1b2ce41e82,python,2,34,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
4f2a82f104a2d6276dad0fbb72943745,python,1,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
4f35992b5bb6fcff72d409697101222a,python,0,12,15,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
4f68ee0387ea23f828b5945eaaa9d745,python,6,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4f68ee0387ea23f828b5945eaaa9d745,python,7,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
4f8c605c751cd418a08229216333c9db,python,0,15,6,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
4fccfcd4e34ea4e92504506a8563773b,python,1,98,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
50afad8893a1fe48b1ad8c8557ada703,python,0,14,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
50d79dcbb3907994a6af798f4d96435a,python,0,10,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
50d79dcbb3907994a6af798f4d96435a,python,3,8,29,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
50fd518f120761d6830e7455f51561d7,python,0,7,6,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
50fd518f120761d6830e7455f51561d7,python,1,9,14,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
511736bd10e242379b692c710d65e409,python,4,28,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
511736bd10e242379b692c710d65e409,python,4,51,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
511736bd10e242379b692c710d65e409,python,4,70,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5123b3ecd79c605c49f469fba9dd4fe5,python,0,24,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5123b3ecd79c605c49f469fba9dd4fe5,python,1,24,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5132e7982855279eb2298c31376adb09,python,1,25,2,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
514af78282d198bd3d6dca5b7a615dea,python,2,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
514af78282d198bd3d6dca5b7a615dea,python,2,9,37,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
51954e25d3421f85126c76daa2e686fa,python,0,20,20,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
51954e25d3421f85126c76daa2e686fa,python,0,20,57,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
51b484483587feed127894563b28f52b,python,5,9,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
51ca870f11b599ce2e27253b1b70b373,python,2,44,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
522d65741cc3fdb77bf8a5284f96f209,python,4,3,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
522d65741cc3fdb77bf8a5284f96f209,python,4,8,52,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5230a0f90db39dc36fe825a7eec86a6b,python,2,19,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5242a75257d056f7a6c22407c3350712,python,1,7,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5244ff050fbe3fbad392f3c2d6e624a0,python,1,21,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5244ff050fbe3fbad392f3c2d6e624a0,python,1,26,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5244ff050fbe3fbad392f3c2d6e624a0,python,2,5,16,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5244ff050fbe3fbad392f3c2d6e624a0,python,2,18,11,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
52701c1a87745ec2b1598a4c2e30f569,python,0,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5276c2d7339e7e30b3d0415ad8b6237e,python,0,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
527dea3215212fb4ad45467597874737,python,0,23,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
527dea3215212fb4ad45467597874737,python,0,23,50,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
527dea3215212fb4ad45467597874737,python,0,28,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
527dea3215212fb4ad45467597874737,python,0,28,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
5287aae3177f1ea67dde57444438019b,python,0,7,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5287aae3177f1ea67dde57444438019b,python,0,7,41,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
52986108142b86ad1533c26e9a58f4b9,python,0,15,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
52986108142b86ad1533c26e9a58f4b9,python,1,8,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
52986108142b86ad1533c26e9a58f4b9,python,2,8,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
52986108142b86ad1533c26e9a58f4b9,python,3,8,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
52986108142b86ad1533c26e9a58f4b9,python,4,12,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
52a042f02f801d54248a8d453cdba1e6,python,1,68,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
52a042f02f801d54248a8d453cdba1e6,python,1,68,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
52b29ce6678a99e558b71d739992ae66,python,0,40,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
52b29ce6678a99e558b71d739992ae66,python,0,43,24,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
52f23022750eba58d4669d19741cf9de,python,3,7,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
530dfd8681be129ff0a976f3799f5206,python,0,34,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
530dfd8681be129ff0a976f3799f5206,python,0,34,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
530dfd8681be129ff0a976f3799f5206,python,0,64,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
530dfd8681be129ff0a976f3799f5206,python,0,64,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
530dfd8681be129ff0a976f3799f5206,python,0,88,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
530dfd8681be129ff0a976f3799f5206,python,0,88,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
533b40140004cfb5e5e7f5116d7ebd0b,python,0,5,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,python,3,5,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,python,4,6,29,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,python,5,6,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,python,5,21,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,python,6,6,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,python,6,21,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,python,7,6,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,python,7,23,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,python,8,6,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
533b40140004cfb5e5e7f5116d7ebd0b,python,8,24,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
535274e7b40382518f8ded82e5c55ace,python,1,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
535fb88098355b301d74279471380175,python,1,12,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
538f5f066a976003cc167ddff84bc901,python,4,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
53b16f614ebbb7484c46bc5a004ee5a9,python,0,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
53b16f614ebbb7484c46bc5a004ee5a9,python,0,13,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
53b16f614ebbb7484c46bc5a004ee5a9,python,1,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
53b16f614ebbb7484c46bc5a004ee5a9,python,1,13,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
53c03f76e3ae6bfb8bf5042d224ea87f,python,0,9,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
53f35c0d49a0d90ab086128f4a7df209,python,0,48,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
53f35c0d49a0d90ab086128f4a7df209,python,0,58,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
53f54ae7393f6f99424612ca22fa6762,python,0,23,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
53f54ae7393f6f99424612ca22fa6762,python,1,21,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
53f54ae7393f6f99424612ca22fa6762,python,2,21,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54148cde5b724518e3846bec082fc443,python,0,20,17,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54148cde5b724518e3846bec082fc443,python,10,12,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54148cde5b724518e3846bec082fc443,python,11,12,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54148cde5b724518e3846bec082fc443,python,3,15,17,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54148cde5b724518e3846bec082fc443,python,6,12,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54148cde5b724518e3846bec082fc443,python,9,12,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
541b73cadcd20af94f55492af18b8ac7,python,5,8,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
542738c8fa4748a4d2662055f60d9732,python,0,4,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
543d8b24767aaafa6c7a638ecc5e4679,python,0,11,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
546544891c71eae3d2532432b9f3fb0a,python,1,11,15,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
546609f9de39af9e7c6ed05dee08a9f8,python,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
546609f9de39af9e7c6ed05dee08a9f8,python,1,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
546609f9de39af9e7c6ed05dee08a9f8,python,2,17,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
54a21065706eaf16bc724e713502eccf,python,0,15,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
54b5b77cadbaf88a08ca61095013e9ff,python,0,64,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
54c0991226758771e0e248759dc42751,python,0,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
54cea4011973f99123c23a54cfe19fd8,python,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
54ddae8575254b745ec86ed5e18301b4,python,0,14,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
550126c04993117f72d4b7cb26c25347,python,0,11,13,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
550126c04993117f72d4b7cb26c25347,python,0,11,13,files.python.rules.lang.security.audit.dangerous-system-call-tainted-env-args,"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
550126c04993117f72d4b7cb26c25347,python,0,14,13,files.python.rules.lang.security.audit.dangerous-os-exec-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
550126c04993117f72d4b7cb26c25347,python,0,14,13,files.python.rules.lang.security.audit.dangerous-os-exec-tainted-env-args,Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.
550126c04993117f72d4b7cb26c25347,python,0,18,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
550126c04993117f72d4b7cb26c25347,python,0,18,9,files.python.rules.lang.security.audit.dangerous-system-call-tainted-env-args,"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
5511551261af38c25a183cdb54701c5f,python,11,5,1,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
5511551261af38c25a183cdb54701c5f,python,11,11,1,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
5511551261af38c25a183cdb54701c5f,python,3,4,1,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
5511551261af38c25a183cdb54701c5f,python,3,11,1,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
552e349c9ca491823dd3a6988aedea24,python,0,5,11,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
554beaf3a6f643545e3bf2da25f7a4c2,python,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
554beaf3a6f643545e3bf2da25f7a4c2,python,0,24,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
557e219181684ab6bf7bdcd3ac549662,python,0,31,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
558599d8d1d6e1913a1e2e0af15e036c,python,0,34,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
55f330cda73045bb9f7b589a0013968a,python,0,20,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5601d062ea7fc8423c559d8776fd6d55,python,0,29,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
56abe4aceae4aa3cd377d6a807d3d3cd,python,0,12,6,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
56b9bbdfe8b15557e2906b04089031f4,python,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
56b9bbdfe8b15557e2906b04089031f4,python,0,34,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
56b9bbdfe8b15557e2906b04089031f4,python,1,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
56b9bbdfe8b15557e2906b04089031f4,python,1,37,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
56b9bbdfe8b15557e2906b04089031f4,python,2,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
56b9bbdfe8b15557e2906b04089031f4,python,2,41,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
56e60cd4d4dca1633d66d5ba00be39bb,python,0,3,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
56e60cd4d4dca1633d66d5ba00be39bb,python,0,4,8,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
570944994c4d2d000118d108b66714f6,python,0,11,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
571299705d538a92adf2d72da93cdaa8,python,0,6,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
571299705d538a92adf2d72da93cdaa8,python,2,6,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5775ddbbb823286c8fc894a45cc181f7,python,0,16,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5775ddbbb823286c8fc894a45cc181f7,python,0,16,42,files.python.rules.lang.security.audit.dangerous-subprocess-use-tainted-env-args,Detected subprocess function 'check_output' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.quote()'.
5775ddbbb823286c8fc894a45cc181f7,python,0,16,79,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
57b46e24377b8051cfc74865625c25e1,python,1,16,9,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
57b46e24377b8051cfc74865625c25e1,python,3,10,25,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
57d83b8600238c2998b6817ec5d73f5f,python,0,4,16,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
57db8e1d675cb8d7f97ff708ee15a62d,python,0,11,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
57fe6249ed72790485402fc3a8a664eb,python,7,27,15,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
58132676acbc1589cdff1386af6f8e96,python,2,10,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5831a6f2066b2e1e316dfd9ef69da083,python,1,24,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5831a6f2066b2e1e316dfd9ef69da083,python,2,43,29,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
584b43432ca5256ccd5926b15c84cec4,python,0,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
58791c3bb42a90f73d113f0df5074606,python,0,6,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
58d79aa8ed32418be2868af2d5b538a2,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
5925233f90db7c093d7c9f9424b08fc0,python,5,6,12,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
5925233f90db7c093d7c9f9424b08fc0,python,5,10,28,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
5a2772bf61ff06ef74ab4c8542aeef62,python,14,11,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
5a2772bf61ff06ef74ab4c8542aeef62,python,16,7,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
5a62f0b6be9e950044be3c94a3ebee2c,python,10,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5a62f0b6be9e950044be3c94a3ebee2c,python,8,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5a6918619b92803127ca370f932cd787,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
5a6918619b92803127ca370f932cd787,python,0,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
5a6918619b92803127ca370f932cd787,python,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
5a6918619b92803127ca370f932cd787,python,2,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
5a80f001fa204d525097750d889e0ce9,python,2,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5ac1dcad20b05c36e4733520ed1a27d8,python,0,28,13,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
5ad5209cbc52e2010990d79ad83f4c33,python,0,14,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
5ad5209cbc52e2010990d79ad83f4c33,python,1,9,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
5b71370a72574ab2be8c1d5bb201fc8d,python,0,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5b71370a72574ab2be8c1d5bb201fc8d,python,1,33,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5b71370a72574ab2be8c1d5bb201fc8d,python,3,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5b71370a72574ab2be8c1d5bb201fc8d,python,4,32,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5b91b360698a9ec42bd1041fe7ce22e6,python,0,75,34,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5b91b360698a9ec42bd1041fe7ce22e6,python,0,84,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5bae98c39f88a6c8768a8a902fd1e1e5,python,1,14,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5bcfbb8e940c26a4eac52a4cafabd1cc,python,2,15,29,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
5c3327cb49e123578de874a1096dd5f7,python,0,22,8,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5c3327cb49e123578de874a1096dd5f7,python,1,20,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5c3327cb49e123578de874a1096dd5f7,python,2,14,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5c3327cb49e123578de874a1096dd5f7,python,7,13,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5c68bc977244ddb8e243a517f7daeccd,python,0,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5c704b45f204a9f17e4bece46e6b8206,python,3,3,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5c704b45f204a9f17e4bece46e6b8206,python,4,3,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5c732a78c3e0c33557ebf5d802e1d847,python,0,21,5,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
5c732a78c3e0c33557ebf5d802e1d847,python,6,15,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
5c8ed6c5d80ab6a5286492cab9f62ceb,python,0,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5cfce3ecc5a686e84ab948433459c6b5,python,6,5,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5cfce3ecc5a686e84ab948433459c6b5,python,7,25,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5cfce3ecc5a686e84ab948433459c6b5,python,8,25,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
5d48ebc0a189ebe0fbb1030a6b09562e,python,0,22,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5d81326db371e344f94a5cf5d044c9b8,python,3,15,13,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
5d91c3564b992f0d3b3116e5a5827a9b,python,0,35,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5d91c3564b992f0d3b3116e5a5827a9b,python,0,35,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5d91c3564b992f0d3b3116e5a5827a9b,python,0,66,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5d91c3564b992f0d3b3116e5a5827a9b,python,0,66,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5d91c3564b992f0d3b3116e5a5827a9b,python,0,89,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5d91c3564b992f0d3b3116e5a5827a9b,python,0,89,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5db4249950e083f8dd046c99a7c1a592,python,0,36,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
5db4249950e083f8dd046c99a7c1a592,python,1,30,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
5db4249950e083f8dd046c99a7c1a592,python,2,36,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
5de04e01be2ba0c39f6b29fc048e2386,python,1,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5dfc6dbffc241876824923f96206f49c,python,0,25,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
5e06c610623e0aea069c86d8cdba4a76,python,0,21,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5e06c610623e0aea069c86d8cdba4a76,python,0,48,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5e06c610623e0aea069c86d8cdba4a76,python,0,116,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5e06c610623e0aea069c86d8cdba4a76,python,0,138,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5e06c610623e0aea069c86d8cdba4a76,python,0,156,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5e26948d86dad61d05157db8b3516c99,python,0,43,41,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
5e576464b1e6d89fdcb966fc7296b9a4,python,5,5,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
5e78c81ad7bd5a74e0b0b687d56551f6,python,4,26,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
5e8a4e85defea0ccc062ea5d27681ad3,python,0,17,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5e8a4e85defea0ccc062ea5d27681ad3,python,0,17,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5e8a4e85defea0ccc062ea5d27681ad3,python,0,25,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5e8a4e85defea0ccc062ea5d27681ad3,python,0,25,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5e9306512659987390f905f0072e5cf4,python,2,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5eb6f727cad78abe8db5a654aab92fcf,python,0,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5ebd864ba99b423db7dfef029d970f45,python,1,11,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
5ebd864ba99b423db7dfef029d970f45,python,1,11,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
5f0e1918865ae5af72f37cc04538e019,python,1,31,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
5f0e1918865ae5af72f37cc04538e019,python,2,30,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
5f2aa5df0d5e05b5c9a14b8355b97de5,python,0,73,23,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
5f4b64bb9aee487940399aa957a56381,python,0,30,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
5f6421e68c42b6891ae2fef9a531276d,python,1,44,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5f6421e68c42b6891ae2fef9a531276d,python,4,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
5f794802584cf72519433dd8bc93f89b,python,1,19,5,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
5f794802584cf72519433dd8bc93f89b,python,1,32,16,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
5f794802584cf72519433dd8bc93f89b,python,1,32,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5f794802584cf72519433dd8bc93f89b,python,1,36,5,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
5f794802584cf72519433dd8bc93f89b,python,1,48,16,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
5f794802584cf72519433dd8bc93f89b,python,1,48,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5fdb57759df8f789d35981f92a2e4d55,python,0,7,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
5fe6c7cc70ceb5ae6bd5458041f5920f,python,0,10,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
5fedd5d45090ff17c668c8800f10839d,python,0,42,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
5fedd5d45090ff17c668c8800f10839d,python,0,78,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6069de427c584982b27e0fae403c24bd,python,1,14,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
6069de427c584982b27e0fae403c24bd,python,1,14,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
6069de427c584982b27e0fae403c24bd,python,1,21,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
6069de427c584982b27e0fae403c24bd,python,1,21,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
609687c97b8a7892b82d82305aa0fa1c,python,1,9,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
60a3252642fbd1ea2446ff73f9ea6c90,python,1,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
60a3252642fbd1ea2446ff73f9ea6c90,python,1,40,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
60d73aff95af53cff5935147778fe7c1,python,10,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
60e791a3be5e4bde2836b156cc72d7f9,python,0,10,5,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
617594d047161eaebc30d75dcf0517cd,python,1,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
617594d047161eaebc30d75dcf0517cd,python,6,63,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6193331b9d526dfb9bf187b92cbeca5d,python,0,48,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
61a1e0538595b706964e960f409131d3,python,5,7,16,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
61a1e0538595b706964e960f409131d3,python,5,11,12,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
61c54ef730617f6038b994737de75866,python,0,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
61ee933ae5b90e4286e1b35de194048a,python,0,69,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
61fd633a1e8f33113fc33dfa4bab1deb,python,4,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6209c3c639b74b999811cc3467c61645,python,0,26,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
623c34a8ceaf176885ed9fe40002f71a,python,2,23,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
623c34a8ceaf176885ed9fe40002f71a,python,8,25,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
6273b052e330b669d0dcc975c27b934e,python,0,19,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
62a35efed9eb149d9a802cfbc9c355d0,python,1,14,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
62a35efed9eb149d9a802cfbc9c355d0,python,13,18,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
62a35efed9eb149d9a802cfbc9c355d0,python,4,14,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
62ee6957a718485052c8c86ebe48993c,python,2,7,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
63354c46ec5250ffd94fd52aa7416f1d,python,1,53,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
637d7c92654ce5e7f817e717af5f6202,python,0,6,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
63db3afcb2d6f9eb3f77fd82ac94fa8d,python,0,7,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
64145a62decf6b3185f72c49ca22e32a,python,1,23,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
64145a62decf6b3185f72c49ca22e32a,python,2,20,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
64145a62decf6b3185f72c49ca22e32a,python,3,26,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6418d7f4dcad2e2d9b74910ac9f595a8,python,0,6,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6456c38c947b7cb00896b166f19b65ba,python,0,9,1,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
6456c38c947b7cb00896b166f19b65ba,python,0,10,12,files.python.rules.requests.security.no-auth-over-http,Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.
6456c38c947b7cb00896b166f19b65ba,python,0,10,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6456c38c947b7cb00896b166f19b65ba,python,0,19,42,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
64a529bf162f8c44dc3539a9b62cfca0,python,0,17,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
64a529bf162f8c44dc3539a9b62cfca0,python,1,6,23,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
64a529bf162f8c44dc3539a9b62cfca0,python,1,21,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
64a529bf162f8c44dc3539a9b62cfca0,python,2,14,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
64ec0eb2954f18c931ea3701a061c4b1,python,0,24,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
64ec0eb2954f18c931ea3701a061c4b1,python,0,32,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6662d10367e2051d1146dbd16b7141db,python,1,21,13,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
666a50ef902ab0184621df73c5b56f88,python,2,4,5,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
666a50ef902ab0184621df73c5b56f88,python,2,13,5,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
66787c0fedd877cb7e0acfd6209d90f4,python,0,3,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
66787c0fedd877cb7e0acfd6209d90f4,python,0,4,8,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
669d3894165053cd5b1510f098921dd1,python,0,28,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
66d7e3770b22efe966bc7f0a6e5a2907,python,2,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
66da86835b5e6d87a877f9a641df19e0,python,1,5,5,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
66da86835b5e6d87a877f9a641df19e0,python,1,14,24,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
673d519bce06cd0843f6a26a1538d6c2,python,2,12,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
674029ac7649876eb8da1917430feb50,python,6,24,9,files.python.rules.django.security.audit.unvalidated-password,The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
6749db5df472e1e985f2d69087d9f421,python,10,11,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6749db5df472e1e985f2d69087d9f421,python,11,12,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6749db5df472e1e985f2d69087d9f421,python,13,10,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6749db5df472e1e985f2d69087d9f421,python,14,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6749db5df472e1e985f2d69087d9f421,python,15,8,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6749db5df472e1e985f2d69087d9f421,python,16,10,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6749db5df472e1e985f2d69087d9f421,python,17,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6749db5df472e1e985f2d69087d9f421,python,18,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6749db5df472e1e985f2d69087d9f421,python,5,17,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6749db5df472e1e985f2d69087d9f421,python,8,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
674c996e0767fba96a3ce002953aeb61,python,1,7,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
6776a1d3bf1d8a3fef15c07edf708955,python,1,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
6776a1d3bf1d8a3fef15c07edf708955,python,1,73,24,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
67773f0198c2a31eb043e6c54867c978,python,23,2,14,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
67773f0198c2a31eb043e6c54867c978,python,23,3,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
67773f0198c2a31eb043e6c54867c978,python,23,4,20,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
67773f0198c2a31eb043e6c54867c978,python,23,5,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
67773f0198c2a31eb043e6c54867c978,python,24,6,16,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
67773f0198c2a31eb043e6c54867c978,python,24,7,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
67773f0198c2a31eb043e6c54867c978,python,24,8,22,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
67773f0198c2a31eb043e6c54867c978,python,24,9,29,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6782fea5e48ef24163e7ff64c5312bd6,python,0,10,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6782fea5e48ef24163e7ff64c5312bd6,python,0,15,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6782fea5e48ef24163e7ff64c5312bd6,python,0,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
67b3060f6691a7aea47084b382dabb85,python,0,34,19,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
67b3060f6691a7aea47084b382dabb85,python,0,34,19,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
67b3060f6691a7aea47084b382dabb85,python,1,33,19,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
67b3060f6691a7aea47084b382dabb85,python,1,33,19,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
67b3060f6691a7aea47084b382dabb85,python,2,36,19,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
67b3060f6691a7aea47084b382dabb85,python,2,36,19,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
6804de4ab5e072c7f576ec2381362abc,python,0,52,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
684ccad3e362430a3bd96c41e7eb3a2c,python,0,47,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
684ccad3e362430a3bd96c41e7eb3a2c,python,14,47,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
684ccad3e362430a3bd96c41e7eb3a2c,python,5,47,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
684ccad3e362430a3bd96c41e7eb3a2c,python,9,47,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
68531143a127f874ab0bec63419932e8,python,1,3,15,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
68531143a127f874ab0bec63419932e8,python,1,5,35,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
68531143a127f874ab0bec63419932e8,python,6,4,15,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
68531143a127f874ab0bec63419932e8,python,8,5,15,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
685af46c01fa14a930f966463f3d0758,python,0,42,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
6864114368c880a575a2be81f45db816,python,1,59,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
6864114368c880a575a2be81f45db816,python,1,59,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
68fd652df48dedbd4b335adcb3be0aec,python,0,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
68fd652df48dedbd4b335adcb3be0aec,python,0,63,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
690919db5a08fa50a541b387a6bc5d25,python,1,11,16,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
690f7d993eaad488dfa73fc899c83127,python,14,10,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
691f9c5d6cf8c2892e0e91e191929614,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
691f9c5d6cf8c2892e0e91e191929614,python,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
6947b0aa99d2bbf139dc903aab3864bc,python,0,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6967bcde90af29c1e0ddf09d34e03e44,python,12,50,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6967bcde90af29c1e0ddf09d34e03e44,python,13,50,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6967bcde90af29c1e0ddf09d34e03e44,python,3,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6967bcde90af29c1e0ddf09d34e03e44,python,7,50,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
699c66cf8b9647ee3312655c616cfa34,python,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
69aef455c5f359e6a26696f14f6b9955,python,2,28,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
69d0fc70f33efa7680b575232f596d1a,python,31,1,1,files.python.rules.django.security.audit.django-rest-framework.missing-throttle-config,Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application.
69eecb230ed7504ff3e8b4b66de45289,python,0,15,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,python,12,20,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,python,15,25,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,python,18,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,python,21,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,python,3,22,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,python,6,29,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
69eecb230ed7504ff3e8b4b66de45289,python,9,29,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
6a27c8c1103865cf59c225ab737e7b46,python,1,15,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
6a27c8c1103865cf59c225ab737e7b46,python,1,16,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
6a27c8c1103865cf59c225ab737e7b46,python,1,18,11,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
6a27c8c1103865cf59c225ab737e7b46,python,1,18,24,files.python.rules.django.security.injection.tainted-url-host,"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
6a27c8c1103865cf59c225ab737e7b46,python,1,18,24,files.python.rules.flask.security.injection.tainted-url-host,"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
6a27c8c1103865cf59c225ab737e7b46,python,1,18,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6a27c8c1103865cf59c225ab737e7b46,python,1,23,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
6a27c8c1103865cf59c225ab737e7b46,python,1,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6a27c8c1103865cf59c225ab737e7b46,python,4,51,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
6a27c8c1103865cf59c225ab737e7b46,python,6,66,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
6a2fad7ed656904cc85e8a298845ee39,python,2,67,9,files.python.rules.lang.security.audit.insecure-file-permissions,These permissions `0o755` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.
6a2fad7ed656904cc85e8a298845ee39,python,2,91,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6a5b33fc5996b3074e1068b66f62365b,python,0,11,72,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
6a5b33fc5996b3074e1068b66f62365b,python,0,11,103,files.python.rules.lang.security.insecure-uuid-version,"Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
6a6479823718eca0f3378d4b918b6a4b,python,0,8,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
6a6479823718eca0f3378d4b918b6a4b,python,1,9,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
6a7e7821c55c59f8da89f40cd6810090,python,0,11,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6b2c634d4e8600047e8ec26d15e213fb,python,2,20,31,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6b2c634d4e8600047e8ec26d15e213fb,python,33,6,12,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6b66fc592e16a7b2b9765e397e547895,python,0,5,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
6b66fc592e16a7b2b9765e397e547895,python,2,5,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
6b6c55f7039b198b7964e19026579d79,python,1,5,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6c081ff3fa41ca44695a92c027ce1d02,python,9,6,6,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6c081ff3fa41ca44695a92c027ce1d02,python,9,7,6,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6c0c0d7a62bf420334e18a38bfd83999,python,0,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6c3626a9dec1a9ec3523eaac8f1b1a41,python,0,17,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6c3626a9dec1a9ec3523eaac8f1b1a41,python,0,27,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6cbca72b9606bf9df87c539ee38bbec9,python,3,8,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6cbca72b9606bf9df87c539ee38bbec9,python,9,99,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6cd408ab72e283e4d8ed52be9cf419f2,python,0,11,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6cf59d6666241ff98bd1b07e0ec3d44a,python,0,12,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6d2b944c19cb8924f509ed5a16cbfbbb,python,7,9,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6d4b877d52a67609060a023b41935418,python,0,10,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve,Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
6d4b877d52a67609060a023b41935418,python,0,13,9,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
6d5f8d5936c73fb00a419b3fdba8ff1d,python,1,17,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6d5f8d5936c73fb00a419b3fdba8ff1d,python,2,10,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6d5f8d5936c73fb00a419b3fdba8ff1d,python,3,17,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6d6b92b83a514cace83f6d5737c5db27,python,1,8,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
6d6b92b83a514cace83f6d5737c5db27,python,1,54,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6d8d533f99112c4349c91086a11f8a66,python,9,25,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
6dba242213447a9249e59c2e422acaf7,python,0,35,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
6dba242213447a9249e59c2e422acaf7,python,0,35,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
6dba242213447a9249e59c2e422acaf7,python,0,57,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
6dba242213447a9249e59c2e422acaf7,python,0,57,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
6dcb21308f0ccd663c02f1fad9ab4766,python,4,70,41,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
6dcb21308f0ccd663c02f1fad9ab4766,python,6,78,41,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
6dd580f76edced00e2f2fa2bc2fe3b98,python,0,51,47,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6dd580f76edced00e2f2fa2bc2fe3b98,python,0,55,32,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6dd580f76edced00e2f2fa2bc2fe3b98,python,0,63,13,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6dd580f76edced00e2f2fa2bc2fe3b98,python,0,66,20,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
6decb3ffb03ff4c7fbf12a1da225b687,python,1,84,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6e135345998cc822e84fa1e77c378ba6,python,0,35,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6e135345998cc822e84fa1e77c378ba6,python,0,46,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6e84a6f3a831a77de96cbc6ef41e2b32,python,0,13,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
6e8d5b629b56742dcbd1989940601a2d,python,1,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6e8d5b629b56742dcbd1989940601a2d,python,5,42,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6e8d5b629b56742dcbd1989940601a2d,python,6,52,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6e8d5b629b56742dcbd1989940601a2d,python,8,63,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6e902c08352ea14e6ae15a9c557550d8,python,0,5,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6e902c08352ea14e6ae15a9c557550d8,python,1,7,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6e902c08352ea14e6ae15a9c557550d8,python,2,7,35,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6e902c08352ea14e6ae15a9c557550d8,python,3,7,35,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6e902c08352ea14e6ae15a9c557550d8,python,4,7,35,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6efd5c28c5861646b4ff7508077f3c03,python,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6f3f1946ea4e32d4287377787517a558,python,3,35,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
6f8d60aae075ffb37c51dda897e5f85c,python,0,5,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
6f8d60aae075ffb37c51dda897e5f85c,python,0,27,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
6fad504d6b779f7c366eaa9aaad3080d,python,1,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fae6adf3a9baec990fecbe247a6065f,python,1,21,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6fc66af3f4ff448671e2dbcbb31294c2,python,19,15,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,python,22,30,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,python,23,57,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,python,24,55,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,python,25,60,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,python,26,54,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,python,28,48,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
6fc66af3f4ff448671e2dbcbb31294c2,python,6,37,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
6fd606290fe3cb0ff03ea56df8ce7c9e,python,0,8,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6fd606290fe3cb0ff03ea56df8ce7c9e,python,1,14,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6fd606290fe3cb0ff03ea56df8ce7c9e,python,2,8,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
6fd606290fe3cb0ff03ea56df8ce7c9e,python,3,12,8,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
70188def460bad208f9585bcc2b83dc7,python,9,13,6,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
7043e8af74fad9da547703737507852c,python,0,95,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7043e8af74fad9da547703737507852c,python,0,95,53,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
7043e8af74fad9da547703737507852c,python,1,95,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
704de4087b57e8ce4b66dc109c42038e,python,0,13,29,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
708a180878ddea4c6860add4aea98a10,python,4,68,29,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
708a180878ddea4c6860add4aea98a10,python,4,90,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
708a180878ddea4c6860add4aea98a10,python,4,97,29,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
708a180878ddea4c6860add4aea98a10,python,4,107,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
71105a56839d34839b7148824e18b6fb,python,13,10,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
7118361abf1ef696134e30ed6fc83430,python,0,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7118361abf1ef696134e30ed6fc83430,python,1,44,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7118361abf1ef696134e30ed6fc83430,python,2,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7118361abf1ef696134e30ed6fc83430,python,3,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7118361abf1ef696134e30ed6fc83430,python,4,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7118361abf1ef696134e30ed6fc83430,python,5,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7120e4bcd1b36f45ff913841a8d920c0,python,3,21,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7120e4bcd1b36f45ff913841a8d920c0,python,7,2,20,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7121386da7b0aaf0832722a7861854ab,python,1,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7142d75545016c617465058e62ccfdbd,python,5,54,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7154acf527a700620b0c2d9fa2106064,python,1,6,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
7162ce2e08d1e9875bc12266a0ca46f7,python,14,18,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
7162ce2e08d1e9875bc12266a0ca46f7,python,14,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
716a4662e2e5868d4da5ff973b1a6c7e,python,1,55,34,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
71ab94bef39f524b342689f3c7434260,python,0,5,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
71e1430d04a088898eef566a97273830,python,1,14,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
71fa5845c4ef6c0e287b606503a8f625,python,4,4,104,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
72145d0f40ba6597db62704d73adf72c,python,0,8,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
72145d0f40ba6597db62704d73adf72c,python,0,9,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
72145d0f40ba6597db62704d73adf72c,python,0,13,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
722ab465b3eef8054ab753c1276dc54f,python,3,8,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
722ab465b3eef8054ab753c1276dc54f,python,3,10,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
722ab465b3eef8054ab753c1276dc54f,python,3,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
722ab465b3eef8054ab753c1276dc54f,python,5,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72516c25161fbfdc8a943a05c562e544,python,2,14,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
72516c25161fbfdc8a943a05c562e544,python,3,14,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
726cc614e16aa1114602e0a8107b8d8e,python,4,5,5,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
727b04a20e0710904bf555817a39852a,python,0,14,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
727b04a20e0710904bf555817a39852a,python,0,16,20,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
727b04a20e0710904bf555817a39852a,python,1,16,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
727b04a20e0710904bf555817a39852a,python,1,18,20,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
72abdd15fa1bcc82154d419ecc476312,python,0,28,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
72b8ac182d4beeff073eadf98da80cc1,python,1,8,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
72b8ac182d4beeff073eadf98da80cc1,python,2,53,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
72c7ec377f3e138bd98dd31676d9f94a,python,45,1,1,files.python.rules.django.security.audit.django-rest-framework.missing-throttle-config,Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application.
72eeb554576942cce4827ac7b2e97fec,python,0,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72eeb554576942cce4827ac7b2e97fec,python,1,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72eeb554576942cce4827ac7b2e97fec,python,2,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72eeb554576942cce4827ac7b2e97fec,python,3,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72eeb554576942cce4827ac7b2e97fec,python,6,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
72f7bffb999e4871440b072c0b00806a,python,0,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
730b27615f795bb116053a615719b1b3,python,5,20,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
736660101ca55bb291e9f9e0177ba5c1,python,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7379cdcee96aff710276b88ccaa347e4,python,8,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
73959b2fdfd9a90f520ea74818eaa37a,python,6,31,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
73b68ddef542d7a9cb3a3ba83c3031b7,python,1,7,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
73b68ddef542d7a9cb3a3ba83c3031b7,python,1,7,67,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
73d63792cdfdf39954ecd1dc2a88f56d,python,3,13,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
73d63792cdfdf39954ecd1dc2a88f56d,python,3,13,40,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
73ec7a8ca09da7f4cf026fe44ad60a6a,python,2,11,12,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
73ec7a8ca09da7f4cf026fe44ad60a6a,python,2,12,12,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
73ec7a8ca09da7f4cf026fe44ad60a6a,python,2,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
741383457f41e8120b82c821fd664688,python,2,19,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
741383457f41e8120b82c821fd664688,python,2,19,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
741383457f41e8120b82c821fd664688,python,4,19,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
741383457f41e8120b82c821fd664688,python,4,19,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
74ab1a332b0e907e3ee5ff20c80ab2d9,python,0,6,8,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
74ab1a332b0e907e3ee5ff20c80ab2d9,python,1,7,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
74e31dbe8ea9aec3d4fecd5bf16997c5,python,0,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
74e31dbe8ea9aec3d4fecd5bf16997c5,python,0,16,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
74e31dbe8ea9aec3d4fecd5bf16997c5,python,1,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
75011c33d1e621510c48e5d80b1cdc00,python,1,14,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
75011c33d1e621510c48e5d80b1cdc00,python,1,22,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
75011c33d1e621510c48e5d80b1cdc00,python,1,23,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
75011c33d1e621510c48e5d80b1cdc00,python,1,24,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
75011c33d1e621510c48e5d80b1cdc00,python,1,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
75011c33d1e621510c48e5d80b1cdc00,python,4,16,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
75011c33d1e621510c48e5d80b1cdc00,python,4,43,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
751fe90ade739e6c9832b453f4d6f168,python,1,8,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
751fe90ade739e6c9832b453f4d6f168,python,2,8,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
75402876c28958aac9f1aad3870838bf,python,1,11,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
75402876c28958aac9f1aad3870838bf,python,2,5,11,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
75402876c28958aac9f1aad3870838bf,python,3,8,11,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
75402876c28958aac9f1aad3870838bf,python,4,7,11,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
75472ec8aad1bb4481f8528d0d583291,python,0,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7549487b6d0ece1261a7172d9ffdf01a,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
7549487b6d0ece1261a7172d9ffdf01a,python,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
7549487b6d0ece1261a7172d9ffdf01a,python,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
7551aea4a5ef7cc2c0dfca5c4a3e1744,python,19,16,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7599c44989c8b6b1660eed1e15263a6a,python,1,5,5,files.python.rules.django.security.injection.open-redirect,Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.
7599c44989c8b6b1660eed1e15263a6a,python,1,5,12,files.python.rules.django.security.injection.open-redirect,Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.
75a5f77eb7a753d44bc6957b48ef5787,python,0,15,18,files.python.rules.sqlalchemy.security.audit.avoid-sqlalchemy-text,"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
75a5f77eb7a753d44bc6957b48ef5787,python,0,20,18,files.python.rules.sqlalchemy.security.audit.avoid-sqlalchemy-text,"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
75a5f77eb7a753d44bc6957b48ef5787,python,0,26,18,files.python.rules.sqlalchemy.security.audit.avoid-sqlalchemy-text,"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
763951d9952e25a87647515b269dea04,python,1,28,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
76481adc0116753c8d5fa13b8c06519f,python,5,12,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
76481adc0116753c8d5fa13b8c06519f,python,5,12,35,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
766463cf4fddd505d5c3c4a6b4d67edb,python,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
76a20d3fd9053a006ee37355e8c4a753,python,10,6,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
76a20d3fd9053a006ee37355e8c4a753,python,10,6,76,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
76a20d3fd9053a006ee37355e8c4a753,python,8,5,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
76a20d3fd9053a006ee37355e8c4a753,python,8,5,76,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
76cf36faa23a210aecbd51a69daf5786,python,0,12,19,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
76cf36faa23a210aecbd51a69daf5786,python,0,22,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
76eb0a15e970ab1f0c6ae2cb5d051d9c,python,3,3,17,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
76eb0a15e970ab1f0c6ae2cb5d051d9c,python,5,3,17,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
76fe7cd5e927bb5077a7e6911736dadd,python,2,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
775d5e115558f781bd1ca735e5349eb9,python,0,18,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
776326585186d6c757451aa8f4cb5084,python,1,4,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
776326585186d6c757451aa8f4cb5084,python,2,4,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
777f72959c8a33f616cab0e960f06d49,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
777f72959c8a33f616cab0e960f06d49,python,0,5,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
78016cd5c2e0d089b534294c93f88a7c,python,10,4,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
78016cd5c2e0d089b534294c93f88a7c,python,4,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
789e23239075a25af03a4bef33602af1,python,0,40,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
789e23239075a25af03a4bef33602af1,python,0,61,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'getoutput' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7915f0e98b4071084185da19dbf46471,python,1,107,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7915f0e98b4071084185da19dbf46471,python,4,72,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7915f0e98b4071084185da19dbf46471,python,6,81,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7915f0e98b4071084185da19dbf46471,python,7,85,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
792ddc55b2c5f727b912031877ffb253,python,0,23,20,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7949560f739d7daf7263b90dfd69ed5b,python,1,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7949560f739d7daf7263b90dfd69ed5b,python,3,16,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
795572c67388c0b796841fc1ef1b52c7,python,1,14,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
79c8f50fa9bb1f7a0db9fbcb5582b785,python,1,14,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
79c8f50fa9bb1f7a0db9fbcb5582b785,python,4,11,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
79c9905926d291f2e19ba600f0ba6933,python,1,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
79d99a928d57937954fb59b3a43760f9,python,15,5,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
79d99a928d57937954fb59b3a43760f9,python,16,11,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
79df3b75a0dd1ab16c0d7959d0a70acc,python,0,8,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
79f88545926b0ac38226e3eb2be38022,python,0,6,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
79f88545926b0ac38226e3eb2be38022,python,0,25,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
7a0f5bbc73ca590846d790c06b38e6d2,python,1,15,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7a2d6e6310c1acfcbc61764291ad9414,python,4,12,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7a3323f65bd15d7eac7f447a00cd3c08,python,1,12,10,files.python.rules.cryptography.security.crypto-mode-without-authentication,An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. 
7a6736bd4b91019e97f8ac35fad22eb7,python,0,21,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7a7068b1040b163a503a2a4e8fdc3f60,python,0,57,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7a7068b1040b163a503a2a4e8fdc3f60,python,0,57,35,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
7a7068b1040b163a503a2a4e8fdc3f60,python,1,46,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7a7068b1040b163a503a2a4e8fdc3f60,python,1,46,53,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
7afeec5aaf9a33b502baf9eb12c6bffa,python,1,60,18,files.python.rules.cryptography.security.crypto-mode-without-authentication,An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. 
7b605c6091eda5e335ae78a0dc88d7a1,python,1,20,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
7b605c6091eda5e335ae78a0dc88d7a1,python,1,20,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
7b605c6091eda5e335ae78a0dc88d7a1,python,1,64,12,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
7b605c6091eda5e335ae78a0dc88d7a1,python,1,64,12,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
7bccf9c74602892dceb853304713fafa,python,6,19,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
7bf727b0a925cfea3c8fe6b2bdb86ceb,python,0,3,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
7bf727b0a925cfea3c8fe6b2bdb86ceb,python,0,5,12,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
7bf727b0a925cfea3c8fe6b2bdb86ceb,python,1,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7c1aef70d0912a5f8bf8a14f977fcfb0,python,0,8,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
7c1aef70d0912a5f8bf8a14f977fcfb0,python,0,44,13,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
7c1aef70d0912a5f8bf8a14f977fcfb0,python,0,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7c2b23429c97aa345ecf1fdf77b4f951,python,3,10,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
7c5e0b53c0dfce0fbd19ceea0eea6de0,python,0,10,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7c6bef5f814a65f147f3d6cd3f81ea86,python,2,16,27,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7c6bef5f814a65f147f3d6cd3f81ea86,python,3,16,27,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7c6bef5f814a65f147f3d6cd3f81ea86,python,4,27,27,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7c74369a1b0f248e1b61f22443d43d24,python,0,12,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7c74369a1b0f248e1b61f22443d43d24,python,0,31,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7c784d73ae53675d73e1e121db65bacd,python,1,4,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7c784d73ae53675d73e1e121db65bacd,python,1,7,13,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7c784d73ae53675d73e1e121db65bacd,python,2,4,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7c784d73ae53675d73e1e121db65bacd,python,2,7,13,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7c86f9c4a34f9c086f4e715d2ee80a81,python,0,5,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7c86f9c4a34f9c086f4e715d2ee80a81,python,1,24,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
7c89779533ed376c065b56e581765b6c,python,0,17,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7cd628ce46513f43843d1dec4d66ce0f,python,0,31,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
7cfa4dd6e83fdc4fd397da16aaa384d8,python,1,39,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7cfa4dd6e83fdc4fd397da16aaa384d8,python,1,68,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7cfa4dd6e83fdc4fd397da16aaa384d8,python,2,10,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7cfa4dd6e83fdc4fd397da16aaa384d8,python,2,18,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7cff0f95b819cf4cd9bbdbfb3ff46301,python,1,24,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
7cff0f95b819cf4cd9bbdbfb3ff46301,python,6,24,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
7d2403357b6e876ac22f6f4207e33091,python,17,24,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7d9778b46859048ca1242c1b09aaf3fc,python,13,42,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7d9778b46859048ca1242c1b09aaf3fc,python,15,47,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7d9778b46859048ca1242c1b09aaf3fc,python,22,15,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
7d9778b46859048ca1242c1b09aaf3fc,python,28,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
7d9778b46859048ca1242c1b09aaf3fc,python,5,44,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7db99b36f237af184a29b8421bf082b0,python,3,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7e18a884fdbbaa118afadc726e032677,python,0,5,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7e18a884fdbbaa118afadc726e032677,python,0,11,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
7e63768eb611cadbc57ca1d7287547a1,python,0,27,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
7e967c9f030f8e7d5d59f818df66bab9,python,0,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7ee9a75c75d301eb99e37180ce6b5e9a,python,5,42,9,files.python.rules.lang.security.audit.sqli.psycopg-sqli,"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"
7ee9a75c75d301eb99e37180ce6b5e9a,python,5,42,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
7f668dbb060ee4166eb4f92074e569f1,python,18,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
7fe1d5e294be2f24c2220b24d19c0933,python,0,17,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,1,18,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,10,32,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,11,30,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,12,8,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,13,14,28,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7fe1d5e294be2f24c2220b24d19c0933,python,13,34,28,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
7fe1d5e294be2f24c2220b24d19c0933,python,2,10,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,2,27,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,3,82,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,4,30,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,5,41,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,6,13,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,6,24,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,7,30,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,8,38,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe1d5e294be2f24c2220b24d19c0933,python,9,76,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
7fe930cecb3afb2215394db21f1e03f1,python,20,2,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_ENV,Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable
7fe930cecb3afb2215394db21f1e03f1,python,3,4,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_DEBUG,Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable
80aa528e7776a82ddcafbb00833c7883,python,0,6,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
80aa528e7776a82ddcafbb00833c7883,python,2,42,40,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
80b19ba869f8e9014fa5f50cf160fbdd,python,10,6,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_DEBUG,Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable
80b19ba869f8e9014fa5f50cf160fbdd,python,10,7,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
80b19ba869f8e9014fa5f50cf160fbdd,python,2,8,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
80b19ba869f8e9014fa5f50cf160fbdd,python,3,9,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
80b19ba869f8e9014fa5f50cf160fbdd,python,4,4,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
80b19ba869f8e9014fa5f50cf160fbdd,python,5,11,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
80f19d445be6f889efe9675bc827d0d9,python,0,10,25,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
80f19d445be6f889efe9675bc827d0d9,python,1,10,25,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
810532cf4947ff72b971f8e025d8c1b2,python,10,10,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
810532cf4947ff72b971f8e025d8c1b2,python,3,4,17,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
810cbba33f767276fec477fe2c2168b1,python,0,17,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
810cbba33f767276fec477fe2c2168b1,python,0,91,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
810cbba33f767276fec477fe2c2168b1,python,1,49,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
81224daee30c5980a491aca3b8ee0f5b,python,0,16,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
81224daee30c5980a491aca3b8ee0f5b,python,8,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
814f583621bc449b68ebd42f87ddfedf,python,0,38,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
814f583621bc449b68ebd42f87ddfedf,python,1,14,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
81587f2bdb4b6ba1c02544e464124e28,python,0,20,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
8181ef7acc6edd78057ffe786f3befe0,python,2,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
81b6163dd9413c0783268415c30485d4,python,0,12,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
81bb4f5f12a23d30cc1f13a4609348d3,python,1,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
81c3800170be608f97ab73c69d44fe25,python,16,5,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
81f7c1ee92c6dc15bd483170ed536024,python,0,11,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
825966cda2700c2ba63e03b08c5e6a6e,python,0,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
827ada4ff64986bca67379cb5a5206b9,python,0,40,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
82ca36b2b05abfbf6bae952a4c595ed3,python,1,14,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
82d5e386cba9e0fbdc8368b6a1e340be,python,0,24,16,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
82d5e386cba9e0fbdc8368b6a1e340be,python,0,26,15,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
82f1b88b5aaa6cf806f1d3c6ff453518,python,1,44,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
82f1b88b5aaa6cf806f1d3c6ff453518,python,1,44,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
831334664e310679c37d6baa26594db2,python,1,51,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
831334664e310679c37d6baa26594db2,python,1,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
838d262ec6e753929412c778103b09c0,python,0,41,26,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
838d262ec6e753929412c778103b09c0,python,0,84,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
83bec2c50a7e458f02680fa54c64f64e,python,12,11,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
83bec2c50a7e458f02680fa54c64f64e,python,14,7,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
83bec2c50a7e458f02680fa54c64f64e,python,14,7,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-tainted-env-args,Detected subprocess function 'Popen' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.quote()'.
83bec2c50a7e458f02680fa54c64f64e,python,14,7,33,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
83bec2c50a7e458f02680fa54c64f64e,python,15,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
83bec2c50a7e458f02680fa54c64f64e,python,15,9,20,files.python.rules.lang.security.audit.dangerous-subprocess-use-tainted-env-args,Detected subprocess function 'run' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.quote()'.
83bec2c50a7e458f02680fa54c64f64e,python,15,9,31,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
83e6ebbd37b465940171a7aabae9f86e,python,5,3,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
83e6ebbd37b465940171a7aabae9f86e,python,5,3,53,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
83f68cae10f5d6eea037f315685c7ad0,python,2,15,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8413621a1fd167801ca2796b3c280884,python,0,22,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
84455103d53b2b30bae153af0708dfd0,python,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
846439838228be96232f67c3e9bd15e1,python,0,5,9,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
84cbf27bc45864eaeddca6b6fa9ce3ed,python,1,37,12,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
850fd2da6ab94d309cf3702db3bc1066,python,3,8,6,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
856d841ba0e58bdc620a8a36c778ba90,python,1,6,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
8570b0c597390b80694fe7d02deb0ef1,python,2,30,23,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
8570b0c597390b80694fe7d02deb0ef1,python,3,32,23,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
8576f44937d3e1bb0237f83c978de2ba,python,0,8,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
85c9b780b348fa036d19a775a4820308,python,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
85c9b780b348fa036d19a775a4820308,python,0,52,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
86050ecc4e35b6d7e14265bd4b75c54e,python,3,80,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
86664deba506e7e367175918ddd581e1,python,1,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
86774e566e385455395b1247469055db,python,4,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
86f2a25416ffebf56dc7700691d6444d,python,14,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
874b0d514e6f846ef12decabddd3c4b0,python,7,8,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
87bb0974dacd78bea80204c0fd3a83f2,python,0,94,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
87c57b0fa657b9635e6d8d4d44d68ec7,python,0,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
88033ab65485270c5dd8e05d83ea0dd5,python,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
88033ab65485270c5dd8e05d83ea0dd5,python,0,14,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
882b69a52295bb0405794d54970fc18f,python,0,3,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8846a2ce64a1cbda9901f1ea7cb581fc,python,0,60,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
885ed7a142cc4ea0c30dc26d0ec48064,python,3,12,15,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
8878ee40ecdbc091696a79d93d6cd5dc,python,3,3,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
889a5128afb79cb869ff3bd4bd8beb73,python,14,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
889a5128afb79cb869ff3bd4bd8beb73,python,7,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
889a99b0a87afed14c886818b15fbb28,python,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
891d6164ded43fc1f0ae70020f35eb35,python,0,16,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
891d6164ded43fc1f0ae70020f35eb35,python,0,18,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
891d6164ded43fc1f0ae70020f35eb35,python,0,20,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
891d6164ded43fc1f0ae70020f35eb35,python,0,22,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
891d6164ded43fc1f0ae70020f35eb35,python,0,24,20,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
891d6164ded43fc1f0ae70020f35eb35,python,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
89727908d5b78d95b41fdfce81c53619,python,0,70,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
89727908d5b78d95b41fdfce81c53619,python,0,89,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
89e306b0b93fc6c636efb0e3b5955e53,python,2,12,24,files.python.rules.lang.security.deserialization.avoid-dill,"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
89e306b0b93fc6c636efb0e3b5955e53,python,2,12,35,files.python.rules.lang.security.deserialization.avoid-dill,"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
89f3d17a27176463ff312c752f487245,python,2,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8a013c43091ab199bc645a51cbea5761,python,1,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8a0aef4feab15c262d669f2a1dc8bb60,python,0,13,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
8a50bd6293e37ce1263109a8ddad70b4,python,2,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
8a683eab747c0b0dd02d099ccf5c2264,python,11,25,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
8a7610013cfaa57ec74b78e5d180ae71,python,1,6,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8a7610013cfaa57ec74b78e5d180ae71,python,3,4,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8a7610013cfaa57ec74b78e5d180ae71,python,4,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8a7610013cfaa57ec74b78e5d180ae71,python,8,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8a9b7032c979b0d00f594a90095d78ed,python,0,7,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8a9b7032c979b0d00f594a90095d78ed,python,0,10,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8a9b7032c979b0d00f594a90095d78ed,python,1,7,20,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8a9b7032c979b0d00f594a90095d78ed,python,1,12,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8ab3ae72d24a9729a660a64905b6c4b2,python,1,8,12,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8adeab0e60b6af2571a2c839fe348310,python,0,52,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
8adeab0e60b6af2571a2c839fe348310,python,1,53,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
8b4bfe7b52a1e9e06719c5fccaca4ad4,python,0,6,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
8b65fd164a5c64c088181a2623a7bba2,python,0,14,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
8b65fd164a5c64c088181a2623a7bba2,python,1,14,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
8b71432e242c854166bfd8c2a67616c8,python,1,9,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
8b861bdb00f97b4dd82576ede43cfc7b,python,5,8,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
8b88b9552930578d6480b9abed66c61b,python,13,9,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
8b88b9552930578d6480b9abed66c61b,python,13,13,20,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
8bdab7f77330b651dbbe44f8e7ebaa51,python,0,21,18,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bdab7f77330b651dbbe44f8e7ebaa51,python,0,34,24,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bdab7f77330b651dbbe44f8e7ebaa51,python,0,52,22,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bdab7f77330b651dbbe44f8e7ebaa51,python,1,21,18,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bdab7f77330b651dbbe44f8e7ebaa51,python,1,34,24,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bdab7f77330b651dbbe44f8e7ebaa51,python,1,52,22,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
8bf7db4e5f41c8c348a3afecc7f50d4e,python,0,15,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8c167343130f426f89a2046478d93381,python,0,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8c2d46aff7dccf3d627a32b97ec6eb4e,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
8c2d46aff7dccf3d627a32b97ec6eb4e,python,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
8c442b8f205f50811a012a3bbe7d93f6,python,2,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
8c7384f4f9b1968cb1532a47ab5bac30,python,5,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
8d4b9bd0af376135aa621fd5abec422d,python,2,38,19,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8d4b9bd0af376135aa621fd5abec422d,python,2,38,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8d4b9bd0af376135aa621fd5abec422d,python,3,38,19,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8d4b9bd0af376135aa621fd5abec422d,python,3,38,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8d4b9bd0af376135aa621fd5abec422d,python,3,45,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8d4b9bd0af376135aa621fd5abec422d,python,3,45,46,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8d4b9bd0af376135aa621fd5abec422d,python,6,27,24,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8d4b9bd0af376135aa621fd5abec422d,python,6,27,52,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8d4b9bd0af376135aa621fd5abec422d,python,6,35,77,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8d9ce5c551ac29189521e3fae4faab20,python,0,10,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
8ddc42c8c9ad5bba50e15f7dc6c7d004,python,1,8,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8df1521b9379e0ab23bb65fdf56d2e5b,python,11,13,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
8df1521b9379e0ab23bb65fdf56d2e5b,python,18,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8e0390638eaa2e97f21ce71686e0af12,python,1,5,13,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
8e2496d7dff48e66bbcd9a470edf4b8f,python,4,9,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8e2496d7dff48e66bbcd9a470edf4b8f,python,4,9,57,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8e536fa9ae900bdeffa9a377be9bee62,python,0,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
8e536fa9ae900bdeffa9a377be9bee62,python,0,7,79,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
8ea6e2385849505fb4f9b74b98222559,python,1,8,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
8ea6e2385849505fb4f9b74b98222559,python,2,5,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
8ecdb9cf8609bfa19e2904ade88de345,python,1,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8ecdb9cf8609bfa19e2904ade88de345,python,5,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8f16263c31cff0f26a0b700daae9a66a,python,0,11,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
8f410464f75f9802f3f02fdb1fbe36bd,python,3,52,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
8f4f2ac2eaa137ecfabf5bef6fb263c0,python,12,6,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
8f4f2ac2eaa137ecfabf5bef6fb263c0,python,14,6,11,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
8fa9d76b6d248817498e03abc595bb4f,python,0,6,14,files.python.rules.pycryptodome.security.crypto-mode-without-authentication,An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. 
8fb5e5fedbd85e9b0ad5e4f5a3aa3ddb,python,0,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
90161981f149009a9402825f2efe4e19,python,2,10,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
90261c5e2952f785ee38acc756d009e5,python,3,12,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
90261c5e2952f785ee38acc756d009e5,python,4,13,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
90261c5e2952f785ee38acc756d009e5,python,5,13,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
90261c5e2952f785ee38acc756d009e5,python,6,14,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
90261c5e2952f785ee38acc756d009e5,python,7,14,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
90261c5e2952f785ee38acc756d009e5,python,8,15,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
90261c5e2952f785ee38acc756d009e5,python,9,15,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
905104f47e06f3ee2a87ba4f405100e5,python,0,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
905104f47e06f3ee2a87ba4f405100e5,python,0,16,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
905104f47e06f3ee2a87ba4f405100e5,python,1,5,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
905af0a5dc848276b4b2651234bf834a,python,0,25,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
90a469cb9507ba6da344ed4898ad339d,python,0,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9137b0a588be4ad445cca0683b1581d6,python,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
915465a94fd183a74e23f8dfe0a2dad4,python,7,31,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
91710ccb4bb416226064702d7600f683,python,0,7,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
91755ff0ffba13c375c8e305bf0fe060,python,0,16,28,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
91841c8815d093fc649a3aae6be77b67,python,0,5,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
91a4ce14db3b43d4c86068314a474e41,python,5,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
91a4ce14db3b43d4c86068314a474e41,python,7,23,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
91a50f673c18c70eeb54cc073fc13115,python,0,10,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
91a50f673c18c70eeb54cc073fc13115,python,1,16,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
91d4bf042c6ee223c297df88a6573ef9,python,0,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
921da9a84e8e75c170f69c2124de24c6,python,2,26,11,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
922a0b22e20c0dfa8fc086fb33721e9a,python,2,10,19,files.python.rules.fastapi.security.wildcard-cors,CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.
9231a25087a61497d056170a19428ba6,python,4,49,4,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9231a25087a61497d056170a19428ba6,python,5,54,4,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
92788623ca43a31d7c831d858678b649,python,1,82,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
92788623ca43a31d7c831d858678b649,python,1,150,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
92ba6da864cf188d9e69f89399038d22,python,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
92f7e06470f3ffbe062aaa2f3539e951,python,1,35,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
932bede858a6e904a5ac7d26c98c863c,python,1,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
9332de848d92ac3d7747ffa3b75df198,python,0,8,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9332de848d92ac3d7747ffa3b75df198,python,1,6,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9332de848d92ac3d7747ffa3b75df198,python,2,13,19,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9332de848d92ac3d7747ffa3b75df198,python,3,4,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9332de848d92ac3d7747ffa3b75df198,python,4,6,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9332de848d92ac3d7747ffa3b75df198,python,5,6,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
93c8e04ba8ade45ac3607e668cc01100,python,1,20,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
93e26c71ab03bdddeaa367f00cf5b25d,python,0,136,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
93e91f22f6e8289b6219fa7e87f06bc7,python,3,20,8,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
93e91f22f6e8289b6219fa7e87f06bc7,python,3,32,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
945223baefc2349fe9d2a68a58878b0b,python,0,11,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
94bbdb415434baff0966dfacf51eec80,python,3,13,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
94d3a0c272935dcb4c9b790cba0f6906,python,1,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
94d9697214849297f7a9b307cc6dc2bc,python,1,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9501b9ed28b5ef12ecd6858ffb559b05,python,1,14,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9501b9ed28b5ef12ecd6858ffb559b05,python,2,15,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9506eb2b9d06a3e81a23c058cb584799,python,0,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9526bfdf54a62a801c2480b9e712b412,python,0,18,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9526bfdf54a62a801c2480b9e712b412,python,1,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
95729c406479dd6df777235bac4c51a6,python,0,14,8,files.python.rules.lang.security.audit.httpsconnection-detected,"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information."
957efbd47267aecdefcd5e40d9cde591,python,0,13,15,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
9599c68b5a59a80040f4ade4b9b4127c,python,0,45,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
9599c68b5a59a80040f4ade4b9b4127c,python,2,45,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
9599c68b5a59a80040f4ade4b9b4127c,python,5,44,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
959a487f7290f4eb0a3f3324253a107b,python,0,12,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
95c4bcfc963c3f4770b3a5f43edec11d,python,0,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
95c4bcfc963c3f4770b3a5f43edec11d,python,1,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
95c4bcfc963c3f4770b3a5f43edec11d,python,4,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
95cd003538987d6802b99f7174e51a8b,python,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
95e0b270859ddefc938c60c44af5271d,python,5,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
95f77894430ac1abf27838408adb91fe,python,3,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
96329ed6f5dbcfb9ceb14593da6492b6,python,10,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9661c7f270c5ad1db118374282bb249b,python,15,19,26,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9661c7f270c5ad1db118374282bb249b,python,15,19,60,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
96c129b6431f63eeac4093c99e539d36,python,0,34,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
96d14a15fbb78be3bad7d5b98a3e910d,python,0,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
96d14a15fbb78be3bad7d5b98a3e910d,python,0,5,87,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
96d14a15fbb78be3bad7d5b98a3e910d,python,0,10,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
96d14a15fbb78be3bad7d5b98a3e910d,python,0,10,56,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
96ee3bf29c6dd3fa6dfaff6004281c3f,python,2,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
96f8e63efaafa6967d9e896d733fc189,python,1,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
96f90fc766ec532bd24c1032bc470446,python,0,20,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,python,1,20,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,python,2,24,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,python,3,24,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,python,4,25,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,python,5,31,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,python,6,31,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
96f90fc766ec532bd24c1032bc470446,python,7,33,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
972ff3cc73a4023df49c3e1ea8d86152,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
972ff3cc73a4023df49c3e1ea8d86152,python,0,27,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
972ff3cc73a4023df49c3e1ea8d86152,python,0,31,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
972ff3cc73a4023df49c3e1ea8d86152,python,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
972ff3cc73a4023df49c3e1ea8d86152,python,1,38,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
972ff3cc73a4023df49c3e1ea8d86152,python,1,41,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
972ff3cc73a4023df49c3e1ea8d86152,python,5,24,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
972ff3cc73a4023df49c3e1ea8d86152,python,7,36,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
9747662aad3602818afe0c2bab1bbdb0,python,6,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
976334173a829ff85b4b1854a7a6f153,python,0,22,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
976334173a829ff85b4b1854a7a6f153,python,1,22,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
97ce5c7016ddd39ed01b805993097cfd,python,1,48,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
97eb788a0264040c17f8f92313fafb26,python,1,5,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
98503105adc77468fdfc46e38a275de4,python,0,7,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9854c8ad8f827bd4cc9b1527a0b74065,python,0,14,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9854c8ad8f827bd4cc9b1527a0b74065,python,0,15,23,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9877d9dc2f0809d8991103562a845b30,python,0,10,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
98a1869d6583102aa4719af91c49d709,python,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9925c6e9f7d0d4be153fc37382ab42e4,python,7,8,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9925c6e9f7d0d4be153fc37382ab42e4,python,7,8,45,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
9955336451d2a6c8b5f556f45ddd2c56,python,6,12,16,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
9959de82b9bdc5376182ba279ff01a70,python,0,19,18,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
9959de82b9bdc5376182ba279ff01a70,python,0,31,17,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
9969f505238564db7277bd53a14d8d3c,python,0,41,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9969f505238564db7277bd53a14d8d3c,python,1,6,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9969f505238564db7277bd53a14d8d3c,python,2,36,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9a07b061affeef77e25953bfcedba547,python,0,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9a3880715e332d30f4d7555400a06f18,python,2,5,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9a4b21b4251cfcdb6253f66aa46b63bb,python,0,34,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
9a6f604fa1f77893cadf6ef001a62d1a,python,3,9,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9a7d4181a5e54d4cf0261da63ae6cca3,python,0,34,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
9a7d4181a5e54d4cf0261da63ae6cca3,python,0,43,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
9a7d4181a5e54d4cf0261da63ae6cca3,python,0,49,17,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
9a7d4181a5e54d4cf0261da63ae6cca3,python,1,27,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
9aa936f54e28963391dd2b937a6d41e8,python,15,5,19,files.python.rules.fastapi.security.wildcard-cors,CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.
9aa9d7310017c040cceeb8d608b08d15,python,6,30,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9ac3262082a870e089b976ba2127fcc8,python,0,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9b12d0ad354b4f918fc4fc140a2db721,python,0,11,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9b3363351a2f5c83ab042786479b640f,python,1,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9b3363351a2f5c83ab042786479b640f,python,1,97,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9b3531abd93d963513115a4edec6a919,python,1,11,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b3531abd93d963513115a4edec6a919,python,2,10,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b3531abd93d963513115a4edec6a919,python,3,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b3531abd93d963513115a4edec6a919,python,4,9,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b3531abd93d963513115a4edec6a919,python,4,21,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b3531abd93d963513115a4edec6a919,python,5,16,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9b8158378b4755d4167295e37088fe48,python,1,32,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9bb81e1212362f45e3c3d0013ea5c819,python,0,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9bb81e1212362f45e3c3d0013ea5c819,python,0,7,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
9bb81e1212362f45e3c3d0013ea5c819,python,4,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9bb81e1212362f45e3c3d0013ea5c819,python,4,7,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
9bf531b048d0a8939d81050004872938,python,1,19,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9bf7c98b1bfe5a531fc01092496f8319,python,5,8,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9bf7c98b1bfe5a531fc01092496f8319,python,8,8,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9bf91e6e476f408b45501d9609379d7c,python,0,30,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9bf91e6e476f408b45501d9609379d7c,python,1,30,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9c0a7ab07c2bd177ccfca4548c1456f2,python,0,5,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
9c0a7ab07c2bd177ccfca4548c1456f2,python,1,5,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
9c108c0e3b77ed07a97e6797b5ec8441,python,10,25,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c108c0e3b77ed07a97e6797b5ec8441,python,12,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c108c0e3b77ed07a97e6797b5ec8441,python,13,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c108c0e3b77ed07a97e6797b5ec8441,python,7,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c108c0e3b77ed07a97e6797b5ec8441,python,8,15,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c108c0e3b77ed07a97e6797b5ec8441,python,9,16,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c6f4d395be8bc4757b5f50670b8d4ae,python,0,44,13,files.python.rules.flask.security.audit.secure-set-cookie,"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration."
9c6f4d395be8bc4757b5f50670b8d4ae,python,0,58,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9c6f4d395be8bc4757b5f50670b8d4ae,python,1,8,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
9c6f4d395be8bc4757b5f50670b8d4ae,python,1,43,35,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
9c6f4d395be8bc4757b5f50670b8d4ae,python,1,53,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9c9084a75c6df444591cbb4986e4f618,python,0,11,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9c9084a75c6df444591cbb4986e4f618,python,15,16,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9c94fa342060e892d5beaf4ab02600dc,python,0,12,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9c9cb3cfbff2ba5840232a8eab707a5b,python,0,26,20,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9c9f58f66a43f81d32c558482eaa4eaf,python,0,16,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9cb7a518d66ff5129713bce79f38cee1,python,0,12,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9cb7a518d66ff5129713bce79f38cee1,python,0,35,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
9cb7a518d66ff5129713bce79f38cee1,python,1,19,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
9ccb94b876c1bf9b9b35101ca7abc70f,python,0,39,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9ccb94b876c1bf9b9b35101ca7abc70f,python,1,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9ccb94b876c1bf9b9b35101ca7abc70f,python,5,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9cdaa3fc451662485d2a26ad61409502,python,0,5,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
9cdaa3fc451662485d2a26ad61409502,python,0,5,94,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
9cdaa3fc451662485d2a26ad61409502,python,5,25,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
9cdcf55a35c6453ae3da6a19698bef8d,python,0,14,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
9cdcf55a35c6453ae3da6a19698bef8d,python,0,19,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9cdcf55a35c6453ae3da6a19698bef8d,python,0,25,13,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
9cec3c205ca1b2c8fda98825cc93e62c,python,1,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9cec3c205ca1b2c8fda98825cc93e62c,python,1,26,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9cedcbfe439674415cab1425fe1e9821,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
9cedcbfe439674415cab1425fe1e9821,python,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
9d394d96dfaefb97ccab899e9667c710,python,0,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9d394d96dfaefb97ccab899e9667c710,python,2,5,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
9d591a2803645c61895cf4e21b593a6c,python,10,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
9d591a2803645c61895cf4e21b593a6c,python,3,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
9d591a2803645c61895cf4e21b593a6c,python,6,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
9d591a2803645c61895cf4e21b593a6c,python,7,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
9d591a2803645c61895cf4e21b593a6c,python,8,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
9d5c3c8038688d69194263c951b868ac,python,0,14,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9d7874aa01a17e2edb50f1b95d11aea8,python,0,75,34,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9d7874aa01a17e2edb50f1b95d11aea8,python,0,84,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9dc8739d2d140f102aafce1e060c1881,python,0,14,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9dc8739d2d140f102aafce1e060c1881,python,2,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9dc8739d2d140f102aafce1e060c1881,python,5,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9e1546d2ae3720c75caae9bb328a9f53,python,0,12,14,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
9e2f34b7573c154d210214aeba971f8f,python,2,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9e2f34b7573c154d210214aeba971f8f,python,5,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
9e4a6be75552996efa5d167764c32e33,python,8,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9e4a6be75552996efa5d167764c32e33,python,9,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9e6390e94dfffce99b6251a7064f789d,python,2,6,20,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9e6390e94dfffce99b6251a7064f789d,python,2,12,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
9e95173da52c443646e879ac288bdb8d,python,1,4,10,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,python,10,26,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,python,11,31,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,python,4,27,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,python,5,28,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,python,6,42,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,python,7,32,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9e95173da52c443646e879ac288bdb8d,python,8,35,6,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9f0504c7bc2113acf724088a5fec3d2e,python,0,9,16,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9f0504c7bc2113acf724088a5fec3d2e,python,0,15,39,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
9f20aa75c59163efa6f5a81befaf4b47,python,0,57,15,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
9fa67319006d9c48e6215b24fc954377,python,0,19,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9fc56c7c66347a7f57e961bdfdecd42f,python,0,12,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
9ffb16abe964454426282f5b5c7a26fd,python,5,4,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a039e3862098c56e95fa39a3e853ac94,python,2,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a063dcb866e031e15dfa38ecc7296f39,python,0,3,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
a063dcb866e031e15dfa38ecc7296f39,python,1,3,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
a07842b1a28cca9853c88c480edcbfd8,python,0,6,15,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
a07842b1a28cca9853c88c480edcbfd8,python,12,6,8,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
a07842b1a28cca9853c88c480edcbfd8,python,2,6,8,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
a07842b1a28cca9853c88c480edcbfd8,python,5,6,8,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
a07842b1a28cca9853c88c480edcbfd8,python,6,6,8,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
a07842b1a28cca9853c88c480edcbfd8,python,8,7,8,files.python.rules.lang.security.audit.marshal-usage,The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security
a0b4a9d9525048f6b4a31b15504d8d44,python,1,10,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
a0f78af2d78cb4c7b4a0f07191fdf5c5,python,0,10,12,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a0f78af2d78cb4c7b4a0f07191fdf5c5,python,1,10,12,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a10e38a5d5b52279cb6c2139267f8f6d,python,0,27,40,files.python.rules.lang.security.PYTHON_WEAK_RNG_UNQUALIFIED,"Weak RNG detected: Unqualified call to random function (e.g. randint, random)."
a128fc1c25b54b42d54fb61e20f5b349,python,0,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a157a15c4dba41bffa2f9b510a46a71d,python,0,31,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a157a15c4dba41bffa2f9b510a46a71d,python,1,32,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a161bb6ec4c87900ffc4f18aa6f2a4d7,python,2,7,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,python,2,12,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,python,3,17,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,python,3,25,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,python,4,21,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,python,4,25,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,python,5,45,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,python,5,53,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a161bb6ec4c87900ffc4f18aa6f2a4d7,python,7,52,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a17dda7b46d16c9625a3540823992f0a,python,1,42,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a1e367a4df4ecdd586fb5ee5a403d517,python,0,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a1e367a4df4ecdd586fb5ee5a403d517,python,1,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a1fa11004a35f604402fd6a52b067272,python,0,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
a1fa11004a35f604402fd6a52b067272,python,0,58,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a1fc91c8b0e2f880bafab878cb373fc0,python,0,5,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
a1fc91c8b0e2f880bafab878cb373fc0,python,3,6,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
a1fc91c8b0e2f880bafab878cb373fc0,python,3,10,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a1fc91c8b0e2f880bafab878cb373fc0,python,4,9,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a1fc91c8b0e2f880bafab878cb373fc0,python,4,13,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
a1fc91c8b0e2f880bafab878cb373fc0,python,5,6,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
a1fc91c8b0e2f880bafab878cb373fc0,python,6,13,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
a1fd46d5f3aef1e335eb0df494fd724f,python,0,8,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a1fd46d5f3aef1e335eb0df494fd724f,python,2,11,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a1fd46d5f3aef1e335eb0df494fd724f,python,3,11,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a1fd46d5f3aef1e335eb0df494fd724f,python,7,6,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
a1fd46d5f3aef1e335eb0df494fd724f,python,7,11,20,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlopen,Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
a22f9737a58fbffb882db096d49cd52a,python,1,19,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
a22f9737a58fbffb882db096d49cd52a,python,2,19,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
a29630042220b522dc575c8e8c653932,python,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a2b2cf1d3cb7f0f3cf3a6902c7acb1d1,python,1,31,21,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
a2e231af54c8249adde814d28a28b46f,python,7,37,22,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a2e231af54c8249adde814d28a28b46f,python,8,37,22,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a37f84630bb6e60d9ab93ec48f196e6a,python,0,10,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
a392f70322e5f113bbfcfec882250204,python,8,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a3ef1a9e186997179a6b38679a7632c8,python,0,4,1,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
a3ef1a9e186997179a6b38679a7632c8,python,0,7,1,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
a4065bff261c66a42e617a961d3451a9,python,4,7,23,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
a430063e3a16050cc76c6c7ee7c8ddc7,python,0,13,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a430063e3a16050cc76c6c7ee7c8ddc7,python,1,10,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a430063e3a16050cc76c6c7ee7c8ddc7,python,2,14,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a430063e3a16050cc76c6c7ee7c8ddc7,python,3,14,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a430063e3a16050cc76c6c7ee7c8ddc7,python,4,14,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a430063e3a16050cc76c6c7ee7c8ddc7,python,5,14,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a430063e3a16050cc76c6c7ee7c8ddc7,python,6,17,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a495e834c89d044f28c923f5bbff3adc,python,6,13,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
a51cefbd4de92f95743ab9f3c26500c0,python,2,13,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
a5366ee5d0daaff35bb9e4409aad4246,python,3,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
a5366ee5d0daaff35bb9e4409aad4246,python,4,4,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
a542bdfc95e8cc8da6b079681485de24,python,10,4,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
a542bdfc95e8cc8da6b079681485de24,python,10,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a542bdfc95e8cc8da6b079681485de24,python,8,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a57366464f4439a1c8c179a814be27e0,python,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
a58a04281f6e7eccd162e83d3f49f30b,python,0,10,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
a5912d063eedb5a2b510aa67d2fd5193,python,0,4,5,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
a59822b16173c02376572f2ab6724ec1,python,10,48,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a59822b16173c02376572f2ab6724ec1,python,10,57,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a59822b16173c02376572f2ab6724ec1,python,9,46,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a59822b16173c02376572f2ab6724ec1,python,9,55,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
a59d6f0f7e4af5d401d7b94a041156af,python,0,10,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
a59d6f0f7e4af5d401d7b94a041156af,python,0,15,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
a59d6f0f7e4af5d401d7b94a041156af,python,0,16,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
a5ac1e9b598a93faa131b1d917d996c7,python,5,13,10,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
a5aed7cb6398d7525266281e8620adc8,python,0,32,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a5ff8610389f207c439a8b4fa42fcc98,python,4,12,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
a5ff8610389f207c439a8b4fa42fcc98,python,4,12,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
a64c44ac9a34757216dec210b8764b4d,python,0,30,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
a6945980fd0c4eab624820b59cd255a7,python,3,40,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a6b3f1d4719079ddb3ce5e48fe2aca29,python,1,5,14,files.python.rules.pycryptodome.security.insecure-cipher-algorithm-des,"Detected DES cipher or Triple DES algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use a secure symmetric cipher from the cryptodome package instead. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."
a6b3f1d4719079ddb3ce5e48fe2aca29,python,1,10,14,files.python.rules.pycryptodome.security.insecure-cipher-algorithm-des,"Detected DES cipher or Triple DES algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use a secure symmetric cipher from the cryptodome package instead. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM."
a6b6d33e78d482853a0b91aab89c178f,python,6,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a7472767840bcd739ed3778b7d3f9d75,python,16,4,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
a7b539b5fdf0d9927831d2cda16fcb45,python,1,5,7,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a7b539b5fdf0d9927831d2cda16fcb45,python,1,9,8,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a7b539b5fdf0d9927831d2cda16fcb45,python,2,5,11,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a7b539b5fdf0d9927831d2cda16fcb45,python,2,11,12,files.python.rules.lang.security.insecure-hash-algorithm-sha1,Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
a81929a6d11429199ca98f1f5eff3e14,python,1,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
a84c85d6ef9fd0dba13a75e4a4ff2b79,python,0,21,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a934997a0b2eeeaef854f4f1cc6f2d98,python,0,7,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
a934997a0b2eeeaef854f4f1cc6f2d98,python,1,7,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
a9586b3e87673f3504d89daae56c19e0,python,4,16,15,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
a9586b3e87673f3504d89daae56c19e0,python,7,9,24,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
a993868510279e37ea54d9e505e3506c,python,2,8,21,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
a9c6797080d488b9111d59b331c5f809,python,0,10,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
a9e75255c7cf973217d9b9cde846a3b2,python,0,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aa029281044a5160260717a7e025009d,python,0,8,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
aa029281044a5160260717a7e025009d,python,0,8,40,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
aa46bcca415e7c0e17caa7b354b17b69,python,2,21,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
aa51deaa61459ce12618c408f01348fc,python,2,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aa65f5e29d77b0eecdadd4903835004c,python,0,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
aa9f673b7f83b4b33e7965a194587f8d,python,0,49,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aa9f673b7f83b4b33e7965a194587f8d,python,2,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aaaeb197dc725eb166b9f7a40d2410c9,python,6,7,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
aaaeb197dc725eb166b9f7a40d2410c9,python,6,7,104,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
aaaeb197dc725eb166b9f7a40d2410c9,python,8,37,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
aaaeb197dc725eb166b9f7a40d2410c9,python,8,37,104,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
aaaeb197dc725eb166b9f7a40d2410c9,python,8,66,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
aaaeb197dc725eb166b9f7a40d2410c9,python,8,66,74,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
aab52c9aab04e9786422b810ed59c7bf,python,5,36,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
aab52c9aab04e9786422b810ed59c7bf,python,5,36,25,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
aabb68c23cd62f07d92b6914ab160917,python,0,7,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
aac208f8923bf71e7ab49de642e84d56,python,0,26,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
aac208f8923bf71e7ab49de642e84d56,python,0,71,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
aac208f8923bf71e7ab49de642e84d56,python,0,83,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
aac208f8923bf71e7ab49de642e84d56,python,0,84,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
aac208f8923bf71e7ab49de642e84d56,python,0,85,9,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
aae825fb221fde8a15e45e5f723c8ebd,python,0,14,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
aaed4ee3cd22070a0167c4fd10de4960,python,6,15,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ab0c78a4096ceb2957c18a54da973227,python,0,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ab22a8405c535115eb86c12fb4ce3a0a,python,3,16,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
ab62c5a23c94a006a82a019a89bc0c10,python,0,7,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
ab62c5a23c94a006a82a019a89bc0c10,python,2,18,15,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
ab86eed329fa4147c90a08c7cebbf51e,python,1,25,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ab86eed329fa4147c90a08c7cebbf51e,python,3,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ab86eed329fa4147c90a08c7cebbf51e,python,6,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ab87703004e4fef20967461a532272de,python,1,94,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ab87703004e4fef20967461a532272de,python,66,6,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
abd82a99caa9b60dd05d8c4b19f838d2,python,16,4,51,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
abe409662d65350a075367fd6261eca4,python,0,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
abfa5b20c998aefaf5b1a1eff5296842,python,1,30,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
abfa5b20c998aefaf5b1a1eff5296842,python,1,30,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
ac2fe664082fad3dc8adbe56212aead7,python,1,29,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
ac2fe664082fad3dc8adbe56212aead7,python,10,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ac2fe664082fad3dc8adbe56212aead7,python,5,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ac2fe664082fad3dc8adbe56212aead7,python,8,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ac367417d9c3abdb1bb4f6b36f6919f7,python,0,74,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ac41bf689ffa79f53487bac508e3427d,python,6,26,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ac41bf689ffa79f53487bac508e3427d,python,6,32,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ac41bf689ffa79f53487bac508e3427d,python,7,4,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ac47389d9bc3f1a97eb87686e02e8cc1,python,0,13,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ac47389d9bc3f1a97eb87686e02e8cc1,python,0,17,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
acb0788f03a2176898244b5125841990,python,3,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
acb0788f03a2176898244b5125841990,python,3,25,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad04c723593596d6a550b9afb317a08c,python,0,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad1aaf0f0ed9f63a59e0c8e1b8e35ec3,python,1,6,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ad6638ac9c3457225fb8d1ae768aa8d6,python,0,19,31,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ad6a2fc9959efc96bda0a1392b413489,python,0,7,17,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
ad84e9d4cb7b0267736d4be9e8623e6b,python,1,61,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad9286f1041a7076af5f232ff26912f0,python,12,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad9286f1041a7076af5f232ff26912f0,python,17,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad9286f1041a7076af5f232ff26912f0,python,19,5,7,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
ad9286f1041a7076af5f232ff26912f0,python,19,5,7,files.python.rules.jinja2.security.audit.missing-autoescape-disabled,"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
ad9286f1041a7076af5f232ff26912f0,python,19,15,10,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
ad9286f1041a7076af5f232ff26912f0,python,21,5,7,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
ad9286f1041a7076af5f232ff26912f0,python,21,5,7,files.python.rules.jinja2.security.audit.missing-autoescape-disabled,"Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
ad9286f1041a7076af5f232ff26912f0,python,21,16,10,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
ad9286f1041a7076af5f232ff26912f0,python,22,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad9286f1041a7076af5f232ff26912f0,python,24,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ad9286f1041a7076af5f232ff26912f0,python,26,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ada81f27faeda7e99885c17d94996ee0,python,1,58,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
adf184bae043a3be1ca18aedb4268f50,python,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
adf184bae043a3be1ca18aedb4268f50,python,1,14,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ae0b079ac61a4ff8f8ca8c4b600e4258,python,0,18,18,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
ae383484b60543df995fadbb4cbe90ae,python,0,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ae4375f8c1a7676bcc86f7ac61daa003,python,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
ae4375f8c1a7676bcc86f7ac61daa003,python,0,23,20,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
aed47243af388365d2b09a765e0e5645,python,0,56,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aed47243af388365d2b09a765e0e5645,python,1,20,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
aed47243af388365d2b09a765e0e5645,python,1,23,24,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
aed47243af388365d2b09a765e0e5645,python,1,40,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
aed47243af388365d2b09a765e0e5645,python,2,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
af10bc41ce78faaf1ab5031cb79e0774,python,0,13,18,files.python.rules.lang.security.audit.dangerous-asyncio-create-exec-audit,"Detected 'create_subprocess_exec' function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
af10bc41ce78faaf1ab5031cb79e0774,python,1,21,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
afa90b841fd649f7d47cc0af12e606be,python,8,10,9,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
afd4c935be9f2a38460fa6eb7fb91881,python,7,17,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
afd4c935be9f2a38460fa6eb7fb91881,python,7,17,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
afe21c03c7cd39ea3b82986f39edb8b4,python,25,45,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b00629cb9041c1415d5d5b46324c8caa,python,1,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b00ca0392d84872b6fe8c770f630bf92,python,0,8,20,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b098aedd87f855a65391bf4442c98b71,python,0,11,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b09c7a8b79f728c5e12dc7bc48e2184c,python,1,80,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b0b7bf7e0cd0ec76df0ef60f602c87fa,python,2,10,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b0b7bf7e0cd0ec76df0ef60f602c87fa,python,5,4,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b0b7bf7e0cd0ec76df0ef60f602c87fa,python,8,21,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b107e1391ff1d2e109b7a644f0fb8f1e,python,0,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
b178e98eda6b5214bbd21dd6d0301c87,python,0,12,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,python,1,12,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,python,2,13,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,python,3,13,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,python,4,16,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,python,5,13,1,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
b178e98eda6b5214bbd21dd6d0301c87,python,7,15,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b178e98eda6b5214bbd21dd6d0301c87,python,8,16,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b1ac3ea82e8247486a00bf6ec473d5ae,python,0,39,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
b1ac3ea82e8247486a00bf6ec473d5ae,python,0,39,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
b1ac3ea82e8247486a00bf6ec473d5ae,python,0,45,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
b1ac3ea82e8247486a00bf6ec473d5ae,python,0,45,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
b1ac3ea82e8247486a00bf6ec473d5ae,python,1,26,35,files.python.rules.sqlalchemy.security.audit.avoid-sqlalchemy-text,"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
b1ac3ea82e8247486a00bf6ec473d5ae,python,1,52,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
b1ac3ea82e8247486a00bf6ec473d5ae,python,1,55,13,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
b1ac3ea82e8247486a00bf6ec473d5ae,python,1,55,13,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
b1d71fe3a3045a12df61838c202d542a,python,4,16,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b1d71fe3a3045a12df61838c202d542a,python,5,19,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b1d71fe3a3045a12df61838c202d542a,python,6,19,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b1fd9e64717f424886fab50f9833e6e6,python,0,75,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b1fd9e64717f424886fab50f9833e6e6,python,1,76,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b2faf3b6f636fb5195c0d7fb33566446,python,1,16,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b30a50494884e8f68cd1b7be0339c4f9,python,1,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b34043702435fac520b51376130b27b1,python,1,18,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
b3781317927acffd66aa781e4883f45a,python,6,68,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b3c9c2daa20a40a00aa880078ab5f5d0,python,0,6,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b3c9c2daa20a40a00aa880078ab5f5d0,python,0,43,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b3c9c2daa20a40a00aa880078ab5f5d0,python,0,53,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b3d1b7cd39bb7a259af297afc6bbbc8c,python,1,7,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b3d1b7cd39bb7a259af297afc6bbbc8c,python,2,7,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b3d1b7cd39bb7a259af297afc6bbbc8c,python,3,7,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b3f92c4cf43d10ceebc28ede218cd00e,python,0,27,37,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b47052fbc2efd5b9ed908720c9bf0540,python,1,18,8,files.python.rules.lang.security.audit.ssl-wrap-socket-is-deprecated,"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket."
b47052fbc2efd5b9ed908720c9bf0540,python,2,72,3,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b47052fbc2efd5b9ed908720c9bf0540,python,2,89,8,files.python.rules.lang.security.audit.ssl-wrap-socket-is-deprecated,"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket."
b47d990d9a49cf8934c0ba3c0a809061,python,14,13,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b47d990d9a49cf8934c0ba3c0a809061,python,5,16,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b47d990d9a49cf8934c0ba3c0a809061,python,7,13,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b48d9808363d3cc86d599a711c27becf,python,0,23,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b48d9808363d3cc86d599a711c27becf,python,1,10,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b48d9808363d3cc86d599a711c27becf,python,3,25,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b4b44d586250f06ce3a3c85a2c7904cb,python,0,11,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b4e1de8adcbfe54aece79822f639801a,python,0,25,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b4e656b17f2561134ec856d110615455,python,0,6,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b4e656b17f2561134ec856d110615455,python,1,7,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
b4f7867329968dacdeda69adb1e62b72,python,1,13,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b4f885b26a9d2cc3a14bcb85136fe7b6,python,6,21,11,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
b4f885b26a9d2cc3a14bcb85136fe7b6,python,6,21,38,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
b541bfb0344fb22647fc007531a70656,python,1,16,10,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
b541bfb0344fb22647fc007531a70656,python,1,16,10,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
b54f200139ef134936efb91c1db01694,python,10,4,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b561f84f17dda4d8a97373e976b38cd8,python,3,44,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b5842570f613c52db20777619e6e1ca9,python,1,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b5d103bc1223f46e7765dd6fe46499e7,python,0,17,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
b6a72df9bb80f974f2734798075566eb,python,1,24,21,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
b6a72df9bb80f974f2734798075566eb,python,6,37,21,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
b6bd771fdd2428580f1af14302ac82b7,python,0,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6bd771fdd2428580f1af14302ac82b7,python,1,36,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6bd771fdd2428580f1af14302ac82b7,python,2,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6bd771fdd2428580f1af14302ac82b7,python,3,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6bd771fdd2428580f1af14302ac82b7,python,4,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6de5fbc195083eb3feb506b32a31796,python,0,6,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6de5fbc195083eb3feb506b32a31796,python,1,4,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b6de5fbc195083eb3feb506b32a31796,python,3,4,5,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
b6ebd263ea345b42865351ddecb3b18b,python,1,11,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b6ebd263ea345b42865351ddecb3b18b,python,3,8,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b6ec2f34d6a0f7456b1d1f3eb0fa46fb,python,3,30,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
b6f72dc8e8a3074594d64c4f65a9efd6,python,0,9,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b6f72dc8e8a3074594d64c4f65a9efd6,python,1,4,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
b6f72dc8e8a3074594d64c4f65a9efd6,python,1,5,5,files.python.rules.django.security.injection.ssrf.ssrf-injection-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities."
b6f72dc8e8a3074594d64c4f65a9efd6,python,1,10,11,files.python.rules.django.security.injection.tainted-url-host,"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host."
b6f72dc8e8a3074594d64c4f65a9efd6,python,1,12,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b79be184c8397a1a3339265821d6f76e,python,1,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b7a4c610e81f8f0ae0e0cb6e853a5d7a,python,1,13,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b7a4c610e81f8f0ae0e0cb6e853a5d7a,python,1,24,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
b7bb17442089e8981df8821af88684e1,python,0,19,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
b7e8bae74df4c90b983baa0320ab1ac6,python,1,15,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
b7e8bae74df4c90b983baa0320ab1ac6,python,1,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b7e8bae74df4c90b983baa0320ab1ac6,python,16,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b7e8bae74df4c90b983baa0320ab1ac6,python,18,27,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b7e8bae74df4c90b983baa0320ab1ac6,python,7,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b7f0e5cfdee20991985cb4afe1576bc8,python,0,7,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b817b4aae995c5c0eae3fafd4fc3de85,python,1,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b863c1c67cb6ff8824bca53bdccd2808,python,1,12,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
b863c1c67cb6ff8824bca53bdccd2808,python,3,19,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
b9411c26e2050f18f144329ea61b58b5,python,0,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
b9411c26e2050f18f144329ea61b58b5,python,0,12,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
b947aae2fbd28d6b67936ec4a51daff4,python,1,4,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b98bbffcc64298f9961ec5f708258b3c,python,0,11,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b98bbffcc64298f9961ec5f708258b3c,python,8,11,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
b99e9ec812c3ea1e99eb518bc7cf24a8,python,1,48,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b99e9ec812c3ea1e99eb518bc7cf24a8,python,3,45,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
b9dca8cfdb1d875fee67bb10128c7f17,python,0,14,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ba445ee1680da129a25049dd4071fe5f,python,3,8,9,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
ba5a29e2fd5d4b2951c7ed46819a37a1,python,3,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ba9ebe7d6767720cd33962e30e4c1570,python,0,6,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
bab44dda5ebd33d7cb123e71c4739db8,python,34,1,1,files.python.rules.django.security.audit.django-rest-framework.missing-throttle-config,Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application.
bab44dda5ebd33d7cb123e71c4739db8,python,73,1,1,files.python.rules.django.security.audit.django-rest-framework.missing-throttle-config,Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application.
bad75b2f7559351c31b84964fd789408,python,2,20,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
baef4522395a2963596361b6d9028729,python,0,11,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bb020fa5db7b2c5ef2a69aea7c7e8d87,python,4,6,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
bb020fa5db7b2c5ef2a69aea7c7e8d87,python,5,55,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
bb07391eeecb1b85c8eeb7f7c738a814,python,1,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bb07391eeecb1b85c8eeb7f7c738a814,python,3,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bb07391eeecb1b85c8eeb7f7c738a814,python,5,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bb07391eeecb1b85c8eeb7f7c738a814,python,6,17,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bb1a4595cb2de4c7b3efb2c30e0ee1f3,python,0,13,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
bb1a4595cb2de4c7b3efb2c30e0ee1f3,python,0,13,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
bb28fee64905eb7d2a648669b9b16c85,python,0,27,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bb6973e2cb394582e2593fc06037f535,python,0,52,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bb6973e2cb394582e2593fc06037f535,python,1,54,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bb6973e2cb394582e2593fc06037f535,python,2,68,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bb6973e2cb394582e2593fc06037f535,python,3,66,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
bb7d6c4ec0b239aea275c619e463fe08,python,0,18,17,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bbe9f93f18b3d05702b1529c38060c25,python,14,5,80,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bbe9f93f18b3d05702b1529c38060c25,python,14,8,90,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bbf512a7f28b0512874ea51ddd8419ee,python,0,6,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
bc0ec73baebbf21227fd45fc27372348,python,0,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bc4499cbfdd34783bfd549ab14db5464,python,1,7,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
bc60163461bfe9cba8d81851bd8f224d,python,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bc6fbba345f4e1cd7869bd0ef9d84933,python,2,28,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bc9d65dceb6eae998161c18c17774b97,python,0,20,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bc9d65dceb6eae998161c18c17774b97,python,0,20,40,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bc9d65dceb6eae998161c18c17774b97,python,1,23,18,files.python.rules.flask.security.injection.subprocess-injection,"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
bc9d65dceb6eae998161c18c17774b97,python,1,23,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bc9d65dceb6eae998161c18c17774b97,python,1,23,42,files.python.rules.lang.security.dangerous-subprocess-use,Detected subprocess function 'check_output' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.
bc9d65dceb6eae998161c18c17774b97,python,1,23,64,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bcce63e0964923fa92bf1c65c91d4c7a,python,2,13,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
bd00b2465e4b902034dc383fdc4ea478,python,0,4,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
bd085662880f394ba01a8196b5f630f7,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
bd093c28abf90f6f2bc6a5bfb4e8e8c4,python,0,6,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
bd0fffbda04f5d91904b2e889d111c3e,python,6,11,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bd0fffbda04f5d91904b2e889d111c3e,python,6,11,50,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bd2b89d84a1322ac8b3d3abf929edc1a,python,11,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
bd78a42dd547e35f2bec083f68409671,python,0,18,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
bd78a42dd547e35f2bec083f68409671,python,0,18,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
bd78a42dd547e35f2bec083f68409671,python,0,22,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
bd9155003f531916a4aa53844c28ada2,python,0,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bd9155003f531916a4aa53844c28ada2,python,1,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bd9155003f531916a4aa53844c28ada2,python,2,33,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bd9155003f531916a4aa53844c28ada2,python,3,32,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bdd27701c7eccad037645e910b1929cc,python,10,12,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,10,12,37,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,11,24,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,11,24,94,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,11,40,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,11,42,23,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,12,19,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,12,19,94,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,13,7,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,13,7,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,14,8,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,14,8,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,15,7,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,15,7,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,16,7,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,16,7,45,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,17,6,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,17,6,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,18,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,18,7,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,3,9,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
bdd27701c7eccad037645e910b1929cc,python,4,25,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,4,25,37,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,4,55,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,4,55,48,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
bdd27701c7eccad037645e910b1929cc,python,7,7,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
bdd27701c7eccad037645e910b1929cc,python,7,7,37,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
be535e1f4e3ba20f259e13ba2e131764,python,0,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
be535e1f4e3ba20f259e13ba2e131764,python,0,15,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
be535e1f4e3ba20f259e13ba2e131764,python,0,20,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
be6f6c7b4cb192652c106876c8c3e102,python,0,22,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bf4a69c74284d66dbd1c5639af8a6ca9,python,3,19,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
bf91092d337e42a04cca579d4a6a6d7d,python,0,14,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
bfbc738cccede35b155af2e71ea1c80c,python,6,21,43,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
bfbc738cccede35b155af2e71ea1c80c,python,6,23,41,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
bfc4f6c01cae086cd671bd47eb403e7c,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
bfc4f6c01cae086cd671bd47eb403e7c,python,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
bfc640e97521fe02662a91f772630fac,python,3,9,19,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c01654763508e67bcbde57e68c68abe5,python,1,9,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c01654763508e67bcbde57e68c68abe5,python,1,9,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c01654763508e67bcbde57e68c68abe5,python,1,14,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c01654763508e67bcbde57e68c68abe5,python,1,14,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c0500109c71195f0ad75b018566c84fb,python,1,19,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c0500109c71195f0ad75b018566c84fb,python,2,7,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c077e1bc8b0331c955c6ed59e84f2fba,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
c113a3f24c15b24e47eadfaf6e4523a4,python,6,4,15,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
c113a3f24c15b24e47eadfaf6e4523a4,python,6,14,19,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
c1658bea803e901e46da5d7a79a3fd5f,python,2,9,8,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c1b18c2441a3f677c35c36e07bba6597,python,0,60,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c1b18c2441a3f677c35c36e07bba6597,python,4,69,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c1bbd3987de22a5429ffed3f8b6fbc81,python,0,5,11,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
c1bbd3987de22a5429ffed3f8b6fbc81,python,2,29,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c1bbd3987de22a5429ffed3f8b6fbc81,python,3,42,22,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c1d923b062dbeda2c679ef9958cbcbad,python,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c20ea1f555458c0da0ca0c79d7af1a18,python,8,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c2532b1e50af303c3d6ca3a3d4700d6e,python,1,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c2532b1e50af303c3d6ca3a3d4700d6e,python,5,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c29379ed79f41518126a4685f2c41647,python,1,9,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c29379ed79f41518126a4685f2c41647,python,1,13,20,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c2d4936c60424edaaa2a6c96507541a4,python,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c2f19e0fca5476ae1bba3831ccb1faf7,python,12,11,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c2f19e0fca5476ae1bba3831ccb1faf7,python,15,10,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c2f19e0fca5476ae1bba3831ccb1faf7,python,6,11,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c3016f13743bd4e2a67fac435bd48b2c,python,2,6,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
c3016f13743bd4e2a67fac435bd48b2c,python,2,81,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c30d652795feb0692a49c54f7832dde5,python,4,32,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c40b569af7c8890c2cc552163283d9f9,python,0,15,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c41d2aedc595c4eab5487e8df5e94c3f,python,1,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4223382156c6fd6d6710acf32b8812e,python,4,48,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c4223382156c6fd6d6710acf32b8812e,python,5,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c4479b000be99fe944b8f3a80094193e,python,0,5,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
c4479b000be99fe944b8f3a80094193e,python,0,133,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4479b000be99fe944b8f3a80094193e,python,0,133,15,files.python.rules.lang.security.audit.md5-used-as-password,It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.
c4479b000be99fe944b8f3a80094193e,python,0,134,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4479b000be99fe944b8f3a80094193e,python,0,135,20,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4479b000be99fe944b8f3a80094193e,python,4,14,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c4479b000be99fe944b8f3a80094193e,python,4,14,32,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c4685ccab1e22d8b4b0a906781b8db24,python,0,14,22,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,python,0,23,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,python,10,9,29,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4685ccab1e22d8b4b0a906781b8db24,python,10,14,24,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4685ccab1e22d8b4b0a906781b8db24,python,10,14,36,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,python,10,21,40,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,python,13,16,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,python,13,27,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c4685ccab1e22d8b4b0a906781b8db24,python,7,5,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c4685ccab1e22d8b4b0a906781b8db24,python,9,6,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c49ecb26a7ec9cbd99768c61681aa9aa,python,0,29,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
c4e1bf9d54654d640cbba2fd2c7fd7bc,python,1,6,12,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,python,2,6,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
c4e1bf9d54654d640cbba2fd2c7fd7bc,python,5,13,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,python,5,15,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,python,6,14,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,python,6,16,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,python,7,14,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c4e1bf9d54654d640cbba2fd2c7fd7bc,python,7,16,16,files.python.rules.flask.security.injection.ssrf-requests,"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request."
c50263f4afeba3a8b9b1bceb277b7238,python,0,13,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c5215ee85b2899ba6a4643fa2cef4f8a,python,4,11,12,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
c5215ee85b2899ba6a4643fa2cef4f8a,python,5,7,5,files.python.rules.flask.security.open-redirect,"Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
c52c957f064cfa78ebf3e9b563db8af9,python,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c52c957f064cfa78ebf3e9b563db8af9,python,1,51,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c548ac13e23270a51a569e59daf66a31,python,3,14,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
c548ac13e23270a51a569e59daf66a31,python,3,14,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
c55237cd653a43a064c35308874eecc4,python,0,19,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c55237cd653a43a064c35308874eecc4,python,1,23,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c571f81592f11d0ba4713bf8d1a6096d,python,1,14,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c5b06d7408fa3f9a9c0441c3a0426bd7,python,1,13,36,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c5b06d7408fa3f9a9c0441c3a0426bd7,python,2,9,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c5b06d7408fa3f9a9c0441c3a0426bd7,python,2,9,61,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c5b06d7408fa3f9a9c0441c3a0426bd7,python,2,26,25,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c5b06d7408fa3f9a9c0441c3a0426bd7,python,2,26,67,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c5b06d7408fa3f9a9c0441c3a0426bd7,python,2,28,24,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c5b06d7408fa3f9a9c0441c3a0426bd7,python,2,28,65,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c5da69d53709967e4d05975bbe927789,python,2,17,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c5da69d53709967e4d05975bbe927789,python,3,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
c5da69d53709967e4d05975bbe927789,python,5,16,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c617173763d8c732c251129017c66391,python,6,6,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
c6187a7070887d24058a375c4ddb51a1,python,0,8,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
c6187a7070887d24058a375c4ddb51a1,python,1,8,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
c6187a7070887d24058a375c4ddb51a1,python,1,17,32,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
c6187a7070887d24058a375c4ddb51a1,python,1,24,32,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
c71538548832c81eff0d98e83640bfae,python,4,11,10,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
c72ce5c8f97f86b84e3e55a76ae89a38,python,0,20,15,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
c72ce5c8f97f86b84e3e55a76ae89a38,python,0,30,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
c774e496eba328cd5ef0ef6a45b48e91,python,0,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c774e496eba328cd5ef0ef6a45b48e91,python,1,11,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c774e496eba328cd5ef0ef6a45b48e91,python,2,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c774e496eba328cd5ef0ef6a45b48e91,python,3,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c774e496eba328cd5ef0ef6a45b48e91,python,4,12,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
c792fb62770391b17ebc73f1bb6b7161,python,0,12,15,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c792fb62770391b17ebc73f1bb6b7161,python,0,46,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c7d2b8045ac1ba8028a6386c7595408b,python,0,4,14,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
c86c2c1019a4c6120856f15c2bb733d6,python,7,49,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86f2eb087533539723b3efff503bdc3,python,0,36,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86f2eb087533539723b3efff503bdc3,python,1,36,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86f2eb087533539723b3efff503bdc3,python,2,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86f2eb087533539723b3efff503bdc3,python,3,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86f2eb087533539723b3efff503bdc3,python,4,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c86f2eb087533539723b3efff503bdc3,python,5,35,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
c89ac865ad12a5d6f66f378280b3f3d5,python,12,9,5,files.python.rules.lang.security.audit.dangerous-os-exec-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
c89ac865ad12a5d6f66f378280b3f3d5,python,12,9,5,files.python.rules.lang.security.audit.dangerous-os-exec-tainted-env-args,Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.
c8d2c4173699896081115c05496adb0c,python,11,40,13,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
c8d2c4173699896081115c05496adb0c,python,11,50,9,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
c903a5b9d9c18acf77c5cbc331407910,python,0,19,16,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
c903a5b9d9c18acf77c5cbc331407910,python,0,19,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
c913445d76c9d3168d1e7f59dd25a107,python,2,12,9,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
c913445d76c9d3168d1e7f59dd25a107,python,3,17,9,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
c93f0dd316a77aac40bc1eb77b1cfcc2,python,10,8,5,files.python.rules.flask.security.audit.secure-set-cookie,"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration."
c93f0dd316a77aac40bc1eb77b1cfcc2,python,10,14,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
c969e99106c57729a67748a4b5a4916b,python,2,11,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c969e99106c57729a67748a4b5a4916b,python,6,54,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
c972a5bd6115c09c6fd45f6d883e14a8,python,1,7,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
c98aafd345b3262af1bdf724faafe3b5,python,2,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
c98aafd345b3262af1bdf724faafe3b5,python,4,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
ca589b134ad4fe1a8829c8f4581881a3,python,3,9,5,files.python.rules.django.security.injection.path-traversal.path-traversal-open,"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library."
ca75c3ec8762ac64af5084daea2f80cc,python,0,98,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
cad6590e1069da88a3c35cd5ff2555ef,python,0,9,19,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
cb0634c956ef6b706ba610f9370b2685,python,1,64,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cb24e897b48d90cd2202e056c855955d,python,0,18,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cbb16b936e876becdb22be26c121e5d3,python,0,28,27,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
cbc0f1ea44e8fe69f5eef83aa865aee2,python,1,26,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cbc0f1ea44e8fe69f5eef83aa865aee2,python,1,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cbc0f1ea44e8fe69f5eef83aa865aee2,python,4,37,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cbc4c682f522c164063f6df4ba6b1a13,python,0,9,8,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
cbc4c682f522c164063f6df4ba6b1a13,python,0,13,18,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
cbf5cf4b8255f414b7a44378fbfce488,python,2,63,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cbf5cf4b8255f414b7a44378fbfce488,python,2,67,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cbf5cf4b8255f414b7a44378fbfce488,python,2,71,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cbf739cacfe5320b97f2b1bcf5d80cd0,python,13,7,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cc6aa4803e636354054856fe9b27ec23,python,1,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
cc6ed4123ed1544e5a906ad961df82f0,python,1,22,14,files.python.rules.cryptography.security.crypto-mode-without-authentication,An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. 
cc75acaecbfd3f29c1f72dfc1b2f3b2e,python,1,78,45,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
cc75acaecbfd3f29c1f72dfc1b2f3b2e,python,3,78,45,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ccae01be1a22c10e6f7fca268692c094,python,0,34,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
cce9b35bee558165301ed75dd715ce63,python,17,4,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
cce9b35bee558165301ed75dd715ce63,python,19,49,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ccffa8cd371f70023fec036d7214d4c9,python,4,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
cd04294b769fae88ddd0a3bac7912e2c,python,0,30,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
cd04294b769fae88ddd0a3bac7912e2c,python,1,16,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
cd04294b769fae88ddd0a3bac7912e2c,python,2,25,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
cd1406113fb5f2783038d3d6b50c6cc7,python,0,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
cdcd3639f6724db079fdaa22f2f20be6,python,24,5,5,files.python.rules.django.security.injection.reflected-data-httpresponse,"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."
cdcd3639f6724db079fdaa22f2f20be6,python,24,10,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
cdddf8ec8a53f6ef11e55eb3027cf2a6,python,0,21,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cdddf8ec8a53f6ef11e55eb3027cf2a6,python,1,18,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
cdf31a31d7e0443fd37279a20eeb2fff,python,10,26,41,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
cdf31a31d7e0443fd37279a20eeb2fff,python,8,19,34,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
cdfbd26f49d2920c253fb3defd5fed30,python,2,7,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ce26f7fc369618d1544640dc28ddd4e1,python,4,8,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ce85c108d5dd92e069face1778cc2222,python,0,11,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
ce85c108d5dd92e069face1778cc2222,python,1,8,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
ce85c108d5dd92e069face1778cc2222,python,2,8,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
ce85c108d5dd92e069face1778cc2222,python,4,9,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
ce85c108d5dd92e069face1778cc2222,python,5,8,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
ceb28d321e2cad529e888fe414705012,python,2,16,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ceb28d321e2cad529e888fe414705012,python,2,18,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ceb28d321e2cad529e888fe414705012,python,3,5,11,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ceb28d321e2cad529e888fe414705012,python,3,7,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ceb70a6a2e5400c4baf8323e2266f3d4,python,1,82,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
cfff80260df65ab88857ff538d652d09,python,0,50,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d0148db7b9c22295fb709a20dd7f682d,python,0,19,16,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d0148db7b9c22295fb709a20dd7f682d,python,0,19,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
d0b000eb6f1e981bd17d9f4fcfecb77b,python,0,6,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d0dcc68777296a0281fed1c27f7d135e,python,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d0e973a00d5394a553ab12ec41c02308,python,6,56,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d0f6066339e4bc5a4c9a7c5e6355517d,python,1,48,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d14088da3831ec5a9a109a9a182a03a2,python,0,40,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d1a0e7644402ee638d3e05b41922f89f,python,2,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d1a0e7644402ee638d3e05b41922f89f,python,22,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d1a0e7644402ee638d3e05b41922f89f,python,26,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d1a0e7644402ee638d3e05b41922f89f,python,5,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d1d4709f22b91d364f4d7f5ef7d06eb2,python,0,9,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d1d4709f22b91d364f4d7f5ef7d06eb2,python,0,21,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d1d4709f22b91d364f4d7f5ef7d06eb2,python,1,9,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d1d4709f22b91d364f4d7f5ef7d06eb2,python,1,25,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d1d4709f22b91d364f4d7f5ef7d06eb2,python,2,9,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d1d4709f22b91d364f4d7f5ef7d06eb2,python,2,27,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d1d4709f22b91d364f4d7f5ef7d06eb2,python,3,9,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d1d4709f22b91d364f4d7f5ef7d06eb2,python,3,27,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d1d9f34f826d2d7032c6c118176787cc,python,0,57,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d1d9f34f826d2d7032c6c118176787cc,python,1,57,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d1d9f34f826d2d7032c6c118176787cc,python,3,57,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d1d9f34f826d2d7032c6c118176787cc,python,4,46,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d1dd1c3877c08b53228d9e52c00c8b29,python,0,10,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d1eb5d07bf92ed64c08e83df0bcdf81a,python,0,16,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d2259c809c3d3580860b18e200441d5f,python,5,68,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d25865e9dd493eb9d9794a275cbcbd9f,python,0,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d280e6597e93c6caf6dea59d6ee7b2f5,python,1,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
d28b0bf445b584f9368c61d279bd67a1,python,3,5,1,files.python.rules.lang.security.audit.regex_dos,"Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2."
d28b0bf445b584f9368c61d279bd67a1,python,4,5,1,files.python.rules.lang.security.audit.regex_dos,"Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2."
d2a5ae20e519051485684d060fa12cc0,python,1,7,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
d2a5ae20e519051485684d060fa12cc0,python,5,7,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
d2b4550847e75ee142a71e56abbf98e6,python,1,43,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d2debc255c2c77a4021f218b89eff91d,python,0,8,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
d2f35dae00cb211e4abb03a5177fa076,python,4,29,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d325fc8c0a8ffd31845cdbc7995e2a2b,python,0,5,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
d335a32e2f121d886b3aa89db0389d6f,python,0,11,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d335a32e2f121d886b3aa89db0389d6f,python,3,11,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d335a32e2f121d886b3aa89db0389d6f,python,5,11,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d368a51ed2709c0e7b1b7733fb0d073b,python,6,70,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d3ce8c6d1bdf119dd413d0667faf5f56,python,1,10,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d3ce8c6d1bdf119dd413d0667faf5f56,python,10,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d3ce8c6d1bdf119dd413d0667faf5f56,python,11,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d3ce8c6d1bdf119dd413d0667faf5f56,python,12,25,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d3ce8c6d1bdf119dd413d0667faf5f56,python,5,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d3f334e2ed589ca8d011e2c1acedd3fe,python,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d3f334e2ed589ca8d011e2c1acedd3fe,python,0,25,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d3f334e2ed589ca8d011e2c1acedd3fe,python,1,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d3f334e2ed589ca8d011e2c1acedd3fe,python,1,12,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d416d6292db0469586a6f8aea033b356,python,0,19,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
d44cf106b2bf1b3e8bf45ff4413098ee,python,0,20,30,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d460610e957e32aa88d90abec996811d,python,0,23,40,files.python.rules.lang.security.PYTHON_WEAK_RNG_UNQUALIFIED,"Weak RNG detected: Unqualified call to random function (e.g. randint, random)."
d47debceb9b5f88cfbae5fe130fdd8bf,python,5,8,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
d4a9f007d2352a675d374f2e761753cf,python,0,40,1,files.python.rules.django.security.audit.django-rest-framework.missing-throttle-config,Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application.
d4b1cdb9b711fa87e31739bf4bc03efa,python,0,62,20,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
d4d37fe2a2f21e4647a542905cf859c7,python,1,95,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
d4d37fe2a2f21e4647a542905cf859c7,python,1,95,5,files.python.rules.lang.security.audit.dangerous-system-call-tainted-env-args,"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
d4d532ae33a419f967c3a52b10233f8a,python,1,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d4ea0ed84fbb4b1d30da3f3a9d602607,python,0,39,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
d50625b7d4060f0882d39b836271a898,python,1,15,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
d50625b7d4060f0882d39b836271a898,python,2,16,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
d51401121767b78149f700a80a421712,python,4,11,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d51401121767b78149f700a80a421712,python,8,13,18,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d5262a3b3fe2ea60477f46176bb2a512,python,1,7,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
d5262a3b3fe2ea60477f46176bb2a512,python,1,12,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
d5262a3b3fe2ea60477f46176bb2a512,python,1,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d565bd3914a9b1dc5732c8edf4f475c8,python,1,23,30,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,python,2,24,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,python,2,39,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,python,3,37,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,python,3,50,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,python,4,37,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d565bd3914a9b1dc5732c8edf4f475c8,python,4,50,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d5a43ae609ac1bf133ceb3cad5224115,python,1,40,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d5d124e6849b1af30624cf0d5f16477c,python,5,5,5,files.python.rules.django.security.audit.django-secure-set-cookie,"Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None."
d5d124e6849b1af30624cf0d5f16477c,python,6,4,5,files.python.rules.django.security.injection.reflected-data-httpresponse,"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed."
d5d124e6849b1af30624cf0d5f16477c,python,6,5,16,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
d5deae347122e771d494852b0121b002,python,5,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d62cce4a2f0134c0ae9230a0082a02b6,python,0,24,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d62fcaccd0a353fbb6af9835df89d44e,python,0,129,25,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d63a81f4184a907befb6a1d934a1a0c3,python,0,20,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d643c3675c73971ee06679238e95f925,python,9,12,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d65a2c26d22d7c4dd7ce69cffcd8f9ad,python,0,11,19,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
d65a2c26d22d7c4dd7ce69cffcd8f9ad,python,2,2,19,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
d65a2c26d22d7c4dd7ce69cffcd8f9ad,python,3,2,19,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
d6635d7949109eb11cebcf7bc8b24003,python,0,3,28,files.python.rules.lang.security.audit.weak-ssl-version,"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher."
d6635d7949109eb11cebcf7bc8b24003,python,0,5,30,files.python.rules.lang.security.audit.weak-ssl-version,"An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher."
d66d177142ecd305916b87714e7e1aee,python,0,52,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d66d177142ecd305916b87714e7e1aee,python,1,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d693db7745ba991d03d8173387b75a5b,python,1,62,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d69c91c7410c51a8a9dd4db3e8e6f0e2,python,0,17,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
d6d72fc62565eb449c885b5708952db2,python,0,11,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d6d72fc62565eb449c885b5708952db2,python,2,19,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d721f3b3f3401cb989182a953502d1ea,python,1,30,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d721f3b3f3401cb989182a953502d1ea,python,1,30,64,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
d721f3b3f3401cb989182a953502d1ea,python,1,45,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d721f3b3f3401cb989182a953502d1ea,python,1,45,41,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
d723bc009fcf42b08afc670e268c9f4e,python,0,17,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d723bc009fcf42b08afc670e268c9f4e,python,2,21,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d723bc009fcf42b08afc670e268c9f4e,python,4,14,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d723bc009fcf42b08afc670e268c9f4e,python,7,14,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
d736d65b0668fe5d7e6e25b60d066527,python,0,13,16,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d736d65b0668fe5d7e6e25b60d066527,python,1,13,20,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d736d65b0668fe5d7e6e25b60d066527,python,2,13,20,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d7affa0b1c894ceaffacba9515a6a836,python,0,16,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d80356fdea584d83340ffdf919241388,python,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
d80356fdea584d83340ffdf919241388,python,2,11,14,files.python.rules.lang.security.audit.httpsconnection-detected,"The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information."
d8154fc22e97bb7ca15885c9a4c186bd,python,1,8,37,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
d81c4a4955018acb2daf00bd2c10c49e,python,0,4,7,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
d8d9d403450739f8f85c46eaa86bcf28,python,0,15,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
d9b6ed88fbff69b0a5dc1b40cfb85bb5,python,2,13,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
d9df8c21c7b3ba1109d6f25e3d278734,python,3,9,11,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
d9df8c21c7b3ba1109d6f25e3d278734,python,3,16,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
da16cbc3505cd2856556368ed426a4f2,python,4,26,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
da391b7cb631e6770df7f31231298d5d,python,0,17,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
da494f96a39be38522ea016f142b96ee,python,0,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dabaf19e2115fd4edbf430d6498478c1,python,20,4,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
dabaf19e2115fd4edbf430d6498478c1,python,20,7,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
dac37107907c53e65b812271b2a88572,python,0,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dac37107907c53e65b812271b2a88572,python,1,32,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dac37107907c53e65b812271b2a88572,python,2,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dac37107907c53e65b812271b2a88572,python,3,56,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,python,3,76,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,python,3,79,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dac37107907c53e65b812271b2a88572,python,4,56,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,python,4,76,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,python,4,79,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dac37107907c53e65b812271b2a88572,python,5,56,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,python,5,76,12,files.python.rules.flask.security.audit.render-template-string,Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.
dac37107907c53e65b812271b2a88572,python,5,79,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dae258942603f7dd85e3ad84ffa6de09,python,1,7,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
dae258942603f7dd85e3ad84ffa6de09,python,1,13,20,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
db2ca7cbd89e32a8f42328507a8d0da8,python,11,55,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
db2ca7cbd89e32a8f42328507a8d0da8,python,11,55,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
db40508d443dddaa50cbcb0aa2939e98,python,1,22,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dbc0c4f7e106db88ee4145f14bbb7640,python,7,8,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
dc296b0cd95194fd7cd7a4be730322ac,python,0,21,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
dc296b0cd95194fd7cd7a4be730322ac,python,0,32,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
dc8f8bf9d45a98e1b3aa3f57c5c05bab,python,10,19,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
dc8f8bf9d45a98e1b3aa3f57c5c05bab,python,12,14,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
dc8f8bf9d45a98e1b3aa3f57c5c05bab,python,6,9,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
dc8f8bf9d45a98e1b3aa3f57c5c05bab,python,6,18,17,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
dc8f8bf9d45a98e1b3aa3f57c5c05bab,python,8,10,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
dc9b4a03ae6d35bae9d4d0624ed84914,python,0,23,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
dce737b62d58a8795abada6cccc2cb19,python,8,12,34,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
dcea47cb2ed6310d5399db1e293bb2d0,python,0,5,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
dd0b65ad526095dd611a99289c3d1fa4,python,0,25,28,files.python.rules.sqlalchemy.security.audit.avoid-sqlalchemy-text,"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL."
dd151ff216a2018fe4b8af72e7c70492,python,3,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
dd1ac1b60ece2f11c842af3bce8ae524,python,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
dd3d069706ed055402499e7bd1ff8d9c,python,7,45,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
dd3d069706ed055402499e7bd1ff8d9c,python,7,45,5,files.python.rules.lang.security.audit.sqli.psycopg-sqli,"Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'"
dd3d069706ed055402499e7bd1ff8d9c,python,7,45,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
dd42a864f91ddaaeafbc45667656f3b8,python,0,32,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
dd42a864f91ddaaeafbc45667656f3b8,python,2,15,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
dd471e2b479fbfaa2c3dedb1ea39c4d8,python,1,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
dd471e2b479fbfaa2c3dedb1ea39c4d8,python,2,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
dd471e2b479fbfaa2c3dedb1ea39c4d8,python,3,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
dd7aedd55cc013e1e4f8238d59b698da,python,0,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ddad9eedff758a8982d3a9802027ac16,python,2,23,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
ddad9eedff758a8982d3a9802027ac16,python,4,20,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
de0d06e32b38fce9ad16c2bb6d562145,python,1,8,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
de0d06e32b38fce9ad16c2bb6d562145,python,2,15,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
de0d06e32b38fce9ad16c2bb6d562145,python,3,7,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
de18262029052fe01473049ec58ea24e,python,0,5,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
de311bc8e7bf6bac4b2cf0b53eacde6a,python,10,54,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
de311bc8e7bf6bac4b2cf0b53eacde6a,python,11,56,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
de311bc8e7bf6bac4b2cf0b53eacde6a,python,11,67,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
de311bc8e7bf6bac4b2cf0b53eacde6a,python,6,53,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
de311bc8e7bf6bac4b2cf0b53eacde6a,python,8,54,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
de3de23c8912cea88d23b1adff577f35,python,1,7,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
de52af94a94a12793e2aedfeb324f057,python,0,8,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
de52af94a94a12793e2aedfeb324f057,python,3,12,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
de827de5debf9dffbf8aae0eedaeed07,python,14,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
de827de5debf9dffbf8aae0eedaeed07,python,17,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
de827de5debf9dffbf8aae0eedaeed07,python,18,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
ded1459088376ec32a496aaf179790dc,python,5,27,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
ded3a89c2ec9a9207ace569348d846b2,python,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ded3a89c2ec9a9207ace569348d846b2,python,0,83,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ded3a89c2ec9a9207ace569348d846b2,python,1,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ded3a89c2ec9a9207ace569348d846b2,python,1,82,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ded3a89c2ec9a9207ace569348d846b2,python,2,25,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ded3a89c2ec9a9207ace569348d846b2,python,3,33,1,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
df3a7532c7e8e29c09c471529c17528a,python,1,12,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
df6514eb765bed3b633f1345706c3417,python,0,19,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
df6514eb765bed3b633f1345706c3417,python,1,23,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
df6514eb765bed3b633f1345706c3417,python,2,23,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
df6514eb765bed3b633f1345706c3417,python,3,23,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
df9c3c96d9e7b22a387572b2e241b431,python,0,15,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
dfe81e9b71869665018e91d36a33e12c,python,1,6,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
e08b8d5dc8e356ad37ed4755afc216c3,python,0,4,10,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
e0d63c65e30aeb6ede28bd84ddb6c152,python,0,9,13,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e116e642df00b6c91e2d22cbc69e7334,python,1,30,13,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
e116e642df00b6c91e2d22cbc69e7334,python,1,30,20,files.python.rules.django.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead."
e116e642df00b6c91e2d22cbc69e7334,python,1,30,20,files.python.rules.flask.security.injection.raw-html-format,"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead."
e116e642df00b6c91e2d22cbc69e7334,python,1,52,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e1595d6782bbc2064ea5b4031a3ec528,python,1,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e1595d6782bbc2064ea5b4031a3ec528,python,2,6,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e19a6da55fbc1ec0ed306e05f07daacd,python,0,7,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e19a6da55fbc1ec0ed306e05f07daacd,python,0,12,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e1abd279dbe5200b2cd9004d27075ad9,python,0,12,17,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e22d81ee7b9a268015c6b5b9cb43bd2c,python,0,18,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
e22d81ee7b9a268015c6b5b9cb43bd2c,python,1,28,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
e2658c2c2057f034a0a99f18a6e04a38,python,0,6,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e2658c2c2057f034a0a99f18a6e04a38,python,1,6,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e2658c2c2057f034a0a99f18a6e04a38,python,2,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e26e1b7b293fed6ead2f7655d5e19818,python,0,5,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e26e1b7b293fed6ead2f7655d5e19818,python,0,9,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e26e1b7b293fed6ead2f7655d5e19818,python,0,16,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e284dedb0fcbcc362c153f0ce51bdcc9,python,10,8,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e284dedb0fcbcc362c153f0ce51bdcc9,python,10,12,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e284e042a286be51ddd187a93435f91a,python,7,6,20,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
e28f8b617e8e5d8a6f087b91d79c1c83,python,5,17,28,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
e2b4d116a8122ac9efa70630bcdd1d44,python,5,10,10,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e2bb254dd9523f610e0bfb70adfa08a9,python,1,24,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e2dace9d939f3c80bf925b3f3425384f,python,1,4,23,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e2f0c4bc766ddfbb0c008d9839d6869d,python,1,7,1,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e34956f72a372d73627e747e791058f1,python,0,22,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e34956f72a372d73627e747e791058f1,python,1,28,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e34956f72a372d73627e747e791058f1,python,1,28,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e388a753d296e4a4c40f17e229c5a15d,python,4,21,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e388a753d296e4a4c40f17e229c5a15d,python,4,21,40,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e38ca2e58b154e7f941c7b626d655ee3,python,12,10,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
e38ca2e58b154e7f941c7b626d655ee3,python,16,9,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
e38ca2e58b154e7f941c7b626d655ee3,python,18,6,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
e38ca2e58b154e7f941c7b626d655ee3,python,2,9,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
e38ca2e58b154e7f941c7b626d655ee3,python,3,9,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
e38ca2e58b154e7f941c7b626d655ee3,python,4,9,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
e38ca2e58b154e7f941c7b626d655ee3,python,5,13,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
e38ca2e58b154e7f941c7b626d655ee3,python,7,10,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
e38ca2e58b154e7f941c7b626d655ee3,python,9,10,9,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
e39f94a452031461327f6bef2f915f70,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
e3cb6f17c3821c59c4ed0119038ab91e,python,8,10,8,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
e3e1e41bfd8d7a6719033119cc3b8a8d,python,4,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e3e1e41bfd8d7a6719033119cc3b8a8d,python,5,5,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e3e1e41bfd8d7a6719033119cc3b8a8d,python,9,8,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e3f5ed609076909dbfb88ee866cdbbac,python,4,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e3f5ed609076909dbfb88ee866cdbbac,python,5,34,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e3f5ed609076909dbfb88ee866cdbbac,python,6,33,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
e4867bddca73d419a53c54cac1242403,python,1,15,40,files.python.rules.jwt.security.jwt-python-hardcoded-secret,Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)
e49c072bb715bab12541807192fa3410,python,0,7,143,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e4f666b7660778038d6a0dc246cef154,python,1,26,22,files.python.rules.django.security.injection.command.subprocess-injection,"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands."
e4f666b7660778038d6a0dc246cef154,python,1,26,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,python,10,16,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,python,11,16,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,python,3,15,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,python,5,12,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,python,6,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
e4f666b7660778038d6a0dc246cef154,python,6,7,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,python,7,16,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e4f666b7660778038d6a0dc246cef154,python,9,16,22,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5400d3292dd24d094a013d86f088338,python,0,30,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5400d3292dd24d094a013d86f088338,python,0,30,84,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e5400d3292dd24d094a013d86f088338,python,0,37,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5400d3292dd24d094a013d86f088338,python,0,37,74,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e5400d3292dd24d094a013d86f088338,python,1,58,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5400d3292dd24d094a013d86f088338,python,1,58,84,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e5400d3292dd24d094a013d86f088338,python,1,64,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e5400d3292dd24d094a013d86f088338,python,1,64,74,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e564dc2b54b976c916151adbd65c2c5e,python,1,21,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
e564dc2b54b976c916151adbd65c2c5e,python,1,22,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
e564dc2b54b976c916151adbd65c2c5e,python,1,26,18,files.python.rules.django.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries."
e564dc2b54b976c916151adbd65c2c5e,python,1,26,18,files.python.rules.flask.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
e564dc2b54b976c916151adbd65c2c5e,python,1,29,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e564dc2b54b976c916151adbd65c2c5e,python,1,29,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e564dc2b54b976c916151adbd65c2c5e,python,1,36,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e564dc2b54b976c916151adbd65c2c5e,python,4,19,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
e564dc2b54b976c916151adbd65c2c5e,python,4,20,5,files.python.rules.django.security.injection.sql.sql-injection-db-cursor-execute,"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`."
e564dc2b54b976c916151adbd65c2c5e,python,4,23,18,files.python.rules.django.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries."
e564dc2b54b976c916151adbd65c2c5e,python,4,23,18,files.python.rules.flask.security.injection.tainted-sql-string,"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries."
e564dc2b54b976c916151adbd65c2c5e,python,4,25,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e564dc2b54b976c916151adbd65c2c5e,python,4,25,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e564dc2b54b976c916151adbd65c2c5e,python,4,34,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e5cb9ede028c32adb954d3d220377841,python,0,33,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e62ed0be9b9c29f83bb67b2991185416,python,1,3,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e62ed0be9b9c29f83bb67b2991185416,python,2,6,25,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e6462036e6267065a91ddb3e959a6ae0,python,0,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e653cf623869321f839d4f457e7def11,python,2,8,27,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
e653cf623869321f839d4f457e7def11,python,2,8,27,files.python.rules.lang.security.audit.md5-used-as-password,It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.
e66b1bd4e5d17c38c7cfc2237e99f161,python,0,6,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e67da501ad43e0e13868644da4f2fb7b,python,1,5,15,files.python.rules.lang.security.dangerous-globals-use,Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.
e6e150a0d5b7f5ade792d70e9d8575b4,python,0,52,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,python,1,67,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,python,2,62,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,python,2,95,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,python,2,97,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,python,2,99,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,python,2,101,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6e150a0d5b7f5ade792d70e9d8575b4,python,2,103,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e6f6b41d445ef2c19134b34d8c6631e2,python,6,41,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
e6f6b41d445ef2c19134b34d8c6631e2,python,6,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e70136ad6fdb67721cc00d87f77ec3e0,python,0,9,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e70136ad6fdb67721cc00d87f77ec3e0,python,0,16,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e751357d721dbf614c0b2d638932e6ec,python,2,8,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,python,2,9,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,python,2,10,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,python,2,11,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,python,2,31,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
e751357d721dbf614c0b2d638932e6ec,python,5,8,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,python,5,9,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,python,5,10,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,python,5,11,5,files.python.rules.django.security.injection.request-data-write,"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized."
e751357d721dbf614c0b2d638932e6ec,python,5,46,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
e751357d721dbf614c0b2d638932e6ec,python,7,49,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
e7cc3fb7568af489fb231e71105f9136,python,0,58,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e7fe9e96a3706cabfd8c07057b8e0386,python,1,5,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
e852f0991f0b9faa06f35a448bf040e2,python,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e88bb3dc3d2334e68feaff49b59dbcab,python,0,31,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e88bb3dc3d2334e68feaff49b59dbcab,python,0,43,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e88bb3dc3d2334e68feaff49b59dbcab,python,1,29,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e88bb3dc3d2334e68feaff49b59dbcab,python,1,40,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e89d626216fabb72a7cdfc6d6d0951f6,python,1,8,14,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
e89d626216fabb72a7cdfc6d6d0951f6,python,1,8,49,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
e8c10c75f593e27c6fdbbd305461c4d8,python,0,28,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e8c10c75f593e27c6fdbbd305461c4d8,python,0,28,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e8c10c75f593e27c6fdbbd305461c4d8,python,0,34,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e8c10c75f593e27c6fdbbd305461c4d8,python,1,35,9,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e8c10c75f593e27c6fdbbd305461c4d8,python,1,35,9,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e8c10c75f593e27c6fdbbd305461c4d8,python,1,44,17,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e8f0151ef93e6efaafddf2a15d48218f,python,0,20,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e8f0151ef93e6efaafddf2a15d48218f,python,1,14,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e8f0151ef93e6efaafddf2a15d48218f,python,2,16,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
e932fa6b70b6cb0e3a0f2e28cb8bd843,python,6,27,64,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
e932fa6b70b6cb0e3a0f2e28cb8bd843,python,6,27,93,files.python.rules.flask.security.injection.nan-injection,"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'."
e932fa6b70b6cb0e3a0f2e28cb8bd843,python,6,33,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e945a699ed042c6d0938d7e57869f160,python,0,37,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e945a699ed042c6d0938d7e57869f160,python,1,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
e99a03f532a018c90795a220c8a76f34,python,6,5,15,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e9a40c400b97a21a950b8f59bf1380e9,python,7,103,25,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
e9a40c400b97a21a950b8f59bf1380e9,python,7,103,25,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
e9c76a5916dedf68f40556333bd316a6,python,0,2,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
e9dfe5d3ec64460a801d53eedd46e120,python,0,12,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
e9ede55a9dfabd7663cf605a021301d1,python,2,11,9,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
ea4df717a980c80984a45c668d1806a3,python,42,14,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ea790fd2d7f04de5e779bfbdbcb69126,python,0,26,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ea790fd2d7f04de5e779bfbdbcb69126,python,0,35,38,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ea790fd2d7f04de5e779bfbdbcb69126,python,2,22,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ea790fd2d7f04de5e779bfbdbcb69126,python,2,31,38,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ea790fd2d7f04de5e779bfbdbcb69126,python,4,22,19,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ea790fd2d7f04de5e779bfbdbcb69126,python,4,31,38,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
eaad0da967af22f45e75ce3fbe704369,python,2,6,9,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
eaad0da967af22f45e75ce3fbe704369,python,4,47,33,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
eab422825e71b0d83717a59df58561e3,python,15,9,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
eab422825e71b0d83717a59df58561e3,python,15,10,17,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
eab422825e71b0d83717a59df58561e3,python,20,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
ead75036cb05a95356646f81593b025a,python,0,19,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ead75036cb05a95356646f81593b025a,python,1,19,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
eb327966d473cbdfe4db8003dad3b719,python,1,47,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
eb66d9f21402a4432adafb11cafb32a2,python,0,22,16,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
eb66d9f21402a4432adafb11cafb32a2,python,0,22,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
eb77b5fe55186bc2d9b719585e3a5bf7,python,5,25,13,files.python.rules.flask.security.xss.audit.direct-use-of-jinja2,"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
ebc90105525ca38270bf3fff034b48d2,python,0,18,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ebe1bb8313d62cc9a3544ef4e5f8d218,python,0,23,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
ec06804776354160253770c4e8439598,python,6,34,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
ec3aefb1e25e0c13fd888727f65aa053,python,0,15,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ec4ae83e60ac7579da04d86c0b0fe27b,python,0,17,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ec4ae83e60ac7579da04d86c0b0fe27b,python,1,17,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
eca95c832f2134bd5a50b65eb1fac581,python,0,5,5,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
ed285365c9d3a75b727be60aba1a726a,python,0,16,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ed45a8d08047d105d110ec56ee5227ae,python,0,12,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ed45a8d08047d105d110ec56ee5227ae,python,0,12,68,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
ed45a8d08047d105d110ec56ee5227ae,python,0,34,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ed4f14be26d76f71323e5d6680766327,python,4,5,21,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ed4f14be26d76f71323e5d6680766327,python,5,5,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ed4f14be26d76f71323e5d6680766327,python,5,5,37,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
ed8cd09c79baf8aaae5156bbd120f677,python,0,3,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve,Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
ed8cd09c79baf8aaae5156bbd120f677,python,0,6,1,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
ed8cd09c79baf8aaae5156bbd120f677,python,0,6,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve,Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://' instead.
ed8ce37cc585e01acdd7305bc00439c9,python,0,12,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ed8ce37cc585e01acdd7305bc00439c9,python,0,12,50,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
edf3110075c53686280adbeda7d088c7,python,4,9,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
edf3110075c53686280adbeda7d088c7,python,5,9,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ee2c439d1045ed0be22f9ba735346f29,python,5,5,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
ee2c439d1045ed0be22f9ba735346f29,python,6,14,12,files.python.rules.django.security.audit.xss.direct-use-of-httpresponse,Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.
ee52ab87f6ce9e49a1ebfd5394c3a866,python,0,4,15,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
ee8bf8e5b7b70b2ec0de2d87391a42f8,python,0,20,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
ee8bf8e5b7b70b2ec0de2d87391a42f8,python,1,23,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
eeb2e8c6d822c186f6ac4568750ee075,python,0,21,42,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ef098c618a1cf7aa1ca01fd7e6a352fa,python,1,8,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
ef95b1fd646379a0bf90ef0371cfd606,python,0,12,16,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
efa416c1f380f0b2d02026827878a717,python,0,319,17,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
efa8ec9bfea2b60fdf557a6a5bc65cc2,python,2,16,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
efaa39c964696d9bd6bfa70a63559380,python,1,8,24,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
efaa39c964696d9bd6bfa70a63559380,python,2,9,32,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
efaa39c964696d9bd6bfa70a63559380,python,4,10,26,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
efaa39c964696d9bd6bfa70a63559380,python,4,22,28,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
efdd3318e43a3f49e15801882782bd4d,python,3,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
f0042670fb1e2da74cc9d49829a678cc,python,3,8,5,files.python.rules.flask.security.audit.secure-set-cookie,"Found a Flask cookie with insecurely configured properties.  By default the secure, httponly and samesite ar configured insecurely. cookies should be handled securely by setting `secure=True`, `httponly=True`, and `samesite='Lax'` in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the `secure=True`, `httponly=True`, `samesite='Lax'` arguments or set these to be true in the Flask configuration."
f0042670fb1e2da74cc9d49829a678cc,python,3,11,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
f01850f1aa105f1792dd1e9903d24cd8,python,3,10,9,files.python.rules.django.security.audit.unvalidated-password,The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
f03840eb8de3224008ff64c5c355334a,python,1,30,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
f04beedab47433411cdb8481c72590d2,python,3,12,20,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f04beedab47433411cdb8481c72590d2,python,3,25,14,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f07a9594c60ea66ad061c77a8b9dc2c9,python,0,9,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f0aaa97938fdc477cfd6939bb3d9d5bc,python,1,13,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f0aaa97938fdc477cfd6939bb3d9d5bc,python,3,23,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f0b1cefb543177378d8c12bea364286f,python,0,19,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
f0b1cefb543177378d8c12bea364286f,python,2,19,12,files.python.rules.lang.security.insecure-hash-algorithm-md5,Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.
f175151626a66f8188db293dea8712f0,python,0,10,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f17893e5b8e5ba7c723f599e1156ece0,python,0,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f17893e5b8e5ba7c723f599e1156ece0,python,2,30,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f180dca841381fb5ae6dfd866202ee46,python,0,42,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f2426bf0d0dc575cb71a3a42e7a03f4d,python,4,4,12,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f270285638d903ca0c6c86bcdb951544,python,6,17,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f27f4f6e969406b110755e60a50ed82a,python,2,8,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f2cb8897943bf303cf07047e4ed256be,python,1,31,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
f35c70052db04a788ee86d861d352252,python,2,6,9,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f35c70052db04a788ee86d861d352252,python,2,10,13,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f3683ed756ae8112818a3c42568ae5f2,python,0,44,26,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f38c68677edfd1d8548c05212c4a2ba2,python,1,9,12,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f3ad9afd225975f4555582b163c35444,python,1,26,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f3af25a6baa160ba3b0f0a27be87f482,python,0,19,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f3af25a6baa160ba3b0f0a27be87f482,python,1,23,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f3bf609f870765060dece01533dc7068,python,0,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f3d8e14c75277bd9fc08028fa9161ec5,python,0,14,1,files.python.rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY,Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead
f3d8e14c75277bd9fc08028fa9161ec5,python,0,91,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f424613b8b59651c9ce98d8d14d486a3,python,0,70,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f424613b8b59651c9ce98d8d14d486a3,python,0,74,9,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
f424613b8b59651c9ce98d8d14d486a3,python,1,89,9,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f424613b8b59651c9ce98d8d14d486a3,python,1,93,9,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
f424f9119f6c2ca373efb0be13803dbb,python,2,8,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f44a50fe7b81a8f23f3681e8f8c062f0,python,3,42,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
f455e4cfe2ff10b1dd605bf5cf6fdfbc,python,0,3,12,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f4a311fb190be800a0c6f504044b3c87,python,0,5,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f4c244320b9394573a099265e3ac2006,python,2,11,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
f4cc97e38a56ae7c247f00dd07baa60d,python,0,9,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f4cc97e38a56ae7c247f00dd07baa60d,python,0,20,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f4dfef54a9331e515cc8b163a79908c3,python,2,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f51d8e792245f4fc2c7bfc7200726211,python,1,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
f51d8e792245f4fc2c7bfc7200726211,python,1,15,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f51d8e792245f4fc2c7bfc7200726211,python,3,23,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f551ef970242274f8bcd9741f8f4b3bb,python,0,11,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f563192a07755a4d7278b4888ade1a20,python,1,17,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f5c9af9ce3b0991eeb47a6ee88cfb7a0,python,1,4,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f5dc5fef95b63bf08d053e1fa09fc843,python,0,46,13,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
f5fc37984e1d6d293b90d253f1827845,python,1,6,5,files.python.rules.flask.security.audit.avoid_app_run_with_bad_host,Running flask app with host 0.0.0.0 could expose the server publicly.
f65c4c09f07f017ce0dcb8dfa9e8ac06,python,0,31,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f6611af585c604bf7f98f7650c01a9fe,python,0,17,30,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f6611af585c604bf7f98f7650c01a9fe,python,1,29,38,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f661d19049f2d40f56a4420d667a9c68,python,0,20,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f661d19049f2d40f56a4420d667a9c68,python,0,20,47,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
f6aa6c8760c05706ea880a76795cff57,python,0,12,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'Popen' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
f6acfbc7fdedb09c03ccaf98fbc5f4ad,python,0,35,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f6acfbc7fdedb09c03ccaf98fbc5f4ad,python,0,46,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f6acfbc7fdedb09c03ccaf98fbc5f4ad,python,2,42,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f6acfbc7fdedb09c03ccaf98fbc5f4ad,python,2,55,26,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f6c89310cc3687bb96103accf9e6ba97,python,0,3,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
f6c89310cc3687bb96103accf9e6ba97,python,0,26,16,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
f70df4087dc7daa1ba003ed387d34797,python,0,15,5,files.python.rules.lang.security.audit.dangerous-system-call-audit,"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
f714227a678a1733d37e87ed0b229498,python,10,9,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f714227a678a1733d37e87ed0b229498,python,10,19,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f714227a678a1733d37e87ed0b229498,python,11,13,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f714227a678a1733d37e87ed0b229498,python,11,41,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f714227a678a1733d37e87ed0b229498,python,4,9,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f714227a678a1733d37e87ed0b229498,python,4,18,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f7446b3d7234f1d8976ef39a6279977d,python,2,30,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f75a9c4abdc6d4865bfea115844d5044,python,4,7,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f787503c32ada45aa0378e2bc05d3713,python,31,5,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,python,31,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,python,44,6,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f787503c32ada45aa0378e2bc05d3713,python,44,17,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f79f073354bf2298b1902b2d3b0886ca,python,1,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
f79f073354bf2298b1902b2d3b0886ca,python,3,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
f79f073354bf2298b1902b2d3b0886ca,python,4,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
f7d4e1f69c0d17044e4db711366a93b5,python,0,7,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f82ce9244ddaff5e00195c027bcb6415,python,0,13,5,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
f83a12316d101c268486ec2cf7e20656,python,2,20,5,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
f83a12316d101c268486ec2cf7e20656,python,2,20,5,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
f83a12316d101c268486ec2cf7e20656,python,2,23,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
f83a12316d101c268486ec2cf7e20656,python,2,23,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
f84491ba14b68993044a5110d0d5025f,python,1,4,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
f88339c342373456a900050f1ac35f74,python,0,8,11,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f8b6100889bc1f5facf3f604af76d65c,python,23,8,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
f8b6100889bc1f5facf3f604af76d65c,python,31,19,5,files.python.rules.flask.security.audit.directly-returned-format-string,Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.
f908264c8a221c59ae8f18e7165bf47d,python,0,32,16,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f908264c8a221c59ae8f18e7165bf47d,python,1,32,16,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f98535d3b58d5c71a1ccab307adf5bca,python,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f98b82bbba410b3a4a510d0061a414a2,python,1,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
f9f6b08118dc258b414fdcd1f72b5bb3,python,0,19,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
f9f6b08118dc258b414fdcd1f72b5bb3,python,0,24,28,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
f9f6b08118dc258b414fdcd1f72b5bb3,python,1,16,19,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
f9f6b08118dc258b414fdcd1f72b5bb3,python,1,29,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
fa585ac2ce86326c1a09513a71f036c2,python,0,4,15,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'STARTUPINFO' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fa59a139c70f4213315801e360382f57,python,0,20,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
fa64968220b0836ef6a36849e39a2109,python,0,30,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fa64968220b0836ef6a36849e39a2109,python,0,30,36,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
fa7e533fce8d969a1fa2ab76d4065c95,python,2,2,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
fa9063069aae6276afdab5ab3360e707,python,0,20,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fa9604119d2ab63ade84dc3096939188,python,0,32,22,files.python.rules.lang.security.audit.eval-detected,"Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fae1d8099f39bdc13294d501eedcde55,python,0,58,9,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
fb4d922618776fa0438869c5dde76085,python,8,26,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
fb5da0ebb3a2071db051a6811a14cf80,python,3,17,1,files.python.rules.flask.security.audit.avoid_using_app_run_directly,"top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
fb87cb631d223abfa7855547a84c010b,python,0,13,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fb87cb631d223abfa7855547a84c010b,python,1,13,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fb87cb631d223abfa7855547a84c010b,python,2,44,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fb87cb631d223abfa7855547a84c010b,python,3,44,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fb87cb631d223abfa7855547a84c010b,python,4,44,5,files.python.rules.lang.security.audit.exec-detected,"Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
fb8e25fb82b729c865153405ffbab9e2,python,2,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fb9f1d586bedb9ca202768005a600d6a,python,0,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fbe4b31109ee3ceab63465b996ebd715,python,1,13,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fc151de47d32840551b54937a3faeab6,python,0,46,14,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
fc457349783c265b107602e6fc55e323,python,1,22,14,files.python.rules.lang.security.audit.insecure-transport.ftplib.use-ftp-tls,The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
fc90d79308d28e1cf129f286bff86700,python,5,20,14,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
fc90d79308d28e1cf129f286bff86700,python,6,18,14,files.python.rules.lang.security.audit.non-literal-import,Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.
fcaf6ef3b8d8e292c1f02f1f3a0a29bf,python,5,6,5,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
fcc2a3b84a40d7a1e45647de1a0ce8ab,python,0,23,30,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
fcc2a3b84a40d7a1e45647de1a0ce8ab,python,3,23,30,files.python.rules.lang.security.audit.telnetlib,Telnet does not encrypt communications. Use SSH instead.
fcdb7176363be1b5f71b8d9b83887dc6,python,5,5,5,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fcf5c760240e0c71f25586c7bb06df74,python,0,45,1,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-request-object,"Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'http://'. This connection will not be encrypted. Use 'https://' instead."
fcf5c760240e0c71f25586c7bb06df74,python,0,48,11,files.python.rules.lang.security.audit.insecure-transport.urllib.insecure-request-object,"Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'http://'. This connection will not be encrypted. Use 'https://' instead."
fcf5c760240e0c71f25586c7bb06df74,python,0,51,12,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
fcf5c760240e0c71f25586c7bb06df74,python,2,20,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fd0cab03a432e69843c5fa8295ce6b72,python,0,39,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fd0cab03a432e69843c5fa8295ce6b72,python,3,81,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fd28605bc8c94eb5fa6c908b7ae29b47,python,11,7,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fd28605bc8c94eb5fa6c908b7ae29b47,python,11,7,50,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
fd28605bc8c94eb5fa6c908b7ae29b47,python,6,12,1,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'call' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fd28605bc8c94eb5fa6c908b7ae29b47,python,9,6,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
fd28605bc8c94eb5fa6c908b7ae29b47,python,9,6,50,files.python.rules.lang.security.audit.subprocess-shell-true,"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
fd4e5342d49e86c703fb960d60f0c040,python,1,5,29,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fd4e8ff220d9fc365260d8ad7cf13c5b,python,0,10,25,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fd4e8ff220d9fc365260d8ad7cf13c5b,python,1,5,24,files.python.rules.lang.security.audit.insecure-transport.requests.request-session-with-http,Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.
fd9eb4433b47e2b4edbc0c1d5eec9906,python,0,7,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
fd9eb4433b47e2b4edbc0c1d5eec9906,python,2,8,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
fd9eb4433b47e2b4edbc0c1d5eec9906,python,3,9,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
fe1612c3b66344f998502535953c8ac8,python,0,19,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
fe19cecbd6fa8c44dd3c599d197db42b,python,4,14,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fe19cecbd6fa8c44dd3c599d197db42b,python,6,15,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fe5a045c05eadb0aa6d790c45cec65ab,python,0,29,22,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
fe6b805e656737664d1f4960ca71b2b0,python,1,11,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
fe6b805e656737664d1f4960ca71b2b0,python,1,11,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
fe6b805e656737664d1f4960ca71b2b0,python,2,11,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
fe6b805e656737664d1f4960ca71b2b0,python,2,11,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
fe6b805e656737664d1f4960ca71b2b0,python,4,11,1,files.python.rules.lang.security.audit.formatted-sql-query,Detected possible formatted SQL query. Use parameterized queries instead.
fe6b805e656737664d1f4960ca71b2b0,python,4,11,1,files.python.rules.sqlalchemy.security.sqlalchemy-execute-raw-query,"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option."
fe7ed7f25461ec5a49ce56ac94ac49ac,python,0,13,13,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
fe9789cc6dd7f07a8194c199c348de5a,python,0,1,1,files.python.rules.lang.security.use-defused-xml,"The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and ""XML bombs"" can cause denial of service."
fe9789cc6dd7f07a8194c199c348de5a,python,0,5,12,files.python.rules.lang.security.use-defused-xml-parse,"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and ""XML bombs"" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`."
febe8ca77cf70110854317e3b336835a,python,3,7,21,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
febe8ca77cf70110854317e3b336835a,python,4,10,27,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
fed37448eaeec1ce1ab804a7ab4b6f74,python,0,7,1,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
fed37448eaeec1ce1ab804a7ab4b6f74,python,1,8,5,files.python.rules.lang.security.audit.dangerous-spawn-process-audit,Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.
fef55ff20b31500b3be8969f5ce29a54,python,0,13,33,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
fef65e2cc578b05f69cc1a2863f27d66,python,0,33,18,files.python.rules.lang.security.use-defusedcsv,"Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs."
ff324521bed36d334a7759a939b9c446,python,24,5,5,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ff324521bed36d334a7759a939b9c446,python,25,6,17,files.python.rules.lang.security.deserialization.avoid-pickle,"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
ff6962c505ac4cd6cb91c83b7df9a8ec,python,3,7,16,files.python.rules.requests.security.disabled-cert-validation,Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.
ff716d0e20d074e82ebd3cb82fa30c2e,python,0,10,1,files.python.rules.lang.security.audit.network.avoid-bind-to-all-interfaces,"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
ff7ce50f1d149d3c3186a3ea61499dfe,python,0,5,20,files.python.rules.lang.security.audit.dynamic-urllib-use-detected,"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
ff84425ac5721e5ef919b4aa8b1f9050,python,1,8,18,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'check_output' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."
ffd419e830ad6708b144ce94e713082e,python,1,15,26,files.python.rules.lang.security.audit.insecure-transport.requests.request-with-http,"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead."
ffd4f52649a63ed9fab6dcb7b325d28a,python,0,21,5,files.python.rules.flask.security.audit.debug-enabled,"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
fff8e4c88a414d7b118b9a6f989b39aa,python,4,7,10,files.python.rules.lang.security.audit.dangerous-subprocess-use-audit,"Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'."